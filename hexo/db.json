{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/p829173265.jpg","path":"images/p829173265.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1662190255393},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1662190255394},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1662190255393},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1662190255395},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1662190255395},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1662190255396},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1662190255399},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1662190255399},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1662190255401},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1662190255401},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1662190255402},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1662190255402},{"_id":"themes/next/_config.yml","hash":"1eeaa5cad24153329e645b2ab4d46ecf88c2ddb0","modified":1662190255403},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1662190255405},{"_id":"themes/next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1662190255404},{"_id":"themes/next/package.json","hash":"55305ae40690c059cb9140900eb20f9e7f3a7707","modified":1662190255689},{"_id":"source/_posts/Alipay-Action.md","hash":"e3bbcd7ccc76326077eff55e70bfde190a80db82","modified":1662190255287},{"_id":"source/_posts/CORS.md","hash":"ce65f242d4f530800d59e2de1a359253eaa085b9","modified":1662190255288},{"_id":"source/_posts/CassandraLinux服务端安装配置.md","hash":"4515860c9e48d84e63df906169c5e7d1be9bf627","modified":1662190255288},{"_id":"source/_posts/CentOs7安装Docker.md","hash":"9713373ac0839de837dd3310d3e4373aff4767dd","modified":1662190255289},{"_id":"source/_posts/Docker（一）.md","hash":"fc3542a9d86bf3cac5db3ef6de541e31b7731b47","modified":1662190255289},{"_id":"source/_posts/FRP搭建使用.md","hash":"301a110ec2983fed9933e047f3ff4a02333bc6b2","modified":1662190255290},{"_id":"source/_posts/Git的sshlkey生成.md","hash":"5e4307172ded6bdcdd92e66b9d49c56b1edf4528","modified":1662190255290},{"_id":"source/_posts/JavaPuppeteer.md","hash":"699c0c175cc63dc0b1a7cd1941a31444c3a5773d","modified":1662190255292},{"_id":"source/_posts/Javai线程状态.md","hash":"b02af47ef4151fe0f9ef994fc076ddc46cb0c7b9","modified":1662190255292},{"_id":"source/_posts/Java单例.md","hash":"8c19e883e2b948d05ca7c1b0de27c6f3dc7968ca","modified":1662190255293},{"_id":"source/_posts/Java锁.md","hash":"0389159ba89ca8d8ce50779ec8f950cdef6f832d","modified":1662190255293},{"_id":"source/_posts/Jmeter测试记录.md","hash":"f45864136dad4262c38049e79754ce857dbdb472","modified":1662190255294},{"_id":"source/_posts/Kafka安装配置.md","hash":"61483b2c92ce46193169ba44e0a83bc34f02551e","modified":1662190255306},{"_id":"source/_posts/Manjaro如何自动挂载机械硬盘分区.md","hash":"37f4934141a1f1f92cdb828b564b1170ea1b1776","modified":1662190255306},{"_id":"source/_posts/Mybatis源码分析-一.md","hash":"559288c10fde0b6df5f829692df0a55e225cc618","modified":1662190255307},{"_id":"source/_posts/Mysql问题集锦.md","hash":"e49cfc0155df5f049eddf62601297189a5ad0551","modified":1662190255309},{"_id":"source/_posts/Netty之ChannelOption.md","hash":"61e34094100268716f970bc791b728b29db88690","modified":1662190255309},{"_id":"source/_posts/Pulsar安装与配置.md","hash":"404aef00526df2d98c509bac24b42edbf57fa60a","modified":1662190255310},{"_id":"source/_posts/Pulsar简介.md","hash":"86b39c9bc672451a3030ee4178f15bdf5b74f9ce","modified":1662190255311},{"_id":"source/_posts/RabbitMq在Ubuntu中的安装配置.md","hash":"2b9df011a01483261edc1af2cee1486550469ceb","modified":1662190255318},{"_id":"source/_posts/RabbitMq定时消息队列的实现.md","hash":"02cdf9f876f3a6d2a9dbb3fb2026fa64794c41d5","modified":1662190255319},{"_id":"source/_posts/RabbitMq简述.md","hash":"34bce5bc8cc428d91ee05961f72be2c5fbb1a4a7","modified":1662190255322},{"_id":"source/_posts/Redis配置优化.md","hash":"8dac406150f09c8963e34ae44267d068eafe2159","modified":1662190255325},{"_id":"source/_posts/Redis集群搭建.md","hash":"1d55e2efb5fcc9548e4e3dcce00d23cce6d5d114","modified":1662190255325},{"_id":"source/_posts/SSDB简单介绍与搭建.md","hash":"d9cd9a8e71d757f70707fe18894d7373aa770e58","modified":1662190255326},{"_id":"source/_posts/Redis分布式锁构建.md","hash":"7223c83ebe1a1cc068e7742134e48b8a56a3f3cd","modified":1662190255324},{"_id":"source/_posts/Scala.md","hash":"7a64485726f44defbd48587705f6ce6bd470a089","modified":1662190255327},{"_id":"source/_posts/SpringBoot开启https.md","hash":"4a83f26bb8f37a98185509f0de5a6205a252b84b","modified":1662190255328},{"_id":"source/_posts/Rust语言Win环境搭建配置.md","hash":"353e9cc8baaeaed474c20ba39937d0df35170e8d","modified":1662190255326},{"_id":"source/_posts/Spring事件驱动之同步事件驱动监听.md","hash":"00cff6c28fe702c5f52f362be82c3a27f0d48831","modified":1662190255329},{"_id":"source/_posts/Storm-Standanlone-And-Cluster-installment.md","hash":"4f727520057aebb74cfaa25dce70e5cbcd0fa831","modified":1662190255330},{"_id":"source/_posts/Spring源码一.md","hash":"dfd0121e99d01b1da2c349f820af3a69674071de","modified":1662190255330},{"_id":"source/_posts/Storm简介.md","hash":"875f786b2dcbd0e7d1bc1f57fd777f972dd5513b","modified":1662190255331},{"_id":"source/_posts/Tomcat优化简谈.md","hash":"fd954b83499f81fe9c16284da28faf1415ab7c5c","modified":1662190255331},{"_id":"source/_posts/Tomcat启动报Warn.md","hash":"2ea653fc80c6d4dce79899dfea761ba140df30bf","modified":1662190255332},{"_id":"source/_posts/Ubuntu搭建nextcloud.md","hash":"cc367497d307b6629230231c2fe23809d4707a67","modified":1662190255333},{"_id":"source/_posts/Win10安装配置MongoDb.md","hash":"ae4a10bbc94e6584d39c2ad714619e2f68ac845b","modified":1662190255333},{"_id":"source/_posts/codis集群记录.md","hash":"a882e7a144748b4563ca72d562e384c5e31b2c49","modified":1662190255334},{"_id":"source/_posts/canal配置搭建.md","hash":"a6d9ddd759a2f8c50a1b55fe394926d58acc0864","modified":1662190255333},{"_id":"source/_posts/git简单记录.md","hash":"2cea96211f617bcb3a1422ecef2d70b47dade5b3","modified":1662190255334},{"_id":"source/_posts/hello.md","hash":"146e25195423cb18fc4584397935f67d5aabdd0f","modified":1662190255335},{"_id":"source/_posts/hexo命令小记.md","hash":"90dd819e8fa0893021b94552d6ca0da23d051d89","modified":1662190255335},{"_id":"source/_posts/rust-mod与pub与引用模块.md","hash":"a9bc058383902ef5f6ad13348ee4f4eb0aac8bd5","modified":1662190255336},{"_id":"source/_posts/rust-variablesAndType.md","hash":"fca2043621ec2df7ca7fa80b3c0a79d318e25f7c","modified":1662190255336},{"_id":"source/_posts/zookeeper模拟集群搭建.md","hash":"5063110449ecadd724f5eed19a6761490e8e093f","modified":1662190255337},{"_id":"source/_posts/tomcat-native和APR.md","hash":"133beda12a948f751aedc029939656d72b0f9a46","modified":1662190255337},{"_id":"source/_posts/写写高并发框架Disruptor.md","hash":"dd20b58e28a83abd7c33b511353488a663458e1b","modified":1662190255338},{"_id":"source/_posts/功利主义随想.md","hash":"3ca6edb43e1e5f74102472f72f651a854d6c7c26","modified":1662190255339},{"_id":"source/_posts/卤牛肉.md","hash":"b97bc77306ef3ae9c84426cef8234525e07aac3d","modified":1662190255339},{"_id":"source/_posts/数据结构之复杂度分析-一.md","hash":"483b19cea1f4af185e9cad2df3d4c11143bc7812","modified":1662190255340},{"_id":"source/_posts/推论.md","hash":"6cd47eab20d8b48d6b906c408e4854726036f679","modified":1662190255340},{"_id":"source/_posts/数据结构之复杂度分析-三.md","hash":"62ab1ec282a602b5b144e8e5d884fb0b49a635ee","modified":1662190255341},{"_id":"source/_posts/数据结构之复杂度分析-二.md","hash":"fe2a1c56bfef6f11120742d94486b221fe51c0b3","modified":1662190255341},{"_id":"source/_posts/老卤秘方.md","hash":"27ded44bc73ac178c7c21091896ae90106ec42ee","modified":1662190255343},{"_id":"source/_posts/清单.md","hash":"b69a38a6c02d83d3050cf8c49075f77e08bbe254","modified":1662190255342},{"_id":"source/_posts/记录下Apache-Storm.md","hash":"0e3e8239f3b8869fe383c70e2cd21f0d2b7e41e7","modified":1662190255343},{"_id":"source/_posts/限流防止重复提交.md","hash":"3f599ad529e28bc1f864c59f3bccfeeae02cfbed","modified":1662190255343},{"_id":"source/categories/index.md","hash":"74975032e175d34e995a71020fb9dffa65c91b72","modified":1662190255344},{"_id":"source/tags/index.md","hash":"0a1d39ccc3203203488f615b4ef697c3003c39a0","modified":1662190255344},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"3178cadcec94bfad651bdf320d83946b4e0ac932","modified":1662190255394},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1662190255394},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"55091b1aab0b472d3f3e239c8d93306c751e4c1c","modified":1662190255395},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1662190255406},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1662190255407},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1662190255407},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1662190255408},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1662190255407},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1662190255408},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1662190255414},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1662190255414},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1662190255415},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1662190255416},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1662190255417},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1662190255416},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1662190255418},{"_id":"themes/next/layout/_layout.swig","hash":"b88585f9e1b7071f6670b20b77b656edd087ccc9","modified":1662190255419},{"_id":"themes/next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1662190255684},{"_id":"themes/next/layout/category.swig","hash":"f315f12651de8065fdad73b003da4335ef177173","modified":1662190255684},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1662190255687},{"_id":"themes/next/layout/page.swig","hash":"22ba721a9688d490fc66f360e5a319288b63b05a","modified":1662190255687},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1662190255687},{"_id":"themes/next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1662190255688},{"_id":"themes/next/layout/tag.swig","hash":"cc9878932580c890f8f3e569225e29bb37e25b49","modified":1662190255688},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1662190255690},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1662190255690},{"_id":"themes/next/source/favicon.ico","hash":"6403011507e9770c0d21b6b7dfdc4ccdd4c05d55","modified":1662190255903},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1662190256044},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1662190256044},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1662190256045},{"_id":"source/_posts/Java8点拨.md","hash":"92fb5dd724550019640cf1cbf832891808cba988","modified":1662190255292},{"_id":"source/_posts/Mybatis源码分析-二.md","hash":"bdb281b2602574a37f11e96e19719a8e10b8aa2b","modified":1662190255309},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662190255903},{"_id":"source/_posts/Jmeter测试记录/20180311145402.png","hash":"872c2df9fd14db18503e10f2b245fbfdb25db610","modified":1662190255295},{"_id":"source/_posts/Jmeter测试记录/20180311154519.jpg","hash":"2a329866d34b31838f07142bc8619aae0e3cb7e4","modified":1662190255297},{"_id":"source/_posts/Jmeter测试记录/20180311160836.jpg","hash":"cc5637927962869a5d85cebda153f5e33e182169","modified":1662190255300},{"_id":"source/_posts/Jmeter测试记录/20180311163214.jpg","hash":"3ed1c4c54c9d8ec6a7255d45e0de814bd01eb2f6","modified":1662190255302},{"_id":"source/_posts/Mybatis源码分析-一/20170308.png","hash":"eb9124fb8defee5d338d57b29882008ccf56e5ad","modified":1662190255308},{"_id":"source/_posts/RabbitMq定时消息队列的实现/1.jpg","hash":"15b598f7bdd2474a727bde387a363e2082b55557","modified":1662190255320},{"_id":"source/_posts/RabbitMq定时消息队列的实现/2.jpg","hash":"54de2e106c59734efe21ca9d140d74a1cd93169b","modified":1662190255321},{"_id":"source/_posts/RabbitMq定时消息队列的实现/3.jpg","hash":"6220d3679a67a8dccbc301d671bd2dcb25a9492e","modified":1662190255322},{"_id":"source/_posts/RabbitMq简述/RabbitMq图解.png","hash":"2cb801b58dd830ac60635c969ac295644dcfbc8e","modified":1662190255324},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1662190255419},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1662190255420},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1662190255420},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1662190255419},{"_id":"themes/next/layout/_macro/post.swig","hash":"dc3792e703d10daacdb86a9f8d03e846d5b4da83","modified":1662190255420},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1662190255421},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"0cab451f1df8bba76ee8c81ab345d4de7ad0e15b","modified":1662190255421},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1662190255423},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a229b569743555215a4f2561997ad496d81e938","modified":1662190255423},{"_id":"themes/next/layout/_partials/footer.swig.bak","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1662190255424},{"_id":"themes/next/layout/_partials/footer.swig","hash":"6d487e7a33af87f68eeaf513d4d48ebd64efc4c9","modified":1662190255423},{"_id":"themes/next/layout/_partials/head.swig","hash":"09b110f77c415c5b71ebd886771a10bc84b95633","modified":1662190255424},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1662190255426},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1662190255427},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1662190255428},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1662190255427},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1662190255434},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1662190255434},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1662190255458},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1662190255677},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1662190255678},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1662190255678},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1662190255679},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1662190255679},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1662190255679},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1662190255902},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1662190255691},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1662190255691},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1662190255692},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1662190255692},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1662190255692},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1662190255692},{"_id":"themes/next/scripts/tags/note.js","hash":"fc4958427ca7bdb47a7d830077f432ed824973e4","modified":1662190255693},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1662190255904},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1662190255905},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1662190255905},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1662190255906},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1662190255907},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1662190255907},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1662190255909},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1662190255910},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1662190255911},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1662190255913},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1662190255916},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1662190255917},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1662190255917},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1662190255919},{"_id":"themes/next/source/images/favicon.ico","hash":"6403011507e9770c0d21b6b7dfdc4ccdd4c05d55","modified":1662190255912},{"_id":"source/_posts/Jmeter测试记录/20180311152954.jpg","hash":"14fabb79d0dfaab635179d4b789f2bd730d82d9a","modified":1662190255296},{"_id":"source/_posts/Jmeter测试记录/20180311151959.jpg","hash":"12119d440e6d143603ded1e71bf0d09e1855873f","modified":1662190255295},{"_id":"source/_posts/Jmeter测试记录/20180311160140.jpg","hash":"9e9e3dfd8ee8233214a397ee8d8ffd4a79127e47","modified":1662190255298},{"_id":"source/_posts/Jmeter测试记录/20180311160646.jpg","hash":"74eff3fa2166653fbd2782a58ce304c76c478bde","modified":1662190255300},{"_id":"source/_posts/Jmeter测试记录/20180311160412.jpg","hash":"38bb775d8a1d9f4bc2ab078356bf643501d549a7","modified":1662190255299},{"_id":"source/_posts/Jmeter测试记录/20180311163046.jpg","hash":"b63190657c02d3b7bdfa925eec53d439b7d40cc6","modified":1662190255302},{"_id":"source/_posts/Jmeter测试记录/20180311164306.jpg","hash":"998287422cdeb5c5fa7b614581c66df4e7a85f31","modified":1662190255304},{"_id":"source/_posts/Jmeter测试记录/20180311163344.jpg","hash":"4493ee1ee7e5d17b7c64c624f058c4d787290491","modified":1662190255303},{"_id":"source/_posts/Pulsar简介/message-deduplication.png","hash":"7912fe81443dd343b8d363be534658f849ca7b3a","modified":1662190255313},{"_id":"source/_posts/Pulsar简介/pulsar-failover-subscriptions.png","hash":"a6dc64e7bf26d1d697fa97a01d34f33e2734f174","modified":1662190255316},{"_id":"source/_posts/Pulsar简介/pulsar-subscription-modes.png","hash":"67942469a72be429f99736d5ff66275f7f50d952","modified":1662190255318},{"_id":"source/_posts/Pulsar简介/pulsar-shared-subscriptions.png","hash":"068bcf9de9e0e8f1745941625e7768bf504e05c3","modified":1662190255317},{"_id":"source/_posts/SpringBoot开启https/HTTPS1.png","hash":"48e7204698b50973b83a5a6b43e8295734a4a326","modified":1662190255329},{"_id":"source/_posts/Tomcat优化简谈/参数说明.png","hash":"31afa8deb5255986eb0791b93ad1770ac8073c12","modified":1662190255332},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662190255447},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662190255452},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662190255883},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662190255883},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662190255885},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662190255900},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662190255902},{"_id":"source/_posts/Jmeter测试记录/20180311164711.jpg","hash":"6cdd32d25f773fb1da056c1b418b200c1b278841","modified":1662190255305},{"_id":"source/_posts/Pulsar简介/partitioning.png","hash":"113023c2a8cc02301eb31b9caf7b2c42ea7380ee","modified":1662190255315},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1662190255425},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1662190255425},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1662190255428},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1662190255429},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1662190255430},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1662190255429},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1662190255431},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1662190255430},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1662190255433},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1662190255446},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1662190255455},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1662190255461},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1662190255461},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1662190255462},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1662190255463},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1662190255466},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1662190255471},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1662190255588},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1662190255463},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1662190255590},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1662190255591},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1662190255589},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1662190255591},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1662190255592},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1662190255593},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"be2aaeb8f05979e2ba501248480d5294256d61f2","modified":1662190255593},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1662190255646},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1662190255677},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1662190255592},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1662190255682},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1662190255682},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1662190255683},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1662190255683},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1662190255882},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1662190255884},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1662190255884},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1662190255900},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1662190255900},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1662190255901},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1662190255920},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1662190255922},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1662190255923},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ad83d5e453501f7c16785662d8803792aacd22a","modified":1662190255923},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1662190255924},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1662190255924},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1662190255926},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1662190255928},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1662190255927},{"_id":"themes/next/source/js/src/utils.js","hash":"e7465a22b536ed15006a5f5556d9a4e633f6bd71","modified":1662190255928},{"_id":"themes/next/source/images/p829173265.jpg","hash":"a9497e4815e81d4b81514742ab69f16db5a5fab0","modified":1662190255915},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1662190255939},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1662190255935},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1662190255940},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1662190255977},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1662190255987},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1662190255987},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1662190256013},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1662190255992},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1662190255992},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1662190255992},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1662190255993},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1662190255993},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1662190256016},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1662190256020},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1662190256014},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1662190256021},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1662190256024},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1662190256022},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1662190256025},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1662190256025},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1662190256026},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1662190256025},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1662190256027},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1662190256028},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1662190256027},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1662190256028},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1662190256029},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1662190256029},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1662190256030},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1662190255982},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1662190256030},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1662190256030},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1662190256030},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1662190256032},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1662190256032},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1662190256033},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1662190256039},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1662190256039},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1662190256042},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1662190256042},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1662190256043},{"_id":"source/_posts/Pulsar简介/20181008112559290.png","hash":"1fe0a2b7f2564c746375b6dbdf5694bed943d3be","modified":1662190255312},{"_id":"themes/next/source/js/src/motion.js","hash":"dda8c76fce91d7f140c06de2583ba806810f12c2","modified":1662190255926},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1662190256014},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1662190255681},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1662190255682},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1662190255695},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d68bdfcdb9d9e0bf60ed9a2df88e0b55cbfcc1e6","modified":1662190255695},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1662190255695},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1662190255696},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1662190255696},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1662190255705},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1662190255868},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1662190255879},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"eec22651977ea25b5e65e8cb1b4906eef69ec588","modified":1662190255879},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1662190255880},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1662190255880},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1662190255881},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1662190255886},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1662190255886},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1662190255886},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1662190255887},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1662190255887},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1662190255887},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1662190255888},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1662190255893},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1662190255894},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1662190255894},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1662190255895},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1662190255897},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1662190255898},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1662190255898},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1662190255898},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1662190255899},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1662190255899},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1662190255927},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1662190255934},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1662190255934},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1662190255895},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1662190255941},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1662190255942},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1662190255943},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1662190255942},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1662190255957},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1662190255965},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1662190255975},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1662190255988},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1662190255989},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1662190255995},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1662190255995},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1662190255996},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1662190256038},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1662190256037},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1662190255946},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1662190255948},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1662190255880},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1662190255932},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1662190255933},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1662190256011},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1662190256009},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1662190256040},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1662190255697},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1662190255698},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1662190255698},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1662190255699},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1662190255699},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1662190255699},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1662190255703},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1662190255703},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1662190255704},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1662190255704},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1662190255704},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1662190255699},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1662190255702},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1662190255702},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1662190255705},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1662190255706},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1662190255706},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1662190255707},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1662190255707},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1662190255708},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"658accf8e196721f295003da66941e6d1f7b81b0","modified":1662190255750},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1662190255751},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1662190255752},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1662190255752},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1662190255753},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1662190255753},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1662190255753},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bc08cfb2ef2ff44ba3fc7dffdb2deb01a9d17d15","modified":1662190255848},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"268c9704481fdb0b4d1e646196386143990fe235","modified":1662190255805},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1662190255862},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1662190255863},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1662190255863},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1662190255863},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1662190255864},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1662190255866},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1662190255866},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1662190255867},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e00d9a0bdf35ffc0a7fa387fa294b953c2d28fc","modified":1662190255867},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1662190255867},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1662190255868},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1662190255869},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1662190255869},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1662190255869},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74019008ba973ab30f0f4a6b3c2cd33c66d3a4b4","modified":1662190255869},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1662190255871},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1662190255871},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1662190255872},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1662190255875},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1662190255876},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1662190255875},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1662190255877},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1662190255877},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1662190255878},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1662190255890},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1662190255892},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1662190255930},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1662190255930},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1662190255931},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1662190255931},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1662190255949},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1662190255950},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1662190255950},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1662190255949},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1662190255949},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1662190255956},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1662190255896},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1662190255999},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1662190256004},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1662190256008},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1662190255938},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1662190256036},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1662190256006},{"_id":"public/categories/index.html","hash":"b7b1747dbe64fb9137d22f458dcb831af3611c82","modified":1662191635483},{"_id":"public/tags/index.html","hash":"fbc7727394bf28a65e3bfa27f6b682bf9ba356d2","modified":1662191635483},{"_id":"public/2019/09/14/Storm简介/index.html","hash":"910a1df6e5ea3f54dcb916e8c2021e6134ac45f6","modified":1662191635498},{"_id":"public/2019/09/13/Storm-Standanlone-And-Cluster-installment/index.html","hash":"14d60d912d905d4845cb851b653bf8875579ba2e","modified":1662191635499},{"_id":"public/2019/08/27/JavaPuppeteer/index.html","hash":"47b376ccefa335a99f6babb4182b7e934e03a4ce","modified":1662191635499},{"_id":"public/2019/08/24/Alipay-Action/index.html","hash":"078ec5b99b4451937a2d14a5f1857b2eef646300","modified":1662191635499},{"_id":"public/2018/12/13/推论/index.html","hash":"bc3711dde8c1e91aee044237feb5c3219e3378f5","modified":1662191635499},{"_id":"public/2018/11/02/Docker（一）/index.html","hash":"c1b64f03bfbe885a96fef0c62a96123a1529bdd2","modified":1662191635499},{"_id":"public/2018/10/16/功利主义随想/index.html","hash":"db2dc7179f3ccaec2e1bb4a68fdae2ce9899af3d","modified":1662191635499},{"_id":"public/2018/10/05/数据结构之复杂度分析-二/index.html","hash":"601ae3a31db62a5e4fbb26156a561131465130f5","modified":1662191635499},{"_id":"public/2018/03/10/Git的sshlkey生成/index.html","hash":"266b3e6a0906441a559ba3740bbc6bbab82743d2","modified":1662191635499},{"_id":"public/2018/03/10/Win10安装配置MongoDb/index.html","hash":"16aa0137392c40a52f49f2baed526ba1c7418897","modified":1662191635499},{"_id":"public/2018/03/10/Mysql问题集锦/index.html","hash":"bf0f6d38950ef11dd4515c03779f003ff3e9eb5b","modified":1662191635499},{"_id":"public/2018/03/09/CentOs7安装Docker/index.html","hash":"a8463df057b1a25b216ce1ad05aed6d6cdbdd30c","modified":1662191635499},{"_id":"public/2018/02/27/卤牛肉/index.html","hash":"94b542c002d66b888b6f3f19c25a4b7c0558df2a","modified":1662191635499},{"_id":"public/2017/12/04/Redis分布式锁构建/index.html","hash":"5405976526fd7e25f6ca1b374fdff391ad4a51cd","modified":1662191635499},{"_id":"public/2017/12/04/Redis配置优化/index.html","hash":"154d9c9afe952dde77b7300aa71da2909c3c9d68","modified":1662191635499},{"_id":"public/2017/12/04/codis集群记录/index.html","hash":"8eee4f84ec714522785a748d03f8113e672ecc2e","modified":1662191635499},{"_id":"public/2017/12/03/记录下Apache-Storm/index.html","hash":"a47ffc5bba8aa85bb1cd38b9d7c37e89e7bd702d","modified":1662191635499},{"_id":"public/2017/12/03/老卤秘方/index.html","hash":"9a533c825263d8a8d5a5be5a65e6b28326a01ac0","modified":1662191635500},{"_id":"public/2017/12/03/清单/index.html","hash":"d0f58df77ce978cb9fe764029e10d57105d93558","modified":1662191635500},{"_id":"public/2017/11/19/写写高并发框架Disruptor/index.html","hash":"7e3e21614330e5d22e449ddbc99b2cb8f71a1b0d","modified":1662191635500},{"_id":"public/2017/11/18/hexo命令小记/index.html","hash":"17ab7269fb4a6f049fa607ad7b8714c063623578","modified":1662191635500},{"_id":"public/2017/07/30/hello/index.html","hash":"3526287172ef5e3cbab6951a76528b1f3ecf3abd","modified":1662191635500},{"_id":"public/categories/JAVA/index.html","hash":"6730f9db1a37064f0016c2b6767a686de2539efd","modified":1662191635500},{"_id":"public/categories/WEB/index.html","hash":"4a3b6a72df7d2835377cbf0a0d3eee4b36a07f1a","modified":1662191635500},{"_id":"public/categories/Linux/index.html","hash":"32b15f48bf5f66acc65727065a7545e943044d22","modified":1662191635500},{"_id":"public/categories/Cassandra/index.html","hash":"9a71bd0586cfbfa5604c6444281954b17cb3239f","modified":1662191635500},{"_id":"public/categories/Git/index.html","hash":"2d31e8045857c15d926c0eca236db10c1720a292","modified":1662191635500},{"_id":"public/categories/多线程/index.html","hash":"d0513c3d5b17489fdcdd73b032e3939dc82b830e","modified":1662191635500},{"_id":"public/categories/Java，设计模式/index.html","hash":"41ec60478a4043c14619f472ad5708e2d6a6fe12","modified":1662191635500},{"_id":"public/categories/测试/index.html","hash":"4bdba709c66479ec32d96490b593b1f6c96ea60c","modified":1662191635500},{"_id":"public/categories/Java/index.html","hash":"bef55de87c372cf001796f85e63b4214416f6950","modified":1662191635500},{"_id":"public/categories/Kafka/index.html","hash":"263a2079ecb9a1660876de83c204af4318c0627a","modified":1662191635500},{"_id":"public/categories/Mybatis/index.html","hash":"4d63af269308d01657d1d8356f8614f146d7b37e","modified":1662191635500},{"_id":"public/categories/Mysql/index.html","hash":"05e88e070b94de2324b48340ad02ca7a375297f4","modified":1662191635500},{"_id":"public/categories/Netty/index.html","hash":"d9e3ed6cb450381ae698c26a1b17cf3386d9fbe4","modified":1662191635500},{"_id":"public/categories/Pulsar/index.html","hash":"e6b4b4a8c29d22400145b659072f27c354bf3a1e","modified":1662191635500},{"_id":"public/categories/RabbitMq/index.html","hash":"8d4ada7efc64a676542d43784003a112f5165aee","modified":1662191635500},{"_id":"public/categories/Nosql/index.html","hash":"3092ec213214f990c6355f0ce5b3e1c27c036e5e","modified":1662191635500},{"_id":"public/categories/SpringBoot/index.html","hash":"743d1a088a9db32fe0fb1d1b41502a9fbefb1764","modified":1662191635501},{"_id":"public/categories/Rust/index.html","hash":"39413bd878d5165a4008e1e859726a696c314d15","modified":1662191635501},{"_id":"public/categories/scala/index.html","hash":"0ef50ef2754483987a0078a1592ee2d49449e411","modified":1662191635501},{"_id":"public/categories/Spring/index.html","hash":"6b95ac68188c8bb740968bf32a7810d747c88917","modified":1662191635501},{"_id":"public/categories/BigData/index.html","hash":"cf027a0bc69aa4e03a23f6ac587ec2675ef4d33e","modified":1662191635501},{"_id":"public/categories/Tomcat/index.html","hash":"2de503f8960b1498c09465203ce91fefa8a1f7a8","modified":1662191635501},{"_id":"public/categories/Linux/Tomcat/index.html","hash":"94797ba961ec31a3ad5cfebe49039925c45d8032","modified":1662191635501},{"_id":"public/categories/MongoDB/index.html","hash":"3ef17e0810bbfe274714a3f267b3856ef88fcfa4","modified":1662191635501},{"_id":"public/categories/中间件/index.html","hash":"dc8b93cab5ad69023c5659abda6bde190eca1bc3","modified":1662191635501},{"_id":"public/categories/git/index.html","hash":"2b464ccbc15689bcdca7930e57c1890e641d6102","modified":1662191635501},{"_id":"public/categories/随记/index.html","hash":"1590af1dd890dd27c7f72e6119a18b149f441aa4","modified":1662191635501},{"_id":"public/categories/饕餮/index.html","hash":"79fc5a428add08ff000fc1b0f485d3a6d023715a","modified":1662191635501},{"_id":"public/categories/数据结构/index.html","hash":"37cd60d6ccb3faea0e245d41103628f59e546f65","modified":1662191635501},{"_id":"public/categories/随想/index.html","hash":"64a47199e4fce1e6e8318558f149ed578ce2a6f9","modified":1662191635501},{"_id":"public/categories/清单/index.html","hash":"ecb47d0bd9dec867da5ccea3825a43078320ab52","modified":1662191635501},{"_id":"public/categories/限流/index.html","hash":"49961b036d4fb97ef156aa731865a92283e76e01","modified":1662191635501},{"_id":"public/categories/大数据/index.html","hash":"b73633dbda8ee390b4fd97c9e75127129748f1ad","modified":1662191635501},{"_id":"public/categories/大数据/实时计算/index.html","hash":"07bc77e7bebc5adcaf9a7859dcbb7b4c92a2cfa4","modified":1662191635501},{"_id":"public/archives/index.html","hash":"fcfd7b924690c773e515c82a5346ec31dc5b50cd","modified":1662191635501},{"_id":"public/archives/page/2/index.html","hash":"0331cfe9b9a19e8abceae7e9c35d8cc43f7a8cf9","modified":1662191635501},{"_id":"public/archives/page/3/index.html","hash":"e0bb69a695b42eda6fee3b9f4ad498962cdc5dea","modified":1662191635501},{"_id":"public/archives/page/4/index.html","hash":"3b558b50c1996588ef97625ee9a284c5c8658232","modified":1662191635501},{"_id":"public/2019/11/24/Manjaro如何自动挂载机械硬盘分区/index.html","hash":"4989163a922706231accae91fa817122e7f58e59","modified":1662191635501},{"_id":"public/2020/01/22/Scala/index.html","hash":"8a306fa1cb9668934aabe9ce6054fe1cc99d9cb6","modified":1662191635502},{"_id":"public/2019/09/14/zookeeper模拟集群搭建/index.html","hash":"3875fd1e5cc0fd883f9be47d8c3acc9e16d7658d","modified":1662191635502},{"_id":"public/2019/09/07/CORS/index.html","hash":"318fb0eff5165b92a7fa2709935fb6c5dfeee49f","modified":1662191635502},{"_id":"public/2019/08/02/rust-variablesAndType/index.html","hash":"787c3ef39d451be356926dfe3c4ad0fabea84124","modified":1662191635502},{"_id":"public/2019/01/21/CassandraLinux服务端安装配置/index.html","hash":"f92845fe0e2030556af776c32eb4c0aa966d4102","modified":1662191635502},{"_id":"public/2018/12/02/Pulsar安装与配置/index.html","hash":"9160229a90d4a14f9bde529a5184100746096805","modified":1662191635502},{"_id":"public/2018/12/02/Pulsar简介/index.html","hash":"09619c8e26f6963a178115ff178a00985c2c1174","modified":1662191635502},{"_id":"public/2018/11/07/Mybatis源码分析-二/index.html","hash":"dc7917a13d2f8143a1278c4fa756eefca6d0fdfb","modified":1662191635502},{"_id":"public/2018/10/27/Spring源码一/index.html","hash":"98b6511deefd335208da88946ab07398eabf4fbd","modified":1662191635502},{"_id":"public/2018/10/16/Redis集群搭建/index.html","hash":"a4f04439e09c3b4e7ed1053c041a8b64a7cce591","modified":1662191635502},{"_id":"public/2018/10/13/Java锁/index.html","hash":"103718c453cb846b0d105a57ab1c0dae16167ac4","modified":1662191635502},{"_id":"public/2018/10/05/数据结构之复杂度分析-三/index.html","hash":"02115fc6a21a8233796c264796a7169b411d28b1","modified":1662191635502},{"_id":"public/2018/10/05/数据结构之复杂度分析-一/index.html","hash":"8e5ee384d743079df3118a8ca496d18d06970961","modified":1662191635502},{"_id":"public/2018/10/03/git简单记录/index.html","hash":"7f2be2ae15365d7dbf20705e57bbe6612b86f539","modified":1662191635502},{"_id":"public/2018/09/29/限流防止重复提交/index.html","hash":"9e1af237a196619717f2a737731aa1e9cbb0b932","modified":1662191635502},{"_id":"public/2018/09/29/SSDB简单介绍与搭建/index.html","hash":"fd53c1f467be306316f9ba750d9921019f106ba0","modified":1662191635503},{"_id":"public/2018/09/19/Kafka安装配置/index.html","hash":"d04142f8f4483605a75b74a3ecb2f48677d05536","modified":1662191635503},{"_id":"public/2018/09/16/SpringBoot开启https/index.html","hash":"c1218f69fdf509fde33c0156ae9913cfae79121a","modified":1662191635503},{"_id":"public/2018/08/09/RabbitMq简述/index.html","hash":"61bfed192b96c9d304a3a95710aeca035ffdf7b8","modified":1662191635503},{"_id":"public/2018/08/07/RabbitMq在Ubuntu中的安装配置/index.html","hash":"590c54d598f70b63cf434ba368eff7f97afc3ab9","modified":1662191635503},{"_id":"public/2018/08/04/Java8点拨/index.html","hash":"d58a88460bea3a3dbf2e14481316483a3f7970b3","modified":1662191635503},{"_id":"public/2018/07/16/rust-mod与pub与引用模块/index.html","hash":"4a4a19baa552b97391bf8266d320c405f71cbc02","modified":1662191635503},{"_id":"public/2018/07/06/canal配置搭建/index.html","hash":"bda17fdd7cc698c405d0e427133d27dbf354f405","modified":1662191635503},{"_id":"public/2018/04/26/FRP搭建使用/index.html","hash":"42ffa6aa7a11c3796b397463e286d00c5344ef22","modified":1662191635503},{"_id":"public/2018/04/10/Netty之ChannelOption/index.html","hash":"2d39335dba4110b56c68b62174f98376038acd40","modified":1662191635503},{"_id":"public/2018/03/19/Java单例/index.html","hash":"3e0c77da9ba68f35e7262b73565e76dd1afc32a2","modified":1662191635503},{"_id":"public/2018/03/11/Jmeter测试记录/index.html","hash":"84723c0a177fa2c274021fa8b7162699588cf497","modified":1662191635503},{"_id":"public/2018/03/10/Javai线程状态/index.html","hash":"0a45f3b750580cf43d80393877c308dcce35ced5","modified":1662191635503},{"_id":"public/2018/03/10/Mybatis源码分析-一/index.html","hash":"893d1193186117a5289496d2e98c0186bb4ea1cb","modified":1662191635503},{"_id":"public/2018/03/01/RabbitMq定时消息队列的实现/index.html","hash":"618e870a5ec6dbb4d86e3f9a33dd959f5c9dd108","modified":1662191635504},{"_id":"public/2018/02/26/tomcat-native和APR/index.html","hash":"8d6028bbab0090bf93eda562552aeeb33cbf1ba3","modified":1662191635504},{"_id":"public/2017/12/05/Tomcat启动报Warn/index.html","hash":"c8aa4a096bf6e5d2d635f3262d42bcffabe0c2ea","modified":1662191635504},{"_id":"public/2017/11/22/Tomcat优化简谈/index.html","hash":"8eb598733273c0113f5bea469b9ed32231999f33","modified":1662191635504},{"_id":"public/2017/11/19/Spring事件驱动之同步事件驱动监听/index.html","hash":"470e0cc756687130e663149d05becc7ae9b350c5","modified":1662191635504},{"_id":"public/2017/11/19/Rust语言Win环境搭建配置/index.html","hash":"5892dace0ab06f1f12deafcc0750f638ca90cc20","modified":1662191635504},{"_id":"public/2017/11/19/Ubuntu搭建nextcloud/index.html","hash":"fb53b4557715e570fb77d25362f7047544457785","modified":1662191635504},{"_id":"public/archives/page/6/index.html","hash":"a7526617fadbcf63f88b4ad39884264fb85f44b6","modified":1662191635518},{"_id":"public/archives/2017/index.html","hash":"4cf9d6f52eb05f5d072d92a88ab6e62e942b288b","modified":1662191635518},{"_id":"public/archives/2017/page/2/index.html","hash":"1a10ef5cbcc5505f1f3a526badb78d603da5f6a1","modified":1662191635518},{"_id":"public/archives/2017/07/index.html","hash":"d02408a8f5156615a1765469dc20bee8c11eab63","modified":1662191635518},{"_id":"public/archives/2017/11/index.html","hash":"aac43a9022f74385e8f8bb2f6dcb632b33302cb7","modified":1662191635518},{"_id":"public/archives/2017/12/index.html","hash":"6da88bc0a9e0047e216512317f605eaaee758b7a","modified":1662191635518},{"_id":"public/archives/2018/index.html","hash":"91598ce942c1a30a61669988e1228a7fdd274586","modified":1662191635518},{"_id":"public/archives/2018/page/2/index.html","hash":"d6648982f4477ceaa70f130fd228b72593ef0d79","modified":1662191635518},{"_id":"public/archives/2018/page/3/index.html","hash":"4812162bc06fe52c62025e15ceee4fa42e65065d","modified":1662191635518},{"_id":"public/archives/2018/page/4/index.html","hash":"3362267cf640db55a9f8591445dd190b8b4f3711","modified":1662191635518},{"_id":"public/archives/2018/02/index.html","hash":"0a00e4e8d25151a28fe41dadb6734d27fad044cd","modified":1662191635518},{"_id":"public/archives/2018/03/index.html","hash":"e0713512bc0bf97c1c1d19df7d5f81ec4e455fba","modified":1662191635518},{"_id":"public/archives/2018/04/index.html","hash":"971ec4c9c6bf0ff176730b7365062e9feb2ab287","modified":1662191635518},{"_id":"public/archives/2018/07/index.html","hash":"1a9f4858b30c58101da64ae2667cee3359417fa3","modified":1662191635518},{"_id":"public/archives/2018/08/index.html","hash":"601b40f7aac0675775ef6667971e74da2ff03d36","modified":1662191635518},{"_id":"public/archives/2018/09/index.html","hash":"d7896c3d724d6669ce07f584405c4715ccaa73a0","modified":1662191635519},{"_id":"public/archives/2018/10/index.html","hash":"5b6049e17f3f5ad52ac880128f00e1c81ebfc017","modified":1662191635519},{"_id":"public/archives/2018/11/index.html","hash":"446a448826e21f8a6cfbbe7961ef5ee25e3ec343","modified":1662191635519},{"_id":"public/archives/2018/12/index.html","hash":"7133e2fd9e70657f696ea7acbfe34636cbda35d6","modified":1662191635519},{"_id":"public/archives/2019/index.html","hash":"b753e4305b583902b5f60124956045b77a70a58c","modified":1662191635519},{"_id":"public/archives/2019/01/index.html","hash":"03b66bd4999f27c7b364393100b59f3dc261fa05","modified":1662191635519},{"_id":"public/archives/2019/09/index.html","hash":"de8d46d44008b954957b7c8b4815b8d299d45771","modified":1662191635519},{"_id":"public/archives/2019/11/index.html","hash":"32c4e5a85fa8242fdea08b080842fe56f2f77afd","modified":1662191635519},{"_id":"public/archives/2019/08/index.html","hash":"3ffb23af4a95aa724d907e58e82f87d007ac97ae","modified":1662191635519},{"_id":"public/archives/2020/index.html","hash":"8963aa904a7ec576d9aed7ebea92e3348f4ed210","modified":1662191635519},{"_id":"public/archives/2020/01/index.html","hash":"784b9e69aa4cded504d53a74c5c4306211782622","modified":1662191635519},{"_id":"public/tags/JAVA/index.html","hash":"38ba80998c7711e67bbcd0b895ee250b5ca78a3a","modified":1662191635519},{"_id":"public/tags/PAY/index.html","hash":"f560c75db1c8181f4ab0d7298c830e0439cd4889","modified":1662191635519},{"_id":"public/tags/Linux/index.html","hash":"a817665ba917c2876262ac70eb47ce13246790f2","modified":1662191635519},{"_id":"public/tags/内网穿透/index.html","hash":"5786c5d8f71c112c309351bf6a6f2d975d2d4e3a","modified":1662191635519},{"_id":"public/tags/Docker/index.html","hash":"6d08007666a1d00a9d305fa8382fd125d8bc5c58","modified":1662191635519},{"_id":"public/tags/Cassandra/index.html","hash":"ed39cb7c5bbf6f6931cae3c53f0c600244ba7719","modified":1662191635519},{"_id":"public/tags/Git/index.html","hash":"0a1b5c552fe3800ca7a3dc007a4220a5948f7e73","modified":1662191635519},{"_id":"public/tags/转载/index.html","hash":"24e287ff8c631496941bdbc8266e860c7a4ab81c","modified":1662191635519},{"_id":"public/tags/Jmeter/index.html","hash":"63b7b3b0d6b295c84d8ca900d4cca8967081f18e","modified":1662191635519},{"_id":"public/tags/锁/index.html","hash":"1f090711bebe9ee709e3b5d1356abbc3fac4a27b","modified":1662191635519},{"_id":"public/tags/Java/index.html","hash":"1a18971e31908223e7c672f71ae249519afc37ae","modified":1662191635519},{"_id":"public/tags/Kafka/index.html","hash":"8dbffc4ec6764654def728d4e0ff144837e3a8b2","modified":1662191635519},{"_id":"public/tags/Netty/index.html","hash":"1842be84ca0e3c6fecacd56e92187397f7884951","modified":1662191635520},{"_id":"public/tags/Mysql/index.html","hash":"230152af3e03ba6ce3b0436aef74e770eb4601f8","modified":1662191635520},{"_id":"public/tags/Pulsar/index.html","hash":"c3dd6cb7087bf66a75af4cfff3f158db1b3d579b","modified":1662191635520},{"_id":"public/tags/RabbitMq/index.html","hash":"d5eb13b88c45673719a4755b43093e98ceb20ec9","modified":1662191635520},{"_id":"public/tags/NoSql/index.html","hash":"f86ea1048a36ca5801d69cf3edd12237c1e719f6","modified":1662191635520},{"_id":"public/tags/Nosql/index.html","hash":"654d6abb4165782db3793ac3c1ccab3901de1279","modified":1662191635520},{"_id":"public/tags/scala/index.html","hash":"aaef89b1a5b8885a8b7f8ff31d9d7752e87285ab","modified":1662191635520},{"_id":"public/tags/Rust/index.html","hash":"ad848ea48d62fb19a17deb327e734e4b0e8b74d2","modified":1662191635520},{"_id":"public/tags/Spring/index.html","hash":"d523673e069f5147662ccab016f50eef0d03cbcf","modified":1662191635520},{"_id":"public/tags/BigData/index.html","hash":"a04049d4608bc979550c7ca52ef929676072e994","modified":1662191635521},{"_id":"public/tags/Tomcat/index.html","hash":"621e327ff8c16d9d2b07005b45255929654784cb","modified":1662191635521},{"_id":"public/tags/MongoDB/index.html","hash":"ecae25c2b557df94468624a47fdfd3a47650f98e","modified":1662191635521},{"_id":"public/tags/中间件/index.html","hash":"a2981772c155e0a6cc2e738cf11052ab58868965","modified":1662191635521},{"_id":"public/tags/git/index.html","hash":"2d51ec2866234f7c2931965a74f6e381427876e2","modified":1662191635521},{"_id":"public/tags/随记/index.html","hash":"da67e6e9ae21f01df73c00495617b3dfbc682770","modified":1662191635521},{"_id":"public/tags/杂技/index.html","hash":"cb069ba756b41aecc509f867b94895efa76485c4","modified":1662191635521},{"_id":"public/tags/饕餮/index.html","hash":"26492575dbe52c0416f21fa43fdde7d837420a1a","modified":1662191635521},{"_id":"public/tags/数据结构/index.html","hash":"b202190a197b13baea9ab6ff0820295a17f0648a","modified":1662191635521},{"_id":"public/tags/随想/index.html","hash":"60f357c259a130772536e51a5bc4e3d88a6827a1","modified":1662191635521},{"_id":"public/tags/Web/index.html","hash":"1738d013f40d63358abac348540771fd0ace2148","modified":1662191635521},{"_id":"public/tags/清单/index.html","hash":"722a8f0a1ea2110502d42dbdc35c036f38dc690d","modified":1662191635521},{"_id":"public/tags/Apache-Storm/index.html","hash":"711b56c4effb5fab191e5bed59b88c7791b431ec","modified":1662191635522},{"_id":"public/tags/Mybatis/index.html","hash":"2ed284f9c25a9f9751c776f2e0199cd856c36f3d","modified":1662191635522},{"_id":"public/archives/page/5/index.html","hash":"1b0c7a12c38bf700f11d0f729c42dc683a9b57a8","modified":1662191635522},{"_id":"public/index.html","hash":"c5d48545d81c05028a0a9006824bdbbc4164aadd","modified":1662191635522},{"_id":"public/page/3/index.html","hash":"612362ca6313da30ae15deaf87799d97c0f98092","modified":1662191635522},{"_id":"public/page/2/index.html","hash":"521cb79becbb9cc1bd6bf12bbb286249a132874b","modified":1662191635522},{"_id":"public/page/4/index.html","hash":"cc0db8e821d81a51b8cc1db6978becd4fb472c7a","modified":1662191635522},{"_id":"public/page/6/index.html","hash":"164b6dc6a09f88bdd38217aae1993b9e69c7734a","modified":1662191635522},{"_id":"public/page/5/index.html","hash":"8e430608e5e94af8e8b83b7f2f4559e93288c9b6","modified":1662191635522},{"_id":"public/favicon.ico","hash":"6403011507e9770c0d21b6b7dfdc4ccdd4c05d55","modified":1662191635522},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1662191635522},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1662191635522},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1662191635522},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1662191635522},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1662191635522},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1662191635522},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1662191635522},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1662191635522},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1662191635522},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1662191635522},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1662191635522},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1662191635522},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1662191635522},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1662191635523},{"_id":"public/images/favicon.ico","hash":"6403011507e9770c0d21b6b7dfdc4ccdd4c05d55","modified":1662191635523},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1662191635523},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1662191635523},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1662191635523},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1662191635523},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1662191635523},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1662191635523},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1662191635523},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1662191635523},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1662191635524},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1662191635524},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1662191635524},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1662191635524},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1662191635524},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1662191635524},{"_id":"public/2018/03/10/Mybatis源码分析-一/20170308.png","hash":"eb9124fb8defee5d338d57b29882008ccf56e5ad","modified":1662191635524},{"_id":"public/2017/11/22/Tomcat优化简谈/参数说明.png","hash":"31afa8deb5255986eb0791b93ad1770ac8073c12","modified":1662191635524},{"_id":"public/2018/08/09/RabbitMq简述/RabbitMq图解.png","hash":"2cb801b58dd830ac60635c969ac295644dcfbc8e","modified":1662191635524},{"_id":"public/2018/03/01/RabbitMq定时消息队列的实现/1.jpg","hash":"15b598f7bdd2474a727bde387a363e2082b55557","modified":1662191635524},{"_id":"public/2018/03/01/RabbitMq定时消息队列的实现/3.jpg","hash":"6220d3679a67a8dccbc301d671bd2dcb25a9492e","modified":1662191635524},{"_id":"public/2018/03/01/RabbitMq定时消息队列的实现/2.jpg","hash":"54de2e106c59734efe21ca9d140d74a1cd93169b","modified":1662191635524},{"_id":"public/2018/03/11/Jmeter测试记录/20180311145402.png","hash":"872c2df9fd14db18503e10f2b245fbfdb25db610","modified":1662191635524},{"_id":"public/2018/03/11/Jmeter测试记录/20180311160836.jpg","hash":"cc5637927962869a5d85cebda153f5e33e182169","modified":1662191635524},{"_id":"public/2018/03/11/Jmeter测试记录/20180311163214.jpg","hash":"3ed1c4c54c9d8ec6a7255d45e0de814bd01eb2f6","modified":1662191635524},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1662191636792},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1662191636797},{"_id":"public/2018/12/02/Pulsar简介/20181008112559290.png","hash":"1fe0a2b7f2564c746375b6dbdf5694bed943d3be","modified":1662191636800},{"_id":"public/2018/09/16/SpringBoot开启https/HTTPS1.png","hash":"48e7204698b50973b83a5a6b43e8295734a4a326","modified":1662191636800},{"_id":"public/2018/12/02/Pulsar简介/pulsar-failover-subscriptions.png","hash":"a6dc64e7bf26d1d697fa97a01d34f33e2734f174","modified":1662191636801},{"_id":"public/2018/12/02/Pulsar简介/pulsar-shared-subscriptions.png","hash":"068bcf9de9e0e8f1745941625e7768bf504e05c3","modified":1662191636801},{"_id":"public/2018/12/02/Pulsar简介/pulsar-subscription-modes.png","hash":"67942469a72be429f99736d5ff66275f7f50d952","modified":1662191636801},{"_id":"public/2018/03/11/Jmeter测试记录/20180311151959.jpg","hash":"12119d440e6d143603ded1e71bf0d09e1855873f","modified":1662191636801},{"_id":"public/2018/03/11/Jmeter测试记录/20180311160140.jpg","hash":"9e9e3dfd8ee8233214a397ee8d8ffd4a79127e47","modified":1662191636801},{"_id":"public/2018/03/11/Jmeter测试记录/20180311152954.jpg","hash":"14fabb79d0dfaab635179d4b789f2bd730d82d9a","modified":1662191636801},{"_id":"public/2018/03/11/Jmeter测试记录/20180311154519.jpg","hash":"2a329866d34b31838f07142bc8619aae0e3cb7e4","modified":1662191636801},{"_id":"public/2018/03/11/Jmeter测试记录/20180311163344.jpg","hash":"4493ee1ee7e5d17b7c64c624f058c4d787290491","modified":1662191636801},{"_id":"public/2018/03/11/Jmeter测试记录/20180311164711.jpg","hash":"6cdd32d25f773fb1da056c1b418b200c1b278841","modified":1662191636801},{"_id":"public/2018/03/11/Jmeter测试记录/20180311164306.jpg","hash":"998287422cdeb5c5fa7b614581c66df4e7a85f31","modified":1662191636801},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1662191636813},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1662191636813},{"_id":"public/js/src/bootstrap.js","hash":"03190d70e2347a0b29d185295445c6762a4455e8","modified":1662191636813},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1662191636813},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1662191636813},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1662191636813},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1662191636813},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1662191636813},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1662191636813},{"_id":"public/js/src/utils.js","hash":"0fcb80ec11e6df05ed1a07b9338bef2669f93a70","modified":1662191636813},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1662191636813},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1662191636813},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1662191636813},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1662191636813},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1662191636813},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1662191636813},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1662191636813},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1662191636813},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1662191636813},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1662191636814},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1662191636815},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1662191636815},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1662191636815},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1662191636815},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1662191636815},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1662191636815},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1662191636815},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1662191636816},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1662191636816},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1662191636816},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1662191636816},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1662191636817},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1662191636817},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1662191636817},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1662191636817},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1662191636817},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1662191636817},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1662191636817},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1662191636817},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1662191636817},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1662191636817},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1662191636817},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1662191636817},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1662191636817},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1662191636817},{"_id":"public/lib/fastclick/README.html","hash":"c5a4c05ca80132b7e343d5fd1d1d1a976b4ad151","modified":1662191636817},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"81057e5b518b8ab60474e1ad027e868b558f15b7","modified":1662191636817},{"_id":"public/lib/jquery_lazyload/README.html","hash":"18a600ca1aafd3bf08af52b6a6fe5f056aeed9f4","modified":1662191636817},{"_id":"public/css/main.css","hash":"59bb1dea1d2e28066336fa14ea489e58e2240b15","modified":1662191636817},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1662191636817},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1662191636817},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1662191636817},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1662191636817},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1662191636818},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1662191636818},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1662191636818},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1662191636818},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1662191636818},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1662191636818},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1662191636819},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1662191636819},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1662191636819},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1662191636819},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1662191636819},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1662191636819},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1662191636819},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1662191636820},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1662191636820},{"_id":"public/2018/12/02/Pulsar简介/partitioning.png","hash":"113023c2a8cc02301eb31b9caf7b2c42ea7380ee","modified":1662191636821},{"_id":"public/2018/03/11/Jmeter测试记录/20180311160412.jpg","hash":"38bb775d8a1d9f4bc2ab078356bf643501d549a7","modified":1662191636821},{"_id":"public/2018/03/11/Jmeter测试记录/20180311160646.jpg","hash":"74eff3fa2166653fbd2782a58ce304c76c478bde","modified":1662191636821},{"_id":"public/2018/03/11/Jmeter测试记录/20180311163046.jpg","hash":"b63190657c02d3b7bdfa925eec53d439b7d40cc6","modified":1662191636821},{"_id":"public/2018/12/02/Pulsar简介/message-deduplication.png","hash":"7912fe81443dd343b8d363be534658f849ca7b3a","modified":1662191636831},{"_id":"public/images/p829173265.jpg","hash":"a9497e4815e81d4b81514742ab69f16db5a5fab0","modified":1662191636839},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1662191636839},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1662191636840},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1662191637325}],"Category":[{"name":"JAVA","_id":"cl7llz82j0002twfal128yozx"},{"name":"WEB","_id":"cl7llz82t0007twfal955cqjb"},{"name":"Linux","_id":"cl7llz82z000dtwfai9d8su9z"},{"name":"Cassandra","_id":"cl7llz836000jtwfaczz3j1bd"},{"name":"Git","_id":"cl7llz8400010twfazq07hxuo"},{"name":"Java，设计模式","_id":"cl7llz8460019twfa30sohpy5"},{"name":"多线程","_id":"cl7llz84b001ftwfad5f7atlx"},{"name":"测试","_id":"cl7llz84i001ltwfa9a1x4g0r"},{"name":"Java","_id":"cl7llz84n001rtwfa21b0trr9"},{"name":"Kafka","_id":"cl7llz84x001ytwfay94be1wo"},{"name":"Mybatis","_id":"cl7llz8520024twfaxi9ncbll"},{"name":"Mysql","_id":"cl7llz856002btwfabarnq7hg"},{"name":"Netty","_id":"cl7llz85d002htwfawq7erwyp"},{"name":"Pulsar","_id":"cl7llz85k002ptwfao904vdld"},{"name":"RabbitMq","_id":"cl7llz85y0032twfauwyk198k"},{"name":"Nosql","_id":"cl7llz86g003ktwfa3u74pz49"},{"name":"SpringBoot","_id":"cl7llz86u003ztwfaqlgnlcah"},{"name":"scala","_id":"cl7llz8720047twfa92ykcz4m"},{"name":"Rust","_id":"cl7llz876004ctwfahuyfg388"},{"name":"BigData","_id":"cl7llz878004gtwfaw07vpfo1"},{"name":"Spring","_id":"cl7llz879004ktwfaqjpu47cc"},{"name":"Tomcat","_id":"cl7llz87b004ptwfa8ea6wox8"},{"name":"Tomcat","parent":"cl7llz82z000dtwfai9d8su9z","_id":"cl7llz87d004ttwfaunv52426"},{"name":"MongoDB","_id":"cl7llz87g004xtwfalpbhyfn8"},{"name":"中间件","_id":"cl7llz87i0052twfaqagrxz2r"},{"name":"git","_id":"cl7llz87k0057twfa0ky7xw47"},{"name":"随记","_id":"cl7llz87m005btwfabu6ww0si"},{"name":"饕餮","_id":"cl7llz881005utwfa8z60n6zf"},{"name":"数据结构","_id":"cl7llz883005ztwfaxugnhken"},{"name":"随想","_id":"cl7llz8840062twfa7s9h95yn"},{"name":"清单","_id":"cl7llz8dr006xtwfalp4wkddz"},{"name":"限流","_id":"cl7llz8dx0071twfa8d9xihyh"},{"name":"大数据","_id":"cl7llz8e00076twfar4qoens9"},{"name":"实时计算","parent":"cl7llz8e00076twfar4qoens9","_id":"cl7llz8e3007ctwfa7q77gjce"}],"Data":[],"Page":[{"title":"categories","date":"2017-07-29T18:43:35.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-07-30 02:43:35\ntype: \"categories\"\n---\n","updated":"2022-09-03T07:30:55.344Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl7llz8dj006utwfamklr24qx","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-07-29T18:41:54.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-07-30 02:41:54\ntype: \"tags\"\n---\n","updated":"2022-09-03T07:30:55.344Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl7llz8dn006wtwfatt74j5q0","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Alipay Action","date":"2019-08-24T15:40:28.000Z","_content":"\n阿里支付宝实践<!--more-->\n\n### 配置支付宝开发者环境\n\n* 配置\n\n  没有正式的配置，那么就用沙箱环境实现下\n\n* 下载natapp\n\n  ``natapp.cn``\n\n* 配置nginx方便异步回调测试  servername 子域名 80 proxy_pass 代理到本地natapp的域名\n\n* 支付宝绑定域名即应用网关 分配一个子域名，并在本地指向到服务器ip上。\n\n* 配置子域名并配置nginx\n\n* 开始玩吧\n\n* 订单状态与支付状态不同步的解决\n\n  ```\n  1.支付成功后再下订单\n  2,下订单同步到我们服务器上\n  3.订单生成时,一旦生成支付宝订单就同步到我们服务器里,就时给我们的后台下一个订单,当然这时支付宝里已经有一份同样的订单了,\n      支付宝会发个状态,支付中,支付成功,支付失败,\n      我们把这个状态再同步到我们服务器,这样双重判断可以解决\n  \n  ```\n\n* 异步通知的频率\n\n  `通知的间隔频率一般是：4m,10m,10m,1h,2h,6h,15h`","source":"_posts/Alipay-Action.md","raw":"---\ntitle: Alipay Action\ndate: 2019-08-24 23:40:28\ntags: [PAY]\ncategories: [JAVA]\n---\n\n阿里支付宝实践<!--more-->\n\n### 配置支付宝开发者环境\n\n* 配置\n\n  没有正式的配置，那么就用沙箱环境实现下\n\n* 下载natapp\n\n  ``natapp.cn``\n\n* 配置nginx方便异步回调测试  servername 子域名 80 proxy_pass 代理到本地natapp的域名\n\n* 支付宝绑定域名即应用网关 分配一个子域名，并在本地指向到服务器ip上。\n\n* 配置子域名并配置nginx\n\n* 开始玩吧\n\n* 订单状态与支付状态不同步的解决\n\n  ```\n  1.支付成功后再下订单\n  2,下订单同步到我们服务器上\n  3.订单生成时,一旦生成支付宝订单就同步到我们服务器里,就时给我们的后台下一个订单,当然这时支付宝里已经有一份同样的订单了,\n      支付宝会发个状态,支付中,支付成功,支付失败,\n      我们把这个状态再同步到我们服务器,这样双重判断可以解决\n  \n  ```\n\n* 异步通知的频率\n\n  `通知的间隔频率一般是：4m,10m,10m,1h,2h,6h,15h`","slug":"Alipay-Action","published":1,"updated":"2022-09-03T07:30:55.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz82c0000twfauaky4gff","content":"<p>阿里支付宝实践<a id=\"more\"></a></p>\n<h3 id=\"配置支付宝开发者环境\"><a href=\"#配置支付宝开发者环境\" class=\"headerlink\" title=\"配置支付宝开发者环境\"></a>配置支付宝开发者环境</h3><ul>\n<li><p>配置</p>\n<p>没有正式的配置，那么就用沙箱环境实现下</p>\n</li>\n<li><p>下载natapp</p>\n<p><code>natapp.cn</code></p>\n</li>\n<li><p>配置nginx方便异步回调测试  servername 子域名 80 proxy_pass 代理到本地natapp的域名</p>\n</li>\n<li><p>支付宝绑定域名即应用网关 分配一个子域名，并在本地指向到服务器ip上。</p>\n</li>\n<li><p>配置子域名并配置nginx</p>\n</li>\n<li><p>开始玩吧</p>\n</li>\n<li><p>订单状态与支付状态不同步的解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.支付成功后再下订单</span><br><span class=\"line\">2,下订单同步到我们服务器上</span><br><span class=\"line\">3.订单生成时,一旦生成支付宝订单就同步到我们服务器里,就时给我们的后台下一个订单,当然这时支付宝里已经有一份同样的订单了,</span><br><span class=\"line\">    支付宝会发个状态,支付中,支付成功,支付失败,</span><br><span class=\"line\">    我们把这个状态再同步到我们服务器,这样双重判断可以解决</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>异步通知的频率</p>\n<p><code>通知的间隔频率一般是：4m,10m,10m,1h,2h,6h,15h</code></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>阿里支付宝实践</p>","more":"<p></p>\n<h3 id=\"配置支付宝开发者环境\"><a href=\"#配置支付宝开发者环境\" class=\"headerlink\" title=\"配置支付宝开发者环境\"></a>配置支付宝开发者环境</h3><ul>\n<li><p>配置</p>\n<p>没有正式的配置，那么就用沙箱环境实现下</p>\n</li>\n<li><p>下载natapp</p>\n<p><code>natapp.cn</code></p>\n</li>\n<li><p>配置nginx方便异步回调测试  servername 子域名 80 proxy_pass 代理到本地natapp的域名</p>\n</li>\n<li><p>支付宝绑定域名即应用网关 分配一个子域名，并在本地指向到服务器ip上。</p>\n</li>\n<li><p>配置子域名并配置nginx</p>\n</li>\n<li><p>开始玩吧</p>\n</li>\n<li><p>订单状态与支付状态不同步的解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.支付成功后再下订单</span><br><span class=\"line\">2,下订单同步到我们服务器上</span><br><span class=\"line\">3.订单生成时,一旦生成支付宝订单就同步到我们服务器里,就时给我们的后台下一个订单,当然这时支付宝里已经有一份同样的订单了,</span><br><span class=\"line\">    支付宝会发个状态,支付中,支付成功,支付失败,</span><br><span class=\"line\">    我们把这个状态再同步到我们服务器,这样双重判断可以解决</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>异步通知的频率</p>\n<p><code>通知的间隔频率一般是：4m,10m,10m,1h,2h,6h,15h</code></p>\n</li>\n</ul>"},{"title":"CORS","date":"2019-09-06T16:17:40.000Z","_content":"\nJavaWeb中的跨域<!--more-->\n\n\n\nweb开发中经常遇到跨域问题 一般分两种\n\n比如现在有一个前后端分离的项目，前端域名为front.github.com\n\n后端接口服务工程域名 为  backgroud.baidu.com\n\n当前端登录时候需要调用后端服务工程的一个接口 backgroud.baidu.com/sso/login\n\n* 后端代码添加跨域过滤器\n\n  * 代码跨域过滤器\n\n    ````\n    public class TokenFilter extends OncePerRequestFilter {\n        @Override\n        protected void doFilterInternal(HttpServlet Requestrequest, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n            // do something\n            cors(request, response);\n            // do something\n        }\n      \n        private void cors(HttpServletRequest request, HttpServletResponse response) {\n            String allowOrigin = request.getHeader(\"Origin\");\n            String allowMethods = \"GET,PUT, POST, DELETE\";\n            String allowHeaders = \"Origin,No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified,Cache-Control, Expires, Content-Type, X-E4M-With\";\n            response.addHeader(\"Access-Control-Allow-Credentials\", \"true\");\n            response.addHeader(\"Access-Control-Allow-Headers\", allowHeaders);\n            response.addHeader(\"Access-Control-Allow-Methods\", allowMethods);\n            response.addHeader(\"Access-Control-Allow-Origin\", allowOrigin);\n        }\n    }\n    ````\n\n    ````\n    // /* 表示全部拦截\n    @WebFilter(filterName = \"loginFilter\",urlPatterns = \"/*\")\n    public class LoginFilter implements Filter {\n        //这里面 填写不需要 被拦截的地址\n        private static final Set<String> ALLOWED_PATHS = Collections.unmodifiableSet(\n                new HashSet<String>( Arrays.asList(\"/login\",\"/isLogin\",\"/findCategory\") )\n        );\n     \n        //初始化调用的方法\n        //当服务器 被启动的时候，调用\n        public void init(FilterConfig filterConfig) throws ServletException { }\n     \n        //拦截的方法\n        public void doFilter(ServletRequest req, ServletResponse res, FilterChain filterChain) throws IOException, ServletException {\n     \n     \n            HttpServletRequest request = (HttpServletRequest) req;\n            HttpServletResponse response = (HttpServletResponse) res;\n     \n            //解决跨域的问题 http://localhost:3030 为非同域名下的请求方\n            response.setHeader(\"Access-Control-Allow-Origin\",\"http://localhost:3030\");\n            response.setHeader(\"Access-Control-Allow-Credentials\",\"true\");\n            response.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type,Content-Length, Authorization, Accept,X-Requested-With,X-App-Id, X-Token\");\n            response.setHeader(\"Access-Control-Allow-Methods\",\"PUT,POST,GET,DELETE,OPTIONS\");\n            response.setHeader(\"Access-Control-Max-Age\", \"3600\");\n     \n     \n            String path = request.getRequestURI().substring(request.getContextPath().length()).replaceAll(\"[/]+$\",\"\");\n            boolean allowePath =  ALLOWED_PATHS.contains(path);\n     \n            if (!allowePath) {  //需要拦截的方法\n                Object aa = request.getSession().getAttribute(\"user\");\n                if (aa != null) {\n                    filterChain.doFilter(request,response);\n            }\n                else {\n                    response.getWriter().write(\"noLogin\");\n                }\n            } else {  //不需要被拦截的方法\n                //直接放行\n                filterChain.doFilter(request,response);\n            }\n     \n     \n     \n        }\n     \n        //销毁时候调用的方法\n        public void destroy() { }\n    }\n    \n    ````\n\n  * 注解跨域过滤器\n\n    spring版本4.2以上 注解源码如下\n\n    ````\n    @Target({ ElementType.METHOD, ElementType.TYPE })\n    @Retention(RetentionPolicy.RUNTIME)\n    @Documented\n    public @interface CrossOrigin {\n    \n        String[] DEFAULT_ORIGINS = { \"*\" };\n    \n        String[] DEFAULT_ALLOWED_HEADERS = { \"*\" };\n    \n        boolean DEFAULT_ALLOW_CREDENTIALS = true;\n    \n        long DEFAULT_MAX_AGE = 1800;\n    \n    \n        /**\n         * 同origins属性一样\n         */\n        @AliasFor(\"origins\")\n        String[] value() default {};\n    \n        /**\n         * 所有支持域的集合，例如\"http://domain1.com\"。\n         * <p>这些值都显示在请求头中的Access-Control-Allow-Origin\n         * \"*\"代表所有域的请求都支持\n         * <p>如果没有定义，所有请求的域都支持\n         * @see #value\n         */\n        @AliasFor(\"value\")\n        String[] origins() default {};\n    \n        /**\n         * 允许请求头重的header，默认都支持\n         */\n        String[] allowedHeaders() default {};\n    \n        /**\n         * 响应头中允许访问的header，默认为空\n         */\n        String[] exposedHeaders() default {};\n    \n        /**\n         * 请求支持的方法，例如\"{RequestMethod.GET, RequestMethod.POST}\"}。\n         * 默认支持RequestMapping中设置的方法\n         */\n        RequestMethod[] methods() default {};\n    \n        /**\n         * 是否允许cookie随请求发送，使用时必须指定具体的域\n         */\n        String allowCredentials() default \"\";\n    \n        /**\n         * 预请求的结果的有效期，默认30分钟\n         */\n        long maxAge() default -1;\n    \n    }\n    ````\n\n    \n\n    实现\n\n    在controller上添加该注解 表示 该注解的方法都接收origin跨域请求方的请求\n\n    ```\n    @CrossOrigin(origins = \"http://domain2.com\", maxAge = 3600)\n    @RestController\n    @RequestMapping(\"/account\")\n    public class AccountController {\n    \n        @RequestMapping(\"/{id}\")\n        public Account retrieve(@PathVariable Long id) {\n            // ...\n        }\n    \n        @RequestMapping(method = RequestMethod.DELETE, path = \"/{id}\")\n        public void remove(@PathVariable Long id) {\n            // ...\n        }\n    }\n    ```\n\n    在方法上使用 表示单个方法允许跨域请求\n\n    ```\n    @CrossOrigin(maxAge = 3600)\n    @RestController\n    @RequestMapping(\"/account\")\n    public class AccountController {\n    \n        @CrossOrigin(\"http://domain2.com\")\n        @RequestMapping(\"/{id}\")\n        public Account retrieve(@PathVariable Long id) {\n            // ...\n        }\n    \n        @RequestMapping(method = RequestMethod.DELETE, path = \"/{id}\")\n        public void remove(@PathVariable Long id) {\n            // ...\n        }\n    }\n    ```\n\n    全局的跨域请求配置\n\n    ````\n    @Configuration\n    @EnableWebMvc\n    public class WebConfig extends WebMvcConfigurerAdapter {\n    \n        @Override\n        public void addCorsMappings(CorsRegistry registry) {\n            registry.addMapping(\"/**\");\n        }\n    }\n    ````\n\n    特定路径的CORS\n\n    ````\n    @Configuration\n    @EnableWebMvc\n    public class WebConfig extends WebMvcConfigurerAdapter {\n    \n        @Override\n        public void addCorsMappings(CorsRegistry registry) {\n            registry.addMapping(\"/api/**\")\n                .allowedOrigins(\"http://domain2.com\")\n                .allowedMethods(\"PUT\", \"DELETE\")\n                .allowedHeaders(\"header1\", \"header2\", \"header3\")\n                .exposedHeaders(\"header1\", \"header2\")\n                .allowCredentials(false).maxAge(3600);\n        }\n    }\n    ````\n\n    \n\n  * springBoot配置跨域\n\n    配置起来比较罗嗦\n\n    ```\n    @Configuration\n    public class CorsConfig {\n        @Bean\n        public CorsFilter corsFilter() {\n            //1.添加CORS配置信息\n            CorsConfiguration config = new CorsConfiguration();\n            //放行哪些原始域\n            config.addAllowedOrigin(\"*\");\n            //是否发送Cookie信息\n            config.setAllowCredentials(true);\n            //放行哪些原始域(请求方式)\n            config.addAllowedMethod(\"*\");\n            //放行哪些原始域(头部信息)\n            config.addAllowedHeader(\"*\");\n    \n            //2.添加映射路径\n            UrlBasedCorsConfigurationSource configSource = new UrlBasedCorsConfigurationSource();\n            configSource.registerCorsConfiguration(\"/**\", config);\n    \n            //3.返回新的CorsFilter.\n            return new CorsFilter(configSource);\n        }\n    }\n    ```\n\n    \n\n* nginx配置反向代理解决\n\n  主要利用proxy_pass来解决\n\n  修改前端nginx的配置文件\n\n  ```\n  server {\n          listen       80;\n          server_name  front.github.com;\n          access_log  logs/test.access.log;\n          # 匹配以sso开头的请求\n          location /sso {\n              proxy_pass http://background.baidu.com/;  #注意域名后有一个/\n          }\n          location / {\n              root html/a;\n              index index.html index.htm;\n          }\n          #\n          error_page   500 502 503 504  /50x.html;\n          location = /50x.html {\n              root   html;\n          }\n      }\n  ```\n\n  加上/的话 访问 backgroud.baidu.com/sso/login.html 获得预期的 backgroud.baidu.com/login.html\n\n  不加/的话 访问 backgroud.baidu.com/sso/login.html 得到的是 backgroud.baidu.com/sso/login.html \n\n  那么前端访问请求接口地址应该改为front.github.com/sso/login\n\n  **需要注意的是当请求方需要携带cookies时候（Access-Control-Allow-Credentials\", \"true\"）进行访问跨域方时候 Access-Control-Allow-Origin 不能为***\n\n","source":"_posts/CORS.md","raw":"---\ntitle: CORS\ndate: 2019-09-07 00:17:40\ntags: [JAVA]\ncategories: [WEB]\n---\n\nJavaWeb中的跨域<!--more-->\n\n\n\nweb开发中经常遇到跨域问题 一般分两种\n\n比如现在有一个前后端分离的项目，前端域名为front.github.com\n\n后端接口服务工程域名 为  backgroud.baidu.com\n\n当前端登录时候需要调用后端服务工程的一个接口 backgroud.baidu.com/sso/login\n\n* 后端代码添加跨域过滤器\n\n  * 代码跨域过滤器\n\n    ````\n    public class TokenFilter extends OncePerRequestFilter {\n        @Override\n        protected void doFilterInternal(HttpServlet Requestrequest, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n            // do something\n            cors(request, response);\n            // do something\n        }\n      \n        private void cors(HttpServletRequest request, HttpServletResponse response) {\n            String allowOrigin = request.getHeader(\"Origin\");\n            String allowMethods = \"GET,PUT, POST, DELETE\";\n            String allowHeaders = \"Origin,No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified,Cache-Control, Expires, Content-Type, X-E4M-With\";\n            response.addHeader(\"Access-Control-Allow-Credentials\", \"true\");\n            response.addHeader(\"Access-Control-Allow-Headers\", allowHeaders);\n            response.addHeader(\"Access-Control-Allow-Methods\", allowMethods);\n            response.addHeader(\"Access-Control-Allow-Origin\", allowOrigin);\n        }\n    }\n    ````\n\n    ````\n    // /* 表示全部拦截\n    @WebFilter(filterName = \"loginFilter\",urlPatterns = \"/*\")\n    public class LoginFilter implements Filter {\n        //这里面 填写不需要 被拦截的地址\n        private static final Set<String> ALLOWED_PATHS = Collections.unmodifiableSet(\n                new HashSet<String>( Arrays.asList(\"/login\",\"/isLogin\",\"/findCategory\") )\n        );\n     \n        //初始化调用的方法\n        //当服务器 被启动的时候，调用\n        public void init(FilterConfig filterConfig) throws ServletException { }\n     \n        //拦截的方法\n        public void doFilter(ServletRequest req, ServletResponse res, FilterChain filterChain) throws IOException, ServletException {\n     \n     \n            HttpServletRequest request = (HttpServletRequest) req;\n            HttpServletResponse response = (HttpServletResponse) res;\n     \n            //解决跨域的问题 http://localhost:3030 为非同域名下的请求方\n            response.setHeader(\"Access-Control-Allow-Origin\",\"http://localhost:3030\");\n            response.setHeader(\"Access-Control-Allow-Credentials\",\"true\");\n            response.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type,Content-Length, Authorization, Accept,X-Requested-With,X-App-Id, X-Token\");\n            response.setHeader(\"Access-Control-Allow-Methods\",\"PUT,POST,GET,DELETE,OPTIONS\");\n            response.setHeader(\"Access-Control-Max-Age\", \"3600\");\n     \n     \n            String path = request.getRequestURI().substring(request.getContextPath().length()).replaceAll(\"[/]+$\",\"\");\n            boolean allowePath =  ALLOWED_PATHS.contains(path);\n     \n            if (!allowePath) {  //需要拦截的方法\n                Object aa = request.getSession().getAttribute(\"user\");\n                if (aa != null) {\n                    filterChain.doFilter(request,response);\n            }\n                else {\n                    response.getWriter().write(\"noLogin\");\n                }\n            } else {  //不需要被拦截的方法\n                //直接放行\n                filterChain.doFilter(request,response);\n            }\n     \n     \n     \n        }\n     \n        //销毁时候调用的方法\n        public void destroy() { }\n    }\n    \n    ````\n\n  * 注解跨域过滤器\n\n    spring版本4.2以上 注解源码如下\n\n    ````\n    @Target({ ElementType.METHOD, ElementType.TYPE })\n    @Retention(RetentionPolicy.RUNTIME)\n    @Documented\n    public @interface CrossOrigin {\n    \n        String[] DEFAULT_ORIGINS = { \"*\" };\n    \n        String[] DEFAULT_ALLOWED_HEADERS = { \"*\" };\n    \n        boolean DEFAULT_ALLOW_CREDENTIALS = true;\n    \n        long DEFAULT_MAX_AGE = 1800;\n    \n    \n        /**\n         * 同origins属性一样\n         */\n        @AliasFor(\"origins\")\n        String[] value() default {};\n    \n        /**\n         * 所有支持域的集合，例如\"http://domain1.com\"。\n         * <p>这些值都显示在请求头中的Access-Control-Allow-Origin\n         * \"*\"代表所有域的请求都支持\n         * <p>如果没有定义，所有请求的域都支持\n         * @see #value\n         */\n        @AliasFor(\"value\")\n        String[] origins() default {};\n    \n        /**\n         * 允许请求头重的header，默认都支持\n         */\n        String[] allowedHeaders() default {};\n    \n        /**\n         * 响应头中允许访问的header，默认为空\n         */\n        String[] exposedHeaders() default {};\n    \n        /**\n         * 请求支持的方法，例如\"{RequestMethod.GET, RequestMethod.POST}\"}。\n         * 默认支持RequestMapping中设置的方法\n         */\n        RequestMethod[] methods() default {};\n    \n        /**\n         * 是否允许cookie随请求发送，使用时必须指定具体的域\n         */\n        String allowCredentials() default \"\";\n    \n        /**\n         * 预请求的结果的有效期，默认30分钟\n         */\n        long maxAge() default -1;\n    \n    }\n    ````\n\n    \n\n    实现\n\n    在controller上添加该注解 表示 该注解的方法都接收origin跨域请求方的请求\n\n    ```\n    @CrossOrigin(origins = \"http://domain2.com\", maxAge = 3600)\n    @RestController\n    @RequestMapping(\"/account\")\n    public class AccountController {\n    \n        @RequestMapping(\"/{id}\")\n        public Account retrieve(@PathVariable Long id) {\n            // ...\n        }\n    \n        @RequestMapping(method = RequestMethod.DELETE, path = \"/{id}\")\n        public void remove(@PathVariable Long id) {\n            // ...\n        }\n    }\n    ```\n\n    在方法上使用 表示单个方法允许跨域请求\n\n    ```\n    @CrossOrigin(maxAge = 3600)\n    @RestController\n    @RequestMapping(\"/account\")\n    public class AccountController {\n    \n        @CrossOrigin(\"http://domain2.com\")\n        @RequestMapping(\"/{id}\")\n        public Account retrieve(@PathVariable Long id) {\n            // ...\n        }\n    \n        @RequestMapping(method = RequestMethod.DELETE, path = \"/{id}\")\n        public void remove(@PathVariable Long id) {\n            // ...\n        }\n    }\n    ```\n\n    全局的跨域请求配置\n\n    ````\n    @Configuration\n    @EnableWebMvc\n    public class WebConfig extends WebMvcConfigurerAdapter {\n    \n        @Override\n        public void addCorsMappings(CorsRegistry registry) {\n            registry.addMapping(\"/**\");\n        }\n    }\n    ````\n\n    特定路径的CORS\n\n    ````\n    @Configuration\n    @EnableWebMvc\n    public class WebConfig extends WebMvcConfigurerAdapter {\n    \n        @Override\n        public void addCorsMappings(CorsRegistry registry) {\n            registry.addMapping(\"/api/**\")\n                .allowedOrigins(\"http://domain2.com\")\n                .allowedMethods(\"PUT\", \"DELETE\")\n                .allowedHeaders(\"header1\", \"header2\", \"header3\")\n                .exposedHeaders(\"header1\", \"header2\")\n                .allowCredentials(false).maxAge(3600);\n        }\n    }\n    ````\n\n    \n\n  * springBoot配置跨域\n\n    配置起来比较罗嗦\n\n    ```\n    @Configuration\n    public class CorsConfig {\n        @Bean\n        public CorsFilter corsFilter() {\n            //1.添加CORS配置信息\n            CorsConfiguration config = new CorsConfiguration();\n            //放行哪些原始域\n            config.addAllowedOrigin(\"*\");\n            //是否发送Cookie信息\n            config.setAllowCredentials(true);\n            //放行哪些原始域(请求方式)\n            config.addAllowedMethod(\"*\");\n            //放行哪些原始域(头部信息)\n            config.addAllowedHeader(\"*\");\n    \n            //2.添加映射路径\n            UrlBasedCorsConfigurationSource configSource = new UrlBasedCorsConfigurationSource();\n            configSource.registerCorsConfiguration(\"/**\", config);\n    \n            //3.返回新的CorsFilter.\n            return new CorsFilter(configSource);\n        }\n    }\n    ```\n\n    \n\n* nginx配置反向代理解决\n\n  主要利用proxy_pass来解决\n\n  修改前端nginx的配置文件\n\n  ```\n  server {\n          listen       80;\n          server_name  front.github.com;\n          access_log  logs/test.access.log;\n          # 匹配以sso开头的请求\n          location /sso {\n              proxy_pass http://background.baidu.com/;  #注意域名后有一个/\n          }\n          location / {\n              root html/a;\n              index index.html index.htm;\n          }\n          #\n          error_page   500 502 503 504  /50x.html;\n          location = /50x.html {\n              root   html;\n          }\n      }\n  ```\n\n  加上/的话 访问 backgroud.baidu.com/sso/login.html 获得预期的 backgroud.baidu.com/login.html\n\n  不加/的话 访问 backgroud.baidu.com/sso/login.html 得到的是 backgroud.baidu.com/sso/login.html \n\n  那么前端访问请求接口地址应该改为front.github.com/sso/login\n\n  **需要注意的是当请求方需要携带cookies时候（Access-Control-Allow-Credentials\", \"true\"）进行访问跨域方时候 Access-Control-Allow-Origin 不能为***\n\n","slug":"CORS","published":1,"updated":"2022-09-03T07:30:55.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz82h0001twfaet0uz8wa","content":"<p>JavaWeb中的跨域<a id=\"more\"></a></p>\n<p>web开发中经常遇到跨域问题 一般分两种</p>\n<p>比如现在有一个前后端分离的项目，前端域名为front.github.com</p>\n<p>后端接口服务工程域名 为  backgroud.baidu.com</p>\n<p>当前端登录时候需要调用后端服务工程的一个接口 backgroud.baidu.com/sso/login</p>\n<ul>\n<li><p>后端代码添加跨域过滤器</p>\n<ul>\n<li><p>代码跨域过滤器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TokenFilter extends OncePerRequestFilter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void doFilterInternal(HttpServlet Requestrequest, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException &#123;</span><br><span class=\"line\">        // do something</span><br><span class=\"line\">        cors(request, response);</span><br><span class=\"line\">        // do something</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    private void cors(HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class=\"line\">        String allowOrigin = request.getHeader(&quot;Origin&quot;);</span><br><span class=\"line\">        String allowMethods = &quot;GET,PUT, POST, DELETE&quot;;</span><br><span class=\"line\">        String allowHeaders = &quot;Origin,No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified,Cache-Control, Expires, Content-Type, X-E4M-With&quot;;</span><br><span class=\"line\">        response.addHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</span><br><span class=\"line\">        response.addHeader(&quot;Access-Control-Allow-Headers&quot;, allowHeaders);</span><br><span class=\"line\">        response.addHeader(&quot;Access-Control-Allow-Methods&quot;, allowMethods);</span><br><span class=\"line\">        response.addHeader(&quot;Access-Control-Allow-Origin&quot;, allowOrigin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// /* 表示全部拦截</span><br><span class=\"line\">@WebFilter(filterName = &quot;loginFilter&quot;,urlPatterns = &quot;/*&quot;)</span><br><span class=\"line\">public class LoginFilter implements Filter &#123;</span><br><span class=\"line\">    //这里面 填写不需要 被拦截的地址</span><br><span class=\"line\">    private static final Set&lt;String&gt; ALLOWED_PATHS = Collections.unmodifiableSet(</span><br><span class=\"line\">            new HashSet&lt;String&gt;( Arrays.asList(&quot;/login&quot;,&quot;/isLogin&quot;,&quot;/findCategory&quot;) )</span><br><span class=\"line\">    );</span><br><span class=\"line\"> </span><br><span class=\"line\">    //初始化调用的方法</span><br><span class=\"line\">    //当服务器 被启动的时候，调用</span><br><span class=\"line\">    public void init(FilterConfig filterConfig) throws ServletException &#123; &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    //拦截的方法</span><br><span class=\"line\">    public void doFilter(ServletRequest req, ServletResponse res, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class=\"line\">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class=\"line\"> </span><br><span class=\"line\">        //解决跨域的问题 http://localhost:3030 为非同域名下的请求方</span><br><span class=\"line\">        response.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;http://localhost:3030&quot;);</span><br><span class=\"line\">        response.setHeader(&quot;Access-Control-Allow-Credentials&quot;,&quot;true&quot;);</span><br><span class=\"line\">        response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type,Content-Length, Authorization, Accept,X-Requested-With,X-App-Id, X-Token&quot;);</span><br><span class=\"line\">        response.setHeader(&quot;Access-Control-Allow-Methods&quot;,&quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class=\"line\">        response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">        String path = request.getRequestURI().substring(request.getContextPath().length()).replaceAll(&quot;[/]+$&quot;,&quot;&quot;);</span><br><span class=\"line\">        boolean allowePath =  ALLOWED_PATHS.contains(path);</span><br><span class=\"line\"> </span><br><span class=\"line\">        if (!allowePath) &#123;  //需要拦截的方法</span><br><span class=\"line\">            Object aa = request.getSession().getAttribute(&quot;user&quot;);</span><br><span class=\"line\">            if (aa != null) &#123;</span><br><span class=\"line\">                filterChain.doFilter(request,response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                response.getWriter().write(&quot;noLogin&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;  //不需要被拦截的方法</span><br><span class=\"line\">            //直接放行</span><br><span class=\"line\">            filterChain.doFilter(request,response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    //销毁时候调用的方法</span><br><span class=\"line\">    public void destroy() &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注解跨域过滤器</p>\n<p>spring版本4.2以上 注解源码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(&#123; ElementType.METHOD, ElementType.TYPE &#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">public @interface CrossOrigin &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] DEFAULT_ORIGINS = &#123; &quot;*&quot; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] DEFAULT_ALLOWED_HEADERS = &#123; &quot;*&quot; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    boolean DEFAULT_ALLOW_CREDENTIALS = true;</span><br><span class=\"line\"></span><br><span class=\"line\">    long DEFAULT_MAX_AGE = 1800;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 同origins属性一样</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @AliasFor(&quot;origins&quot;)</span><br><span class=\"line\">    String[] value() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 所有支持域的集合，例如&quot;http://domain1.com&quot;。</span><br><span class=\"line\">     * &lt;p&gt;这些值都显示在请求头中的Access-Control-Allow-Origin</span><br><span class=\"line\">     * &quot;*&quot;代表所有域的请求都支持</span><br><span class=\"line\">     * &lt;p&gt;如果没有定义，所有请求的域都支持</span><br><span class=\"line\">     * @see #value</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @AliasFor(&quot;value&quot;)</span><br><span class=\"line\">    String[] origins() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 允许请求头重的header，默认都支持</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String[] allowedHeaders() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 响应头中允许访问的header，默认为空</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String[] exposedHeaders() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 请求支持的方法，例如&quot;&#123;RequestMethod.GET, RequestMethod.POST&#125;&quot;&#125;。</span><br><span class=\"line\">     * 默认支持RequestMapping中设置的方法</span><br><span class=\"line\">     */</span><br><span class=\"line\">    RequestMethod[] methods() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 是否允许cookie随请求发送，使用时必须指定具体的域</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String allowCredentials() default &quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 预请求的结果的有效期，默认30分钟</span><br><span class=\"line\">     */</span><br><span class=\"line\">    long maxAge() default -1;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>实现\n\n在controller上添加该注解 表示 该注解的方法都接收origin跨域请求方的请求\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@CrossOrigin(origins = &quot;http://domain2.com&quot;, maxAge = 3600)</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@RequestMapping(&quot;/account&quot;)</span><br><span class=\"line\">public class AccountController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class=\"line\">    public Account retrieve(@PathVariable Long id) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(method = RequestMethod.DELETE, path = &quot;/&#123;id&#125;&quot;)</span><br><span class=\"line\">    public void remove(@PathVariable Long id) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n在方法上使用 表示单个方法允许跨域请求\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@CrossOrigin(maxAge = 3600)</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@RequestMapping(&quot;/account&quot;)</span><br><span class=\"line\">public class AccountController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @CrossOrigin(&quot;http://domain2.com&quot;)</span><br><span class=\"line\">    @RequestMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class=\"line\">    public Account retrieve(@PathVariable Long id) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(method = RequestMethod.DELETE, path = &quot;/&#123;id&#125;&quot;)</span><br><span class=\"line\">    public void remove(@PathVariable Long id) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n全局的跨域请求配置\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableWebMvc</span><br><span class=\"line\">public class WebConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class=\"line\">        registry.addMapping(&quot;/**&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n特定路径的CORS\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableWebMvc</span><br><span class=\"line\">public class WebConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class=\"line\">        registry.addMapping(&quot;/api/**&quot;)</span><br><span class=\"line\">            .allowedOrigins(&quot;http://domain2.com&quot;)</span><br><span class=\"line\">            .allowedMethods(&quot;PUT&quot;, &quot;DELETE&quot;)</span><br><span class=\"line\">            .allowedHeaders(&quot;header1&quot;, &quot;header2&quot;, &quot;header3&quot;)</span><br><span class=\"line\">            .exposedHeaders(&quot;header1&quot;, &quot;header2&quot;)</span><br><span class=\"line\">            .allowCredentials(false).maxAge(3600);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul>\n<li><p>springBoot配置跨域</p>\n<p>配置起来比较罗嗦</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class CorsConfig &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public CorsFilter corsFilter() &#123;</span><br><span class=\"line\">        //1.添加CORS配置信息</span><br><span class=\"line\">        CorsConfiguration config = new CorsConfiguration();</span><br><span class=\"line\">        //放行哪些原始域</span><br><span class=\"line\">        config.addAllowedOrigin(&quot;*&quot;);</span><br><span class=\"line\">        //是否发送Cookie信息</span><br><span class=\"line\">        config.setAllowCredentials(true);</span><br><span class=\"line\">        //放行哪些原始域(请求方式)</span><br><span class=\"line\">        config.addAllowedMethod(&quot;*&quot;);</span><br><span class=\"line\">        //放行哪些原始域(头部信息)</span><br><span class=\"line\">        config.addAllowedHeader(&quot;*&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        //2.添加映射路径</span><br><span class=\"line\">        UrlBasedCorsConfigurationSource configSource = new UrlBasedCorsConfigurationSource();</span><br><span class=\"line\">        configSource.registerCorsConfiguration(&quot;/**&quot;, config);</span><br><span class=\"line\"></span><br><span class=\"line\">        //3.返回新的CorsFilter.</span><br><span class=\"line\">        return new CorsFilter(configSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>nginx配置反向代理解决</p>\n<p>主要利用proxy_pass来解决</p>\n<p>修改前端nginx的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  front.github.com;</span><br><span class=\"line\">        access_log  logs/test.access.log;</span><br><span class=\"line\">        # 匹配以sso开头的请求</span><br><span class=\"line\">        location /sso &#123;</span><br><span class=\"line\">            proxy_pass http://background.baidu.com/;  #注意域名后有一个/</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root html/a;</span><br><span class=\"line\">            index index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>加上/的话 访问 backgroud.baidu.com/sso/login.html 获得预期的 backgroud.baidu.com/login.html</p>\n<p>不加/的话 访问 backgroud.baidu.com/sso/login.html 得到的是 backgroud.baidu.com/sso/login.html </p>\n<p>那么前端访问请求接口地址应该改为front.github.com/sso/login</p>\n<p><strong>需要注意的是当请求方需要携带cookies时候（Access-Control-Allow-Credentials”, “true”）进行访问跨域方时候 Access-Control-Allow-Origin 不能为*</strong></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>JavaWeb中的跨域</p>","more":"<p></p>\n<p>web开发中经常遇到跨域问题 一般分两种</p>\n<p>比如现在有一个前后端分离的项目，前端域名为front.github.com</p>\n<p>后端接口服务工程域名 为  backgroud.baidu.com</p>\n<p>当前端登录时候需要调用后端服务工程的一个接口 backgroud.baidu.com/sso/login</p>\n<ul>\n<li><p>后端代码添加跨域过滤器</p>\n<ul>\n<li><p>代码跨域过滤器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TokenFilter extends OncePerRequestFilter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void doFilterInternal(HttpServlet Requestrequest, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException &#123;</span><br><span class=\"line\">        // do something</span><br><span class=\"line\">        cors(request, response);</span><br><span class=\"line\">        // do something</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    private void cors(HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class=\"line\">        String allowOrigin = request.getHeader(&quot;Origin&quot;);</span><br><span class=\"line\">        String allowMethods = &quot;GET,PUT, POST, DELETE&quot;;</span><br><span class=\"line\">        String allowHeaders = &quot;Origin,No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified,Cache-Control, Expires, Content-Type, X-E4M-With&quot;;</span><br><span class=\"line\">        response.addHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</span><br><span class=\"line\">        response.addHeader(&quot;Access-Control-Allow-Headers&quot;, allowHeaders);</span><br><span class=\"line\">        response.addHeader(&quot;Access-Control-Allow-Methods&quot;, allowMethods);</span><br><span class=\"line\">        response.addHeader(&quot;Access-Control-Allow-Origin&quot;, allowOrigin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// /* 表示全部拦截</span><br><span class=\"line\">@WebFilter(filterName = &quot;loginFilter&quot;,urlPatterns = &quot;/*&quot;)</span><br><span class=\"line\">public class LoginFilter implements Filter &#123;</span><br><span class=\"line\">    //这里面 填写不需要 被拦截的地址</span><br><span class=\"line\">    private static final Set&lt;String&gt; ALLOWED_PATHS = Collections.unmodifiableSet(</span><br><span class=\"line\">            new HashSet&lt;String&gt;( Arrays.asList(&quot;/login&quot;,&quot;/isLogin&quot;,&quot;/findCategory&quot;) )</span><br><span class=\"line\">    );</span><br><span class=\"line\"> </span><br><span class=\"line\">    //初始化调用的方法</span><br><span class=\"line\">    //当服务器 被启动的时候，调用</span><br><span class=\"line\">    public void init(FilterConfig filterConfig) throws ServletException &#123; &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    //拦截的方法</span><br><span class=\"line\">    public void doFilter(ServletRequest req, ServletResponse res, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class=\"line\">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class=\"line\"> </span><br><span class=\"line\">        //解决跨域的问题 http://localhost:3030 为非同域名下的请求方</span><br><span class=\"line\">        response.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;http://localhost:3030&quot;);</span><br><span class=\"line\">        response.setHeader(&quot;Access-Control-Allow-Credentials&quot;,&quot;true&quot;);</span><br><span class=\"line\">        response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type,Content-Length, Authorization, Accept,X-Requested-With,X-App-Id, X-Token&quot;);</span><br><span class=\"line\">        response.setHeader(&quot;Access-Control-Allow-Methods&quot;,&quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class=\"line\">        response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">        String path = request.getRequestURI().substring(request.getContextPath().length()).replaceAll(&quot;[/]+$&quot;,&quot;&quot;);</span><br><span class=\"line\">        boolean allowePath =  ALLOWED_PATHS.contains(path);</span><br><span class=\"line\"> </span><br><span class=\"line\">        if (!allowePath) &#123;  //需要拦截的方法</span><br><span class=\"line\">            Object aa = request.getSession().getAttribute(&quot;user&quot;);</span><br><span class=\"line\">            if (aa != null) &#123;</span><br><span class=\"line\">                filterChain.doFilter(request,response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                response.getWriter().write(&quot;noLogin&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;  //不需要被拦截的方法</span><br><span class=\"line\">            //直接放行</span><br><span class=\"line\">            filterChain.doFilter(request,response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    //销毁时候调用的方法</span><br><span class=\"line\">    public void destroy() &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注解跨域过滤器</p>\n<p>spring版本4.2以上 注解源码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(&#123; ElementType.METHOD, ElementType.TYPE &#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">public @interface CrossOrigin &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] DEFAULT_ORIGINS = &#123; &quot;*&quot; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] DEFAULT_ALLOWED_HEADERS = &#123; &quot;*&quot; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    boolean DEFAULT_ALLOW_CREDENTIALS = true;</span><br><span class=\"line\"></span><br><span class=\"line\">    long DEFAULT_MAX_AGE = 1800;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 同origins属性一样</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @AliasFor(&quot;origins&quot;)</span><br><span class=\"line\">    String[] value() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 所有支持域的集合，例如&quot;http://domain1.com&quot;。</span><br><span class=\"line\">     * &lt;p&gt;这些值都显示在请求头中的Access-Control-Allow-Origin</span><br><span class=\"line\">     * &quot;*&quot;代表所有域的请求都支持</span><br><span class=\"line\">     * &lt;p&gt;如果没有定义，所有请求的域都支持</span><br><span class=\"line\">     * @see #value</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @AliasFor(&quot;value&quot;)</span><br><span class=\"line\">    String[] origins() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 允许请求头重的header，默认都支持</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String[] allowedHeaders() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 响应头中允许访问的header，默认为空</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String[] exposedHeaders() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 请求支持的方法，例如&quot;&#123;RequestMethod.GET, RequestMethod.POST&#125;&quot;&#125;。</span><br><span class=\"line\">     * 默认支持RequestMapping中设置的方法</span><br><span class=\"line\">     */</span><br><span class=\"line\">    RequestMethod[] methods() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 是否允许cookie随请求发送，使用时必须指定具体的域</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String allowCredentials() default &quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 预请求的结果的有效期，默认30分钟</span><br><span class=\"line\">     */</span><br><span class=\"line\">    long maxAge() default -1;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>实现\n\n在controller上添加该注解 表示 该注解的方法都接收origin跨域请求方的请求\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@CrossOrigin(origins = &quot;http://domain2.com&quot;, maxAge = 3600)</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@RequestMapping(&quot;/account&quot;)</span><br><span class=\"line\">public class AccountController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class=\"line\">    public Account retrieve(@PathVariable Long id) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(method = RequestMethod.DELETE, path = &quot;/&#123;id&#125;&quot;)</span><br><span class=\"line\">    public void remove(@PathVariable Long id) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n在方法上使用 表示单个方法允许跨域请求\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@CrossOrigin(maxAge = 3600)</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@RequestMapping(&quot;/account&quot;)</span><br><span class=\"line\">public class AccountController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @CrossOrigin(&quot;http://domain2.com&quot;)</span><br><span class=\"line\">    @RequestMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class=\"line\">    public Account retrieve(@PathVariable Long id) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(method = RequestMethod.DELETE, path = &quot;/&#123;id&#125;&quot;)</span><br><span class=\"line\">    public void remove(@PathVariable Long id) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n全局的跨域请求配置\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableWebMvc</span><br><span class=\"line\">public class WebConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class=\"line\">        registry.addMapping(&quot;/**&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n特定路径的CORS\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableWebMvc</span><br><span class=\"line\">public class WebConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class=\"line\">        registry.addMapping(&quot;/api/**&quot;)</span><br><span class=\"line\">            .allowedOrigins(&quot;http://domain2.com&quot;)</span><br><span class=\"line\">            .allowedMethods(&quot;PUT&quot;, &quot;DELETE&quot;)</span><br><span class=\"line\">            .allowedHeaders(&quot;header1&quot;, &quot;header2&quot;, &quot;header3&quot;)</span><br><span class=\"line\">            .exposedHeaders(&quot;header1&quot;, &quot;header2&quot;)</span><br><span class=\"line\">            .allowCredentials(false).maxAge(3600);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul>\n<li><p>springBoot配置跨域</p>\n<p>配置起来比较罗嗦</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class CorsConfig &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public CorsFilter corsFilter() &#123;</span><br><span class=\"line\">        //1.添加CORS配置信息</span><br><span class=\"line\">        CorsConfiguration config = new CorsConfiguration();</span><br><span class=\"line\">        //放行哪些原始域</span><br><span class=\"line\">        config.addAllowedOrigin(&quot;*&quot;);</span><br><span class=\"line\">        //是否发送Cookie信息</span><br><span class=\"line\">        config.setAllowCredentials(true);</span><br><span class=\"line\">        //放行哪些原始域(请求方式)</span><br><span class=\"line\">        config.addAllowedMethod(&quot;*&quot;);</span><br><span class=\"line\">        //放行哪些原始域(头部信息)</span><br><span class=\"line\">        config.addAllowedHeader(&quot;*&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        //2.添加映射路径</span><br><span class=\"line\">        UrlBasedCorsConfigurationSource configSource = new UrlBasedCorsConfigurationSource();</span><br><span class=\"line\">        configSource.registerCorsConfiguration(&quot;/**&quot;, config);</span><br><span class=\"line\"></span><br><span class=\"line\">        //3.返回新的CorsFilter.</span><br><span class=\"line\">        return new CorsFilter(configSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>nginx配置反向代理解决</p>\n<p>主要利用proxy_pass来解决</p>\n<p>修改前端nginx的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  front.github.com;</span><br><span class=\"line\">        access_log  logs/test.access.log;</span><br><span class=\"line\">        # 匹配以sso开头的请求</span><br><span class=\"line\">        location /sso &#123;</span><br><span class=\"line\">            proxy_pass http://background.baidu.com/;  #注意域名后有一个/</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root html/a;</span><br><span class=\"line\">            index index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>加上/的话 访问 backgroud.baidu.com/sso/login.html 获得预期的 backgroud.baidu.com/login.html</p>\n<p>不加/的话 访问 backgroud.baidu.com/sso/login.html 得到的是 backgroud.baidu.com/sso/login.html </p>\n<p>那么前端访问请求接口地址应该改为front.github.com/sso/login</p>\n<p><strong>需要注意的是当请求方需要携带cookies时候（Access-Control-Allow-Credentials”, “true”）进行访问跨域方时候 Access-Control-Allow-Origin 不能为*</strong></p>\n</li>\n</ul>"},{"title":"CentOs7安装Docker","date":"2018-03-09T13:44:07.000Z","_content":"\nCentOs7安装docker记录<!--more-->\n\n> 记录docker在centOs7的安装,以centos7minimal 1708为例\n\n### 安装\n\n *  ```\n    sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n    ```\n\n *  ```\n    sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n    ```\n\n* ```\n  sudo yum makecache fast\n\n  ```\n\n* ```\n  sudo yum install -y docker-ce\n  ```\n\n  ​","source":"_posts/CentOs7安装Docker.md","raw":"---\ntitle: CentOs7安装Docker\ndate: 2018-03-09 21:44:07\ncategories: [Linux]\ntags: [Linux]\n---\n\nCentOs7安装docker记录<!--more-->\n\n> 记录docker在centOs7的安装,以centos7minimal 1708为例\n\n### 安装\n\n *  ```\n    sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n    ```\n\n *  ```\n    sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n    ```\n\n* ```\n  sudo yum makecache fast\n\n  ```\n\n* ```\n  sudo yum install -y docker-ce\n  ```\n\n  ​","slug":"CentOs7安装Docker","published":1,"updated":"2022-09-03T07:30:55.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz82l0004twfabmg3cbav","content":"<p>CentOs7安装docker记录<a id=\"more\"></a></p>\n<blockquote>\n<p>记录docker在centOs7的安装,以centos7minimal 1708为例</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum makecache fast</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y docker-ce</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>CentOs7安装docker记录</p>","more":"<p></p>\n<blockquote>\n<p>记录docker在centOs7的安装,以centos7minimal 1708为例</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum makecache fast</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y docker-ce</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n</ul>"},{"title":"CassandraLinux服务端安装配置","date":"2019-01-21T14:40:52.000Z","_content":"\nCassandra服务端安装配置<!--more-->\n\n#### 下载\n\n使用安装包的方式安装\n\n```\nsudo apt-get update\n```\n\n```\nwget http://httpd-mirror.sergal.org/apache/cassandra/3.11.3/apache-cassandra-3.11.3-bin.tar.gz\n```\n\n```\ntar -zxvf apache-cassandra-3.11.3-bin.tar.gz\n```\n\n```\nmv apache-cassandra-3.11.3 cassandra3.11.3\n```\n\n#### 配置\n\n```\ncd /data/soft/cassandra/conf\n```\n\n* 设置数据存储目录\n\n  ```\n  mkdir /data/cassandra/data\n  mkdir /data/cassandra/commitlog\n  mkdir /data/cassandra/saved_caches\n  ```\n\n* 修改`cassandra.yaml`\n\n  ```\n  \n  # The name of the cluster. This is mainly used to prevent machines in\n  # one logical cluster from joining another.\n  # 集群的名称。 这主要用于防止一个逻辑集群中的机器加入另一个逻辑集群。\n  cluster_name: 'LASER-CLUSTER'\n  # This defines the number of tokens randomly assigned to this node on the ring\n  # The more tokens, relative to other nodes, the larger the proportion of data\n  # that this node will store. You probably want all nodes to have the same number\n  # of tokens assuming they have equal hardware capability.\n  #\n  # If you leave this unspecified, Cassandra will use the default of 1 token for legacy \n  # compatibility,\n  # and will use the initial_token as described below.\n  #\n  # Specifying initial_token will override this setting on the node's initial start,\n  # on subsequent starts, this setting will apply even if initial token is set.\n  #  \n  # If you already have a cluster with 1 token per node, and wish to migrate to \n  # multiple tokens per node, see http://wiki.apache.org/cassandra/Operations\n  # 定义了随机分配给环上该节点的令牌数。相对于其他节点，令牌数越多，该节点将存储的数据比例越大默认256\n  num_tokens: 256\n  # 默认注释的触发此节点的 num_tokens 令牌的自动分配。 分配算法尝试以优化数据中心中的节点上的复制负载# 的方式选择令牌，以用于指定的键空间使用的复制策略。仅支持 Murmur3Partitioner。默认值: KEYSPACE\n  # allocate_tokens_for_keyspace: KEYSPACE\n  # initial_token 允许您手动指定标记。 虽然您可以使用 vnodes（num_tokens> 1，上面） - 在这种情况\n  # 下，您应该提供一个逗号分隔的列表 - 它主要用于将节点添加到未启用 vnode 的旧群集。\n  # initial_token:\n  # 默认true，启用全局\n  hinted_handoff_enabled: true\n  max_hint_window_in_ms: 10800000 # 3 hours\n  # 每个传递线程的最大速度（KB）/ 秒。 这将与集群中的节点数成比例地减少\n  hinted_handoff_throttle_in_kb：1024\n  # 传递提示的线程数; 在进行多 dc（datacenter） 部署时，请考虑增加此数，cross-dc handoff tends to \n  # be slower\n  max_hints_delivery_threads：2\n  # 默认注释项，\n  hints_directory\n  # 内部缓冲区刷新到磁盘的频率。不会触发 fsync\n  hints_flush_period_in_ms\n  #单个文件的最大大小 默认128MB\n  max_hints_file_size_in_mb：128\n  # 默认注释项，压缩以应用于提示文件。 如果省略，hints 文件将被解压缩。支持 LZ4，Snappy 和 Deflate压 # 缩\n  hints_compression\n  \n  # Maximum throttle in KBs per second, total. This will be\n  # reduced proportionally to the number of nodes in the cluster.\n  # 最大速率（KB）/ 秒。当集群中节点数成比例减少时她也会下降\n  batchlog_replay_throttle_in_kb: 1024\n  \n  # 认证\n  #authenticator: AllowAllAuthenticator\n  authenticator: PasswordAuthenticator\n  # 授权\n  #authorizer: AllowAllAuthorizer\n  authorizer: PasswordAuthenticator\n  # 角色管理器\n  role_manager: CassandraRoleManager\n  # 角色缓存有效期\n  roles_validity_in_ms: 2000\n  # 默认注释 角色缓存的刷新间隔（如果已启用）默认为与 roles_validity_in_ms相同值\n  # roles_update_interval_in_ms: 2000\n  # 权限缓存时间间隔 当位0时候禁用\n  permissions_validity_in_ms: 2000\n  # 权限刷新时间间隔 默认注释\n  # permissions_update_interval_in_ms: 2000\n  # 凭证有效期\n  credentials_validity_in_ms: 2000\n  # 凭证更新周期\n  # credentials_update_interval_in_ms: 2000\n  # 分区器\n  partitioner: org.apache.cassandra.dht.Murmur3Partitioner\n  # Directories where Cassandra should store data on disk.  Cassandra\n  # will spread data evenly across them, subject to the granularity of\n  # the configured compaction strategy.\n  # If not set, the default directory is $CASSANDRA_HOME/data/data.\n  # 配置数据文件目录\n  data_file_directories: /data/cassandra/data\n  ...\n  # commit log.  when running on magnetic HDD, this should be a\n  # separate spindle than the data directories.\n  # If not set, the default directory is $CASSANDRA_HOME/data/commitlog.\n  # 配置日志文件目录\n  commitlog_directory: /data/cassandra/commitlog\n  # 每个节点上是否禁用cdc\n  cdc_enabled: false\n  # cdc raw 的目录\n  # cdc_raw_directory: /var/lib/cassandra/cdc_raw\n  # 磁盘错误策略 四种 自己看英文注释\n  disk_failure_policy: stop\n  #提交错误策略 四种 自己看英文注释\n  commit_failure_policy: stop\n  # 预编译缓存大小 默认位堆内存的1/256或者10mb，以两者中大者为准\n  prepared_statements_cache_size_mb:\n  #Thrift 预编译语句缓存的最大大小 默认同上\n  thrift_prepared_statements_cache_size_mb:\n  # 内存中密钥缓存的最大大小 默认位堆的5%或100mb以小者为准，0为禁用密钥缓存\n  key_cache_size_in_mb:\n  # 密钥缓存时间\n  key_cache_save_period: 14400\n  # 保存的秘钥数量 默认注释为保存所有\n  # key_cache_keys_to_save: 100\n  # 行缓存的实现类名（完全堆外行缓存实现默认）\n  # row_cache_class_name: org.apache.cassandra.cache.OHCProvider\n  # 行缓存大小 0为禁用\n  row_cache_size_in_mb: 0\n  # 行缓存周期 0位禁用\n  row_cache_save_period: 0\n  # 内存中计数器的缓存大小 堆的 2.5％和 50MB 中较小的值\n  counter_cache_size_in_mb:\n  # 内存计数器缓存时间\n  counter_cache_save_period: 7200\n  # 计数器缓存建的数量 注释为缓存所有\n  # counter_cache_keys_to_save: 100\n  # 缓存文件目录\n  saved_caches_directory: /data/cassandra/saved_caches\n  \n  \n  # periodic或batch默认batch 在批处理模式下，Cassandra 不会进行 ack 写操作，直到提交日志已经同步到\n  # 磁盘。它将在同步期间等待 \n  # commitlog_sync: batch\n  # commitlog_sync_batch_window_in_ms: 2\n  # 默认periodic 提交日志的同步刷新策略 及刷新时间间隔\n  commitlog_sync: periodic\n  commitlog_sync_period_in_ms: 10000\n  # 各个commitlog 文件段的大小\n  commitlog_segment_size_in_mb: 32\n  \n  \n  seed_provider:\n  \t    - class_name: org.apache.cassandra.locator.SimpleSeedProvider\n        parameters:\n            # seeds is actually a comma-delimited list of addresses.\n            # Ex: \"<ip1>,<ip2>,<ip3>\"\n            - seeds: \"127.0.0.1\"\n  \n  # 并行读写及计数器写的并发数\n  concurrent_reads: 32\n  concurrent_writes: 32\n  concurrent_counter_writes: 32\n  # 默认注释sstable池缓存及块缓存大小\n  # file_cache_size_in_mb: 512\n  # 当 sstable 缓冲池耗尽时是否使用heap\n  # buffer_pool_use_heap_if_exhausted: true\n  # ssd（对于固态磁盘，默认值）spin（用于机械磁盘） 默认注释 使用ssd\n  # disk_optimization_strategy: ssd\n  # 用于memtable的堆内存大小\n  # memtable_heap_space_in_mb: 2048\n  # memtable_offheap_space_in_mb: 2048\n  # 不推荐使用 memtable_cleanup_threshold。默认计算是唯一合理的选择\n  # memtable_cleanup_threshold: 0.11\n  # 指定 Cassandra 分配和管理 memtable 内存的方式。选项包括：heap_buffers（堆nio缓冲区）\n  # offheap_buffers(非堆直接缓冲区） offheap_objects（非堆对象）\t\n  memtable_allocation_type: heap_buffers\n  # 提交日志的总分配大小 8192默认\n  # commitlog_total_space_in_mb: 8192\n  # memtable的写及刷新的线程数\n  #memtable_flush_writers: 2\n  # cdc总分配数\n  # cdc_total_space_in_mb: 4096\n  # 检查是否有任何新的 cdc-tracked 表空间可用的时间间隔\n  # cdc_free_space_check_interval_ms: 250\n  # sstable固定内存池大小 默认5%\n  index_summary_capacity_in_mb:\n  # 固定内存池重新分配时间间隔\n  index_summary_resize_interval_in_minutes: 60\n  # 顺序写入时将间隔时间设置为 fsync及刷新的kb大小阈值\n  trickle_fsync: false\n  trickle_fsync_interval_in_kb: 10240\n  \n  \n  \n  # TCP 端口，用于命令和数据, 出于安全原因不应将此端口公开到互联网如果必须公开到互联网需要打开防火墙\n  storage_port: 7000\n  # ssl端口 加密通信\n  ssl_storage_port: 7001\n  # 绑定地址或接口并告诉其他 Cassandra 节点连接到该地址或接口 设置 listen_address 或 \n  # listen_interface 其中之一，不要对两者都进行设置\n  listen_address: localhost\n  # listen_interface: eth0\n  # listen_interface_prefer_ipv6: false\n  # 要广播到其他 Cassandra 节点的地址保留此空白将将其设置为与 listen_address 相同的值\n  # broadcast_address: 1.2.3.4\n  # listen_on_broadcast_address: false\n  # Internode 后端认证\n  # internode_authenticator: org.apache.cassandra.auth.AllowAllInternodeAuthenticator\n  # 是否启动本地传输服务器。 请注意，本地传输绑定的地址与 rpc_address 相同。端口不同，下面指定。\n  start_native_transport: true\n  #  CQL本地传输监听客户端\n  native_transport_port: 9042\n  # 本地ssl传输端口\n  # native_transport_port_ssl: 9142\n  # 传输允许的帧的最大大小\n  # native_transport_max_frame_size_in_mb: 256\n  # 使用本地传输时处理请求的最大线程数\n  # native_transport_max_threads: 128\n  # 本地传输最大并发线程数 -1默认 默认不限制\n  # native_transport_max_concurrent_connections: -1\n  # 每个ip本地传输最大并发线程数 -1默认 默认不限制\n  # native_transport_max_concurrent_connections_per_ip: -1\n  \n  \n  #是否启动 thrift rpc 服务器\n  start_rpc: false\n  rpc_address: localhost\n  # rpc_interface_prefer_ipv6: false\n  rpc_port: 9160\n  # broadcast_rpc_address: 1.2.3.4\n  rpc_keepalive: true\n  # sync同步 hsha半同步半异步\n  rpc_server_type: sync\n  # rpc_min_threads: 16\n  # rpc_max_threads: 2048\n  # rpc_send_buff_size_in_bytes:\n  # rpc_recv_buff_size_in_bytes:\n  # internode_send_buff_size_in_bytes:\n  # internode_recv_buff_size_in_bytes:\n  thrift_framed_transport_size_in_mb: 15\n  \n  \n  incremental_backups: false\n  snapshot_before_compaction: false\n  # 删除数据前是否自动快照\n  auto_snapshot: true\n  # 分区中行的排序规则索引的粒度\n  column_index_size_in_kb: 64\n  # 每个超过此大小的索引的索引缓存条目（上述内存中的排序规则索引）不会在堆上保留\n  column_index_cache_size_in_kb: 2\n  # 并行允许压缩的数量\n  #concurrent_compactors: 1\n  # 调节压缩到整个系统的给定总吞吐量\n  compaction_throughput_mb_per_sec: 16\n  # \n  sstable_preemptive_open_interval_in_mb: 50\n  # stream_throughput_outbound_megabits_per_sec: 200\n  # inter_dc_stream_throughput_outbound_megabits_per_sec: 200\n  \n  \n  # 读超时\n  read_request_timeout_in_ms: 5000\n  # How long the coordinator should wait for seq or index scans to complete\n  # 索引排序超时\n  range_request_timeout_in_ms: 10000\n  # 写超时\n  # How long the coordinator should wait for writes to complete\n  write_request_timeout_in_ms: 2000\n  # 计数器超时\n  # How long the coordinator should wait for counter writes to complete\n  counter_write_request_timeout_in_ms: 5000\n  # cas竞争超时\n  # How long a coordinator should continue to retry a CAS operation\n  # that contends with other proposals for the same row\n  cas_contention_timeout_in_ms: 1000\n  # 删除截断超时\n  # How long the coordinator should wait for truncates to complete\n  # (This can be much longer, because unless auto_snapshot is disabled\n  # we need to flush first so we can snapshot before removing the data.)\n  truncate_request_timeout_in_ms: 60000\n  # 其他操作默认超时\n  # The default timeout for other, miscellaneous operations\n  request_timeout_in_ms: 10000\n  # 节点间信息交换超时 默认false\n  cross_node_timeout: false\n  # 设置流的保持活动周期\n  # streaming_keep_alive_period_in_secs: 300\n  # \n  # phi_convict_threshold: 8\n  # \n  endpoint_snitch: SimpleSnitch\n  # 控制执行主机分数计算的较耗费资源部分的频率\n  dynamic_snitch_update_interval_in_ms: 100\n  # 控制重置所有主机分数的频率，允许坏主机可恢复\n  dynamic_snitch_reset_interval_in_ms: 600000\n  # \n  dynamic_snitch_badness_threshold: 0.1\n  \n  # 处理客户端请求的调度类：NoScheduler无选项，RoundRobin.throttle_limit限制请求数超过排队，RoundRobin.default_weight默认权重，RoundRobin.weights使用权重 （RoundRobinPolicy）\n  request_scheduler: org.apache.cassandra.scheduler.NoScheduler\n  # request_scheduler_options:\n  #    throttle_limit: 80\n  #    default_weight: 5\n  #    weights:\n  #      Keyspace1: 1\n  #      Keyspace2: 5\n  # 默认的keyspace\n  # request_scheduler_id -- An identifier based on which to perform\n  # the request scheduling. Currently the only valid option is keyspace.\n  # request_scheduler_id: keyspace\n  \n  \n  \n  # server加密\n  server_encryption_options:\n      internode_encryption: none\n      keystore: conf/.keystore\n      keystore_password: cassandra\n      truststore: conf/.truststore\n      truststore_password: cassandra\n      # More advanced defaults below:\n      # protocol: TLS\n      # algorithm: SunX509\n      # store_type: JKS\n      # cipher_suites: [TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA]\n      # require_client_auth: false\n      # require_endpoint_verification: false\n  \n  # enable or disable client/server encryption.\n  # 客户端加密\n  client_encryption_options:\n      enabled: false\n      # If enabled and optional is set to true encrypted and unencrypted connections are handled.\n      optional: false\n      keystore: conf/.keystore\n      keystore_password: cassandra\n      # require_client_auth: false\n      # Set trustore and truststore_password if require_client_auth is true\n      # truststore: conf/.truststore\n      # truststore_password: cassandra\n      # More advanced defaults below:\n      # protocol: TLS\n      # algorithm: SunX509\n      # store_type: JKS\n      # cipher_suites: [TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA]\n  \n  #  控制节点之间的流量是否被压缩。 可以是:all（所有），dc(dc之间压缩)，none(不压缩)\n  internode_compression: dc\n  # \n  inter_dc_tcp_nodelay: false\n  # \n  # TTL for different trace types used during logging of the repair process.\n  tracetype_query_ttl: 86400\n  tracetype_repair_ttl: 604800\n  \n  #\n  enable_user_defined_functions: false\n  #\n  enable_scripted_user_defined_functions: false\n  # \n  enable_materialized_views: true\n  # \n  windows_timer_interval: 1\n  \n  # 静态数据加密\n  transparent_data_encryption_options:\n      enabled: false\n      chunk_length_kb: 64\n      cipher: AES/CBC/PKCS5Padding\n      key_alias: testing:1\n      # CBC IV length for AES needs to be 16 bytes (which is also the default size)\n      # iv_length: 16\n      key_provider:\n        - class_name: org.apache.cassandra.security.JKSKeyProvider\n          parameters:\n            - keystore: conf/.keystore\n              keystore_password: cassandra\n              store_type: JCEKS\n              key_password: cassandra\n    \n    \n  # \n  tombstone_warn_threshold: 1000\n  tombstone_failure_threshold: 100000\n  batch_size_warn_threshold_in_kb: 5\n  batch_size_fail_threshold_in_kb: 50\n  unlogged_batch_across_partitions_warn_threshold: 10\n  compaction_large_partition_warning_threshold_mb: 100\n  gc_warn_threshold_in_ms: 1000\n  # SSTables 中的任何值的最大大小\n  # max_value_size_in_mb: 256\n  # 背压\n  back_pressure_enabled: false\n  #背压策略 看英文注释\n  back_pressure_strategy:\n      - class_name: org.apache.cassandra.net.RateBasedBackPressure\n        parameters:\n          - high_ratio: 0.90\n            factor: 5\n            flow: FAST\n  \n  ```\n\n* 配置项\n\n  ```\n  cluster_name: 'xxx' #集群名\n  data_file_directories: #数据目录\n      - /data/cassandra/data\n      \n  commitlog_directory: /data/cassandra/commitlog #提交日志目录\n  \n  saved_caches_directory: /data/cassandra/saved_caches #缓存目录\n  \n  - seeds: \"127.0.0.1\" #集群种子节点 多个用，隔开\n  \n  listen_address: 127.0.0.1 #监听的ip或者主机的ip\n  \n  rpc_address: 127.0.0.1 #监听客户端链接地址，设置0.0.0.0的话放开broadcast_rpc_address注释\n  ```\n\n  \n\n* 启动\n\n  ```\n  ./cassandra -R\n  ```\n\n* 报错\n\n  问题1\n\n  ```\n  4691; No single argument constructor found for class [Ljava.lang.String;;  in 'reader', line 10, column 1:\n      cluster_name: LASER-CLUSTER\n  \n  ```\n\n  解决\n\n  ```\n  #配置数据文件目录\n  data_file_directories:\n  - /data/cassandra/data\n  ```\n\n  问题2\n\n  ```\n  Exception (java.lang.ClassCastException) encountered during startup: org.apache.cassandra.auth.PasswordAuthenticator cannot be cast to org.apache.cassandra.auth.IAuthorizer\n  java.lang.ClassCastException: org.apache.cassandra.auth.PasswordAuthenticator cannot be cast to org.apache.cassandra.auth.IAuthorizer\n  \tat org.apache.cassandra.utils.FBUtilities.newAuthorizer(FBUtilities.java:473)\n  \tat org.apache.cassandra.auth.AuthConfig.applyAuth(AuthConfig.java:75)\n  \tat org.apache.cassandra.config.DatabaseDescriptor.daemonInitialization(DatabaseDescriptor.java:143)\n  \tat org.apache.cassandra.service.CassandraDaemon.applyConfig(CassandraDaemon.java:647)\n  \tat org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:582)\n  \tat org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:691)\n  ERROR [main] 2019-01-21 08:46:16,115 CassandraDaemon.java:708 - Exception encountered during startup\n  java.lang.ClassCastException: org.apache.cassandra.auth.PasswordAuthenticator cannot be cast to org.apache.cassandra.auth.IAuthorizer\n  \tat org.apache.cassandra.utils.FBUtilities.newAuthorizer(FBUtilities.java:473) ~[apache-cassandra-3.11.3.jar:3.11.3]\n  \tat org.apache.cassandra.auth.AuthConfig.applyAuth(AuthConfig.java:75) ~[apache-cassandra-3.11.3.jar:3.11.3]\n  \tat org.apache.cassandra.config.DatabaseDescriptor.daemonInitialization(DatabaseDescriptor.java:143) ~[apache-cassandra-3.11.3.jar:3.11.3]\n  \tat org.apache.cassandra.service.CassandraDaemon.applyConfig(CassandraDaemon.java:647) [apache-cassandra-3.11.3.jar:3.11.3]\n  \tat org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:582) [apache-cassandra-3.11.3.jar:3.11.3]\n  \tat org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:691) [apache-cassandra-3.11.3.jar:3.11.3]\n  ```\n\n  解决:照着注释改\n\n  ```\n  \n  # Authentication backend, implementing IAuthenticator; used to identify users\n  # Out of the box, Cassandra provides org.apache.cassandra.auth.{AllowAllAuthenticator,\n  # PasswordAuthenticator}.\n  #\n  # - AllowAllAuthenticator performs no checks - set it to disable authentication.\n  # - PasswordAuthenticator relies on username/password pairs to authenticate\n  #   users. It keeps usernames and hashed passwords in system_auth.roles table.\n  #   Please increase system_auth keyspace replication factor if you use this authenticator.\n  #   If using PasswordAuthenticator, CassandraRoleManager must also be used (see below)\n  #authenticator: AllowAllAuthenticator\n  authenticator: PasswordAuthenticator\n  # Authorization backend, implementing IAuthorizer; used to limit access/provide permissions\n  # Out of the box, Cassandra provides org.apache.cassandra.auth.{AllowAllAuthorizer,\n  # CassandraAuthorizer}.\n  #\n  # - AllowAllAuthorizer allows any action to any user - set it to disable authorization.\n  # - CassandraAuthorizer stores permissions in system_auth.role_permissions table. Please\n  #   increase system_auth keyspace replication factor if you use this authorizer.\n  #authorizer: AllowAllAuthorizer\n  authorizer: CassandraAuthorizer\n  \n  ```\n\n#### 登录\n\n```\n./cqlsh -ucassandra -pcassandra\n```\n\n* 创建超级用户\n\n  ```\n  CREATE USER andy WITH PASSWORD '123456' SUPERUSER;   \n  ```\n\n* 创建普通用户\n\n  ```\n  CREATE USER test1 WITH PASSWORD '123456' NOSUPERUSER;   \n  ```\n\n* 修改用户\n\n  ```\n   ALTER USER test WITH PASSWORD '654321';\n  ```\n\n* 删除用户\n\n  ```\n  DROP USER cassandra; //不能删除当前登录的用户\n  ```\n\n  \n\n**恭喜您！安装成功！下一篇讲java客户端与cqlsh。**","source":"_posts/CassandraLinux服务端安装配置.md","raw":"---\ntitle: CassandraLinux服务端安装配置\ndate: 2019-01-21 22:40:52\ntags: [Cassandra]\ncategories: [Cassandra]\n---\n\nCassandra服务端安装配置<!--more-->\n\n#### 下载\n\n使用安装包的方式安装\n\n```\nsudo apt-get update\n```\n\n```\nwget http://httpd-mirror.sergal.org/apache/cassandra/3.11.3/apache-cassandra-3.11.3-bin.tar.gz\n```\n\n```\ntar -zxvf apache-cassandra-3.11.3-bin.tar.gz\n```\n\n```\nmv apache-cassandra-3.11.3 cassandra3.11.3\n```\n\n#### 配置\n\n```\ncd /data/soft/cassandra/conf\n```\n\n* 设置数据存储目录\n\n  ```\n  mkdir /data/cassandra/data\n  mkdir /data/cassandra/commitlog\n  mkdir /data/cassandra/saved_caches\n  ```\n\n* 修改`cassandra.yaml`\n\n  ```\n  \n  # The name of the cluster. This is mainly used to prevent machines in\n  # one logical cluster from joining another.\n  # 集群的名称。 这主要用于防止一个逻辑集群中的机器加入另一个逻辑集群。\n  cluster_name: 'LASER-CLUSTER'\n  # This defines the number of tokens randomly assigned to this node on the ring\n  # The more tokens, relative to other nodes, the larger the proportion of data\n  # that this node will store. You probably want all nodes to have the same number\n  # of tokens assuming they have equal hardware capability.\n  #\n  # If you leave this unspecified, Cassandra will use the default of 1 token for legacy \n  # compatibility,\n  # and will use the initial_token as described below.\n  #\n  # Specifying initial_token will override this setting on the node's initial start,\n  # on subsequent starts, this setting will apply even if initial token is set.\n  #  \n  # If you already have a cluster with 1 token per node, and wish to migrate to \n  # multiple tokens per node, see http://wiki.apache.org/cassandra/Operations\n  # 定义了随机分配给环上该节点的令牌数。相对于其他节点，令牌数越多，该节点将存储的数据比例越大默认256\n  num_tokens: 256\n  # 默认注释的触发此节点的 num_tokens 令牌的自动分配。 分配算法尝试以优化数据中心中的节点上的复制负载# 的方式选择令牌，以用于指定的键空间使用的复制策略。仅支持 Murmur3Partitioner。默认值: KEYSPACE\n  # allocate_tokens_for_keyspace: KEYSPACE\n  # initial_token 允许您手动指定标记。 虽然您可以使用 vnodes（num_tokens> 1，上面） - 在这种情况\n  # 下，您应该提供一个逗号分隔的列表 - 它主要用于将节点添加到未启用 vnode 的旧群集。\n  # initial_token:\n  # 默认true，启用全局\n  hinted_handoff_enabled: true\n  max_hint_window_in_ms: 10800000 # 3 hours\n  # 每个传递线程的最大速度（KB）/ 秒。 这将与集群中的节点数成比例地减少\n  hinted_handoff_throttle_in_kb：1024\n  # 传递提示的线程数; 在进行多 dc（datacenter） 部署时，请考虑增加此数，cross-dc handoff tends to \n  # be slower\n  max_hints_delivery_threads：2\n  # 默认注释项，\n  hints_directory\n  # 内部缓冲区刷新到磁盘的频率。不会触发 fsync\n  hints_flush_period_in_ms\n  #单个文件的最大大小 默认128MB\n  max_hints_file_size_in_mb：128\n  # 默认注释项，压缩以应用于提示文件。 如果省略，hints 文件将被解压缩。支持 LZ4，Snappy 和 Deflate压 # 缩\n  hints_compression\n  \n  # Maximum throttle in KBs per second, total. This will be\n  # reduced proportionally to the number of nodes in the cluster.\n  # 最大速率（KB）/ 秒。当集群中节点数成比例减少时她也会下降\n  batchlog_replay_throttle_in_kb: 1024\n  \n  # 认证\n  #authenticator: AllowAllAuthenticator\n  authenticator: PasswordAuthenticator\n  # 授权\n  #authorizer: AllowAllAuthorizer\n  authorizer: PasswordAuthenticator\n  # 角色管理器\n  role_manager: CassandraRoleManager\n  # 角色缓存有效期\n  roles_validity_in_ms: 2000\n  # 默认注释 角色缓存的刷新间隔（如果已启用）默认为与 roles_validity_in_ms相同值\n  # roles_update_interval_in_ms: 2000\n  # 权限缓存时间间隔 当位0时候禁用\n  permissions_validity_in_ms: 2000\n  # 权限刷新时间间隔 默认注释\n  # permissions_update_interval_in_ms: 2000\n  # 凭证有效期\n  credentials_validity_in_ms: 2000\n  # 凭证更新周期\n  # credentials_update_interval_in_ms: 2000\n  # 分区器\n  partitioner: org.apache.cassandra.dht.Murmur3Partitioner\n  # Directories where Cassandra should store data on disk.  Cassandra\n  # will spread data evenly across them, subject to the granularity of\n  # the configured compaction strategy.\n  # If not set, the default directory is $CASSANDRA_HOME/data/data.\n  # 配置数据文件目录\n  data_file_directories: /data/cassandra/data\n  ...\n  # commit log.  when running on magnetic HDD, this should be a\n  # separate spindle than the data directories.\n  # If not set, the default directory is $CASSANDRA_HOME/data/commitlog.\n  # 配置日志文件目录\n  commitlog_directory: /data/cassandra/commitlog\n  # 每个节点上是否禁用cdc\n  cdc_enabled: false\n  # cdc raw 的目录\n  # cdc_raw_directory: /var/lib/cassandra/cdc_raw\n  # 磁盘错误策略 四种 自己看英文注释\n  disk_failure_policy: stop\n  #提交错误策略 四种 自己看英文注释\n  commit_failure_policy: stop\n  # 预编译缓存大小 默认位堆内存的1/256或者10mb，以两者中大者为准\n  prepared_statements_cache_size_mb:\n  #Thrift 预编译语句缓存的最大大小 默认同上\n  thrift_prepared_statements_cache_size_mb:\n  # 内存中密钥缓存的最大大小 默认位堆的5%或100mb以小者为准，0为禁用密钥缓存\n  key_cache_size_in_mb:\n  # 密钥缓存时间\n  key_cache_save_period: 14400\n  # 保存的秘钥数量 默认注释为保存所有\n  # key_cache_keys_to_save: 100\n  # 行缓存的实现类名（完全堆外行缓存实现默认）\n  # row_cache_class_name: org.apache.cassandra.cache.OHCProvider\n  # 行缓存大小 0为禁用\n  row_cache_size_in_mb: 0\n  # 行缓存周期 0位禁用\n  row_cache_save_period: 0\n  # 内存中计数器的缓存大小 堆的 2.5％和 50MB 中较小的值\n  counter_cache_size_in_mb:\n  # 内存计数器缓存时间\n  counter_cache_save_period: 7200\n  # 计数器缓存建的数量 注释为缓存所有\n  # counter_cache_keys_to_save: 100\n  # 缓存文件目录\n  saved_caches_directory: /data/cassandra/saved_caches\n  \n  \n  # periodic或batch默认batch 在批处理模式下，Cassandra 不会进行 ack 写操作，直到提交日志已经同步到\n  # 磁盘。它将在同步期间等待 \n  # commitlog_sync: batch\n  # commitlog_sync_batch_window_in_ms: 2\n  # 默认periodic 提交日志的同步刷新策略 及刷新时间间隔\n  commitlog_sync: periodic\n  commitlog_sync_period_in_ms: 10000\n  # 各个commitlog 文件段的大小\n  commitlog_segment_size_in_mb: 32\n  \n  \n  seed_provider:\n  \t    - class_name: org.apache.cassandra.locator.SimpleSeedProvider\n        parameters:\n            # seeds is actually a comma-delimited list of addresses.\n            # Ex: \"<ip1>,<ip2>,<ip3>\"\n            - seeds: \"127.0.0.1\"\n  \n  # 并行读写及计数器写的并发数\n  concurrent_reads: 32\n  concurrent_writes: 32\n  concurrent_counter_writes: 32\n  # 默认注释sstable池缓存及块缓存大小\n  # file_cache_size_in_mb: 512\n  # 当 sstable 缓冲池耗尽时是否使用heap\n  # buffer_pool_use_heap_if_exhausted: true\n  # ssd（对于固态磁盘，默认值）spin（用于机械磁盘） 默认注释 使用ssd\n  # disk_optimization_strategy: ssd\n  # 用于memtable的堆内存大小\n  # memtable_heap_space_in_mb: 2048\n  # memtable_offheap_space_in_mb: 2048\n  # 不推荐使用 memtable_cleanup_threshold。默认计算是唯一合理的选择\n  # memtable_cleanup_threshold: 0.11\n  # 指定 Cassandra 分配和管理 memtable 内存的方式。选项包括：heap_buffers（堆nio缓冲区）\n  # offheap_buffers(非堆直接缓冲区） offheap_objects（非堆对象）\t\n  memtable_allocation_type: heap_buffers\n  # 提交日志的总分配大小 8192默认\n  # commitlog_total_space_in_mb: 8192\n  # memtable的写及刷新的线程数\n  #memtable_flush_writers: 2\n  # cdc总分配数\n  # cdc_total_space_in_mb: 4096\n  # 检查是否有任何新的 cdc-tracked 表空间可用的时间间隔\n  # cdc_free_space_check_interval_ms: 250\n  # sstable固定内存池大小 默认5%\n  index_summary_capacity_in_mb:\n  # 固定内存池重新分配时间间隔\n  index_summary_resize_interval_in_minutes: 60\n  # 顺序写入时将间隔时间设置为 fsync及刷新的kb大小阈值\n  trickle_fsync: false\n  trickle_fsync_interval_in_kb: 10240\n  \n  \n  \n  # TCP 端口，用于命令和数据, 出于安全原因不应将此端口公开到互联网如果必须公开到互联网需要打开防火墙\n  storage_port: 7000\n  # ssl端口 加密通信\n  ssl_storage_port: 7001\n  # 绑定地址或接口并告诉其他 Cassandra 节点连接到该地址或接口 设置 listen_address 或 \n  # listen_interface 其中之一，不要对两者都进行设置\n  listen_address: localhost\n  # listen_interface: eth0\n  # listen_interface_prefer_ipv6: false\n  # 要广播到其他 Cassandra 节点的地址保留此空白将将其设置为与 listen_address 相同的值\n  # broadcast_address: 1.2.3.4\n  # listen_on_broadcast_address: false\n  # Internode 后端认证\n  # internode_authenticator: org.apache.cassandra.auth.AllowAllInternodeAuthenticator\n  # 是否启动本地传输服务器。 请注意，本地传输绑定的地址与 rpc_address 相同。端口不同，下面指定。\n  start_native_transport: true\n  #  CQL本地传输监听客户端\n  native_transport_port: 9042\n  # 本地ssl传输端口\n  # native_transport_port_ssl: 9142\n  # 传输允许的帧的最大大小\n  # native_transport_max_frame_size_in_mb: 256\n  # 使用本地传输时处理请求的最大线程数\n  # native_transport_max_threads: 128\n  # 本地传输最大并发线程数 -1默认 默认不限制\n  # native_transport_max_concurrent_connections: -1\n  # 每个ip本地传输最大并发线程数 -1默认 默认不限制\n  # native_transport_max_concurrent_connections_per_ip: -1\n  \n  \n  #是否启动 thrift rpc 服务器\n  start_rpc: false\n  rpc_address: localhost\n  # rpc_interface_prefer_ipv6: false\n  rpc_port: 9160\n  # broadcast_rpc_address: 1.2.3.4\n  rpc_keepalive: true\n  # sync同步 hsha半同步半异步\n  rpc_server_type: sync\n  # rpc_min_threads: 16\n  # rpc_max_threads: 2048\n  # rpc_send_buff_size_in_bytes:\n  # rpc_recv_buff_size_in_bytes:\n  # internode_send_buff_size_in_bytes:\n  # internode_recv_buff_size_in_bytes:\n  thrift_framed_transport_size_in_mb: 15\n  \n  \n  incremental_backups: false\n  snapshot_before_compaction: false\n  # 删除数据前是否自动快照\n  auto_snapshot: true\n  # 分区中行的排序规则索引的粒度\n  column_index_size_in_kb: 64\n  # 每个超过此大小的索引的索引缓存条目（上述内存中的排序规则索引）不会在堆上保留\n  column_index_cache_size_in_kb: 2\n  # 并行允许压缩的数量\n  #concurrent_compactors: 1\n  # 调节压缩到整个系统的给定总吞吐量\n  compaction_throughput_mb_per_sec: 16\n  # \n  sstable_preemptive_open_interval_in_mb: 50\n  # stream_throughput_outbound_megabits_per_sec: 200\n  # inter_dc_stream_throughput_outbound_megabits_per_sec: 200\n  \n  \n  # 读超时\n  read_request_timeout_in_ms: 5000\n  # How long the coordinator should wait for seq or index scans to complete\n  # 索引排序超时\n  range_request_timeout_in_ms: 10000\n  # 写超时\n  # How long the coordinator should wait for writes to complete\n  write_request_timeout_in_ms: 2000\n  # 计数器超时\n  # How long the coordinator should wait for counter writes to complete\n  counter_write_request_timeout_in_ms: 5000\n  # cas竞争超时\n  # How long a coordinator should continue to retry a CAS operation\n  # that contends with other proposals for the same row\n  cas_contention_timeout_in_ms: 1000\n  # 删除截断超时\n  # How long the coordinator should wait for truncates to complete\n  # (This can be much longer, because unless auto_snapshot is disabled\n  # we need to flush first so we can snapshot before removing the data.)\n  truncate_request_timeout_in_ms: 60000\n  # 其他操作默认超时\n  # The default timeout for other, miscellaneous operations\n  request_timeout_in_ms: 10000\n  # 节点间信息交换超时 默认false\n  cross_node_timeout: false\n  # 设置流的保持活动周期\n  # streaming_keep_alive_period_in_secs: 300\n  # \n  # phi_convict_threshold: 8\n  # \n  endpoint_snitch: SimpleSnitch\n  # 控制执行主机分数计算的较耗费资源部分的频率\n  dynamic_snitch_update_interval_in_ms: 100\n  # 控制重置所有主机分数的频率，允许坏主机可恢复\n  dynamic_snitch_reset_interval_in_ms: 600000\n  # \n  dynamic_snitch_badness_threshold: 0.1\n  \n  # 处理客户端请求的调度类：NoScheduler无选项，RoundRobin.throttle_limit限制请求数超过排队，RoundRobin.default_weight默认权重，RoundRobin.weights使用权重 （RoundRobinPolicy）\n  request_scheduler: org.apache.cassandra.scheduler.NoScheduler\n  # request_scheduler_options:\n  #    throttle_limit: 80\n  #    default_weight: 5\n  #    weights:\n  #      Keyspace1: 1\n  #      Keyspace2: 5\n  # 默认的keyspace\n  # request_scheduler_id -- An identifier based on which to perform\n  # the request scheduling. Currently the only valid option is keyspace.\n  # request_scheduler_id: keyspace\n  \n  \n  \n  # server加密\n  server_encryption_options:\n      internode_encryption: none\n      keystore: conf/.keystore\n      keystore_password: cassandra\n      truststore: conf/.truststore\n      truststore_password: cassandra\n      # More advanced defaults below:\n      # protocol: TLS\n      # algorithm: SunX509\n      # store_type: JKS\n      # cipher_suites: [TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA]\n      # require_client_auth: false\n      # require_endpoint_verification: false\n  \n  # enable or disable client/server encryption.\n  # 客户端加密\n  client_encryption_options:\n      enabled: false\n      # If enabled and optional is set to true encrypted and unencrypted connections are handled.\n      optional: false\n      keystore: conf/.keystore\n      keystore_password: cassandra\n      # require_client_auth: false\n      # Set trustore and truststore_password if require_client_auth is true\n      # truststore: conf/.truststore\n      # truststore_password: cassandra\n      # More advanced defaults below:\n      # protocol: TLS\n      # algorithm: SunX509\n      # store_type: JKS\n      # cipher_suites: [TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA]\n  \n  #  控制节点之间的流量是否被压缩。 可以是:all（所有），dc(dc之间压缩)，none(不压缩)\n  internode_compression: dc\n  # \n  inter_dc_tcp_nodelay: false\n  # \n  # TTL for different trace types used during logging of the repair process.\n  tracetype_query_ttl: 86400\n  tracetype_repair_ttl: 604800\n  \n  #\n  enable_user_defined_functions: false\n  #\n  enable_scripted_user_defined_functions: false\n  # \n  enable_materialized_views: true\n  # \n  windows_timer_interval: 1\n  \n  # 静态数据加密\n  transparent_data_encryption_options:\n      enabled: false\n      chunk_length_kb: 64\n      cipher: AES/CBC/PKCS5Padding\n      key_alias: testing:1\n      # CBC IV length for AES needs to be 16 bytes (which is also the default size)\n      # iv_length: 16\n      key_provider:\n        - class_name: org.apache.cassandra.security.JKSKeyProvider\n          parameters:\n            - keystore: conf/.keystore\n              keystore_password: cassandra\n              store_type: JCEKS\n              key_password: cassandra\n    \n    \n  # \n  tombstone_warn_threshold: 1000\n  tombstone_failure_threshold: 100000\n  batch_size_warn_threshold_in_kb: 5\n  batch_size_fail_threshold_in_kb: 50\n  unlogged_batch_across_partitions_warn_threshold: 10\n  compaction_large_partition_warning_threshold_mb: 100\n  gc_warn_threshold_in_ms: 1000\n  # SSTables 中的任何值的最大大小\n  # max_value_size_in_mb: 256\n  # 背压\n  back_pressure_enabled: false\n  #背压策略 看英文注释\n  back_pressure_strategy:\n      - class_name: org.apache.cassandra.net.RateBasedBackPressure\n        parameters:\n          - high_ratio: 0.90\n            factor: 5\n            flow: FAST\n  \n  ```\n\n* 配置项\n\n  ```\n  cluster_name: 'xxx' #集群名\n  data_file_directories: #数据目录\n      - /data/cassandra/data\n      \n  commitlog_directory: /data/cassandra/commitlog #提交日志目录\n  \n  saved_caches_directory: /data/cassandra/saved_caches #缓存目录\n  \n  - seeds: \"127.0.0.1\" #集群种子节点 多个用，隔开\n  \n  listen_address: 127.0.0.1 #监听的ip或者主机的ip\n  \n  rpc_address: 127.0.0.1 #监听客户端链接地址，设置0.0.0.0的话放开broadcast_rpc_address注释\n  ```\n\n  \n\n* 启动\n\n  ```\n  ./cassandra -R\n  ```\n\n* 报错\n\n  问题1\n\n  ```\n  4691; No single argument constructor found for class [Ljava.lang.String;;  in 'reader', line 10, column 1:\n      cluster_name: LASER-CLUSTER\n  \n  ```\n\n  解决\n\n  ```\n  #配置数据文件目录\n  data_file_directories:\n  - /data/cassandra/data\n  ```\n\n  问题2\n\n  ```\n  Exception (java.lang.ClassCastException) encountered during startup: org.apache.cassandra.auth.PasswordAuthenticator cannot be cast to org.apache.cassandra.auth.IAuthorizer\n  java.lang.ClassCastException: org.apache.cassandra.auth.PasswordAuthenticator cannot be cast to org.apache.cassandra.auth.IAuthorizer\n  \tat org.apache.cassandra.utils.FBUtilities.newAuthorizer(FBUtilities.java:473)\n  \tat org.apache.cassandra.auth.AuthConfig.applyAuth(AuthConfig.java:75)\n  \tat org.apache.cassandra.config.DatabaseDescriptor.daemonInitialization(DatabaseDescriptor.java:143)\n  \tat org.apache.cassandra.service.CassandraDaemon.applyConfig(CassandraDaemon.java:647)\n  \tat org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:582)\n  \tat org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:691)\n  ERROR [main] 2019-01-21 08:46:16,115 CassandraDaemon.java:708 - Exception encountered during startup\n  java.lang.ClassCastException: org.apache.cassandra.auth.PasswordAuthenticator cannot be cast to org.apache.cassandra.auth.IAuthorizer\n  \tat org.apache.cassandra.utils.FBUtilities.newAuthorizer(FBUtilities.java:473) ~[apache-cassandra-3.11.3.jar:3.11.3]\n  \tat org.apache.cassandra.auth.AuthConfig.applyAuth(AuthConfig.java:75) ~[apache-cassandra-3.11.3.jar:3.11.3]\n  \tat org.apache.cassandra.config.DatabaseDescriptor.daemonInitialization(DatabaseDescriptor.java:143) ~[apache-cassandra-3.11.3.jar:3.11.3]\n  \tat org.apache.cassandra.service.CassandraDaemon.applyConfig(CassandraDaemon.java:647) [apache-cassandra-3.11.3.jar:3.11.3]\n  \tat org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:582) [apache-cassandra-3.11.3.jar:3.11.3]\n  \tat org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:691) [apache-cassandra-3.11.3.jar:3.11.3]\n  ```\n\n  解决:照着注释改\n\n  ```\n  \n  # Authentication backend, implementing IAuthenticator; used to identify users\n  # Out of the box, Cassandra provides org.apache.cassandra.auth.{AllowAllAuthenticator,\n  # PasswordAuthenticator}.\n  #\n  # - AllowAllAuthenticator performs no checks - set it to disable authentication.\n  # - PasswordAuthenticator relies on username/password pairs to authenticate\n  #   users. It keeps usernames and hashed passwords in system_auth.roles table.\n  #   Please increase system_auth keyspace replication factor if you use this authenticator.\n  #   If using PasswordAuthenticator, CassandraRoleManager must also be used (see below)\n  #authenticator: AllowAllAuthenticator\n  authenticator: PasswordAuthenticator\n  # Authorization backend, implementing IAuthorizer; used to limit access/provide permissions\n  # Out of the box, Cassandra provides org.apache.cassandra.auth.{AllowAllAuthorizer,\n  # CassandraAuthorizer}.\n  #\n  # - AllowAllAuthorizer allows any action to any user - set it to disable authorization.\n  # - CassandraAuthorizer stores permissions in system_auth.role_permissions table. Please\n  #   increase system_auth keyspace replication factor if you use this authorizer.\n  #authorizer: AllowAllAuthorizer\n  authorizer: CassandraAuthorizer\n  \n  ```\n\n#### 登录\n\n```\n./cqlsh -ucassandra -pcassandra\n```\n\n* 创建超级用户\n\n  ```\n  CREATE USER andy WITH PASSWORD '123456' SUPERUSER;   \n  ```\n\n* 创建普通用户\n\n  ```\n  CREATE USER test1 WITH PASSWORD '123456' NOSUPERUSER;   \n  ```\n\n* 修改用户\n\n  ```\n   ALTER USER test WITH PASSWORD '654321';\n  ```\n\n* 删除用户\n\n  ```\n  DROP USER cassandra; //不能删除当前登录的用户\n  ```\n\n  \n\n**恭喜您！安装成功！下一篇讲java客户端与cqlsh。**","slug":"CassandraLinux服务端安装配置","published":1,"updated":"2022-09-03T07:30:55.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz82o0005twfae1cimpgc","content":"<p>Cassandra服务端安装配置<a id=\"more\"></a></p>\n<h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4><p>使用安装包的方式安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://httpd-mirror.sergal.org/apache/cassandra/3.11.3/apache-cassandra-3.11.3-bin.tar.gz</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf apache-cassandra-3.11.3-bin.tar.gz</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv apache-cassandra-3.11.3 cassandra3.11.3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/cassandra/conf</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>设置数据存储目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data/cassandra/data</span><br><span class=\"line\">mkdir /data/cassandra/commitlog</span><br><span class=\"line\">mkdir /data/cassandra/saved_caches</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改<code>cassandra.yaml</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># The name of the cluster. This is mainly used to prevent machines in</span><br><span class=\"line\"># one logical cluster from joining another.</span><br><span class=\"line\"># 集群的名称。 这主要用于防止一个逻辑集群中的机器加入另一个逻辑集群。</span><br><span class=\"line\">cluster_name: &apos;LASER-CLUSTER&apos;</span><br><span class=\"line\"># This defines the number of tokens randomly assigned to this node on the ring</span><br><span class=\"line\"># The more tokens, relative to other nodes, the larger the proportion of data</span><br><span class=\"line\"># that this node will store. You probably want all nodes to have the same number</span><br><span class=\"line\"># of tokens assuming they have equal hardware capability.</span><br><span class=\"line\">#</span><br><span class=\"line\"># If you leave this unspecified, Cassandra will use the default of 1 token for legacy </span><br><span class=\"line\"># compatibility,</span><br><span class=\"line\"># and will use the initial_token as described below.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Specifying initial_token will override this setting on the node&apos;s initial start,</span><br><span class=\"line\"># on subsequent starts, this setting will apply even if initial token is set.</span><br><span class=\"line\">#  </span><br><span class=\"line\"># If you already have a cluster with 1 token per node, and wish to migrate to </span><br><span class=\"line\"># multiple tokens per node, see http://wiki.apache.org/cassandra/Operations</span><br><span class=\"line\"># 定义了随机分配给环上该节点的令牌数。相对于其他节点，令牌数越多，该节点将存储的数据比例越大默认256</span><br><span class=\"line\">num_tokens: 256</span><br><span class=\"line\"># 默认注释的触发此节点的 num_tokens 令牌的自动分配。 分配算法尝试以优化数据中心中的节点上的复制负载# 的方式选择令牌，以用于指定的键空间使用的复制策略。仅支持 Murmur3Partitioner。默认值: KEYSPACE</span><br><span class=\"line\"># allocate_tokens_for_keyspace: KEYSPACE</span><br><span class=\"line\"># initial_token 允许您手动指定标记。 虽然您可以使用 vnodes（num_tokens&gt; 1，上面） - 在这种情况</span><br><span class=\"line\"># 下，您应该提供一个逗号分隔的列表 - 它主要用于将节点添加到未启用 vnode 的旧群集。</span><br><span class=\"line\"># initial_token:</span><br><span class=\"line\"># 默认true，启用全局</span><br><span class=\"line\">hinted_handoff_enabled: true</span><br><span class=\"line\">max_hint_window_in_ms: 10800000 # 3 hours</span><br><span class=\"line\"># 每个传递线程的最大速度（KB）/ 秒。 这将与集群中的节点数成比例地减少</span><br><span class=\"line\">hinted_handoff_throttle_in_kb：1024</span><br><span class=\"line\"># 传递提示的线程数; 在进行多 dc（datacenter） 部署时，请考虑增加此数，cross-dc handoff tends to </span><br><span class=\"line\"># be slower</span><br><span class=\"line\">max_hints_delivery_threads：2</span><br><span class=\"line\"># 默认注释项，</span><br><span class=\"line\">hints_directory</span><br><span class=\"line\"># 内部缓冲区刷新到磁盘的频率。不会触发 fsync</span><br><span class=\"line\">hints_flush_period_in_ms</span><br><span class=\"line\">#单个文件的最大大小 默认128MB</span><br><span class=\"line\">max_hints_file_size_in_mb：128</span><br><span class=\"line\"># 默认注释项，压缩以应用于提示文件。 如果省略，hints 文件将被解压缩。支持 LZ4，Snappy 和 Deflate压 # 缩</span><br><span class=\"line\">hints_compression</span><br><span class=\"line\"></span><br><span class=\"line\"># Maximum throttle in KBs per second, total. This will be</span><br><span class=\"line\"># reduced proportionally to the number of nodes in the cluster.</span><br><span class=\"line\"># 最大速率（KB）/ 秒。当集群中节点数成比例减少时她也会下降</span><br><span class=\"line\">batchlog_replay_throttle_in_kb: 1024</span><br><span class=\"line\"></span><br><span class=\"line\"># 认证</span><br><span class=\"line\">#authenticator: AllowAllAuthenticator</span><br><span class=\"line\">authenticator: PasswordAuthenticator</span><br><span class=\"line\"># 授权</span><br><span class=\"line\">#authorizer: AllowAllAuthorizer</span><br><span class=\"line\">authorizer: PasswordAuthenticator</span><br><span class=\"line\"># 角色管理器</span><br><span class=\"line\">role_manager: CassandraRoleManager</span><br><span class=\"line\"># 角色缓存有效期</span><br><span class=\"line\">roles_validity_in_ms: 2000</span><br><span class=\"line\"># 默认注释 角色缓存的刷新间隔（如果已启用）默认为与 roles_validity_in_ms相同值</span><br><span class=\"line\"># roles_update_interval_in_ms: 2000</span><br><span class=\"line\"># 权限缓存时间间隔 当位0时候禁用</span><br><span class=\"line\">permissions_validity_in_ms: 2000</span><br><span class=\"line\"># 权限刷新时间间隔 默认注释</span><br><span class=\"line\"># permissions_update_interval_in_ms: 2000</span><br><span class=\"line\"># 凭证有效期</span><br><span class=\"line\">credentials_validity_in_ms: 2000</span><br><span class=\"line\"># 凭证更新周期</span><br><span class=\"line\"># credentials_update_interval_in_ms: 2000</span><br><span class=\"line\"># 分区器</span><br><span class=\"line\">partitioner: org.apache.cassandra.dht.Murmur3Partitioner</span><br><span class=\"line\"># Directories where Cassandra should store data on disk.  Cassandra</span><br><span class=\"line\"># will spread data evenly across them, subject to the granularity of</span><br><span class=\"line\"># the configured compaction strategy.</span><br><span class=\"line\"># If not set, the default directory is $CASSANDRA_HOME/data/data.</span><br><span class=\"line\"># 配置数据文件目录</span><br><span class=\"line\">data_file_directories: /data/cassandra/data</span><br><span class=\"line\">...</span><br><span class=\"line\"># commit log.  when running on magnetic HDD, this should be a</span><br><span class=\"line\"># separate spindle than the data directories.</span><br><span class=\"line\"># If not set, the default directory is $CASSANDRA_HOME/data/commitlog.</span><br><span class=\"line\"># 配置日志文件目录</span><br><span class=\"line\">commitlog_directory: /data/cassandra/commitlog</span><br><span class=\"line\"># 每个节点上是否禁用cdc</span><br><span class=\"line\">cdc_enabled: false</span><br><span class=\"line\"># cdc raw 的目录</span><br><span class=\"line\"># cdc_raw_directory: /var/lib/cassandra/cdc_raw</span><br><span class=\"line\"># 磁盘错误策略 四种 自己看英文注释</span><br><span class=\"line\">disk_failure_policy: stop</span><br><span class=\"line\">#提交错误策略 四种 自己看英文注释</span><br><span class=\"line\">commit_failure_policy: stop</span><br><span class=\"line\"># 预编译缓存大小 默认位堆内存的1/256或者10mb，以两者中大者为准</span><br><span class=\"line\">prepared_statements_cache_size_mb:</span><br><span class=\"line\">#Thrift 预编译语句缓存的最大大小 默认同上</span><br><span class=\"line\">thrift_prepared_statements_cache_size_mb:</span><br><span class=\"line\"># 内存中密钥缓存的最大大小 默认位堆的5%或100mb以小者为准，0为禁用密钥缓存</span><br><span class=\"line\">key_cache_size_in_mb:</span><br><span class=\"line\"># 密钥缓存时间</span><br><span class=\"line\">key_cache_save_period: 14400</span><br><span class=\"line\"># 保存的秘钥数量 默认注释为保存所有</span><br><span class=\"line\"># key_cache_keys_to_save: 100</span><br><span class=\"line\"># 行缓存的实现类名（完全堆外行缓存实现默认）</span><br><span class=\"line\"># row_cache_class_name: org.apache.cassandra.cache.OHCProvider</span><br><span class=\"line\"># 行缓存大小 0为禁用</span><br><span class=\"line\">row_cache_size_in_mb: 0</span><br><span class=\"line\"># 行缓存周期 0位禁用</span><br><span class=\"line\">row_cache_save_period: 0</span><br><span class=\"line\"># 内存中计数器的缓存大小 堆的 2.5％和 50MB 中较小的值</span><br><span class=\"line\">counter_cache_size_in_mb:</span><br><span class=\"line\"># 内存计数器缓存时间</span><br><span class=\"line\">counter_cache_save_period: 7200</span><br><span class=\"line\"># 计数器缓存建的数量 注释为缓存所有</span><br><span class=\"line\"># counter_cache_keys_to_save: 100</span><br><span class=\"line\"># 缓存文件目录</span><br><span class=\"line\">saved_caches_directory: /data/cassandra/saved_caches</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># periodic或batch默认batch 在批处理模式下，Cassandra 不会进行 ack 写操作，直到提交日志已经同步到</span><br><span class=\"line\"># 磁盘。它将在同步期间等待 </span><br><span class=\"line\"># commitlog_sync: batch</span><br><span class=\"line\"># commitlog_sync_batch_window_in_ms: 2</span><br><span class=\"line\"># 默认periodic 提交日志的同步刷新策略 及刷新时间间隔</span><br><span class=\"line\">commitlog_sync: periodic</span><br><span class=\"line\">commitlog_sync_period_in_ms: 10000</span><br><span class=\"line\"># 各个commitlog 文件段的大小</span><br><span class=\"line\">commitlog_segment_size_in_mb: 32</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">seed_provider:</span><br><span class=\"line\">\t    - class_name: org.apache.cassandra.locator.SimpleSeedProvider</span><br><span class=\"line\">      parameters:</span><br><span class=\"line\">          # seeds is actually a comma-delimited list of addresses.</span><br><span class=\"line\">          # Ex: &quot;&lt;ip1&gt;,&lt;ip2&gt;,&lt;ip3&gt;&quot;</span><br><span class=\"line\">          - seeds: &quot;127.0.0.1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 并行读写及计数器写的并发数</span><br><span class=\"line\">concurrent_reads: 32</span><br><span class=\"line\">concurrent_writes: 32</span><br><span class=\"line\">concurrent_counter_writes: 32</span><br><span class=\"line\"># 默认注释sstable池缓存及块缓存大小</span><br><span class=\"line\"># file_cache_size_in_mb: 512</span><br><span class=\"line\"># 当 sstable 缓冲池耗尽时是否使用heap</span><br><span class=\"line\"># buffer_pool_use_heap_if_exhausted: true</span><br><span class=\"line\"># ssd（对于固态磁盘，默认值）spin（用于机械磁盘） 默认注释 使用ssd</span><br><span class=\"line\"># disk_optimization_strategy: ssd</span><br><span class=\"line\"># 用于memtable的堆内存大小</span><br><span class=\"line\"># memtable_heap_space_in_mb: 2048</span><br><span class=\"line\"># memtable_offheap_space_in_mb: 2048</span><br><span class=\"line\"># 不推荐使用 memtable_cleanup_threshold。默认计算是唯一合理的选择</span><br><span class=\"line\"># memtable_cleanup_threshold: 0.11</span><br><span class=\"line\"># 指定 Cassandra 分配和管理 memtable 内存的方式。选项包括：heap_buffers（堆nio缓冲区）</span><br><span class=\"line\"># offheap_buffers(非堆直接缓冲区） offheap_objects（非堆对象）\t</span><br><span class=\"line\">memtable_allocation_type: heap_buffers</span><br><span class=\"line\"># 提交日志的总分配大小 8192默认</span><br><span class=\"line\"># commitlog_total_space_in_mb: 8192</span><br><span class=\"line\"># memtable的写及刷新的线程数</span><br><span class=\"line\">#memtable_flush_writers: 2</span><br><span class=\"line\"># cdc总分配数</span><br><span class=\"line\"># cdc_total_space_in_mb: 4096</span><br><span class=\"line\"># 检查是否有任何新的 cdc-tracked 表空间可用的时间间隔</span><br><span class=\"line\"># cdc_free_space_check_interval_ms: 250</span><br><span class=\"line\"># sstable固定内存池大小 默认5%</span><br><span class=\"line\">index_summary_capacity_in_mb:</span><br><span class=\"line\"># 固定内存池重新分配时间间隔</span><br><span class=\"line\">index_summary_resize_interval_in_minutes: 60</span><br><span class=\"line\"># 顺序写入时将间隔时间设置为 fsync及刷新的kb大小阈值</span><br><span class=\"line\">trickle_fsync: false</span><br><span class=\"line\">trickle_fsync_interval_in_kb: 10240</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># TCP 端口，用于命令和数据, 出于安全原因不应将此端口公开到互联网如果必须公开到互联网需要打开防火墙</span><br><span class=\"line\">storage_port: 7000</span><br><span class=\"line\"># ssl端口 加密通信</span><br><span class=\"line\">ssl_storage_port: 7001</span><br><span class=\"line\"># 绑定地址或接口并告诉其他 Cassandra 节点连接到该地址或接口 设置 listen_address 或 </span><br><span class=\"line\"># listen_interface 其中之一，不要对两者都进行设置</span><br><span class=\"line\">listen_address: localhost</span><br><span class=\"line\"># listen_interface: eth0</span><br><span class=\"line\"># listen_interface_prefer_ipv6: false</span><br><span class=\"line\"># 要广播到其他 Cassandra 节点的地址保留此空白将将其设置为与 listen_address 相同的值</span><br><span class=\"line\"># broadcast_address: 1.2.3.4</span><br><span class=\"line\"># listen_on_broadcast_address: false</span><br><span class=\"line\"># Internode 后端认证</span><br><span class=\"line\"># internode_authenticator: org.apache.cassandra.auth.AllowAllInternodeAuthenticator</span><br><span class=\"line\"># 是否启动本地传输服务器。 请注意，本地传输绑定的地址与 rpc_address 相同。端口不同，下面指定。</span><br><span class=\"line\">start_native_transport: true</span><br><span class=\"line\">#  CQL本地传输监听客户端</span><br><span class=\"line\">native_transport_port: 9042</span><br><span class=\"line\"># 本地ssl传输端口</span><br><span class=\"line\"># native_transport_port_ssl: 9142</span><br><span class=\"line\"># 传输允许的帧的最大大小</span><br><span class=\"line\"># native_transport_max_frame_size_in_mb: 256</span><br><span class=\"line\"># 使用本地传输时处理请求的最大线程数</span><br><span class=\"line\"># native_transport_max_threads: 128</span><br><span class=\"line\"># 本地传输最大并发线程数 -1默认 默认不限制</span><br><span class=\"line\"># native_transport_max_concurrent_connections: -1</span><br><span class=\"line\"># 每个ip本地传输最大并发线程数 -1默认 默认不限制</span><br><span class=\"line\"># native_transport_max_concurrent_connections_per_ip: -1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#是否启动 thrift rpc 服务器</span><br><span class=\"line\">start_rpc: false</span><br><span class=\"line\">rpc_address: localhost</span><br><span class=\"line\"># rpc_interface_prefer_ipv6: false</span><br><span class=\"line\">rpc_port: 9160</span><br><span class=\"line\"># broadcast_rpc_address: 1.2.3.4</span><br><span class=\"line\">rpc_keepalive: true</span><br><span class=\"line\"># sync同步 hsha半同步半异步</span><br><span class=\"line\">rpc_server_type: sync</span><br><span class=\"line\"># rpc_min_threads: 16</span><br><span class=\"line\"># rpc_max_threads: 2048</span><br><span class=\"line\"># rpc_send_buff_size_in_bytes:</span><br><span class=\"line\"># rpc_recv_buff_size_in_bytes:</span><br><span class=\"line\"># internode_send_buff_size_in_bytes:</span><br><span class=\"line\"># internode_recv_buff_size_in_bytes:</span><br><span class=\"line\">thrift_framed_transport_size_in_mb: 15</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">incremental_backups: false</span><br><span class=\"line\">snapshot_before_compaction: false</span><br><span class=\"line\"># 删除数据前是否自动快照</span><br><span class=\"line\">auto_snapshot: true</span><br><span class=\"line\"># 分区中行的排序规则索引的粒度</span><br><span class=\"line\">column_index_size_in_kb: 64</span><br><span class=\"line\"># 每个超过此大小的索引的索引缓存条目（上述内存中的排序规则索引）不会在堆上保留</span><br><span class=\"line\">column_index_cache_size_in_kb: 2</span><br><span class=\"line\"># 并行允许压缩的数量</span><br><span class=\"line\">#concurrent_compactors: 1</span><br><span class=\"line\"># 调节压缩到整个系统的给定总吞吐量</span><br><span class=\"line\">compaction_throughput_mb_per_sec: 16</span><br><span class=\"line\"># </span><br><span class=\"line\">sstable_preemptive_open_interval_in_mb: 50</span><br><span class=\"line\"># stream_throughput_outbound_megabits_per_sec: 200</span><br><span class=\"line\"># inter_dc_stream_throughput_outbound_megabits_per_sec: 200</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 读超时</span><br><span class=\"line\">read_request_timeout_in_ms: 5000</span><br><span class=\"line\"># How long the coordinator should wait for seq or index scans to complete</span><br><span class=\"line\"># 索引排序超时</span><br><span class=\"line\">range_request_timeout_in_ms: 10000</span><br><span class=\"line\"># 写超时</span><br><span class=\"line\"># How long the coordinator should wait for writes to complete</span><br><span class=\"line\">write_request_timeout_in_ms: 2000</span><br><span class=\"line\"># 计数器超时</span><br><span class=\"line\"># How long the coordinator should wait for counter writes to complete</span><br><span class=\"line\">counter_write_request_timeout_in_ms: 5000</span><br><span class=\"line\"># cas竞争超时</span><br><span class=\"line\"># How long a coordinator should continue to retry a CAS operation</span><br><span class=\"line\"># that contends with other proposals for the same row</span><br><span class=\"line\">cas_contention_timeout_in_ms: 1000</span><br><span class=\"line\"># 删除截断超时</span><br><span class=\"line\"># How long the coordinator should wait for truncates to complete</span><br><span class=\"line\"># (This can be much longer, because unless auto_snapshot is disabled</span><br><span class=\"line\"># we need to flush first so we can snapshot before removing the data.)</span><br><span class=\"line\">truncate_request_timeout_in_ms: 60000</span><br><span class=\"line\"># 其他操作默认超时</span><br><span class=\"line\"># The default timeout for other, miscellaneous operations</span><br><span class=\"line\">request_timeout_in_ms: 10000</span><br><span class=\"line\"># 节点间信息交换超时 默认false</span><br><span class=\"line\">cross_node_timeout: false</span><br><span class=\"line\"># 设置流的保持活动周期</span><br><span class=\"line\"># streaming_keep_alive_period_in_secs: 300</span><br><span class=\"line\"># </span><br><span class=\"line\"># phi_convict_threshold: 8</span><br><span class=\"line\"># </span><br><span class=\"line\">endpoint_snitch: SimpleSnitch</span><br><span class=\"line\"># 控制执行主机分数计算的较耗费资源部分的频率</span><br><span class=\"line\">dynamic_snitch_update_interval_in_ms: 100</span><br><span class=\"line\"># 控制重置所有主机分数的频率，允许坏主机可恢复</span><br><span class=\"line\">dynamic_snitch_reset_interval_in_ms: 600000</span><br><span class=\"line\"># </span><br><span class=\"line\">dynamic_snitch_badness_threshold: 0.1</span><br><span class=\"line\"></span><br><span class=\"line\"># 处理客户端请求的调度类：NoScheduler无选项，RoundRobin.throttle_limit限制请求数超过排队，RoundRobin.default_weight默认权重，RoundRobin.weights使用权重 （RoundRobinPolicy）</span><br><span class=\"line\">request_scheduler: org.apache.cassandra.scheduler.NoScheduler</span><br><span class=\"line\"># request_scheduler_options:</span><br><span class=\"line\">#    throttle_limit: 80</span><br><span class=\"line\">#    default_weight: 5</span><br><span class=\"line\">#    weights:</span><br><span class=\"line\">#      Keyspace1: 1</span><br><span class=\"line\">#      Keyspace2: 5</span><br><span class=\"line\"># 默认的keyspace</span><br><span class=\"line\"># request_scheduler_id -- An identifier based on which to perform</span><br><span class=\"line\"># the request scheduling. Currently the only valid option is keyspace.</span><br><span class=\"line\"># request_scheduler_id: keyspace</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># server加密</span><br><span class=\"line\">server_encryption_options:</span><br><span class=\"line\">    internode_encryption: none</span><br><span class=\"line\">    keystore: conf/.keystore</span><br><span class=\"line\">    keystore_password: cassandra</span><br><span class=\"line\">    truststore: conf/.truststore</span><br><span class=\"line\">    truststore_password: cassandra</span><br><span class=\"line\">    # More advanced defaults below:</span><br><span class=\"line\">    # protocol: TLS</span><br><span class=\"line\">    # algorithm: SunX509</span><br><span class=\"line\">    # store_type: JKS</span><br><span class=\"line\">    # cipher_suites: [TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA]</span><br><span class=\"line\">    # require_client_auth: false</span><br><span class=\"line\">    # require_endpoint_verification: false</span><br><span class=\"line\"></span><br><span class=\"line\"># enable or disable client/server encryption.</span><br><span class=\"line\"># 客户端加密</span><br><span class=\"line\">client_encryption_options:</span><br><span class=\"line\">    enabled: false</span><br><span class=\"line\">    # If enabled and optional is set to true encrypted and unencrypted connections are handled.</span><br><span class=\"line\">    optional: false</span><br><span class=\"line\">    keystore: conf/.keystore</span><br><span class=\"line\">    keystore_password: cassandra</span><br><span class=\"line\">    # require_client_auth: false</span><br><span class=\"line\">    # Set trustore and truststore_password if require_client_auth is true</span><br><span class=\"line\">    # truststore: conf/.truststore</span><br><span class=\"line\">    # truststore_password: cassandra</span><br><span class=\"line\">    # More advanced defaults below:</span><br><span class=\"line\">    # protocol: TLS</span><br><span class=\"line\">    # algorithm: SunX509</span><br><span class=\"line\">    # store_type: JKS</span><br><span class=\"line\">    # cipher_suites: [TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA]</span><br><span class=\"line\"></span><br><span class=\"line\">#  控制节点之间的流量是否被压缩。 可以是:all（所有），dc(dc之间压缩)，none(不压缩)</span><br><span class=\"line\">internode_compression: dc</span><br><span class=\"line\"># </span><br><span class=\"line\">inter_dc_tcp_nodelay: false</span><br><span class=\"line\"># </span><br><span class=\"line\"># TTL for different trace types used during logging of the repair process.</span><br><span class=\"line\">tracetype_query_ttl: 86400</span><br><span class=\"line\">tracetype_repair_ttl: 604800</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\">enable_user_defined_functions: false</span><br><span class=\"line\">#</span><br><span class=\"line\">enable_scripted_user_defined_functions: false</span><br><span class=\"line\"># </span><br><span class=\"line\">enable_materialized_views: true</span><br><span class=\"line\"># </span><br><span class=\"line\">windows_timer_interval: 1</span><br><span class=\"line\"></span><br><span class=\"line\"># 静态数据加密</span><br><span class=\"line\">transparent_data_encryption_options:</span><br><span class=\"line\">    enabled: false</span><br><span class=\"line\">    chunk_length_kb: 64</span><br><span class=\"line\">    cipher: AES/CBC/PKCS5Padding</span><br><span class=\"line\">    key_alias: testing:1</span><br><span class=\"line\">    # CBC IV length for AES needs to be 16 bytes (which is also the default size)</span><br><span class=\"line\">    # iv_length: 16</span><br><span class=\"line\">    key_provider:</span><br><span class=\"line\">      - class_name: org.apache.cassandra.security.JKSKeyProvider</span><br><span class=\"line\">        parameters:</span><br><span class=\"line\">          - keystore: conf/.keystore</span><br><span class=\"line\">            keystore_password: cassandra</span><br><span class=\"line\">            store_type: JCEKS</span><br><span class=\"line\">            key_password: cassandra</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"># </span><br><span class=\"line\">tombstone_warn_threshold: 1000</span><br><span class=\"line\">tombstone_failure_threshold: 100000</span><br><span class=\"line\">batch_size_warn_threshold_in_kb: 5</span><br><span class=\"line\">batch_size_fail_threshold_in_kb: 50</span><br><span class=\"line\">unlogged_batch_across_partitions_warn_threshold: 10</span><br><span class=\"line\">compaction_large_partition_warning_threshold_mb: 100</span><br><span class=\"line\">gc_warn_threshold_in_ms: 1000</span><br><span class=\"line\"># SSTables 中的任何值的最大大小</span><br><span class=\"line\"># max_value_size_in_mb: 256</span><br><span class=\"line\"># 背压</span><br><span class=\"line\">back_pressure_enabled: false</span><br><span class=\"line\">#背压策略 看英文注释</span><br><span class=\"line\">back_pressure_strategy:</span><br><span class=\"line\">    - class_name: org.apache.cassandra.net.RateBasedBackPressure</span><br><span class=\"line\">      parameters:</span><br><span class=\"line\">        - high_ratio: 0.90</span><br><span class=\"line\">          factor: 5</span><br><span class=\"line\">          flow: FAST</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cluster_name: &apos;xxx&apos; #集群名</span><br><span class=\"line\">data_file_directories: #数据目录</span><br><span class=\"line\">    - /data/cassandra/data</span><br><span class=\"line\">    </span><br><span class=\"line\">commitlog_directory: /data/cassandra/commitlog #提交日志目录</span><br><span class=\"line\"></span><br><span class=\"line\">saved_caches_directory: /data/cassandra/saved_caches #缓存目录</span><br><span class=\"line\"></span><br><span class=\"line\">- seeds: &quot;127.0.0.1&quot; #集群种子节点 多个用，隔开</span><br><span class=\"line\"></span><br><span class=\"line\">listen_address: 127.0.0.1 #监听的ip或者主机的ip</span><br><span class=\"line\"></span><br><span class=\"line\">rpc_address: 127.0.0.1 #监听客户端链接地址，设置0.0.0.0的话放开broadcast_rpc_address注释</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./cassandra -R</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>报错</p>\n<p>问题1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4691; No single argument constructor found for class [Ljava.lang.String;;  in &apos;reader&apos;, line 10, column 1:</span><br><span class=\"line\">    cluster_name: LASER-CLUSTER</span><br></pre></td></tr></table></figure>\n\n<p>解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#配置数据文件目录</span><br><span class=\"line\">data_file_directories:</span><br><span class=\"line\">- /data/cassandra/data</span><br></pre></td></tr></table></figure>\n\n<p>问题2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception (java.lang.ClassCastException) encountered during startup: org.apache.cassandra.auth.PasswordAuthenticator cannot be cast to org.apache.cassandra.auth.IAuthorizer</span><br><span class=\"line\">java.lang.ClassCastException: org.apache.cassandra.auth.PasswordAuthenticator cannot be cast to org.apache.cassandra.auth.IAuthorizer</span><br><span class=\"line\">\tat org.apache.cassandra.utils.FBUtilities.newAuthorizer(FBUtilities.java:473)</span><br><span class=\"line\">\tat org.apache.cassandra.auth.AuthConfig.applyAuth(AuthConfig.java:75)</span><br><span class=\"line\">\tat org.apache.cassandra.config.DatabaseDescriptor.daemonInitialization(DatabaseDescriptor.java:143)</span><br><span class=\"line\">\tat org.apache.cassandra.service.CassandraDaemon.applyConfig(CassandraDaemon.java:647)</span><br><span class=\"line\">\tat org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:582)</span><br><span class=\"line\">\tat org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:691)</span><br><span class=\"line\">ERROR [main] 2019-01-21 08:46:16,115 CassandraDaemon.java:708 - Exception encountered during startup</span><br><span class=\"line\">java.lang.ClassCastException: org.apache.cassandra.auth.PasswordAuthenticator cannot be cast to org.apache.cassandra.auth.IAuthorizer</span><br><span class=\"line\">\tat org.apache.cassandra.utils.FBUtilities.newAuthorizer(FBUtilities.java:473) ~[apache-cassandra-3.11.3.jar:3.11.3]</span><br><span class=\"line\">\tat org.apache.cassandra.auth.AuthConfig.applyAuth(AuthConfig.java:75) ~[apache-cassandra-3.11.3.jar:3.11.3]</span><br><span class=\"line\">\tat org.apache.cassandra.config.DatabaseDescriptor.daemonInitialization(DatabaseDescriptor.java:143) ~[apache-cassandra-3.11.3.jar:3.11.3]</span><br><span class=\"line\">\tat org.apache.cassandra.service.CassandraDaemon.applyConfig(CassandraDaemon.java:647) [apache-cassandra-3.11.3.jar:3.11.3]</span><br><span class=\"line\">\tat org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:582) [apache-cassandra-3.11.3.jar:3.11.3]</span><br><span class=\"line\">\tat org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:691) [apache-cassandra-3.11.3.jar:3.11.3]</span><br></pre></td></tr></table></figure>\n\n<p>解决:照着注释改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># Authentication backend, implementing IAuthenticator; used to identify users</span><br><span class=\"line\"># Out of the box, Cassandra provides org.apache.cassandra.auth.&#123;AllowAllAuthenticator,</span><br><span class=\"line\"># PasswordAuthenticator&#125;.</span><br><span class=\"line\">#</span><br><span class=\"line\"># - AllowAllAuthenticator performs no checks - set it to disable authentication.</span><br><span class=\"line\"># - PasswordAuthenticator relies on username/password pairs to authenticate</span><br><span class=\"line\">#   users. It keeps usernames and hashed passwords in system_auth.roles table.</span><br><span class=\"line\">#   Please increase system_auth keyspace replication factor if you use this authenticator.</span><br><span class=\"line\">#   If using PasswordAuthenticator, CassandraRoleManager must also be used (see below)</span><br><span class=\"line\">#authenticator: AllowAllAuthenticator</span><br><span class=\"line\">authenticator: PasswordAuthenticator</span><br><span class=\"line\"># Authorization backend, implementing IAuthorizer; used to limit access/provide permissions</span><br><span class=\"line\"># Out of the box, Cassandra provides org.apache.cassandra.auth.&#123;AllowAllAuthorizer,</span><br><span class=\"line\"># CassandraAuthorizer&#125;.</span><br><span class=\"line\">#</span><br><span class=\"line\"># - AllowAllAuthorizer allows any action to any user - set it to disable authorization.</span><br><span class=\"line\"># - CassandraAuthorizer stores permissions in system_auth.role_permissions table. Please</span><br><span class=\"line\">#   increase system_auth keyspace replication factor if you use this authorizer.</span><br><span class=\"line\">#authorizer: AllowAllAuthorizer</span><br><span class=\"line\">authorizer: CassandraAuthorizer</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./cqlsh -ucassandra -pcassandra</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>创建超级用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER andy WITH PASSWORD &apos;123456&apos; SUPERUSER;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建普通用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER test1 WITH PASSWORD &apos;123456&apos; NOSUPERUSER;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER test WITH PASSWORD &apos;654321&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP USER cassandra; //不能删除当前登录的用户</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<p><strong>恭喜您！安装成功！下一篇讲java客户端与cqlsh。</strong></p>\n","site":{"data":{}},"excerpt":"<p>Cassandra服务端安装配置</p>","more":"<p></p>\n<h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4><p>使用安装包的方式安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://httpd-mirror.sergal.org/apache/cassandra/3.11.3/apache-cassandra-3.11.3-bin.tar.gz</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf apache-cassandra-3.11.3-bin.tar.gz</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv apache-cassandra-3.11.3 cassandra3.11.3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/cassandra/conf</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>设置数据存储目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data/cassandra/data</span><br><span class=\"line\">mkdir /data/cassandra/commitlog</span><br><span class=\"line\">mkdir /data/cassandra/saved_caches</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改<code>cassandra.yaml</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># The name of the cluster. This is mainly used to prevent machines in</span><br><span class=\"line\"># one logical cluster from joining another.</span><br><span class=\"line\"># 集群的名称。 这主要用于防止一个逻辑集群中的机器加入另一个逻辑集群。</span><br><span class=\"line\">cluster_name: &apos;LASER-CLUSTER&apos;</span><br><span class=\"line\"># This defines the number of tokens randomly assigned to this node on the ring</span><br><span class=\"line\"># The more tokens, relative to other nodes, the larger the proportion of data</span><br><span class=\"line\"># that this node will store. You probably want all nodes to have the same number</span><br><span class=\"line\"># of tokens assuming they have equal hardware capability.</span><br><span class=\"line\">#</span><br><span class=\"line\"># If you leave this unspecified, Cassandra will use the default of 1 token for legacy </span><br><span class=\"line\"># compatibility,</span><br><span class=\"line\"># and will use the initial_token as described below.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Specifying initial_token will override this setting on the node&apos;s initial start,</span><br><span class=\"line\"># on subsequent starts, this setting will apply even if initial token is set.</span><br><span class=\"line\">#  </span><br><span class=\"line\"># If you already have a cluster with 1 token per node, and wish to migrate to </span><br><span class=\"line\"># multiple tokens per node, see http://wiki.apache.org/cassandra/Operations</span><br><span class=\"line\"># 定义了随机分配给环上该节点的令牌数。相对于其他节点，令牌数越多，该节点将存储的数据比例越大默认256</span><br><span class=\"line\">num_tokens: 256</span><br><span class=\"line\"># 默认注释的触发此节点的 num_tokens 令牌的自动分配。 分配算法尝试以优化数据中心中的节点上的复制负载# 的方式选择令牌，以用于指定的键空间使用的复制策略。仅支持 Murmur3Partitioner。默认值: KEYSPACE</span><br><span class=\"line\"># allocate_tokens_for_keyspace: KEYSPACE</span><br><span class=\"line\"># initial_token 允许您手动指定标记。 虽然您可以使用 vnodes（num_tokens&gt; 1，上面） - 在这种情况</span><br><span class=\"line\"># 下，您应该提供一个逗号分隔的列表 - 它主要用于将节点添加到未启用 vnode 的旧群集。</span><br><span class=\"line\"># initial_token:</span><br><span class=\"line\"># 默认true，启用全局</span><br><span class=\"line\">hinted_handoff_enabled: true</span><br><span class=\"line\">max_hint_window_in_ms: 10800000 # 3 hours</span><br><span class=\"line\"># 每个传递线程的最大速度（KB）/ 秒。 这将与集群中的节点数成比例地减少</span><br><span class=\"line\">hinted_handoff_throttle_in_kb：1024</span><br><span class=\"line\"># 传递提示的线程数; 在进行多 dc（datacenter） 部署时，请考虑增加此数，cross-dc handoff tends to </span><br><span class=\"line\"># be slower</span><br><span class=\"line\">max_hints_delivery_threads：2</span><br><span class=\"line\"># 默认注释项，</span><br><span class=\"line\">hints_directory</span><br><span class=\"line\"># 内部缓冲区刷新到磁盘的频率。不会触发 fsync</span><br><span class=\"line\">hints_flush_period_in_ms</span><br><span class=\"line\">#单个文件的最大大小 默认128MB</span><br><span class=\"line\">max_hints_file_size_in_mb：128</span><br><span class=\"line\"># 默认注释项，压缩以应用于提示文件。 如果省略，hints 文件将被解压缩。支持 LZ4，Snappy 和 Deflate压 # 缩</span><br><span class=\"line\">hints_compression</span><br><span class=\"line\"></span><br><span class=\"line\"># Maximum throttle in KBs per second, total. This will be</span><br><span class=\"line\"># reduced proportionally to the number of nodes in the cluster.</span><br><span class=\"line\"># 最大速率（KB）/ 秒。当集群中节点数成比例减少时她也会下降</span><br><span class=\"line\">batchlog_replay_throttle_in_kb: 1024</span><br><span class=\"line\"></span><br><span class=\"line\"># 认证</span><br><span class=\"line\">#authenticator: AllowAllAuthenticator</span><br><span class=\"line\">authenticator: PasswordAuthenticator</span><br><span class=\"line\"># 授权</span><br><span class=\"line\">#authorizer: AllowAllAuthorizer</span><br><span class=\"line\">authorizer: PasswordAuthenticator</span><br><span class=\"line\"># 角色管理器</span><br><span class=\"line\">role_manager: CassandraRoleManager</span><br><span class=\"line\"># 角色缓存有效期</span><br><span class=\"line\">roles_validity_in_ms: 2000</span><br><span class=\"line\"># 默认注释 角色缓存的刷新间隔（如果已启用）默认为与 roles_validity_in_ms相同值</span><br><span class=\"line\"># roles_update_interval_in_ms: 2000</span><br><span class=\"line\"># 权限缓存时间间隔 当位0时候禁用</span><br><span class=\"line\">permissions_validity_in_ms: 2000</span><br><span class=\"line\"># 权限刷新时间间隔 默认注释</span><br><span class=\"line\"># permissions_update_interval_in_ms: 2000</span><br><span class=\"line\"># 凭证有效期</span><br><span class=\"line\">credentials_validity_in_ms: 2000</span><br><span class=\"line\"># 凭证更新周期</span><br><span class=\"line\"># credentials_update_interval_in_ms: 2000</span><br><span class=\"line\"># 分区器</span><br><span class=\"line\">partitioner: org.apache.cassandra.dht.Murmur3Partitioner</span><br><span class=\"line\"># Directories where Cassandra should store data on disk.  Cassandra</span><br><span class=\"line\"># will spread data evenly across them, subject to the granularity of</span><br><span class=\"line\"># the configured compaction strategy.</span><br><span class=\"line\"># If not set, the default directory is $CASSANDRA_HOME/data/data.</span><br><span class=\"line\"># 配置数据文件目录</span><br><span class=\"line\">data_file_directories: /data/cassandra/data</span><br><span class=\"line\">...</span><br><span class=\"line\"># commit log.  when running on magnetic HDD, this should be a</span><br><span class=\"line\"># separate spindle than the data directories.</span><br><span class=\"line\"># If not set, the default directory is $CASSANDRA_HOME/data/commitlog.</span><br><span class=\"line\"># 配置日志文件目录</span><br><span class=\"line\">commitlog_directory: /data/cassandra/commitlog</span><br><span class=\"line\"># 每个节点上是否禁用cdc</span><br><span class=\"line\">cdc_enabled: false</span><br><span class=\"line\"># cdc raw 的目录</span><br><span class=\"line\"># cdc_raw_directory: /var/lib/cassandra/cdc_raw</span><br><span class=\"line\"># 磁盘错误策略 四种 自己看英文注释</span><br><span class=\"line\">disk_failure_policy: stop</span><br><span class=\"line\">#提交错误策略 四种 自己看英文注释</span><br><span class=\"line\">commit_failure_policy: stop</span><br><span class=\"line\"># 预编译缓存大小 默认位堆内存的1/256或者10mb，以两者中大者为准</span><br><span class=\"line\">prepared_statements_cache_size_mb:</span><br><span class=\"line\">#Thrift 预编译语句缓存的最大大小 默认同上</span><br><span class=\"line\">thrift_prepared_statements_cache_size_mb:</span><br><span class=\"line\"># 内存中密钥缓存的最大大小 默认位堆的5%或100mb以小者为准，0为禁用密钥缓存</span><br><span class=\"line\">key_cache_size_in_mb:</span><br><span class=\"line\"># 密钥缓存时间</span><br><span class=\"line\">key_cache_save_period: 14400</span><br><span class=\"line\"># 保存的秘钥数量 默认注释为保存所有</span><br><span class=\"line\"># key_cache_keys_to_save: 100</span><br><span class=\"line\"># 行缓存的实现类名（完全堆外行缓存实现默认）</span><br><span class=\"line\"># row_cache_class_name: org.apache.cassandra.cache.OHCProvider</span><br><span class=\"line\"># 行缓存大小 0为禁用</span><br><span class=\"line\">row_cache_size_in_mb: 0</span><br><span class=\"line\"># 行缓存周期 0位禁用</span><br><span class=\"line\">row_cache_save_period: 0</span><br><span class=\"line\"># 内存中计数器的缓存大小 堆的 2.5％和 50MB 中较小的值</span><br><span class=\"line\">counter_cache_size_in_mb:</span><br><span class=\"line\"># 内存计数器缓存时间</span><br><span class=\"line\">counter_cache_save_period: 7200</span><br><span class=\"line\"># 计数器缓存建的数量 注释为缓存所有</span><br><span class=\"line\"># counter_cache_keys_to_save: 100</span><br><span class=\"line\"># 缓存文件目录</span><br><span class=\"line\">saved_caches_directory: /data/cassandra/saved_caches</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># periodic或batch默认batch 在批处理模式下，Cassandra 不会进行 ack 写操作，直到提交日志已经同步到</span><br><span class=\"line\"># 磁盘。它将在同步期间等待 </span><br><span class=\"line\"># commitlog_sync: batch</span><br><span class=\"line\"># commitlog_sync_batch_window_in_ms: 2</span><br><span class=\"line\"># 默认periodic 提交日志的同步刷新策略 及刷新时间间隔</span><br><span class=\"line\">commitlog_sync: periodic</span><br><span class=\"line\">commitlog_sync_period_in_ms: 10000</span><br><span class=\"line\"># 各个commitlog 文件段的大小</span><br><span class=\"line\">commitlog_segment_size_in_mb: 32</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">seed_provider:</span><br><span class=\"line\">\t    - class_name: org.apache.cassandra.locator.SimpleSeedProvider</span><br><span class=\"line\">      parameters:</span><br><span class=\"line\">          # seeds is actually a comma-delimited list of addresses.</span><br><span class=\"line\">          # Ex: &quot;&lt;ip1&gt;,&lt;ip2&gt;,&lt;ip3&gt;&quot;</span><br><span class=\"line\">          - seeds: &quot;127.0.0.1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 并行读写及计数器写的并发数</span><br><span class=\"line\">concurrent_reads: 32</span><br><span class=\"line\">concurrent_writes: 32</span><br><span class=\"line\">concurrent_counter_writes: 32</span><br><span class=\"line\"># 默认注释sstable池缓存及块缓存大小</span><br><span class=\"line\"># file_cache_size_in_mb: 512</span><br><span class=\"line\"># 当 sstable 缓冲池耗尽时是否使用heap</span><br><span class=\"line\"># buffer_pool_use_heap_if_exhausted: true</span><br><span class=\"line\"># ssd（对于固态磁盘，默认值）spin（用于机械磁盘） 默认注释 使用ssd</span><br><span class=\"line\"># disk_optimization_strategy: ssd</span><br><span class=\"line\"># 用于memtable的堆内存大小</span><br><span class=\"line\"># memtable_heap_space_in_mb: 2048</span><br><span class=\"line\"># memtable_offheap_space_in_mb: 2048</span><br><span class=\"line\"># 不推荐使用 memtable_cleanup_threshold。默认计算是唯一合理的选择</span><br><span class=\"line\"># memtable_cleanup_threshold: 0.11</span><br><span class=\"line\"># 指定 Cassandra 分配和管理 memtable 内存的方式。选项包括：heap_buffers（堆nio缓冲区）</span><br><span class=\"line\"># offheap_buffers(非堆直接缓冲区） offheap_objects（非堆对象）\t</span><br><span class=\"line\">memtable_allocation_type: heap_buffers</span><br><span class=\"line\"># 提交日志的总分配大小 8192默认</span><br><span class=\"line\"># commitlog_total_space_in_mb: 8192</span><br><span class=\"line\"># memtable的写及刷新的线程数</span><br><span class=\"line\">#memtable_flush_writers: 2</span><br><span class=\"line\"># cdc总分配数</span><br><span class=\"line\"># cdc_total_space_in_mb: 4096</span><br><span class=\"line\"># 检查是否有任何新的 cdc-tracked 表空间可用的时间间隔</span><br><span class=\"line\"># cdc_free_space_check_interval_ms: 250</span><br><span class=\"line\"># sstable固定内存池大小 默认5%</span><br><span class=\"line\">index_summary_capacity_in_mb:</span><br><span class=\"line\"># 固定内存池重新分配时间间隔</span><br><span class=\"line\">index_summary_resize_interval_in_minutes: 60</span><br><span class=\"line\"># 顺序写入时将间隔时间设置为 fsync及刷新的kb大小阈值</span><br><span class=\"line\">trickle_fsync: false</span><br><span class=\"line\">trickle_fsync_interval_in_kb: 10240</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># TCP 端口，用于命令和数据, 出于安全原因不应将此端口公开到互联网如果必须公开到互联网需要打开防火墙</span><br><span class=\"line\">storage_port: 7000</span><br><span class=\"line\"># ssl端口 加密通信</span><br><span class=\"line\">ssl_storage_port: 7001</span><br><span class=\"line\"># 绑定地址或接口并告诉其他 Cassandra 节点连接到该地址或接口 设置 listen_address 或 </span><br><span class=\"line\"># listen_interface 其中之一，不要对两者都进行设置</span><br><span class=\"line\">listen_address: localhost</span><br><span class=\"line\"># listen_interface: eth0</span><br><span class=\"line\"># listen_interface_prefer_ipv6: false</span><br><span class=\"line\"># 要广播到其他 Cassandra 节点的地址保留此空白将将其设置为与 listen_address 相同的值</span><br><span class=\"line\"># broadcast_address: 1.2.3.4</span><br><span class=\"line\"># listen_on_broadcast_address: false</span><br><span class=\"line\"># Internode 后端认证</span><br><span class=\"line\"># internode_authenticator: org.apache.cassandra.auth.AllowAllInternodeAuthenticator</span><br><span class=\"line\"># 是否启动本地传输服务器。 请注意，本地传输绑定的地址与 rpc_address 相同。端口不同，下面指定。</span><br><span class=\"line\">start_native_transport: true</span><br><span class=\"line\">#  CQL本地传输监听客户端</span><br><span class=\"line\">native_transport_port: 9042</span><br><span class=\"line\"># 本地ssl传输端口</span><br><span class=\"line\"># native_transport_port_ssl: 9142</span><br><span class=\"line\"># 传输允许的帧的最大大小</span><br><span class=\"line\"># native_transport_max_frame_size_in_mb: 256</span><br><span class=\"line\"># 使用本地传输时处理请求的最大线程数</span><br><span class=\"line\"># native_transport_max_threads: 128</span><br><span class=\"line\"># 本地传输最大并发线程数 -1默认 默认不限制</span><br><span class=\"line\"># native_transport_max_concurrent_connections: -1</span><br><span class=\"line\"># 每个ip本地传输最大并发线程数 -1默认 默认不限制</span><br><span class=\"line\"># native_transport_max_concurrent_connections_per_ip: -1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#是否启动 thrift rpc 服务器</span><br><span class=\"line\">start_rpc: false</span><br><span class=\"line\">rpc_address: localhost</span><br><span class=\"line\"># rpc_interface_prefer_ipv6: false</span><br><span class=\"line\">rpc_port: 9160</span><br><span class=\"line\"># broadcast_rpc_address: 1.2.3.4</span><br><span class=\"line\">rpc_keepalive: true</span><br><span class=\"line\"># sync同步 hsha半同步半异步</span><br><span class=\"line\">rpc_server_type: sync</span><br><span class=\"line\"># rpc_min_threads: 16</span><br><span class=\"line\"># rpc_max_threads: 2048</span><br><span class=\"line\"># rpc_send_buff_size_in_bytes:</span><br><span class=\"line\"># rpc_recv_buff_size_in_bytes:</span><br><span class=\"line\"># internode_send_buff_size_in_bytes:</span><br><span class=\"line\"># internode_recv_buff_size_in_bytes:</span><br><span class=\"line\">thrift_framed_transport_size_in_mb: 15</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">incremental_backups: false</span><br><span class=\"line\">snapshot_before_compaction: false</span><br><span class=\"line\"># 删除数据前是否自动快照</span><br><span class=\"line\">auto_snapshot: true</span><br><span class=\"line\"># 分区中行的排序规则索引的粒度</span><br><span class=\"line\">column_index_size_in_kb: 64</span><br><span class=\"line\"># 每个超过此大小的索引的索引缓存条目（上述内存中的排序规则索引）不会在堆上保留</span><br><span class=\"line\">column_index_cache_size_in_kb: 2</span><br><span class=\"line\"># 并行允许压缩的数量</span><br><span class=\"line\">#concurrent_compactors: 1</span><br><span class=\"line\"># 调节压缩到整个系统的给定总吞吐量</span><br><span class=\"line\">compaction_throughput_mb_per_sec: 16</span><br><span class=\"line\"># </span><br><span class=\"line\">sstable_preemptive_open_interval_in_mb: 50</span><br><span class=\"line\"># stream_throughput_outbound_megabits_per_sec: 200</span><br><span class=\"line\"># inter_dc_stream_throughput_outbound_megabits_per_sec: 200</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 读超时</span><br><span class=\"line\">read_request_timeout_in_ms: 5000</span><br><span class=\"line\"># How long the coordinator should wait for seq or index scans to complete</span><br><span class=\"line\"># 索引排序超时</span><br><span class=\"line\">range_request_timeout_in_ms: 10000</span><br><span class=\"line\"># 写超时</span><br><span class=\"line\"># How long the coordinator should wait for writes to complete</span><br><span class=\"line\">write_request_timeout_in_ms: 2000</span><br><span class=\"line\"># 计数器超时</span><br><span class=\"line\"># How long the coordinator should wait for counter writes to complete</span><br><span class=\"line\">counter_write_request_timeout_in_ms: 5000</span><br><span class=\"line\"># cas竞争超时</span><br><span class=\"line\"># How long a coordinator should continue to retry a CAS operation</span><br><span class=\"line\"># that contends with other proposals for the same row</span><br><span class=\"line\">cas_contention_timeout_in_ms: 1000</span><br><span class=\"line\"># 删除截断超时</span><br><span class=\"line\"># How long the coordinator should wait for truncates to complete</span><br><span class=\"line\"># (This can be much longer, because unless auto_snapshot is disabled</span><br><span class=\"line\"># we need to flush first so we can snapshot before removing the data.)</span><br><span class=\"line\">truncate_request_timeout_in_ms: 60000</span><br><span class=\"line\"># 其他操作默认超时</span><br><span class=\"line\"># The default timeout for other, miscellaneous operations</span><br><span class=\"line\">request_timeout_in_ms: 10000</span><br><span class=\"line\"># 节点间信息交换超时 默认false</span><br><span class=\"line\">cross_node_timeout: false</span><br><span class=\"line\"># 设置流的保持活动周期</span><br><span class=\"line\"># streaming_keep_alive_period_in_secs: 300</span><br><span class=\"line\"># </span><br><span class=\"line\"># phi_convict_threshold: 8</span><br><span class=\"line\"># </span><br><span class=\"line\">endpoint_snitch: SimpleSnitch</span><br><span class=\"line\"># 控制执行主机分数计算的较耗费资源部分的频率</span><br><span class=\"line\">dynamic_snitch_update_interval_in_ms: 100</span><br><span class=\"line\"># 控制重置所有主机分数的频率，允许坏主机可恢复</span><br><span class=\"line\">dynamic_snitch_reset_interval_in_ms: 600000</span><br><span class=\"line\"># </span><br><span class=\"line\">dynamic_snitch_badness_threshold: 0.1</span><br><span class=\"line\"></span><br><span class=\"line\"># 处理客户端请求的调度类：NoScheduler无选项，RoundRobin.throttle_limit限制请求数超过排队，RoundRobin.default_weight默认权重，RoundRobin.weights使用权重 （RoundRobinPolicy）</span><br><span class=\"line\">request_scheduler: org.apache.cassandra.scheduler.NoScheduler</span><br><span class=\"line\"># request_scheduler_options:</span><br><span class=\"line\">#    throttle_limit: 80</span><br><span class=\"line\">#    default_weight: 5</span><br><span class=\"line\">#    weights:</span><br><span class=\"line\">#      Keyspace1: 1</span><br><span class=\"line\">#      Keyspace2: 5</span><br><span class=\"line\"># 默认的keyspace</span><br><span class=\"line\"># request_scheduler_id -- An identifier based on which to perform</span><br><span class=\"line\"># the request scheduling. Currently the only valid option is keyspace.</span><br><span class=\"line\"># request_scheduler_id: keyspace</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># server加密</span><br><span class=\"line\">server_encryption_options:</span><br><span class=\"line\">    internode_encryption: none</span><br><span class=\"line\">    keystore: conf/.keystore</span><br><span class=\"line\">    keystore_password: cassandra</span><br><span class=\"line\">    truststore: conf/.truststore</span><br><span class=\"line\">    truststore_password: cassandra</span><br><span class=\"line\">    # More advanced defaults below:</span><br><span class=\"line\">    # protocol: TLS</span><br><span class=\"line\">    # algorithm: SunX509</span><br><span class=\"line\">    # store_type: JKS</span><br><span class=\"line\">    # cipher_suites: [TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA]</span><br><span class=\"line\">    # require_client_auth: false</span><br><span class=\"line\">    # require_endpoint_verification: false</span><br><span class=\"line\"></span><br><span class=\"line\"># enable or disable client/server encryption.</span><br><span class=\"line\"># 客户端加密</span><br><span class=\"line\">client_encryption_options:</span><br><span class=\"line\">    enabled: false</span><br><span class=\"line\">    # If enabled and optional is set to true encrypted and unencrypted connections are handled.</span><br><span class=\"line\">    optional: false</span><br><span class=\"line\">    keystore: conf/.keystore</span><br><span class=\"line\">    keystore_password: cassandra</span><br><span class=\"line\">    # require_client_auth: false</span><br><span class=\"line\">    # Set trustore and truststore_password if require_client_auth is true</span><br><span class=\"line\">    # truststore: conf/.truststore</span><br><span class=\"line\">    # truststore_password: cassandra</span><br><span class=\"line\">    # More advanced defaults below:</span><br><span class=\"line\">    # protocol: TLS</span><br><span class=\"line\">    # algorithm: SunX509</span><br><span class=\"line\">    # store_type: JKS</span><br><span class=\"line\">    # cipher_suites: [TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA]</span><br><span class=\"line\"></span><br><span class=\"line\">#  控制节点之间的流量是否被压缩。 可以是:all（所有），dc(dc之间压缩)，none(不压缩)</span><br><span class=\"line\">internode_compression: dc</span><br><span class=\"line\"># </span><br><span class=\"line\">inter_dc_tcp_nodelay: false</span><br><span class=\"line\"># </span><br><span class=\"line\"># TTL for different trace types used during logging of the repair process.</span><br><span class=\"line\">tracetype_query_ttl: 86400</span><br><span class=\"line\">tracetype_repair_ttl: 604800</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\">enable_user_defined_functions: false</span><br><span class=\"line\">#</span><br><span class=\"line\">enable_scripted_user_defined_functions: false</span><br><span class=\"line\"># </span><br><span class=\"line\">enable_materialized_views: true</span><br><span class=\"line\"># </span><br><span class=\"line\">windows_timer_interval: 1</span><br><span class=\"line\"></span><br><span class=\"line\"># 静态数据加密</span><br><span class=\"line\">transparent_data_encryption_options:</span><br><span class=\"line\">    enabled: false</span><br><span class=\"line\">    chunk_length_kb: 64</span><br><span class=\"line\">    cipher: AES/CBC/PKCS5Padding</span><br><span class=\"line\">    key_alias: testing:1</span><br><span class=\"line\">    # CBC IV length for AES needs to be 16 bytes (which is also the default size)</span><br><span class=\"line\">    # iv_length: 16</span><br><span class=\"line\">    key_provider:</span><br><span class=\"line\">      - class_name: org.apache.cassandra.security.JKSKeyProvider</span><br><span class=\"line\">        parameters:</span><br><span class=\"line\">          - keystore: conf/.keystore</span><br><span class=\"line\">            keystore_password: cassandra</span><br><span class=\"line\">            store_type: JCEKS</span><br><span class=\"line\">            key_password: cassandra</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"># </span><br><span class=\"line\">tombstone_warn_threshold: 1000</span><br><span class=\"line\">tombstone_failure_threshold: 100000</span><br><span class=\"line\">batch_size_warn_threshold_in_kb: 5</span><br><span class=\"line\">batch_size_fail_threshold_in_kb: 50</span><br><span class=\"line\">unlogged_batch_across_partitions_warn_threshold: 10</span><br><span class=\"line\">compaction_large_partition_warning_threshold_mb: 100</span><br><span class=\"line\">gc_warn_threshold_in_ms: 1000</span><br><span class=\"line\"># SSTables 中的任何值的最大大小</span><br><span class=\"line\"># max_value_size_in_mb: 256</span><br><span class=\"line\"># 背压</span><br><span class=\"line\">back_pressure_enabled: false</span><br><span class=\"line\">#背压策略 看英文注释</span><br><span class=\"line\">back_pressure_strategy:</span><br><span class=\"line\">    - class_name: org.apache.cassandra.net.RateBasedBackPressure</span><br><span class=\"line\">      parameters:</span><br><span class=\"line\">        - high_ratio: 0.90</span><br><span class=\"line\">          factor: 5</span><br><span class=\"line\">          flow: FAST</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cluster_name: &apos;xxx&apos; #集群名</span><br><span class=\"line\">data_file_directories: #数据目录</span><br><span class=\"line\">    - /data/cassandra/data</span><br><span class=\"line\">    </span><br><span class=\"line\">commitlog_directory: /data/cassandra/commitlog #提交日志目录</span><br><span class=\"line\"></span><br><span class=\"line\">saved_caches_directory: /data/cassandra/saved_caches #缓存目录</span><br><span class=\"line\"></span><br><span class=\"line\">- seeds: &quot;127.0.0.1&quot; #集群种子节点 多个用，隔开</span><br><span class=\"line\"></span><br><span class=\"line\">listen_address: 127.0.0.1 #监听的ip或者主机的ip</span><br><span class=\"line\"></span><br><span class=\"line\">rpc_address: 127.0.0.1 #监听客户端链接地址，设置0.0.0.0的话放开broadcast_rpc_address注释</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./cassandra -R</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>报错</p>\n<p>问题1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4691; No single argument constructor found for class [Ljava.lang.String;;  in &apos;reader&apos;, line 10, column 1:</span><br><span class=\"line\">    cluster_name: LASER-CLUSTER</span><br></pre></td></tr></table></figure>\n\n<p>解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#配置数据文件目录</span><br><span class=\"line\">data_file_directories:</span><br><span class=\"line\">- /data/cassandra/data</span><br></pre></td></tr></table></figure>\n\n<p>问题2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception (java.lang.ClassCastException) encountered during startup: org.apache.cassandra.auth.PasswordAuthenticator cannot be cast to org.apache.cassandra.auth.IAuthorizer</span><br><span class=\"line\">java.lang.ClassCastException: org.apache.cassandra.auth.PasswordAuthenticator cannot be cast to org.apache.cassandra.auth.IAuthorizer</span><br><span class=\"line\">\tat org.apache.cassandra.utils.FBUtilities.newAuthorizer(FBUtilities.java:473)</span><br><span class=\"line\">\tat org.apache.cassandra.auth.AuthConfig.applyAuth(AuthConfig.java:75)</span><br><span class=\"line\">\tat org.apache.cassandra.config.DatabaseDescriptor.daemonInitialization(DatabaseDescriptor.java:143)</span><br><span class=\"line\">\tat org.apache.cassandra.service.CassandraDaemon.applyConfig(CassandraDaemon.java:647)</span><br><span class=\"line\">\tat org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:582)</span><br><span class=\"line\">\tat org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:691)</span><br><span class=\"line\">ERROR [main] 2019-01-21 08:46:16,115 CassandraDaemon.java:708 - Exception encountered during startup</span><br><span class=\"line\">java.lang.ClassCastException: org.apache.cassandra.auth.PasswordAuthenticator cannot be cast to org.apache.cassandra.auth.IAuthorizer</span><br><span class=\"line\">\tat org.apache.cassandra.utils.FBUtilities.newAuthorizer(FBUtilities.java:473) ~[apache-cassandra-3.11.3.jar:3.11.3]</span><br><span class=\"line\">\tat org.apache.cassandra.auth.AuthConfig.applyAuth(AuthConfig.java:75) ~[apache-cassandra-3.11.3.jar:3.11.3]</span><br><span class=\"line\">\tat org.apache.cassandra.config.DatabaseDescriptor.daemonInitialization(DatabaseDescriptor.java:143) ~[apache-cassandra-3.11.3.jar:3.11.3]</span><br><span class=\"line\">\tat org.apache.cassandra.service.CassandraDaemon.applyConfig(CassandraDaemon.java:647) [apache-cassandra-3.11.3.jar:3.11.3]</span><br><span class=\"line\">\tat org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:582) [apache-cassandra-3.11.3.jar:3.11.3]</span><br><span class=\"line\">\tat org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:691) [apache-cassandra-3.11.3.jar:3.11.3]</span><br></pre></td></tr></table></figure>\n\n<p>解决:照着注释改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># Authentication backend, implementing IAuthenticator; used to identify users</span><br><span class=\"line\"># Out of the box, Cassandra provides org.apache.cassandra.auth.&#123;AllowAllAuthenticator,</span><br><span class=\"line\"># PasswordAuthenticator&#125;.</span><br><span class=\"line\">#</span><br><span class=\"line\"># - AllowAllAuthenticator performs no checks - set it to disable authentication.</span><br><span class=\"line\"># - PasswordAuthenticator relies on username/password pairs to authenticate</span><br><span class=\"line\">#   users. It keeps usernames and hashed passwords in system_auth.roles table.</span><br><span class=\"line\">#   Please increase system_auth keyspace replication factor if you use this authenticator.</span><br><span class=\"line\">#   If using PasswordAuthenticator, CassandraRoleManager must also be used (see below)</span><br><span class=\"line\">#authenticator: AllowAllAuthenticator</span><br><span class=\"line\">authenticator: PasswordAuthenticator</span><br><span class=\"line\"># Authorization backend, implementing IAuthorizer; used to limit access/provide permissions</span><br><span class=\"line\"># Out of the box, Cassandra provides org.apache.cassandra.auth.&#123;AllowAllAuthorizer,</span><br><span class=\"line\"># CassandraAuthorizer&#125;.</span><br><span class=\"line\">#</span><br><span class=\"line\"># - AllowAllAuthorizer allows any action to any user - set it to disable authorization.</span><br><span class=\"line\"># - CassandraAuthorizer stores permissions in system_auth.role_permissions table. Please</span><br><span class=\"line\">#   increase system_auth keyspace replication factor if you use this authorizer.</span><br><span class=\"line\">#authorizer: AllowAllAuthorizer</span><br><span class=\"line\">authorizer: CassandraAuthorizer</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./cqlsh -ucassandra -pcassandra</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>创建超级用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER andy WITH PASSWORD &apos;123456&apos; SUPERUSER;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建普通用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER test1 WITH PASSWORD &apos;123456&apos; NOSUPERUSER;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER test WITH PASSWORD &apos;654321&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP USER cassandra; //不能删除当前登录的用户</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<p><strong>恭喜您！安装成功！下一篇讲java客户端与cqlsh。</strong></p>"},{"title":"Docker（一）","date":"2018-11-02T12:11:10.000Z","_content":"\nDocker 一<!--more-->\n\n#### Ubuntu Docker实战\n\n* 安装\n\n  安装Docker CE\n\n  卸载老版本\n\n  ```\n  sudo apt-get remove docker docker-engine docker-ce docker.io\n  ```\n\n  更新apt\n\n  ```\n  sudo apt-get update\n  sudo apt-get upgrade\n  ```\n\n  添加一些依赖\n\n  ```\n  sudo apt-get install  apt-transport-https ca-certificates  curl  software-properties-common\n  ```\n\n  添加docker官方的gpgkey\n\n  ```\n  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n  ```\n\n  stable源添加\n\n  ```\n  sudo add-apt-repository  \"deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs) stable\"\n  ```\n\n  ```\n  apt-get update\n  ```\n\n* **开始安装DockerCE**\n\n  ```\n  sudo apt-get -y install docker-ce\n  ```\n\n* 配置镜像加速\n\n* 概念简介\n\n  * Cgroup: 资源控制\n\n  * Namespace: 访问隔离\n\n  * rootfs: 文件系统隔离\n\n  * 容器引擎：生命周期控制\n\n    \n\n  \n\n  \n\n","source":"_posts/Docker（一）.md","raw":"---\ntitle: Docker（一）\ndate: 2018-11-02 20:11:10\ntags: [Docker]\ncategories: [Linux]\n---\n\nDocker 一<!--more-->\n\n#### Ubuntu Docker实战\n\n* 安装\n\n  安装Docker CE\n\n  卸载老版本\n\n  ```\n  sudo apt-get remove docker docker-engine docker-ce docker.io\n  ```\n\n  更新apt\n\n  ```\n  sudo apt-get update\n  sudo apt-get upgrade\n  ```\n\n  添加一些依赖\n\n  ```\n  sudo apt-get install  apt-transport-https ca-certificates  curl  software-properties-common\n  ```\n\n  添加docker官方的gpgkey\n\n  ```\n  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n  ```\n\n  stable源添加\n\n  ```\n  sudo add-apt-repository  \"deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs) stable\"\n  ```\n\n  ```\n  apt-get update\n  ```\n\n* **开始安装DockerCE**\n\n  ```\n  sudo apt-get -y install docker-ce\n  ```\n\n* 配置镜像加速\n\n* 概念简介\n\n  * Cgroup: 资源控制\n\n  * Namespace: 访问隔离\n\n  * rootfs: 文件系统隔离\n\n  * 容器引擎：生命周期控制\n\n    \n\n  \n\n  \n\n","slug":"Docker（一）","published":1,"updated":"2022-09-03T07:30:55.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz82q0006twfas2m9ffiw","content":"<p>Docker 一<a id=\"more\"></a></p>\n<h4 id=\"Ubuntu-Docker实战\"><a href=\"#Ubuntu-Docker实战\" class=\"headerlink\" title=\"Ubuntu Docker实战\"></a>Ubuntu Docker实战</h4><ul>\n<li><p>安装</p>\n<p>安装Docker CE</p>\n<p>卸载老版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove docker docker-engine docker-ce docker.io</span><br></pre></td></tr></table></figure>\n\n<p>更新apt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>\n\n<p>添加一些依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install  apt-transport-https ca-certificates  curl  software-properties-common</span><br></pre></td></tr></table></figure>\n\n<p>添加docker官方的gpgkey</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n\n<p>stable源添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository  &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs) stable&quot;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>开始安装DockerCE</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置镜像加速</p>\n</li>\n<li><p>概念简介</p>\n<ul>\n<li><p>Cgroup: 资源控制</p>\n</li>\n<li><p>Namespace: 访问隔离</p>\n</li>\n<li><p>rootfs: 文件系统隔离</p>\n</li>\n<li><p>容器引擎：生命周期控制</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Docker 一</p>","more":"<p></p>\n<h4 id=\"Ubuntu-Docker实战\"><a href=\"#Ubuntu-Docker实战\" class=\"headerlink\" title=\"Ubuntu Docker实战\"></a>Ubuntu Docker实战</h4><ul>\n<li><p>安装</p>\n<p>安装Docker CE</p>\n<p>卸载老版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove docker docker-engine docker-ce docker.io</span><br></pre></td></tr></table></figure>\n\n<p>更新apt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>\n\n<p>添加一些依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install  apt-transport-https ca-certificates  curl  software-properties-common</span><br></pre></td></tr></table></figure>\n\n<p>添加docker官方的gpgkey</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n\n<p>stable源添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository  &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs) stable&quot;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>开始安装DockerCE</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置镜像加速</p>\n</li>\n<li><p>概念简介</p>\n<ul>\n<li><p>Cgroup: 资源控制</p>\n</li>\n<li><p>Namespace: 访问隔离</p>\n</li>\n<li><p>rootfs: 文件系统隔离</p>\n</li>\n<li><p>容器引擎：生命周期控制</p>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"FRP搭建使用","date":"2018-04-26T13:50:25.000Z","_content":"\n使用FRP进行内网穿透<!--more-->\n\n* 首先要有一台拥有公网ip的服务器，和一台本地服务器\n\n  * 在服务端搭建frpc环境,服务端为v家的小vps\n\n    下载：\n\n    ```\n    wget https://github.com/fatedier/frp/releases/download/v0.17.0/frp_0.17.0_linux_amd64.tar.gz\n    ```\n\n    ```\n    tar -zxvf frp_0.17.0_linux_amd64.tar.gz\n    ```\n\n    ```\n    cd frp_0.17.0_linux_amd64\n    ```\n\n    ```\n    外网作为服务端 无需客户端配置故可以删除\n    rm -rf frpc.ini\n    rm -rf frpc\n    ```\n\n    ```\n    修改配置\n    vim frps.ini\n\n    bind_port 为服务绑定的端口\n    [common]\n    bind_port = 7000\n    ```\n\n    ```\n    后台启动\n    nohup ./frps -c ./frps.ini &\n    ```\n\n  * 在客户端就是本机环境搭建客户端环境 frps,客户端为centos 7x64\n\n    ```\n    wget https://github.com/fatedier/frp/releases/download/v0.17.0/frp_0.17.0_linux_amd64.tar.gz\n    ```\n\n    ```\n    tar -zxvf frp_0.17.0_linux_amd64.tar.gz\n    ```\n\n    ```\n    cd frp_0.17.0_linux_amd64\n    客户端删掉服务端配置\n\n    rm -rf frps\n\n    rm -rf frps.ini\n    ```\n\n    ####重点来了####\n\n    ```\n    vim  frpc.ini\n\n    [common]\n    server_addr = x.x.x.x\n    server_port = 7000\n\n    [web]\n    type = http\n    local_port = 80\n    custom_domains = www.yourdomain.com\n\n    [ssh]\n    type = tcp\n    local_ip = 127.0.0.1\n    local_port = 22\n    remote_port = 6000\n\n    server_addr 填写服务端的公网ip地址\n    server_port 对应服务端的bind_port\n    \t\n    web项\n    type 填写http\n    local_port填写80\n    custom_domian填写外网域名或者外网ip即公网ip\n\n    #ssh项 用来做通过ssh链接客户端 暂不介绍 官方仓库有\n\n    \t\n    ```\n\n    ```\n    启动\n    nohup ./frpc -c ./frpc.ini &\n    ```\n\n  * 设置开机启动\n\n    ```\n    vim /etc/systemd/system/frps.service\n    ```\n\n    ```\n    编辑该文件\n    [Unit]\n    Description=frps daemon\n    After=syslog.target  network.target\n    Wants=network.target\n\n    [Service]\n    Type=simple\n    ExecStart=/data/soft/frp_0.17.0_linux_amd64/frpc -c /data/soft/frp_0.17.0_linux_amd64/frpc.ini\n    Restart= always\n    RestartSec=1min\n    ExecStop=/usr/bin/killall frpc\n\n    [Install]\n    WantedBy=multi-user.target\n    ```\n\n    ```\n    $ sudo systemctl start frps\n    $ sudo systemctl enable frps\n    ```\n\n  * 那么现在就可以通过外网ip访问本地的web应用了\n\n    ​\n\n    []: https://github.com/fatedier/frp\n\n    ​","source":"_posts/FRP搭建使用.md","raw":"---\ntitle: FRP搭建使用\ndate: 2018-04-26 21:50:25\ntags: [内网穿透]\ncategories: [Linux]\n---\n\n使用FRP进行内网穿透<!--more-->\n\n* 首先要有一台拥有公网ip的服务器，和一台本地服务器\n\n  * 在服务端搭建frpc环境,服务端为v家的小vps\n\n    下载：\n\n    ```\n    wget https://github.com/fatedier/frp/releases/download/v0.17.0/frp_0.17.0_linux_amd64.tar.gz\n    ```\n\n    ```\n    tar -zxvf frp_0.17.0_linux_amd64.tar.gz\n    ```\n\n    ```\n    cd frp_0.17.0_linux_amd64\n    ```\n\n    ```\n    外网作为服务端 无需客户端配置故可以删除\n    rm -rf frpc.ini\n    rm -rf frpc\n    ```\n\n    ```\n    修改配置\n    vim frps.ini\n\n    bind_port 为服务绑定的端口\n    [common]\n    bind_port = 7000\n    ```\n\n    ```\n    后台启动\n    nohup ./frps -c ./frps.ini &\n    ```\n\n  * 在客户端就是本机环境搭建客户端环境 frps,客户端为centos 7x64\n\n    ```\n    wget https://github.com/fatedier/frp/releases/download/v0.17.0/frp_0.17.0_linux_amd64.tar.gz\n    ```\n\n    ```\n    tar -zxvf frp_0.17.0_linux_amd64.tar.gz\n    ```\n\n    ```\n    cd frp_0.17.0_linux_amd64\n    客户端删掉服务端配置\n\n    rm -rf frps\n\n    rm -rf frps.ini\n    ```\n\n    ####重点来了####\n\n    ```\n    vim  frpc.ini\n\n    [common]\n    server_addr = x.x.x.x\n    server_port = 7000\n\n    [web]\n    type = http\n    local_port = 80\n    custom_domains = www.yourdomain.com\n\n    [ssh]\n    type = tcp\n    local_ip = 127.0.0.1\n    local_port = 22\n    remote_port = 6000\n\n    server_addr 填写服务端的公网ip地址\n    server_port 对应服务端的bind_port\n    \t\n    web项\n    type 填写http\n    local_port填写80\n    custom_domian填写外网域名或者外网ip即公网ip\n\n    #ssh项 用来做通过ssh链接客户端 暂不介绍 官方仓库有\n\n    \t\n    ```\n\n    ```\n    启动\n    nohup ./frpc -c ./frpc.ini &\n    ```\n\n  * 设置开机启动\n\n    ```\n    vim /etc/systemd/system/frps.service\n    ```\n\n    ```\n    编辑该文件\n    [Unit]\n    Description=frps daemon\n    After=syslog.target  network.target\n    Wants=network.target\n\n    [Service]\n    Type=simple\n    ExecStart=/data/soft/frp_0.17.0_linux_amd64/frpc -c /data/soft/frp_0.17.0_linux_amd64/frpc.ini\n    Restart= always\n    RestartSec=1min\n    ExecStop=/usr/bin/killall frpc\n\n    [Install]\n    WantedBy=multi-user.target\n    ```\n\n    ```\n    $ sudo systemctl start frps\n    $ sudo systemctl enable frps\n    ```\n\n  * 那么现在就可以通过外网ip访问本地的web应用了\n\n    ​\n\n    []: https://github.com/fatedier/frp\n\n    ​","slug":"FRP搭建使用","published":1,"updated":"2022-09-03T07:30:55.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz82u000atwfadhzypjl6","content":"<p>使用FRP进行内网穿透<a id=\"more\"></a></p>\n<ul>\n<li><p>首先要有一台拥有公网ip的服务器，和一台本地服务器</p>\n<ul>\n<li><p>在服务端搭建frpc环境,服务端为v家的小vps</p>\n<p>下载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.17.0/frp_0.17.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf frp_0.17.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd frp_0.17.0_linux_amd64</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">外网作为服务端 无需客户端配置故可以删除</span><br><span class=\"line\">rm -rf frpc.ini</span><br><span class=\"line\">rm -rf frpc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改配置</span><br><span class=\"line\">vim frps.ini</span><br><span class=\"line\"></span><br><span class=\"line\">bind_port 为服务绑定的端口</span><br><span class=\"line\">[common]</span><br><span class=\"line\">bind_port = 7000</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后台启动</span><br><span class=\"line\">nohup ./frps -c ./frps.ini &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在客户端就是本机环境搭建客户端环境 frps,客户端为centos 7x64</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.17.0/frp_0.17.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf frp_0.17.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd frp_0.17.0_linux_amd64</span><br><span class=\"line\">客户端删掉服务端配置</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf frps</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf frps.ini</span><br></pre></td></tr></table></figure>\n\n<p>####重点来了####</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim  frpc.ini</span><br><span class=\"line\"></span><br><span class=\"line\">[common]</span><br><span class=\"line\">server_addr = x.x.x.x</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\">[web]</span><br><span class=\"line\">type = http</span><br><span class=\"line\">local_port = 80</span><br><span class=\"line\">custom_domains = www.yourdomain.com</span><br><span class=\"line\"></span><br><span class=\"line\">[ssh]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 6000</span><br><span class=\"line\"></span><br><span class=\"line\">server_addr 填写服务端的公网ip地址</span><br><span class=\"line\">server_port 对应服务端的bind_port</span><br><span class=\"line\">\t</span><br><span class=\"line\">web项</span><br><span class=\"line\">type 填写http</span><br><span class=\"line\">local_port填写80</span><br><span class=\"line\">custom_domian填写外网域名或者外网ip即公网ip</span><br><span class=\"line\"></span><br><span class=\"line\">#ssh项 用来做通过ssh链接客户端 暂不介绍 官方仓库有</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动</span><br><span class=\"line\">nohup ./frpc -c ./frpc.ini &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置开机启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/systemd/system/frps.service</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编辑该文件</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=frps daemon</span><br><span class=\"line\">After=syslog.target  network.target</span><br><span class=\"line\">Wants=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">ExecStart=/data/soft/frp_0.17.0_linux_amd64/frpc -c /data/soft/frp_0.17.0_linux_amd64/frpc.ini</span><br><span class=\"line\">Restart= always</span><br><span class=\"line\">RestartSec=1min</span><br><span class=\"line\">ExecStop=/usr/bin/killall frpc</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl start frps</span><br><span class=\"line\">$ sudo systemctl enable frps</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>那么现在就可以通过外网ip访问本地的web应用了</p>\n<p>​</p>\n<p>[]: <a href=\"https://github.com/fatedier/frp\" target=\"_blank\" rel=\"noopener\">https://github.com/fatedier/frp</a></p>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>使用FRP进行内网穿透</p>","more":"<p></p>\n<ul>\n<li><p>首先要有一台拥有公网ip的服务器，和一台本地服务器</p>\n<ul>\n<li><p>在服务端搭建frpc环境,服务端为v家的小vps</p>\n<p>下载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.17.0/frp_0.17.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf frp_0.17.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd frp_0.17.0_linux_amd64</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">外网作为服务端 无需客户端配置故可以删除</span><br><span class=\"line\">rm -rf frpc.ini</span><br><span class=\"line\">rm -rf frpc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改配置</span><br><span class=\"line\">vim frps.ini</span><br><span class=\"line\"></span><br><span class=\"line\">bind_port 为服务绑定的端口</span><br><span class=\"line\">[common]</span><br><span class=\"line\">bind_port = 7000</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后台启动</span><br><span class=\"line\">nohup ./frps -c ./frps.ini &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在客户端就是本机环境搭建客户端环境 frps,客户端为centos 7x64</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.17.0/frp_0.17.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf frp_0.17.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd frp_0.17.0_linux_amd64</span><br><span class=\"line\">客户端删掉服务端配置</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf frps</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf frps.ini</span><br></pre></td></tr></table></figure>\n\n<p>####重点来了####</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim  frpc.ini</span><br><span class=\"line\"></span><br><span class=\"line\">[common]</span><br><span class=\"line\">server_addr = x.x.x.x</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\">[web]</span><br><span class=\"line\">type = http</span><br><span class=\"line\">local_port = 80</span><br><span class=\"line\">custom_domains = www.yourdomain.com</span><br><span class=\"line\"></span><br><span class=\"line\">[ssh]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 6000</span><br><span class=\"line\"></span><br><span class=\"line\">server_addr 填写服务端的公网ip地址</span><br><span class=\"line\">server_port 对应服务端的bind_port</span><br><span class=\"line\">\t</span><br><span class=\"line\">web项</span><br><span class=\"line\">type 填写http</span><br><span class=\"line\">local_port填写80</span><br><span class=\"line\">custom_domian填写外网域名或者外网ip即公网ip</span><br><span class=\"line\"></span><br><span class=\"line\">#ssh项 用来做通过ssh链接客户端 暂不介绍 官方仓库有</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动</span><br><span class=\"line\">nohup ./frpc -c ./frpc.ini &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置开机启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/systemd/system/frps.service</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编辑该文件</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=frps daemon</span><br><span class=\"line\">After=syslog.target  network.target</span><br><span class=\"line\">Wants=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">ExecStart=/data/soft/frp_0.17.0_linux_amd64/frpc -c /data/soft/frp_0.17.0_linux_amd64/frpc.ini</span><br><span class=\"line\">Restart= always</span><br><span class=\"line\">RestartSec=1min</span><br><span class=\"line\">ExecStop=/usr/bin/killall frpc</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl start frps</span><br><span class=\"line\">$ sudo systemctl enable frps</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>那么现在就可以通过外网ip访问本地的web应用了</p>\n<p>​</p>\n<p>[]: <a href=\"https://github.com/fatedier/frp\" target=\"_blank\" rel=\"noopener\">https://github.com/fatedier/frp</a></p>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"Git的sshlkey生成","date":"2018-03-10T05:44:25.000Z","_content":"\n​\tgit生成sshkey 省的忘<!--more-->\n\n * git config --global user.name \"github名\"\n * git config --global user.email \"邮箱地址\"\n * ssh-keygen -t rsa -C \"邮箱地址\"  ","source":"_posts/Git的sshlkey生成.md","raw":"---\ntitle: Git的sshlkey生成\ndate: 2018-03-10 13:44:25\ntags: [Git]\ncategories: [Git]\n---\n\n​\tgit生成sshkey 省的忘<!--more-->\n\n * git config --global user.name \"github名\"\n * git config --global user.email \"邮箱地址\"\n * ssh-keygen -t rsa -C \"邮箱地址\"  ","slug":"Git的sshlkey生成","published":1,"updated":"2022-09-03T07:30:55.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz82x000btwfaj9f22kyd","content":"<p>​    git生成sshkey 省的忘<a id=\"more\"></a></p>\n<ul>\n<li>git config –global user.name “github名”</li>\n<li>git config –global user.email “邮箱地址”</li>\n<li>ssh-keygen -t rsa -C “邮箱地址”  </li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>​    git生成sshkey 省的忘</p>","more":"<p></p>\n<ul>\n<li>git config –global user.name “github名”</li>\n<li>git config –global user.email “邮箱地址”</li>\n<li>ssh-keygen -t rsa -C “邮箱地址”  </li>\n</ul>"},{"title":"JavaPuppeteer","date":"2019-08-26T16:04:03.000Z","_content":"\nJava+Puppeteer<!--more-->\n\n* 安装node(版本至少6.4)\n\n* 安装puppeteer\n\n  `npm i puppeteer`\n\n  `npm i puppeteer-core`\n\n  *忽略Chromium 也可以通过设置环境变量set PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1阻止下载  Chromium*\n\n  `npm i –save puppeteer –ignore-scripts`\n\n","source":"_posts/JavaPuppeteer.md","raw":"---\ntitle: JavaPuppeteer\ndate: 2019-08-27 00:04:03\ntags:\n---\n\nJava+Puppeteer<!--more-->\n\n* 安装node(版本至少6.4)\n\n* 安装puppeteer\n\n  `npm i puppeteer`\n\n  `npm i puppeteer-core`\n\n  *忽略Chromium 也可以通过设置环境变量set PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1阻止下载  Chromium*\n\n  `npm i –save puppeteer –ignore-scripts`\n\n","slug":"JavaPuppeteer","published":1,"updated":"2022-09-03T07:30:55.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz830000ftwfaqwdp9jil","content":"<p>Java+Puppeteer<a id=\"more\"></a></p>\n<ul>\n<li><p>安装node(版本至少6.4)</p>\n</li>\n<li><p>安装puppeteer</p>\n<p><code>npm i puppeteer</code></p>\n<p><code>npm i puppeteer-core</code></p>\n<p><em>忽略Chromium 也可以通过设置环境变量set PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1阻止下载  Chromium</em></p>\n<p><code>npm i –save puppeteer –ignore-scripts</code></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Java+Puppeteer</p>","more":"<p></p>\n<ul>\n<li><p>安装node(版本至少6.4)</p>\n</li>\n<li><p>安装puppeteer</p>\n<p><code>npm i puppeteer</code></p>\n<p><code>npm i puppeteer-core</code></p>\n<p><em>忽略Chromium 也可以通过设置环境变量set PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1阻止下载  Chromium</em></p>\n<p><code>npm i –save puppeteer –ignore-scripts</code></p>\n</li>\n</ul>"},{"title":"Java单例","date":"2018-03-19T13:54:38.000Z","_content":"\n \n\n​\t单例模式了解下<!--more-->记录下常用设计模式\n\n* 饿汉式\n\n  ```\n  public class Singleton {   \n      private static Singleton = new Singleton();\n      private Singleton() {}\n      public static getSignleton(){\n          return singleton;\n      }\n  }\n  ```\n\n  **好处**：\n\n   * 编写简单\n\n  **缺点**：\n\n  * 无法懒加载，饿汉嘛 你要我就给\n\n* 懒汉式：\n\n  ```\n   public class SingletonDemo {\n    private static SingletonDemo instance;\n      private SingletonDemo(){\n\n      }\n      public static SingletonDemo getInstance(){\n          if(instance==null){\n              instance=new SingletonDemo();\n          }\n          return instance;\n      }\n  ```\n\n  **优点**：\n\n  * 实现懒加载\n\n  **缺点**:\n\n  * 未考虑线程安全，多线程环境下\n\n* 加锁懒汉式\n\n  ```\n  public class Singleton {\n      private static volatile Singleton singleton = null;\n       \n      private Singleton(){}\n       \n      public static Singleton getSingleton(){\n          if(singleton == null){\n              synchronized (Singleton.class){\n                  if(singleton == null){\n                      singleton = new Singleton();\n                  }\n              }\n          }\n          return singleton;\n      }    \n  }\n  ```\n\n  **优点**：\n\n   * 线程安全，保证效率，避免在锁前排队\n\n  **缺点**：\n\n  * volatile 存在问题\n\n* 枚举式\n\n  ```\n  public Class A{\n      \n  }\n  public enum A_Singleton {\n     \tINSTANCE;\n      private A instance;\n      A_Singleton() {\n          instance = new A();\n      }\n      public A getInstance() {\n          return instance;\n      }\n  }\n  ```\n\n  **优点**：\n\n  * 自由序列化\n  * 保证只有一个实例\n  * 线程安全 **推荐这种写法**\n\n* 静态内部类\n\n  ```\n  public class Singleton {\n      private static class Holder {\n          private static Singleton singleton = new Singleton();\n      }\n       \n      private Singleton(){}\n           \n      public static Singleton getSingleton(){\n          return Holder.singleton;\n      }\n  }\n  ```\n\n   **优点**：\n\n  * 静态内部类只加载一次 \n  * 静态实例在类加载时候就加载了\n\n  **缺点**：\n\n  * 额外的序列化工作如（Serializable、transient、readResolve()）,否则每次反序列化一个已序列化的对象实例都会创建一个新的实例","source":"_posts/Java单例.md","raw":"---\ntitle: Java单例\ndate: 2018-03-19 21:54:38\ntags: [Java]\ncategories: [Java，设计模式]\n---\n\n \n\n​\t单例模式了解下<!--more-->记录下常用设计模式\n\n* 饿汉式\n\n  ```\n  public class Singleton {   \n      private static Singleton = new Singleton();\n      private Singleton() {}\n      public static getSignleton(){\n          return singleton;\n      }\n  }\n  ```\n\n  **好处**：\n\n   * 编写简单\n\n  **缺点**：\n\n  * 无法懒加载，饿汉嘛 你要我就给\n\n* 懒汉式：\n\n  ```\n   public class SingletonDemo {\n    private static SingletonDemo instance;\n      private SingletonDemo(){\n\n      }\n      public static SingletonDemo getInstance(){\n          if(instance==null){\n              instance=new SingletonDemo();\n          }\n          return instance;\n      }\n  ```\n\n  **优点**：\n\n  * 实现懒加载\n\n  **缺点**:\n\n  * 未考虑线程安全，多线程环境下\n\n* 加锁懒汉式\n\n  ```\n  public class Singleton {\n      private static volatile Singleton singleton = null;\n       \n      private Singleton(){}\n       \n      public static Singleton getSingleton(){\n          if(singleton == null){\n              synchronized (Singleton.class){\n                  if(singleton == null){\n                      singleton = new Singleton();\n                  }\n              }\n          }\n          return singleton;\n      }    \n  }\n  ```\n\n  **优点**：\n\n   * 线程安全，保证效率，避免在锁前排队\n\n  **缺点**：\n\n  * volatile 存在问题\n\n* 枚举式\n\n  ```\n  public Class A{\n      \n  }\n  public enum A_Singleton {\n     \tINSTANCE;\n      private A instance;\n      A_Singleton() {\n          instance = new A();\n      }\n      public A getInstance() {\n          return instance;\n      }\n  }\n  ```\n\n  **优点**：\n\n  * 自由序列化\n  * 保证只有一个实例\n  * 线程安全 **推荐这种写法**\n\n* 静态内部类\n\n  ```\n  public class Singleton {\n      private static class Holder {\n          private static Singleton singleton = new Singleton();\n      }\n       \n      private Singleton(){}\n           \n      public static Singleton getSingleton(){\n          return Holder.singleton;\n      }\n  }\n  ```\n\n   **优点**：\n\n  * 静态内部类只加载一次 \n  * 静态实例在类加载时候就加载了\n\n  **缺点**：\n\n  * 额外的序列化工作如（Serializable、transient、readResolve()）,否则每次反序列化一个已序列化的对象实例都会创建一个新的实例","slug":"Java单例","published":1,"updated":"2022-09-03T07:30:55.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz834000htwfa25mpqr98","content":"<p>​    单例模式了解下<a id=\"more\"></a>记录下常用设计模式</p>\n<ul>\n<li><p>饿汉式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton &#123;   </span><br><span class=\"line\">    private static Singleton = new Singleton();</span><br><span class=\"line\">    private Singleton() &#123;&#125;</span><br><span class=\"line\">    public static getSignleton()&#123;</span><br><span class=\"line\">        return singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>好处</strong>：</p>\n<ul>\n<li>编写简单</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>无法懒加载，饿汉嘛 你要我就给</li>\n</ul>\n</li>\n<li><p>懒汉式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SingletonDemo &#123;</span><br><span class=\"line\"> private static SingletonDemo instance;</span><br><span class=\"line\">   private SingletonDemo()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   public static SingletonDemo getInstance()&#123;</span><br><span class=\"line\">       if(instance==null)&#123;</span><br><span class=\"line\">           instance=new SingletonDemo();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       return instance;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点</strong>：</p>\n<ul>\n<li>实现懒加载</li>\n</ul>\n<p><strong>缺点</strong>:</p>\n<ul>\n<li>未考虑线程安全，多线程环境下</li>\n</ul>\n</li>\n<li><p>加锁懒汉式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton &#123;</span><br><span class=\"line\">    private static volatile Singleton singleton = null;</span><br><span class=\"line\">     </span><br><span class=\"line\">    private Singleton()&#123;&#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    public static Singleton getSingleton()&#123;</span><br><span class=\"line\">        if(singleton == null)&#123;</span><br><span class=\"line\">            synchronized (Singleton.class)&#123;</span><br><span class=\"line\">                if(singleton == null)&#123;</span><br><span class=\"line\">                    singleton = new Singleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return singleton;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点</strong>：</p>\n<ul>\n<li>线程安全，保证效率，避免在锁前排队</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>volatile 存在问题</li>\n</ul>\n</li>\n<li><p>枚举式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Class A&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public enum A_Singleton &#123;</span><br><span class=\"line\">   \tINSTANCE;</span><br><span class=\"line\">    private A instance;</span><br><span class=\"line\">    A_Singleton() &#123;</span><br><span class=\"line\">        instance = new A();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public A getInstance() &#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点</strong>：</p>\n<ul>\n<li>自由序列化</li>\n<li>保证只有一个实例</li>\n<li>线程安全 <strong>推荐这种写法</strong></li>\n</ul>\n</li>\n<li><p>静态内部类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton &#123;</span><br><span class=\"line\">    private static class Holder &#123;</span><br><span class=\"line\">        private static Singleton singleton = new Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    private Singleton()&#123;&#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">    public static Singleton getSingleton()&#123;</span><br><span class=\"line\">        return Holder.singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <strong>优点</strong>：</p>\n<ul>\n<li>静态内部类只加载一次 </li>\n<li>静态实例在类加载时候就加载了</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>额外的序列化工作如（Serializable、transient、readResolve()）,否则每次反序列化一个已序列化的对象实例都会创建一个新的实例</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>​    单例模式了解下</p>","more":"记录下常用设计模式<p></p>\n<ul>\n<li><p>饿汉式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton &#123;   </span><br><span class=\"line\">    private static Singleton = new Singleton();</span><br><span class=\"line\">    private Singleton() &#123;&#125;</span><br><span class=\"line\">    public static getSignleton()&#123;</span><br><span class=\"line\">        return singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>好处</strong>：</p>\n<ul>\n<li>编写简单</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>无法懒加载，饿汉嘛 你要我就给</li>\n</ul>\n</li>\n<li><p>懒汉式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SingletonDemo &#123;</span><br><span class=\"line\"> private static SingletonDemo instance;</span><br><span class=\"line\">   private SingletonDemo()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   public static SingletonDemo getInstance()&#123;</span><br><span class=\"line\">       if(instance==null)&#123;</span><br><span class=\"line\">           instance=new SingletonDemo();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       return instance;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点</strong>：</p>\n<ul>\n<li>实现懒加载</li>\n</ul>\n<p><strong>缺点</strong>:</p>\n<ul>\n<li>未考虑线程安全，多线程环境下</li>\n</ul>\n</li>\n<li><p>加锁懒汉式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton &#123;</span><br><span class=\"line\">    private static volatile Singleton singleton = null;</span><br><span class=\"line\">     </span><br><span class=\"line\">    private Singleton()&#123;&#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    public static Singleton getSingleton()&#123;</span><br><span class=\"line\">        if(singleton == null)&#123;</span><br><span class=\"line\">            synchronized (Singleton.class)&#123;</span><br><span class=\"line\">                if(singleton == null)&#123;</span><br><span class=\"line\">                    singleton = new Singleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return singleton;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点</strong>：</p>\n<ul>\n<li>线程安全，保证效率，避免在锁前排队</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>volatile 存在问题</li>\n</ul>\n</li>\n<li><p>枚举式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Class A&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public enum A_Singleton &#123;</span><br><span class=\"line\">   \tINSTANCE;</span><br><span class=\"line\">    private A instance;</span><br><span class=\"line\">    A_Singleton() &#123;</span><br><span class=\"line\">        instance = new A();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public A getInstance() &#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点</strong>：</p>\n<ul>\n<li>自由序列化</li>\n<li>保证只有一个实例</li>\n<li>线程安全 <strong>推荐这种写法</strong></li>\n</ul>\n</li>\n<li><p>静态内部类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton &#123;</span><br><span class=\"line\">    private static class Holder &#123;</span><br><span class=\"line\">        private static Singleton singleton = new Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    private Singleton()&#123;&#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">    public static Singleton getSingleton()&#123;</span><br><span class=\"line\">        return Holder.singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <strong>优点</strong>：</p>\n<ul>\n<li>静态内部类只加载一次 </li>\n<li>静态实例在类加载时候就加载了</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>额外的序列化工作如（Serializable、transient、readResolve()）,否则每次反序列化一个已序列化的对象实例都会创建一个新的实例</li>\n</ul>\n</li>\n</ul>"},{"title":"Javai线程状态","date":"2018-03-10T05:28:37.000Z","_content":"\n​\tjava线程状态的介绍<!--more-->\n\n# java 线程状态\n\njava 线程有以下几个状态\n\n- new 初始状态\n\n- runnable 运行状态（包括就绪和运行）\n\n- blocked 阻塞状态\n\n- waiting 等待状态, 需要其他线程特定动作唤醒（通知或者中断）\n\n- time-waiting 超时等待状态，可以在指定时间内返回。\n\n- terminated 终止状态\n\n  ## 创建\n\n  java 构造线程有两种办法, Thread 类和 Runnable 接口, Thread 的类本身实现了 Runnable 接口。\n\n  常见的作法, 是通过 thread 类的 public Thread(Runnable target) 构造函数来创建线程。\n\n  ```\n  \tnew Thread(new Runnable() {\n  \t\t\t\t\n  \t@Override\n  \tpublic void run() {\n  \t\t// TODO Auto-generated method stub\n  \t\t\n  \t}\n  }); \n  ```\n\n  thread 类的初始话代码\n\n  ```\n  private void init(ThreadGroup g, Runnable target, String name,\n                    long stackSize, AccessControlContext acc) {\n      if (name == null) {\n          throw new NullPointerException(\"name cannot be null\");\n      }\n      this.name = name;\n      Thread parent = currentThread();\n      SecurityManager security = System.getSecurityManager();\n      if (g == null) {\n          if (security != null) {\n              g = security.getThreadGroup();\n          }\n      \n          if (g == null) {\n              g = parent.getThreadGroup();\n          }\n      }\n     \n      g.checkAccess();\n   \n      if (security != null) {\n          if (isCCLOverridden(getClass())) {\n              security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);\n          }\n      }\n      g.addUnstarted();\n      this.group = g;\n      this.daemon = parent.isDaemon();\n      this.priority = parent.getPriority();\n      if (security == null || isCCLOverridden(parent.getClass()))\n          this.contextClassLoader = parent.getContextClassLoader();\n      else\n          this.contextClassLoader = parent.contextClassLoader;\n      this.inheritedAccessControlContext =\n              acc != null ? acc : AccessController.getContext();\n      this.target = target;\n      setPriority(priority);\n      if (parent.inheritableThreadLocals != null)\n          this.inheritableThreadLocals =\n              ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);\n      this.stackSize = stackSize;\n     \n      tid = nextThreadID();\n  }\n  ```\n\n  从这段代码可以看出以下几点\n\n  - 当前线程为创建线程的父线程\n\n  - child 线程继承 parent 的 Daemon、优先级、和加载资源的 contextClassLoader 和一个可以继承的 ThreadLocal。\n\n    **Daemon 线程（后台线程）的 finally 块代码不会执行**\n\n  ## 运行\n\n  Thread 类的 start 方法起来运行线程。底层通过调用 navate 方法来运行线程。\n\n  **start（）方法来启动线程，真正实现了多线程运行，这时无需等待 run 方法体代码执行完毕而直接继续执行下面的代码 **\n\n  **run（）方法当作普通方法的方式调用，程序还是要顺序执行，还是要等待 run 方法体执行完毕后才可继续执行下面的代码**\n\n  ## 阻塞\n\n  线程执行到 monitorenter 保护的代码快时，会去获取 monitorenter 对应的对象锁，如未获取，则该线程进入同步队列，状态为阻塞。\n\n  **任意对象都拥有自己的 monitor，包括 class 对象。**\n\n  ## 等待 / 唤醒\n\n  线程等待的方法主要有下面几种\n\n  - object.wait() / object.wait(long)\n\n  - object.join() / object.join(long)\n\n  - lockSupport.park() / lockSupport.park(long)\n\n    当线程调用某个对象的 wati 方法，进入等待。当另一个线程调用该对象的 notify()/notifyall() 方法，之前等待的线程唤醒 \n\n  线程唤醒的方法注意下面几种\n\n  - object.notify()/notifyAll()\n\n  - lockSupport.unpark(Thread)\n\n    **调用对象 wait 或者 notify 方法的前题是获取当前对象的内置锁。 **\n\n    通过 wait/notify 设计的经典作法\n\n    等待方：\n\n    - 获取对象锁\n    - 条件检查\n    - 为假则等待\n    - 为真则执行后面的逻辑\n\n    唤醒方：\n\n    - 获取对象锁\n\n    - 改变条件\n\n    - 通知所有等待在对象的线程\n\n      **条件变量用 volatile 修饰来保证可见性**\n\n    ## 终止\n\n    线程对应的 run 方法运行完毕，则线程终止。不推荐使用 stop 来终止线程。可以通过状态变量来终止线程。\n\n    []: http://www.chenxun.wiki/2017/01/21/thread-06/\n\n    ​","source":"_posts/Javai线程状态.md","raw":"---\ntitle: Javai线程状态\ndate: 2018-03-10 13:28:37\ntags: [转载]\ncategories: [多线程]\n---\n\n​\tjava线程状态的介绍<!--more-->\n\n# java 线程状态\n\njava 线程有以下几个状态\n\n- new 初始状态\n\n- runnable 运行状态（包括就绪和运行）\n\n- blocked 阻塞状态\n\n- waiting 等待状态, 需要其他线程特定动作唤醒（通知或者中断）\n\n- time-waiting 超时等待状态，可以在指定时间内返回。\n\n- terminated 终止状态\n\n  ## 创建\n\n  java 构造线程有两种办法, Thread 类和 Runnable 接口, Thread 的类本身实现了 Runnable 接口。\n\n  常见的作法, 是通过 thread 类的 public Thread(Runnable target) 构造函数来创建线程。\n\n  ```\n  \tnew Thread(new Runnable() {\n  \t\t\t\t\n  \t@Override\n  \tpublic void run() {\n  \t\t// TODO Auto-generated method stub\n  \t\t\n  \t}\n  }); \n  ```\n\n  thread 类的初始话代码\n\n  ```\n  private void init(ThreadGroup g, Runnable target, String name,\n                    long stackSize, AccessControlContext acc) {\n      if (name == null) {\n          throw new NullPointerException(\"name cannot be null\");\n      }\n      this.name = name;\n      Thread parent = currentThread();\n      SecurityManager security = System.getSecurityManager();\n      if (g == null) {\n          if (security != null) {\n              g = security.getThreadGroup();\n          }\n      \n          if (g == null) {\n              g = parent.getThreadGroup();\n          }\n      }\n     \n      g.checkAccess();\n   \n      if (security != null) {\n          if (isCCLOverridden(getClass())) {\n              security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);\n          }\n      }\n      g.addUnstarted();\n      this.group = g;\n      this.daemon = parent.isDaemon();\n      this.priority = parent.getPriority();\n      if (security == null || isCCLOverridden(parent.getClass()))\n          this.contextClassLoader = parent.getContextClassLoader();\n      else\n          this.contextClassLoader = parent.contextClassLoader;\n      this.inheritedAccessControlContext =\n              acc != null ? acc : AccessController.getContext();\n      this.target = target;\n      setPriority(priority);\n      if (parent.inheritableThreadLocals != null)\n          this.inheritableThreadLocals =\n              ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);\n      this.stackSize = stackSize;\n     \n      tid = nextThreadID();\n  }\n  ```\n\n  从这段代码可以看出以下几点\n\n  - 当前线程为创建线程的父线程\n\n  - child 线程继承 parent 的 Daemon、优先级、和加载资源的 contextClassLoader 和一个可以继承的 ThreadLocal。\n\n    **Daemon 线程（后台线程）的 finally 块代码不会执行**\n\n  ## 运行\n\n  Thread 类的 start 方法起来运行线程。底层通过调用 navate 方法来运行线程。\n\n  **start（）方法来启动线程，真正实现了多线程运行，这时无需等待 run 方法体代码执行完毕而直接继续执行下面的代码 **\n\n  **run（）方法当作普通方法的方式调用，程序还是要顺序执行，还是要等待 run 方法体执行完毕后才可继续执行下面的代码**\n\n  ## 阻塞\n\n  线程执行到 monitorenter 保护的代码快时，会去获取 monitorenter 对应的对象锁，如未获取，则该线程进入同步队列，状态为阻塞。\n\n  **任意对象都拥有自己的 monitor，包括 class 对象。**\n\n  ## 等待 / 唤醒\n\n  线程等待的方法主要有下面几种\n\n  - object.wait() / object.wait(long)\n\n  - object.join() / object.join(long)\n\n  - lockSupport.park() / lockSupport.park(long)\n\n    当线程调用某个对象的 wati 方法，进入等待。当另一个线程调用该对象的 notify()/notifyall() 方法，之前等待的线程唤醒 \n\n  线程唤醒的方法注意下面几种\n\n  - object.notify()/notifyAll()\n\n  - lockSupport.unpark(Thread)\n\n    **调用对象 wait 或者 notify 方法的前题是获取当前对象的内置锁。 **\n\n    通过 wait/notify 设计的经典作法\n\n    等待方：\n\n    - 获取对象锁\n    - 条件检查\n    - 为假则等待\n    - 为真则执行后面的逻辑\n\n    唤醒方：\n\n    - 获取对象锁\n\n    - 改变条件\n\n    - 通知所有等待在对象的线程\n\n      **条件变量用 volatile 修饰来保证可见性**\n\n    ## 终止\n\n    线程对应的 run 方法运行完毕，则线程终止。不推荐使用 stop 来终止线程。可以通过状态变量来终止线程。\n\n    []: http://www.chenxun.wiki/2017/01/21/thread-06/\n\n    ​","slug":"Javai线程状态","published":1,"updated":"2022-09-03T07:30:55.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz838000ltwfac7ppoc8i","content":"<p>​    java线程状态的介绍<a id=\"more\"></a></p>\n<h1 id=\"java-线程状态\"><a href=\"#java-线程状态\" class=\"headerlink\" title=\"java 线程状态\"></a>java 线程状态</h1><p>java 线程有以下几个状态</p>\n<ul>\n<li><p>new 初始状态</p>\n</li>\n<li><p>runnable 运行状态（包括就绪和运行）</p>\n</li>\n<li><p>blocked 阻塞状态</p>\n</li>\n<li><p>waiting 等待状态, 需要其他线程特定动作唤醒（通知或者中断）</p>\n</li>\n<li><p>time-waiting 超时等待状态，可以在指定时间内返回。</p>\n</li>\n<li><p>terminated 终止状态</p>\n<h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><p>java 构造线程有两种办法, Thread 类和 Runnable 接口, Thread 的类本身实现了 Runnable 接口。</p>\n<p>常见的作法, 是通过 thread 类的 public Thread(Runnable target) 构造函数来创建线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tnew Thread(new Runnable() &#123;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>thread 类的初始话代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void init(ThreadGroup g, Runnable target, String name,</span><br><span class=\"line\">                  long stackSize, AccessControlContext acc) &#123;</span><br><span class=\"line\">    if (name == null) &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot;name cannot be null&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    Thread parent = currentThread();</span><br><span class=\"line\">    SecurityManager security = System.getSecurityManager();</span><br><span class=\"line\">    if (g == null) &#123;</span><br><span class=\"line\">        if (security != null) &#123;</span><br><span class=\"line\">            g = security.getThreadGroup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        if (g == null) &#123;</span><br><span class=\"line\">            g = parent.getThreadGroup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    g.checkAccess();</span><br><span class=\"line\"> </span><br><span class=\"line\">    if (security != null) &#123;</span><br><span class=\"line\">        if (isCCLOverridden(getClass())) &#123;</span><br><span class=\"line\">            security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g.addUnstarted();</span><br><span class=\"line\">    this.group = g;</span><br><span class=\"line\">    this.daemon = parent.isDaemon();</span><br><span class=\"line\">    this.priority = parent.getPriority();</span><br><span class=\"line\">    if (security == null || isCCLOverridden(parent.getClass()))</span><br><span class=\"line\">        this.contextClassLoader = parent.getContextClassLoader();</span><br><span class=\"line\">    else</span><br><span class=\"line\">        this.contextClassLoader = parent.contextClassLoader;</span><br><span class=\"line\">    this.inheritedAccessControlContext =</span><br><span class=\"line\">            acc != null ? acc : AccessController.getContext();</span><br><span class=\"line\">    this.target = target;</span><br><span class=\"line\">    setPriority(priority);</span><br><span class=\"line\">    if (parent.inheritableThreadLocals != null)</span><br><span class=\"line\">        this.inheritableThreadLocals =</span><br><span class=\"line\">            ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);</span><br><span class=\"line\">    this.stackSize = stackSize;</span><br><span class=\"line\">   </span><br><span class=\"line\">    tid = nextThreadID();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从这段代码可以看出以下几点</p>\n<ul>\n<li><p>当前线程为创建线程的父线程</p>\n</li>\n<li><p>child 线程继承 parent 的 Daemon、优先级、和加载资源的 contextClassLoader 和一个可以继承的 ThreadLocal。</p>\n<p><strong>Daemon 线程（后台线程）的 finally 块代码不会执行</strong></p>\n</li>\n</ul>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>Thread 类的 start 方法起来运行线程。底层通过调用 navate 方法来运行线程。</p>\n<p>*<em>start（）方法来启动线程，真正实现了多线程运行，这时无需等待 run 方法体代码执行完毕而直接继续执行下面的代码 *</em></p>\n<p><strong>run（）方法当作普通方法的方式调用，程序还是要顺序执行，还是要等待 run 方法体执行完毕后才可继续执行下面的代码</strong></p>\n<h2 id=\"阻塞\"><a href=\"#阻塞\" class=\"headerlink\" title=\"阻塞\"></a>阻塞</h2><p>线程执行到 monitorenter 保护的代码快时，会去获取 monitorenter 对应的对象锁，如未获取，则该线程进入同步队列，状态为阻塞。</p>\n<p><strong>任意对象都拥有自己的 monitor，包括 class 对象。</strong></p>\n<h2 id=\"等待-唤醒\"><a href=\"#等待-唤醒\" class=\"headerlink\" title=\"等待 / 唤醒\"></a>等待 / 唤醒</h2><p>线程等待的方法主要有下面几种</p>\n<ul>\n<li><p>object.wait() / object.wait(long)</p>\n</li>\n<li><p>object.join() / object.join(long)</p>\n</li>\n<li><p>lockSupport.park() / lockSupport.park(long)</p>\n<p>当线程调用某个对象的 wati 方法，进入等待。当另一个线程调用该对象的 notify()/notifyall() 方法，之前等待的线程唤醒 </p>\n</li>\n</ul>\n<p>线程唤醒的方法注意下面几种</p>\n<ul>\n<li><p>object.notify()/notifyAll()</p>\n</li>\n<li><p>lockSupport.unpark(Thread)</p>\n<p>*<em>调用对象 wait 或者 notify 方法的前题是获取当前对象的内置锁。 *</em></p>\n<p>通过 wait/notify 设计的经典作法</p>\n<p>等待方：</p>\n<ul>\n<li>获取对象锁</li>\n<li>条件检查</li>\n<li>为假则等待</li>\n<li>为真则执行后面的逻辑</li>\n</ul>\n<p>唤醒方：</p>\n<ul>\n<li><p>获取对象锁</p>\n</li>\n<li><p>改变条件</p>\n</li>\n<li><p>通知所有等待在对象的线程</p>\n<p><strong>条件变量用 volatile 修饰来保证可见性</strong></p>\n</li>\n</ul>\n<h2 id=\"终止\"><a href=\"#终止\" class=\"headerlink\" title=\"终止\"></a>终止</h2><p>线程对应的 run 方法运行完毕，则线程终止。不推荐使用 stop 来终止线程。可以通过状态变量来终止线程。</p>\n<p>[]: <a href=\"http://www.chenxun.wiki/2017/01/21/thread-06/\" target=\"_blank\" rel=\"noopener\">http://www.chenxun.wiki/2017/01/21/thread-06/</a></p>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>​    java线程状态的介绍</p>","more":"<p></p>\n<h1 id=\"java-线程状态\"><a href=\"#java-线程状态\" class=\"headerlink\" title=\"java 线程状态\"></a>java 线程状态</h1><p>java 线程有以下几个状态</p>\n<ul>\n<li><p>new 初始状态</p>\n</li>\n<li><p>runnable 运行状态（包括就绪和运行）</p>\n</li>\n<li><p>blocked 阻塞状态</p>\n</li>\n<li><p>waiting 等待状态, 需要其他线程特定动作唤醒（通知或者中断）</p>\n</li>\n<li><p>time-waiting 超时等待状态，可以在指定时间内返回。</p>\n</li>\n<li><p>terminated 终止状态</p>\n<h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><p>java 构造线程有两种办法, Thread 类和 Runnable 接口, Thread 的类本身实现了 Runnable 接口。</p>\n<p>常见的作法, 是通过 thread 类的 public Thread(Runnable target) 构造函数来创建线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tnew Thread(new Runnable() &#123;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>thread 类的初始话代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void init(ThreadGroup g, Runnable target, String name,</span><br><span class=\"line\">                  long stackSize, AccessControlContext acc) &#123;</span><br><span class=\"line\">    if (name == null) &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot;name cannot be null&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    Thread parent = currentThread();</span><br><span class=\"line\">    SecurityManager security = System.getSecurityManager();</span><br><span class=\"line\">    if (g == null) &#123;</span><br><span class=\"line\">        if (security != null) &#123;</span><br><span class=\"line\">            g = security.getThreadGroup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        if (g == null) &#123;</span><br><span class=\"line\">            g = parent.getThreadGroup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    g.checkAccess();</span><br><span class=\"line\"> </span><br><span class=\"line\">    if (security != null) &#123;</span><br><span class=\"line\">        if (isCCLOverridden(getClass())) &#123;</span><br><span class=\"line\">            security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g.addUnstarted();</span><br><span class=\"line\">    this.group = g;</span><br><span class=\"line\">    this.daemon = parent.isDaemon();</span><br><span class=\"line\">    this.priority = parent.getPriority();</span><br><span class=\"line\">    if (security == null || isCCLOverridden(parent.getClass()))</span><br><span class=\"line\">        this.contextClassLoader = parent.getContextClassLoader();</span><br><span class=\"line\">    else</span><br><span class=\"line\">        this.contextClassLoader = parent.contextClassLoader;</span><br><span class=\"line\">    this.inheritedAccessControlContext =</span><br><span class=\"line\">            acc != null ? acc : AccessController.getContext();</span><br><span class=\"line\">    this.target = target;</span><br><span class=\"line\">    setPriority(priority);</span><br><span class=\"line\">    if (parent.inheritableThreadLocals != null)</span><br><span class=\"line\">        this.inheritableThreadLocals =</span><br><span class=\"line\">            ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);</span><br><span class=\"line\">    this.stackSize = stackSize;</span><br><span class=\"line\">   </span><br><span class=\"line\">    tid = nextThreadID();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从这段代码可以看出以下几点</p>\n<ul>\n<li><p>当前线程为创建线程的父线程</p>\n</li>\n<li><p>child 线程继承 parent 的 Daemon、优先级、和加载资源的 contextClassLoader 和一个可以继承的 ThreadLocal。</p>\n<p><strong>Daemon 线程（后台线程）的 finally 块代码不会执行</strong></p>\n</li>\n</ul>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>Thread 类的 start 方法起来运行线程。底层通过调用 navate 方法来运行线程。</p>\n<p>*<em>start（）方法来启动线程，真正实现了多线程运行，这时无需等待 run 方法体代码执行完毕而直接继续执行下面的代码 *</em></p>\n<p><strong>run（）方法当作普通方法的方式调用，程序还是要顺序执行，还是要等待 run 方法体执行完毕后才可继续执行下面的代码</strong></p>\n<h2 id=\"阻塞\"><a href=\"#阻塞\" class=\"headerlink\" title=\"阻塞\"></a>阻塞</h2><p>线程执行到 monitorenter 保护的代码快时，会去获取 monitorenter 对应的对象锁，如未获取，则该线程进入同步队列，状态为阻塞。</p>\n<p><strong>任意对象都拥有自己的 monitor，包括 class 对象。</strong></p>\n<h2 id=\"等待-唤醒\"><a href=\"#等待-唤醒\" class=\"headerlink\" title=\"等待 / 唤醒\"></a>等待 / 唤醒</h2><p>线程等待的方法主要有下面几种</p>\n<ul>\n<li><p>object.wait() / object.wait(long)</p>\n</li>\n<li><p>object.join() / object.join(long)</p>\n</li>\n<li><p>lockSupport.park() / lockSupport.park(long)</p>\n<p>当线程调用某个对象的 wati 方法，进入等待。当另一个线程调用该对象的 notify()/notifyall() 方法，之前等待的线程唤醒 </p>\n</li>\n</ul>\n<p>线程唤醒的方法注意下面几种</p>\n<ul>\n<li><p>object.notify()/notifyAll()</p>\n</li>\n<li><p>lockSupport.unpark(Thread)</p>\n<p>*<em>调用对象 wait 或者 notify 方法的前题是获取当前对象的内置锁。 *</em></p>\n<p>通过 wait/notify 设计的经典作法</p>\n<p>等待方：</p>\n<ul>\n<li>获取对象锁</li>\n<li>条件检查</li>\n<li>为假则等待</li>\n<li>为真则执行后面的逻辑</li>\n</ul>\n<p>唤醒方：</p>\n<ul>\n<li><p>获取对象锁</p>\n</li>\n<li><p>改变条件</p>\n</li>\n<li><p>通知所有等待在对象的线程</p>\n<p><strong>条件变量用 volatile 修饰来保证可见性</strong></p>\n</li>\n</ul>\n<h2 id=\"终止\"><a href=\"#终止\" class=\"headerlink\" title=\"终止\"></a>终止</h2><p>线程对应的 run 方法运行完毕，则线程终止。不推荐使用 stop 来终止线程。可以通过状态变量来终止线程。</p>\n<p>[]: <a href=\"http://www.chenxun.wiki/2017/01/21/thread-06/\" target=\"_blank\" rel=\"noopener\">http://www.chenxun.wiki/2017/01/21/thread-06/</a></p>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"Jmeter测试记录","date":"2018-03-11T07:02:39.000Z","_content":"\n记录下Jemeter测试<!--more-->\n\n开发中使用了jmeter做压测，记录下Jmeter测试，很简单的，图挺多的<!--more-->\n\n### 安装Jemeter\n\n​\t这里以jemeter4.0为例，安装环境为win10\n\n```\nhttp://mirrors.shu.edu.cn/apache//jmeter/binaries/apache-jmeter-4.0.zip\n```\n\n​    \t下载完毕后，解压开，进入bin下 执行jmeter.bat进入界面化窗口\n\n​\t更改语言选项：options-->changeLangauage-->chinese simplefied\n\n### 测试\n\n- **创建测试计划添加线程组**，选择文件-->新建，右击新建的测试计划--->添加-->Threads，线程组的名称可以自己设定\n\n  ![创建测试计划](Jmeter测试记录/20180311145402.png)\n\n  线程组说明:\n\n  ![线程组说明](Jmeter测试记录/20180311151959.jpg)\n\n- **创建http请求默认值**\n\n  ![创建http请求默认值](Jmeter测试记录/20180311152954.jpg)\n\n  这里默认请求到 index\n\n- **创建http请求头** \n\n  这里只做了个浏览器Accept-Encoding的设置\n\n  ![创建http请求头](Jmeter测试记录/20180311154519.jpg)\n\n- 创建http请求\n\n  ![创建http请求](Jmeter测试记录/20180311160140.jpg)\n\n  ![http请求界面详解](Jmeter测试记录/20180311160412.jpg)\n\n- **添加监听器**\n\n  ​\n\n  ![2](Jmeter测试记录/20180311160836.jpg)\n\n- **运行**\n\n  执行完毕，查看各个监听器\n\n  * 结果树监听器\n\n    ![结果树1](Jmeter测试记录/20180311163046.jpg)\n\n    ![结果树1](Jmeter测试记录/20180311163214.jpg)\n\n  * **Summary Report 概要报告** \n\n    ![结果树1](Jmeter测试记录/20180311163344.jpg)\n\n    字段解释：\n\n    * Label：监听器名称\n    * Samples: 取样器运行次数,总样本数\n    * Average：平均完成一次事务或请求的时间，即平均响应时间 ms\n    * Min：最小响应时间 ms\n    * Max: 最大响应时间 ms\n    * Std.Dev：偏离量，越小表示越稳定  响应时间的标准方差。\n    * Error %：错误事务率，未命中比率\n    * Throughput：吞吐率（TPS）\n    * Received KB/sec：每秒接收数据包流量，单位是 KB\n    * Sent KB/sec：每秒发送数据包流量，单位是 KB\n    * Avg.Bytes：平均数据流量，单位是 Byte\n\n  * **聚合报告** \n\n    ![聚合报告1](Jmeter测试记录/20180311164306.jpg)\n\n    字段说明：\n\n    - Label：监听器名称\n    - Samples: 发送请求的数量\n    - Average：平均完成一次事务或请求的时间，即平均响应时间 ms\n    - Median：所有响应时间的中间值，也就是 50％ 用户的响应时间\n    - 90%Line：90%请求的响应时间 即 90% 请求响应时间不会超过这个值\n    - 95%Line：95%请求的响应时间 即 95% 请求响应时间不会超过这个值\n    - 99%Line：99% 用户的响应时间 即 99% 请求响应时间不会超过这个值\n    - Min:最小响应时间 ms\n    - Max: 最大响应时间 ms\n    - Error %：错误事务率，未命中比率,请求失败率\n    - Throughput：吞吐率（TPS）\n    - Received KB/sec：每秒接收数据包流量，单位是 KB\n    - Sent KB/sec：每秒发送数据包流量，单位是 KB \n\n  * **图形结果分析** \n\n    ![图形结果分析1](Jmeter测试记录/20180311164711.jpg)\n\n    字段解释：\n\n    * 样本数目：总请求量\n    * 最新样本：代表时间的数字，服务器响应最后一个请求的时间\n    * 吞吐量: 服务器每分钟处理请求数\n    * 平均: 总运行时间/发送到服务器的总请求数\n    * 中间：代表时间的数字，表示有一半的服务器的响应时间低于于该数值\n    * 偏离：服务器响应时间变化、离散程度测量值的大小，或者，换句话说，就是数据的分布\n\n当然还有其他的一些监听器，比如Aggregate Graph, ResponseTime Graph 等等，很简单的，看看就会了","source":"_posts/Jmeter测试记录.md","raw":"---\ntitle: Jmeter测试记录\ndate: 2018-03-11 15:02:39\ntags: [Jmeter]\ncategories: [测试]\n---\n\n记录下Jemeter测试<!--more-->\n\n开发中使用了jmeter做压测，记录下Jmeter测试，很简单的，图挺多的<!--more-->\n\n### 安装Jemeter\n\n​\t这里以jemeter4.0为例，安装环境为win10\n\n```\nhttp://mirrors.shu.edu.cn/apache//jmeter/binaries/apache-jmeter-4.0.zip\n```\n\n​    \t下载完毕后，解压开，进入bin下 执行jmeter.bat进入界面化窗口\n\n​\t更改语言选项：options-->changeLangauage-->chinese simplefied\n\n### 测试\n\n- **创建测试计划添加线程组**，选择文件-->新建，右击新建的测试计划--->添加-->Threads，线程组的名称可以自己设定\n\n  ![创建测试计划](Jmeter测试记录/20180311145402.png)\n\n  线程组说明:\n\n  ![线程组说明](Jmeter测试记录/20180311151959.jpg)\n\n- **创建http请求默认值**\n\n  ![创建http请求默认值](Jmeter测试记录/20180311152954.jpg)\n\n  这里默认请求到 index\n\n- **创建http请求头** \n\n  这里只做了个浏览器Accept-Encoding的设置\n\n  ![创建http请求头](Jmeter测试记录/20180311154519.jpg)\n\n- 创建http请求\n\n  ![创建http请求](Jmeter测试记录/20180311160140.jpg)\n\n  ![http请求界面详解](Jmeter测试记录/20180311160412.jpg)\n\n- **添加监听器**\n\n  ​\n\n  ![2](Jmeter测试记录/20180311160836.jpg)\n\n- **运行**\n\n  执行完毕，查看各个监听器\n\n  * 结果树监听器\n\n    ![结果树1](Jmeter测试记录/20180311163046.jpg)\n\n    ![结果树1](Jmeter测试记录/20180311163214.jpg)\n\n  * **Summary Report 概要报告** \n\n    ![结果树1](Jmeter测试记录/20180311163344.jpg)\n\n    字段解释：\n\n    * Label：监听器名称\n    * Samples: 取样器运行次数,总样本数\n    * Average：平均完成一次事务或请求的时间，即平均响应时间 ms\n    * Min：最小响应时间 ms\n    * Max: 最大响应时间 ms\n    * Std.Dev：偏离量，越小表示越稳定  响应时间的标准方差。\n    * Error %：错误事务率，未命中比率\n    * Throughput：吞吐率（TPS）\n    * Received KB/sec：每秒接收数据包流量，单位是 KB\n    * Sent KB/sec：每秒发送数据包流量，单位是 KB\n    * Avg.Bytes：平均数据流量，单位是 Byte\n\n  * **聚合报告** \n\n    ![聚合报告1](Jmeter测试记录/20180311164306.jpg)\n\n    字段说明：\n\n    - Label：监听器名称\n    - Samples: 发送请求的数量\n    - Average：平均完成一次事务或请求的时间，即平均响应时间 ms\n    - Median：所有响应时间的中间值，也就是 50％ 用户的响应时间\n    - 90%Line：90%请求的响应时间 即 90% 请求响应时间不会超过这个值\n    - 95%Line：95%请求的响应时间 即 95% 请求响应时间不会超过这个值\n    - 99%Line：99% 用户的响应时间 即 99% 请求响应时间不会超过这个值\n    - Min:最小响应时间 ms\n    - Max: 最大响应时间 ms\n    - Error %：错误事务率，未命中比率,请求失败率\n    - Throughput：吞吐率（TPS）\n    - Received KB/sec：每秒接收数据包流量，单位是 KB\n    - Sent KB/sec：每秒发送数据包流量，单位是 KB \n\n  * **图形结果分析** \n\n    ![图形结果分析1](Jmeter测试记录/20180311164711.jpg)\n\n    字段解释：\n\n    * 样本数目：总请求量\n    * 最新样本：代表时间的数字，服务器响应最后一个请求的时间\n    * 吞吐量: 服务器每分钟处理请求数\n    * 平均: 总运行时间/发送到服务器的总请求数\n    * 中间：代表时间的数字，表示有一半的服务器的响应时间低于于该数值\n    * 偏离：服务器响应时间变化、离散程度测量值的大小，或者，换句话说，就是数据的分布\n\n当然还有其他的一些监听器，比如Aggregate Graph, ResponseTime Graph 等等，很简单的，看看就会了","slug":"Jmeter测试记录","published":1,"updated":"2022-09-03T07:30:55.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz83c000ntwfahmie5lpx","content":"<p>记录下Jemeter测试<a id=\"more\"></a></p>\n<p>开发中使用了jmeter做压测，记录下Jmeter测试，很简单的，图挺多的<!--more--></p>\n<h3 id=\"安装Jemeter\"><a href=\"#安装Jemeter\" class=\"headerlink\" title=\"安装Jemeter\"></a>安装Jemeter</h3><p>​    这里以jemeter4.0为例，安装环境为win10</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://mirrors.shu.edu.cn/apache//jmeter/binaries/apache-jmeter-4.0.zip</span><br></pre></td></tr></table></figure>\n\n<p>​        下载完毕后，解压开，进入bin下 执行jmeter.bat进入界面化窗口</p>\n<p>​    更改语言选项：options–&gt;changeLangauage–&gt;chinese simplefied</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><ul>\n<li><p><strong>创建测试计划添加线程组</strong>，选择文件–&gt;新建，右击新建的测试计划—&gt;添加–&gt;Threads，线程组的名称可以自己设定</p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311145402.png\" alt=\"创建测试计划\"></p>\n<p>线程组说明:</p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311151959.jpg\" alt=\"线程组说明\"></p>\n</li>\n<li><p><strong>创建http请求默认值</strong></p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311152954.jpg\" alt=\"创建http请求默认值\"></p>\n<p>这里默认请求到 index</p>\n</li>\n<li><p><strong>创建http请求头</strong> </p>\n<p>这里只做了个浏览器Accept-Encoding的设置</p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311154519.jpg\" alt=\"创建http请求头\"></p>\n</li>\n<li><p>创建http请求</p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311160140.jpg\" alt=\"创建http请求\"></p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311160412.jpg\" alt=\"http请求界面详解\"></p>\n</li>\n<li><p><strong>添加监听器</strong></p>\n<p>​</p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311160836.jpg\" alt=\"2\"></p>\n</li>\n<li><p><strong>运行</strong></p>\n<p>执行完毕，查看各个监听器</p>\n<ul>\n<li><p>结果树监听器</p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311163046.jpg\" alt=\"结果树1\"></p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311163214.jpg\" alt=\"结果树1\"></p>\n</li>\n<li><p><strong>Summary Report 概要报告</strong> </p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311163344.jpg\" alt=\"结果树1\"></p>\n<p>字段解释：</p>\n<ul>\n<li>Label：监听器名称</li>\n<li>Samples: 取样器运行次数,总样本数</li>\n<li>Average：平均完成一次事务或请求的时间，即平均响应时间 ms</li>\n<li>Min：最小响应时间 ms</li>\n<li>Max: 最大响应时间 ms</li>\n<li>Std.Dev：偏离量，越小表示越稳定  响应时间的标准方差。</li>\n<li>Error %：错误事务率，未命中比率</li>\n<li>Throughput：吞吐率（TPS）</li>\n<li>Received KB/sec：每秒接收数据包流量，单位是 KB</li>\n<li>Sent KB/sec：每秒发送数据包流量，单位是 KB</li>\n<li>Avg.Bytes：平均数据流量，单位是 Byte</li>\n</ul>\n</li>\n<li><p><strong>聚合报告</strong> </p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311164306.jpg\" alt=\"聚合报告1\"></p>\n<p>字段说明：</p>\n<ul>\n<li>Label：监听器名称</li>\n<li>Samples: 发送请求的数量</li>\n<li>Average：平均完成一次事务或请求的时间，即平均响应时间 ms</li>\n<li>Median：所有响应时间的中间值，也就是 50％ 用户的响应时间</li>\n<li>90%Line：90%请求的响应时间 即 90% 请求响应时间不会超过这个值</li>\n<li>95%Line：95%请求的响应时间 即 95% 请求响应时间不会超过这个值</li>\n<li>99%Line：99% 用户的响应时间 即 99% 请求响应时间不会超过这个值</li>\n<li>Min:最小响应时间 ms</li>\n<li>Max: 最大响应时间 ms</li>\n<li>Error %：错误事务率，未命中比率,请求失败率</li>\n<li>Throughput：吞吐率（TPS）</li>\n<li>Received KB/sec：每秒接收数据包流量，单位是 KB</li>\n<li>Sent KB/sec：每秒发送数据包流量，单位是 KB </li>\n</ul>\n</li>\n<li><p><strong>图形结果分析</strong> </p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311164711.jpg\" alt=\"图形结果分析1\"></p>\n<p>字段解释：</p>\n<ul>\n<li>样本数目：总请求量</li>\n<li>最新样本：代表时间的数字，服务器响应最后一个请求的时间</li>\n<li>吞吐量: 服务器每分钟处理请求数</li>\n<li>平均: 总运行时间/发送到服务器的总请求数</li>\n<li>中间：代表时间的数字，表示有一半的服务器的响应时间低于于该数值</li>\n<li>偏离：服务器响应时间变化、离散程度测量值的大小，或者，换句话说，就是数据的分布</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>当然还有其他的一些监听器，比如Aggregate Graph, ResponseTime Graph 等等，很简单的，看看就会了</p>\n","site":{"data":{}},"excerpt":"<p>记录下Jemeter测试</p>","more":"<p></p>\n<p>开发中使用了jmeter做压测，记录下Jmeter测试，很简单的，图挺多的<!--more--></p>\n<h3 id=\"安装Jemeter\"><a href=\"#安装Jemeter\" class=\"headerlink\" title=\"安装Jemeter\"></a>安装Jemeter</h3><p>​    这里以jemeter4.0为例，安装环境为win10</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://mirrors.shu.edu.cn/apache//jmeter/binaries/apache-jmeter-4.0.zip</span><br></pre></td></tr></table></figure>\n\n<p>​        下载完毕后，解压开，进入bin下 执行jmeter.bat进入界面化窗口</p>\n<p>​    更改语言选项：options–&gt;changeLangauage–&gt;chinese simplefied</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><ul>\n<li><p><strong>创建测试计划添加线程组</strong>，选择文件–&gt;新建，右击新建的测试计划—&gt;添加–&gt;Threads，线程组的名称可以自己设定</p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311145402.png\" alt=\"创建测试计划\"></p>\n<p>线程组说明:</p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311151959.jpg\" alt=\"线程组说明\"></p>\n</li>\n<li><p><strong>创建http请求默认值</strong></p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311152954.jpg\" alt=\"创建http请求默认值\"></p>\n<p>这里默认请求到 index</p>\n</li>\n<li><p><strong>创建http请求头</strong> </p>\n<p>这里只做了个浏览器Accept-Encoding的设置</p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311154519.jpg\" alt=\"创建http请求头\"></p>\n</li>\n<li><p>创建http请求</p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311160140.jpg\" alt=\"创建http请求\"></p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311160412.jpg\" alt=\"http请求界面详解\"></p>\n</li>\n<li><p><strong>添加监听器</strong></p>\n<p>​</p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311160836.jpg\" alt=\"2\"></p>\n</li>\n<li><p><strong>运行</strong></p>\n<p>执行完毕，查看各个监听器</p>\n<ul>\n<li><p>结果树监听器</p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311163046.jpg\" alt=\"结果树1\"></p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311163214.jpg\" alt=\"结果树1\"></p>\n</li>\n<li><p><strong>Summary Report 概要报告</strong> </p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311163344.jpg\" alt=\"结果树1\"></p>\n<p>字段解释：</p>\n<ul>\n<li>Label：监听器名称</li>\n<li>Samples: 取样器运行次数,总样本数</li>\n<li>Average：平均完成一次事务或请求的时间，即平均响应时间 ms</li>\n<li>Min：最小响应时间 ms</li>\n<li>Max: 最大响应时间 ms</li>\n<li>Std.Dev：偏离量，越小表示越稳定  响应时间的标准方差。</li>\n<li>Error %：错误事务率，未命中比率</li>\n<li>Throughput：吞吐率（TPS）</li>\n<li>Received KB/sec：每秒接收数据包流量，单位是 KB</li>\n<li>Sent KB/sec：每秒发送数据包流量，单位是 KB</li>\n<li>Avg.Bytes：平均数据流量，单位是 Byte</li>\n</ul>\n</li>\n<li><p><strong>聚合报告</strong> </p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311164306.jpg\" alt=\"聚合报告1\"></p>\n<p>字段说明：</p>\n<ul>\n<li>Label：监听器名称</li>\n<li>Samples: 发送请求的数量</li>\n<li>Average：平均完成一次事务或请求的时间，即平均响应时间 ms</li>\n<li>Median：所有响应时间的中间值，也就是 50％ 用户的响应时间</li>\n<li>90%Line：90%请求的响应时间 即 90% 请求响应时间不会超过这个值</li>\n<li>95%Line：95%请求的响应时间 即 95% 请求响应时间不会超过这个值</li>\n<li>99%Line：99% 用户的响应时间 即 99% 请求响应时间不会超过这个值</li>\n<li>Min:最小响应时间 ms</li>\n<li>Max: 最大响应时间 ms</li>\n<li>Error %：错误事务率，未命中比率,请求失败率</li>\n<li>Throughput：吞吐率（TPS）</li>\n<li>Received KB/sec：每秒接收数据包流量，单位是 KB</li>\n<li>Sent KB/sec：每秒发送数据包流量，单位是 KB </li>\n</ul>\n</li>\n<li><p><strong>图形结果分析</strong> </p>\n<p><img src=\"/2018/03/11/Jmeter测试记录/Jmeter%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/20180311164711.jpg\" alt=\"图形结果分析1\"></p>\n<p>字段解释：</p>\n<ul>\n<li>样本数目：总请求量</li>\n<li>最新样本：代表时间的数字，服务器响应最后一个请求的时间</li>\n<li>吞吐量: 服务器每分钟处理请求数</li>\n<li>平均: 总运行时间/发送到服务器的总请求数</li>\n<li>中间：代表时间的数字，表示有一半的服务器的响应时间低于于该数值</li>\n<li>偏离：服务器响应时间变化、离散程度测量值的大小，或者，换句话说，就是数据的分布</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>当然还有其他的一些监听器，比如Aggregate Graph, ResponseTime Graph 等等，很简单的，看看就会了</p>"},{"title":"Java锁","date":"2018-10-13T03:21:53.000Z","_content":"\nJava中的锁记录下<!--more-->\n\n### \t\t\t\t\t\t\tJAVA中的锁\n\n* 公平锁/非公平锁\n\n  **非公平锁的性能要比公平锁高，因为不需要维护队列**\n\n  * **公平锁:多个线程按照申请锁的顺序来获取锁，也就是说申请锁的顺序和获取锁的顺序是一致的，加锁前会检查是否有排队等待锁的线程，如果有那么，先来先得**\n\n    * RetrantLock 默认是非公平锁，可以指定构造参数来构建公平锁。\n\n      公平锁\n\n    ```\n            package com.convergence.support.lock;\n    \n            import java.util.concurrent.ExecutorService;\n            import java.util.concurrent.Executors;\n            import java.util.concurrent.locks.ReentrantLock;\n    \n            /**\n            * 公平锁与非公平锁 之RetrantLock\n            * \n            * @author andreby\n            *\n            */\n            public class RetrantLockDemo {\n    \n            private ReentrantLock reentrantLock;\n    \n            public RetrantLockDemo(boolean isFair) {\n            super();\n            this.reentrantLock = new ReentrantLock(isFair);\n            }\n    \n            public void testLock() {\n            try {\n            reentrantLock.lock();\n            System.out.println(\"线程=\" + Thread.currentThread().getName() + \"已锁定\");\n            } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(\"Something is wrong with it \");\n            } finally {\n            reentrantLock.unlock();\n            }\n            }\n            /**\n            * 进行main方法测试公平锁\n            * @param args\n            */\n            public static void main(String[] args) {\n            // 指定使用公平锁\n            RetrantLockDemo lockDemo = new RetrantLockDemo(true);\n            Thread thread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n            System.out.println(\"进来了\" + Thread.currentThread().getName());\n            lockDemo.testLock();\n            }\n            });\n            ExecutorService executorService = Executors.newCachedThreadPool();\n            for (int i = 0; i < 10; i++) {\n            executorService.execute(thread);\n            }\n            }\n    \n            }\n    \n    ```\n\n    输出结果:\n\n    ```\n    进来申请锁了pool-1-thread-2\n    进来申请锁了pool-1-thread-4\n    进来申请锁了pool-1-thread-3\n    进来申请锁了pool-1-thread-1\n    线程=pool-1-thread-2已锁定\n    进来申请锁了pool-1-thread-7\n    进来申请锁了pool-1-thread-8\n    进来申请锁了pool-1-thread-6\n    进来申请锁了pool-1-thread-5\n    线程=pool-1-thread-4已锁定\n    线程=pool-1-thread-3已锁定\n    线程=pool-1-thread-1已锁定\n    进来申请锁了pool-1-thread-9\n    进来申请锁了pool-1-thread-10\n    线程=pool-1-thread-7已锁定\n    线程=pool-1-thread-8已锁定\n    线程=pool-1-thread-6已锁定\n    线程=pool-1-thread-5已锁定\n    线程=pool-1-thread-9已锁定\n    线程=pool-1-thread-10已锁定\n    ```\n\n    那么可以看到申请锁的顺序和获得锁的顺序是一致的\n\n  * **非公平锁：多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请 先获得锁，加锁时候不考虑排队等待问题，直接尝试获取锁，获取不到的话自动到队尾等待，这样的话 有可能出现优先级反转或饥饿现象**\n\n    RetrantLock 非公平锁\n\n    ```\n    package com.convergence.support.lock;\n    \n    import java.util.concurrent.ExecutorService;\n    import java.util.concurrent.Executors;\n    import java.util.concurrent.locks.ReentrantLock;\n    \n    /**\n     * 公平锁与非公平锁 之RetrantLock\n     * \n     * @author andreby\n     *\n     */\n    public class RetrantLockDemo {\n    \n    \tprivate ReentrantLock reentrantLock;\n    \n    \tpublic RetrantLockDemo(boolean isFair) {\n    \t\tsuper();\n    \t\tthis.reentrantLock = new ReentrantLock(isFair);\n    \t}\n    \n    \tpublic void testLock() {\n    \t\ttry {\n    \t\t\treentrantLock.lock();\n    \t\t\tSystem.out.println(\"线程=\" + Thread.currentThread().getName() + \"已锁定\");\n    \t\t} catch (Exception e) {\n    \t\t\te.printStackTrace();\n    \t\t\tSystem.out.println(\"Something is wrong with it \");\n    \t\t} finally {\n    \t\t\treentrantLock.unlock();\n    \t\t}\n    \t}\n    \t/**\n    \t * 进行main方法测试公平锁\n    \t * @param args\n    \t */\n    \tpublic static void main(String[] args) {\n    \t\t// 指定使用公平锁\n    \t\tRetrantLockDemo fairLock = new RetrantLockDemo(true);\n    \t\tThread thread = new Thread(new Runnable() {\n    \t\t\t@Override\n    \t\t\tpublic void run() {\n    \t\t\t\tSystem.out.println(\"进来申请锁了\" + Thread.currentThread().getName());\n    \t\t\t\tfairLock.testLock();\n    \t\t\t}\n    \t\t});\n    \t\tExecutorService fairexecutorService = Executors.newCachedThreadPool();\n    \t\tfor (int i = 0; i < 10; i++) {\n    \t\t\tfairexecutorService.execute(thread);\n    \t\t}\n    \t\t//使用非公平锁\n    \t\tRetrantLockDemo unFairLock = new RetrantLockDemo(false);\n    \t\tThread unFairThread= new Thread(new Runnable() {\n    \t\t\t@Override\n    \t\t\tpublic void run() {\n    \t\t\t\tSystem.out.println(\"进来申请锁了\" + Thread.currentThread().getName());\n    \t\t\t\tunFairLock.testLock();\t\t\t\t\n    \t\t\t}\n    \t\t});\n    \t\tSystem.out.println(\"=====================非公平锁===========================\");\n    \t\tExecutorService unfairexecutorService = Executors.newCachedThreadPool();\n    \t\tfor (int i = 0; i < 10; i++) {\n    \t\t\tunfairexecutorService.execute(unFairThread);\n    \t\t}\n    \n    \t}\n    \n    }\n    ```\n\n    输出结果：\n\n    ```\n    =====================非公平锁===========================\n    进来申请锁了pool-1-thread-8\n    线程=pool-1-thread-8已锁定\n    进来申请锁了pool-1-thread-1\n    线程=pool-1-thread-1已锁定\n    进来申请锁了pool-2-thread-2\n    线程=pool-2-thread-2已锁定\n    进来申请锁了pool-1-thread-3\n    线程=pool-1-thread-3已锁定\n    进来申请锁了pool-1-thread-4\n    线程=pool-1-thread-4已锁定\n    进来申请锁了pool-2-thread-3\n    进来申请锁了pool-1-thread-5\n    线程=pool-2-thread-3已锁定\n    线程=pool-1-thread-5已锁定\n    进来申请锁了pool-2-thread-8\n    进来申请锁了pool-2-thread-4\n    线程=pool-2-thread-8已锁定\n    线程=pool-2-thread-4已锁定\n    进来申请锁了pool-1-thread-9\n    进来申请锁了pool-2-thread-9\n    线程=pool-1-thread-9已锁定\n    线程=pool-2-thread-9已锁定\n    进来申请锁了pool-1-thread-10\n    线程=pool-1-thread-10已锁定\n    进来申请锁了pool-2-thread-1\n    线程=pool-2-thread-1已锁定\n    进来申请锁了pool-2-thread-5\n    线程=pool-2-thread-5已锁定\n    进来申请锁了pool-2-thread-6\n    线程=pool-2-thread-6已锁定\n    进来申请锁了pool-2-thread-7\n    线程=pool-2-thread-7已锁定\n    进来申请锁了pool-2-thread-2\n    线程=pool-2-thread-2已锁定\n    ```\n\n    明显看到是谁申请锁就获取锁。\n\n    Synchronize 非公平锁，不同于RetrantLock 它是不能变成公平锁的\n\n    * 为方法加锁\n\n      * 为静态方法加锁 锁对象是类。\n\n        ```\n        \tpublic static synchronized void testStaticSyn() {\n        \t\tSystem.out.println(\"synchronized 获取到锁了,当前线程=\" + Thread.currentThread().getName());\n        \t\ttry {\n        \t\t\tTimeUnit.MILLISECONDS.sleep(10);\n        \t\t} catch (InterruptedException e) {\n        \t\t\t// TODO Auto-generated catch block\n        \t\t\te.printStackTrace();\n        \t\t}\n        \t}\n        \t\tpublic static void main(String[] args) {\n        \t\tSystem.out.println(\"=====================非公平锁synchronized===========================\");\n        \t\tThread synThread = new Thread(new Runnable() {\n        \t\t\t@Override\n        \t\t\tpublic void run() {\n        \t\t\t\tSystem.out.println(\"进来申请锁了当前线程=\" + Thread.currentThread().getName());\n        \t\t\t\tRetrantLockDemo.testStaticSyn();\n        \t\t\t}\n        \t\t});\n        \t\tExecutorService synexecutorService = Executors.newCachedThreadPool();\n        \t\tfor (int i = 0; i <5; i++) {\n        \t\t\tsynexecutorService.execute(synThread);\n        \t\t}\n        \n        \t}\n        ```\n\n        输出结果：注意synchronized 获取到锁了 开头的字样为获取到\n\n        ```\n        =====================非公平锁synchronized===========================\n        进来申请锁了当前线程=pool-1-thread-1\n        进来申请锁了当前线程=pool-1-thread-2\n        进来申请锁了当前线程=pool-1-thread-3\n        synchronized 获取到锁了,当前线程=pool-1-thread-1\n        进来申请锁了当前线程=pool-1-thread-4\n        进来申请锁了当前线程=pool-1-thread-5\n        synchronized 获取到锁了,当前线程=pool-1-thread-2\n        synchronized 获取到锁了,当前线程=pool-1-thread-5\n        synchronized 获取到锁了,当前线程=pool-1-thread-4\n        synchronized 获取到锁了,当前线程=pool-1-thread-3\n        ```\n\n      * 为非静态方法加锁 锁对象为当前实例\n\n        **同一个对象在两个线程中分别访问该对象的加锁方法 会互斥**\n\n        **不同对象在两个线程中调用同一个同步方法 不会互斥 **\n\n        下面是不同对象的情况\n\n        ```\n        \tpublic synchronized  void testNoStaticStaticSyn() {\n        \t\tSystem.out.println(\"synchronized 获取到锁了,当前线程=\" + Thread.currentThread().getName());\n        \t\ttry {\n        \t\t\tTimeUnit.MILLISECONDS.sleep(10);\n        \t\t} catch (InterruptedException e) {\n        \t\t\t// TODO Auto-generated catch block\n        \t\t\te.printStackTrace();\n        \t\t}\n        \t}\n        \t\tpublic static void main(String[] args) {\n        \n        \t\tSystem.out.println(\"=====================非公平锁实例方法synchronized===========================\");\n        \n        \t\tThread synNoStaticThread = new Thread(new Runnable() {\n        \t\t\t@Override\n        \t\t\tpublic void run() {\n        \t\t\t\tSystem.out.println(\"进来申请锁了当前线程=\" + Thread.currentThread().getName());\n        \t\t\t\tRetrantLockDemo demo= new RetrantLockDemo(false);\n        \t\t\t\tdemo.testNoStaticStaticSyn();\n        \t\t\t}\n        \t\t});\n        \t\tExecutorService synexecutorService = Executors.newCachedThreadPool();\n        \t\tfor (int i = 0; i <5; i++) {\n        \t\t\tsynexecutorService.execute(synNoStaticThread);\n        \t\t}\n        \n        \t}\n        ```\n\n        输出，不互斥\n\n        ```\n        =====================非公平锁实例方法synchronized===========================\n        进来申请锁了当前线程=pool-1-thread-2\n        进来申请锁了当前线程=pool-1-thread-3\n        synchronized 获取到锁了,当前线程=pool-1-thread-2\n        synchronized 获取到锁了,当前线程=pool-1-thread-3\n        进来申请锁了当前线程=pool-1-thread-1\n        进来申请锁了当前线程=pool-1-thread-5\n        synchronized 获取到锁了,当前线程=pool-1-thread-5\n        synchronized 获取到锁了,当前线程=pool-1-thread-1\n        进来申请锁了当前线程=pool-1-thread-4\n        synchronized 获取到锁了,当前线程=pool-1-thread-4\n        ```\n\n        \n\n    * 为代码块加锁\n\n      \n\n      \n\n* 可重入锁\n\n  RetrantLock就是一个可重入锁。可重入锁就是递归锁。指同一个线程在外层方法获取锁的时候，进入内层方法 时会自动获取锁，synchronized也是个可重入锁。可重入锁在一定程度上可以避免思索。\n\n  synchronized也是可重入锁\n\n  ```\n  synchronized void setA() throws Exception{\n      Thread.sleep(1000);\n      setB();\n  }\n  //对象当setA获取到锁的时候SetA调用的setB方法会自动获取该对象的锁\n  synchronized void setB() throws Exception{\n      Thread.sleep(1000);\n  }\n  ```\n\n  \n\n* 独享锁/共享锁\n\n  * 独享锁也是互斥锁，同时只有一个线程能获得这个锁。\n\n    ReentrantLock  为独享锁，ReadWriteLock 也为独享锁。\n\n  * 共享锁 即为多个线程可以同时获得这个锁。\n\n    Semaphore  、CountDownLatch  为共享锁。\n\n    ReadWriteLock  中的读锁为共享锁。写锁为独享锁。\n\n* 互斥锁/读写锁\n\n  互斥锁或读写锁为独享锁/共享锁的具体实现\n\n  互斥锁的具体实现就是ReentrantLock  \n\n  读写锁的具体实现就是ReadWriteLock  \n\n* 乐观锁/悲观锁\n\n  经典的乐观锁/悲观锁的应用场景大概是数据库中的乐观锁与悲观锁\n\n  * 数据库中乐观锁\n\n    表中有个字段为版本号 比如这个字段为version,当第一次进行数据库操作的时候，获取到这个字段，假设其他用户不会进行操作，但是在最后的事务提交阶段，需要进行版本检查，如果这个字段和第一次的时候一样那么就进行提交，否则就不提交。其实这算是应用逻辑层的方式，不是从数据库层面进行加锁。\n\n  * 数据库中的悲观锁\n\n    读取的时候为后面的更新加锁，之后再来的读操作都会等待。这种是数据库锁 ，是从数据库层面进行的操作。\n\n    比如ORM框架 hibernate，可以使用session.lock（）锁定对象实现悲观锁。\n\n    mybatis的话一般用select xxx for update （行锁）lock xxx（表锁） 。但是一般很少有人用悲观锁吧，开销比较大\n\n  java中的乐观锁与悲观锁\n\n  * 悲观锁：\n\n    synchronized 是独占锁，获得该锁的线程才可以执行被锁住的代码，申请该锁的线程只能挂起等待直到该锁释放后才唤醒，拿到锁并进行执行。那么这样 的话开销很大，等待锁的线程在等待期间不能做任何事情，所以它是一种悲观锁。\n\n  * 乐观锁：\n\n    获得锁后会一直持有锁以防本线程再次申请锁导致无谓的解锁加锁开销，或者假设没有冲突而去完成同步代码块如果冲突再循环重试，或者采取申请锁失败后不立刻挂起而是稍微等待再次尝试获取 等待策略，以减少线程因为挂起、阻塞、唤醒（发生 CPU 的调度切换） 而造成的开销。 也就是说失败后会充实避免过大的性能开销。\n\n    偏向锁，轻量级锁(CAS轮询)、自旋锁就属于上述的乐观锁。\n\n* 分段锁\n\n  一个容器中有多把锁，每一把锁用于锁容器中一部分数据，那么当多线程访问容器中不同数据段的数据的时候，线程就不存在锁竞争，从而可以有效的提高并发访问效率，这个在ConcurrentHashMap中 就有用到。\n\n  比如：在 ConcurrentHashMap 中使用了一个包含 16 个锁的数组，每个锁保护所有散列桶的 1/16，其中第 N 个散列桶由第（N mod 16）个锁来保护。假设使用合理的散列算法使关键字能够均匀的分部，那么这大约能使对锁的请求减少到越来的 1/16。也正是这项技术使得 ConcurrentHashMap 支持多达 16 个并发的写入线程。\n\n  缺点是因为对数据容器进行分段加锁，那么锁的维护就是个比较大的开销。\n\n* 偏向锁/轻量级锁/重量级锁\n\n  这三种锁，指的是锁的状态，针对synchronized来说的\n\n  偏向锁只允许一个线程获得锁，加锁和解锁不需要额外的消耗，和执行非同步方法相比仅存在纳秒级的差距，但是如果线程间存在锁竞争，会带来额外的锁撤销的消耗，适用于只有一个线程访问同步块的场景。\n\n  轻量级锁允许多个线程获得锁。竞争的线程不会阻塞，提高相应速度，但是如果始终得不到锁竞争的线程，会自旋消耗cpu,适用于追求响应速度，同步块执行速度非常快的场景。\n\n  重量级锁：线程竞争不使用自旋，不会消耗cpu，但是会导致线程阻塞，响应时间缓慢，适用于追求吞吐量，同步块执行速度比较长的场景。\n\n* 自旋锁\n\n  指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，当循环条件被其他线程改变时，才能进入临界区，这样可以减少线程上下文的消耗，但是会消耗cpu资源，比如Disruptor这个框架中就是用了自旋锁\n\n  ```\n  public class SpinLock {\n   \n    private AtomicReference<Thread> sign =new AtomicReference<>();\n   \n    public void lock(){\n      Thread current = Thread.currentThread();\n      while(!sign .compareAndSet(null, current)){\n      }\n    }\n    public void unlock (){\n      Thread current = Thread.currentThread();\n      sign .compareAndSet(current, null);\n    }\n  }\n  ```\n\n  使用了 CAS 原子操作，lock 函数将 owner 设置为当前线程，并且预测原来的值为空。unlock 函数将 owner 设置为 null，并且预测值为当前线程。 \n\n  当有第二个线程调用 lock 操作时由于 owner 值不为空，导致循环一直被执行，直至第一个线程调用 unlock 函数将 owner 设置为 null，第二个线程才能进入临界区。\n\n  由于自旋锁只是将当前线程不停地执行循环体，不进行线程状态的改变，所以响应速度更快。但当线程数不停增加时，性能下降明显，因为每个线程都需要执行，占用 CPU 时间。如果线程竞争不激烈，并且保持锁的时间段。适合使用自旋锁。\n\n  注：该例子为非公平锁，获得锁的先后顺序，不会按照进入 lock 的先后顺序进行。","source":"_posts/Java锁.md","raw":"---\ntitle: Java锁\ndate: 2018-10-13 11:21:53\ntags: [锁]\ncategories: [Java]\n---\n\nJava中的锁记录下<!--more-->\n\n### \t\t\t\t\t\t\tJAVA中的锁\n\n* 公平锁/非公平锁\n\n  **非公平锁的性能要比公平锁高，因为不需要维护队列**\n\n  * **公平锁:多个线程按照申请锁的顺序来获取锁，也就是说申请锁的顺序和获取锁的顺序是一致的，加锁前会检查是否有排队等待锁的线程，如果有那么，先来先得**\n\n    * RetrantLock 默认是非公平锁，可以指定构造参数来构建公平锁。\n\n      公平锁\n\n    ```\n            package com.convergence.support.lock;\n    \n            import java.util.concurrent.ExecutorService;\n            import java.util.concurrent.Executors;\n            import java.util.concurrent.locks.ReentrantLock;\n    \n            /**\n            * 公平锁与非公平锁 之RetrantLock\n            * \n            * @author andreby\n            *\n            */\n            public class RetrantLockDemo {\n    \n            private ReentrantLock reentrantLock;\n    \n            public RetrantLockDemo(boolean isFair) {\n            super();\n            this.reentrantLock = new ReentrantLock(isFair);\n            }\n    \n            public void testLock() {\n            try {\n            reentrantLock.lock();\n            System.out.println(\"线程=\" + Thread.currentThread().getName() + \"已锁定\");\n            } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(\"Something is wrong with it \");\n            } finally {\n            reentrantLock.unlock();\n            }\n            }\n            /**\n            * 进行main方法测试公平锁\n            * @param args\n            */\n            public static void main(String[] args) {\n            // 指定使用公平锁\n            RetrantLockDemo lockDemo = new RetrantLockDemo(true);\n            Thread thread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n            System.out.println(\"进来了\" + Thread.currentThread().getName());\n            lockDemo.testLock();\n            }\n            });\n            ExecutorService executorService = Executors.newCachedThreadPool();\n            for (int i = 0; i < 10; i++) {\n            executorService.execute(thread);\n            }\n            }\n    \n            }\n    \n    ```\n\n    输出结果:\n\n    ```\n    进来申请锁了pool-1-thread-2\n    进来申请锁了pool-1-thread-4\n    进来申请锁了pool-1-thread-3\n    进来申请锁了pool-1-thread-1\n    线程=pool-1-thread-2已锁定\n    进来申请锁了pool-1-thread-7\n    进来申请锁了pool-1-thread-8\n    进来申请锁了pool-1-thread-6\n    进来申请锁了pool-1-thread-5\n    线程=pool-1-thread-4已锁定\n    线程=pool-1-thread-3已锁定\n    线程=pool-1-thread-1已锁定\n    进来申请锁了pool-1-thread-9\n    进来申请锁了pool-1-thread-10\n    线程=pool-1-thread-7已锁定\n    线程=pool-1-thread-8已锁定\n    线程=pool-1-thread-6已锁定\n    线程=pool-1-thread-5已锁定\n    线程=pool-1-thread-9已锁定\n    线程=pool-1-thread-10已锁定\n    ```\n\n    那么可以看到申请锁的顺序和获得锁的顺序是一致的\n\n  * **非公平锁：多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请 先获得锁，加锁时候不考虑排队等待问题，直接尝试获取锁，获取不到的话自动到队尾等待，这样的话 有可能出现优先级反转或饥饿现象**\n\n    RetrantLock 非公平锁\n\n    ```\n    package com.convergence.support.lock;\n    \n    import java.util.concurrent.ExecutorService;\n    import java.util.concurrent.Executors;\n    import java.util.concurrent.locks.ReentrantLock;\n    \n    /**\n     * 公平锁与非公平锁 之RetrantLock\n     * \n     * @author andreby\n     *\n     */\n    public class RetrantLockDemo {\n    \n    \tprivate ReentrantLock reentrantLock;\n    \n    \tpublic RetrantLockDemo(boolean isFair) {\n    \t\tsuper();\n    \t\tthis.reentrantLock = new ReentrantLock(isFair);\n    \t}\n    \n    \tpublic void testLock() {\n    \t\ttry {\n    \t\t\treentrantLock.lock();\n    \t\t\tSystem.out.println(\"线程=\" + Thread.currentThread().getName() + \"已锁定\");\n    \t\t} catch (Exception e) {\n    \t\t\te.printStackTrace();\n    \t\t\tSystem.out.println(\"Something is wrong with it \");\n    \t\t} finally {\n    \t\t\treentrantLock.unlock();\n    \t\t}\n    \t}\n    \t/**\n    \t * 进行main方法测试公平锁\n    \t * @param args\n    \t */\n    \tpublic static void main(String[] args) {\n    \t\t// 指定使用公平锁\n    \t\tRetrantLockDemo fairLock = new RetrantLockDemo(true);\n    \t\tThread thread = new Thread(new Runnable() {\n    \t\t\t@Override\n    \t\t\tpublic void run() {\n    \t\t\t\tSystem.out.println(\"进来申请锁了\" + Thread.currentThread().getName());\n    \t\t\t\tfairLock.testLock();\n    \t\t\t}\n    \t\t});\n    \t\tExecutorService fairexecutorService = Executors.newCachedThreadPool();\n    \t\tfor (int i = 0; i < 10; i++) {\n    \t\t\tfairexecutorService.execute(thread);\n    \t\t}\n    \t\t//使用非公平锁\n    \t\tRetrantLockDemo unFairLock = new RetrantLockDemo(false);\n    \t\tThread unFairThread= new Thread(new Runnable() {\n    \t\t\t@Override\n    \t\t\tpublic void run() {\n    \t\t\t\tSystem.out.println(\"进来申请锁了\" + Thread.currentThread().getName());\n    \t\t\t\tunFairLock.testLock();\t\t\t\t\n    \t\t\t}\n    \t\t});\n    \t\tSystem.out.println(\"=====================非公平锁===========================\");\n    \t\tExecutorService unfairexecutorService = Executors.newCachedThreadPool();\n    \t\tfor (int i = 0; i < 10; i++) {\n    \t\t\tunfairexecutorService.execute(unFairThread);\n    \t\t}\n    \n    \t}\n    \n    }\n    ```\n\n    输出结果：\n\n    ```\n    =====================非公平锁===========================\n    进来申请锁了pool-1-thread-8\n    线程=pool-1-thread-8已锁定\n    进来申请锁了pool-1-thread-1\n    线程=pool-1-thread-1已锁定\n    进来申请锁了pool-2-thread-2\n    线程=pool-2-thread-2已锁定\n    进来申请锁了pool-1-thread-3\n    线程=pool-1-thread-3已锁定\n    进来申请锁了pool-1-thread-4\n    线程=pool-1-thread-4已锁定\n    进来申请锁了pool-2-thread-3\n    进来申请锁了pool-1-thread-5\n    线程=pool-2-thread-3已锁定\n    线程=pool-1-thread-5已锁定\n    进来申请锁了pool-2-thread-8\n    进来申请锁了pool-2-thread-4\n    线程=pool-2-thread-8已锁定\n    线程=pool-2-thread-4已锁定\n    进来申请锁了pool-1-thread-9\n    进来申请锁了pool-2-thread-9\n    线程=pool-1-thread-9已锁定\n    线程=pool-2-thread-9已锁定\n    进来申请锁了pool-1-thread-10\n    线程=pool-1-thread-10已锁定\n    进来申请锁了pool-2-thread-1\n    线程=pool-2-thread-1已锁定\n    进来申请锁了pool-2-thread-5\n    线程=pool-2-thread-5已锁定\n    进来申请锁了pool-2-thread-6\n    线程=pool-2-thread-6已锁定\n    进来申请锁了pool-2-thread-7\n    线程=pool-2-thread-7已锁定\n    进来申请锁了pool-2-thread-2\n    线程=pool-2-thread-2已锁定\n    ```\n\n    明显看到是谁申请锁就获取锁。\n\n    Synchronize 非公平锁，不同于RetrantLock 它是不能变成公平锁的\n\n    * 为方法加锁\n\n      * 为静态方法加锁 锁对象是类。\n\n        ```\n        \tpublic static synchronized void testStaticSyn() {\n        \t\tSystem.out.println(\"synchronized 获取到锁了,当前线程=\" + Thread.currentThread().getName());\n        \t\ttry {\n        \t\t\tTimeUnit.MILLISECONDS.sleep(10);\n        \t\t} catch (InterruptedException e) {\n        \t\t\t// TODO Auto-generated catch block\n        \t\t\te.printStackTrace();\n        \t\t}\n        \t}\n        \t\tpublic static void main(String[] args) {\n        \t\tSystem.out.println(\"=====================非公平锁synchronized===========================\");\n        \t\tThread synThread = new Thread(new Runnable() {\n        \t\t\t@Override\n        \t\t\tpublic void run() {\n        \t\t\t\tSystem.out.println(\"进来申请锁了当前线程=\" + Thread.currentThread().getName());\n        \t\t\t\tRetrantLockDemo.testStaticSyn();\n        \t\t\t}\n        \t\t});\n        \t\tExecutorService synexecutorService = Executors.newCachedThreadPool();\n        \t\tfor (int i = 0; i <5; i++) {\n        \t\t\tsynexecutorService.execute(synThread);\n        \t\t}\n        \n        \t}\n        ```\n\n        输出结果：注意synchronized 获取到锁了 开头的字样为获取到\n\n        ```\n        =====================非公平锁synchronized===========================\n        进来申请锁了当前线程=pool-1-thread-1\n        进来申请锁了当前线程=pool-1-thread-2\n        进来申请锁了当前线程=pool-1-thread-3\n        synchronized 获取到锁了,当前线程=pool-1-thread-1\n        进来申请锁了当前线程=pool-1-thread-4\n        进来申请锁了当前线程=pool-1-thread-5\n        synchronized 获取到锁了,当前线程=pool-1-thread-2\n        synchronized 获取到锁了,当前线程=pool-1-thread-5\n        synchronized 获取到锁了,当前线程=pool-1-thread-4\n        synchronized 获取到锁了,当前线程=pool-1-thread-3\n        ```\n\n      * 为非静态方法加锁 锁对象为当前实例\n\n        **同一个对象在两个线程中分别访问该对象的加锁方法 会互斥**\n\n        **不同对象在两个线程中调用同一个同步方法 不会互斥 **\n\n        下面是不同对象的情况\n\n        ```\n        \tpublic synchronized  void testNoStaticStaticSyn() {\n        \t\tSystem.out.println(\"synchronized 获取到锁了,当前线程=\" + Thread.currentThread().getName());\n        \t\ttry {\n        \t\t\tTimeUnit.MILLISECONDS.sleep(10);\n        \t\t} catch (InterruptedException e) {\n        \t\t\t// TODO Auto-generated catch block\n        \t\t\te.printStackTrace();\n        \t\t}\n        \t}\n        \t\tpublic static void main(String[] args) {\n        \n        \t\tSystem.out.println(\"=====================非公平锁实例方法synchronized===========================\");\n        \n        \t\tThread synNoStaticThread = new Thread(new Runnable() {\n        \t\t\t@Override\n        \t\t\tpublic void run() {\n        \t\t\t\tSystem.out.println(\"进来申请锁了当前线程=\" + Thread.currentThread().getName());\n        \t\t\t\tRetrantLockDemo demo= new RetrantLockDemo(false);\n        \t\t\t\tdemo.testNoStaticStaticSyn();\n        \t\t\t}\n        \t\t});\n        \t\tExecutorService synexecutorService = Executors.newCachedThreadPool();\n        \t\tfor (int i = 0; i <5; i++) {\n        \t\t\tsynexecutorService.execute(synNoStaticThread);\n        \t\t}\n        \n        \t}\n        ```\n\n        输出，不互斥\n\n        ```\n        =====================非公平锁实例方法synchronized===========================\n        进来申请锁了当前线程=pool-1-thread-2\n        进来申请锁了当前线程=pool-1-thread-3\n        synchronized 获取到锁了,当前线程=pool-1-thread-2\n        synchronized 获取到锁了,当前线程=pool-1-thread-3\n        进来申请锁了当前线程=pool-1-thread-1\n        进来申请锁了当前线程=pool-1-thread-5\n        synchronized 获取到锁了,当前线程=pool-1-thread-5\n        synchronized 获取到锁了,当前线程=pool-1-thread-1\n        进来申请锁了当前线程=pool-1-thread-4\n        synchronized 获取到锁了,当前线程=pool-1-thread-4\n        ```\n\n        \n\n    * 为代码块加锁\n\n      \n\n      \n\n* 可重入锁\n\n  RetrantLock就是一个可重入锁。可重入锁就是递归锁。指同一个线程在外层方法获取锁的时候，进入内层方法 时会自动获取锁，synchronized也是个可重入锁。可重入锁在一定程度上可以避免思索。\n\n  synchronized也是可重入锁\n\n  ```\n  synchronized void setA() throws Exception{\n      Thread.sleep(1000);\n      setB();\n  }\n  //对象当setA获取到锁的时候SetA调用的setB方法会自动获取该对象的锁\n  synchronized void setB() throws Exception{\n      Thread.sleep(1000);\n  }\n  ```\n\n  \n\n* 独享锁/共享锁\n\n  * 独享锁也是互斥锁，同时只有一个线程能获得这个锁。\n\n    ReentrantLock  为独享锁，ReadWriteLock 也为独享锁。\n\n  * 共享锁 即为多个线程可以同时获得这个锁。\n\n    Semaphore  、CountDownLatch  为共享锁。\n\n    ReadWriteLock  中的读锁为共享锁。写锁为独享锁。\n\n* 互斥锁/读写锁\n\n  互斥锁或读写锁为独享锁/共享锁的具体实现\n\n  互斥锁的具体实现就是ReentrantLock  \n\n  读写锁的具体实现就是ReadWriteLock  \n\n* 乐观锁/悲观锁\n\n  经典的乐观锁/悲观锁的应用场景大概是数据库中的乐观锁与悲观锁\n\n  * 数据库中乐观锁\n\n    表中有个字段为版本号 比如这个字段为version,当第一次进行数据库操作的时候，获取到这个字段，假设其他用户不会进行操作，但是在最后的事务提交阶段，需要进行版本检查，如果这个字段和第一次的时候一样那么就进行提交，否则就不提交。其实这算是应用逻辑层的方式，不是从数据库层面进行加锁。\n\n  * 数据库中的悲观锁\n\n    读取的时候为后面的更新加锁，之后再来的读操作都会等待。这种是数据库锁 ，是从数据库层面进行的操作。\n\n    比如ORM框架 hibernate，可以使用session.lock（）锁定对象实现悲观锁。\n\n    mybatis的话一般用select xxx for update （行锁）lock xxx（表锁） 。但是一般很少有人用悲观锁吧，开销比较大\n\n  java中的乐观锁与悲观锁\n\n  * 悲观锁：\n\n    synchronized 是独占锁，获得该锁的线程才可以执行被锁住的代码，申请该锁的线程只能挂起等待直到该锁释放后才唤醒，拿到锁并进行执行。那么这样 的话开销很大，等待锁的线程在等待期间不能做任何事情，所以它是一种悲观锁。\n\n  * 乐观锁：\n\n    获得锁后会一直持有锁以防本线程再次申请锁导致无谓的解锁加锁开销，或者假设没有冲突而去完成同步代码块如果冲突再循环重试，或者采取申请锁失败后不立刻挂起而是稍微等待再次尝试获取 等待策略，以减少线程因为挂起、阻塞、唤醒（发生 CPU 的调度切换） 而造成的开销。 也就是说失败后会充实避免过大的性能开销。\n\n    偏向锁，轻量级锁(CAS轮询)、自旋锁就属于上述的乐观锁。\n\n* 分段锁\n\n  一个容器中有多把锁，每一把锁用于锁容器中一部分数据，那么当多线程访问容器中不同数据段的数据的时候，线程就不存在锁竞争，从而可以有效的提高并发访问效率，这个在ConcurrentHashMap中 就有用到。\n\n  比如：在 ConcurrentHashMap 中使用了一个包含 16 个锁的数组，每个锁保护所有散列桶的 1/16，其中第 N 个散列桶由第（N mod 16）个锁来保护。假设使用合理的散列算法使关键字能够均匀的分部，那么这大约能使对锁的请求减少到越来的 1/16。也正是这项技术使得 ConcurrentHashMap 支持多达 16 个并发的写入线程。\n\n  缺点是因为对数据容器进行分段加锁，那么锁的维护就是个比较大的开销。\n\n* 偏向锁/轻量级锁/重量级锁\n\n  这三种锁，指的是锁的状态，针对synchronized来说的\n\n  偏向锁只允许一个线程获得锁，加锁和解锁不需要额外的消耗，和执行非同步方法相比仅存在纳秒级的差距，但是如果线程间存在锁竞争，会带来额外的锁撤销的消耗，适用于只有一个线程访问同步块的场景。\n\n  轻量级锁允许多个线程获得锁。竞争的线程不会阻塞，提高相应速度，但是如果始终得不到锁竞争的线程，会自旋消耗cpu,适用于追求响应速度，同步块执行速度非常快的场景。\n\n  重量级锁：线程竞争不使用自旋，不会消耗cpu，但是会导致线程阻塞，响应时间缓慢，适用于追求吞吐量，同步块执行速度比较长的场景。\n\n* 自旋锁\n\n  指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，当循环条件被其他线程改变时，才能进入临界区，这样可以减少线程上下文的消耗，但是会消耗cpu资源，比如Disruptor这个框架中就是用了自旋锁\n\n  ```\n  public class SpinLock {\n   \n    private AtomicReference<Thread> sign =new AtomicReference<>();\n   \n    public void lock(){\n      Thread current = Thread.currentThread();\n      while(!sign .compareAndSet(null, current)){\n      }\n    }\n    public void unlock (){\n      Thread current = Thread.currentThread();\n      sign .compareAndSet(current, null);\n    }\n  }\n  ```\n\n  使用了 CAS 原子操作，lock 函数将 owner 设置为当前线程，并且预测原来的值为空。unlock 函数将 owner 设置为 null，并且预测值为当前线程。 \n\n  当有第二个线程调用 lock 操作时由于 owner 值不为空，导致循环一直被执行，直至第一个线程调用 unlock 函数将 owner 设置为 null，第二个线程才能进入临界区。\n\n  由于自旋锁只是将当前线程不停地执行循环体，不进行线程状态的改变，所以响应速度更快。但当线程数不停增加时，性能下降明显，因为每个线程都需要执行，占用 CPU 时间。如果线程竞争不激烈，并且保持锁的时间段。适合使用自旋锁。\n\n  注：该例子为非公平锁，获得锁的先后顺序，不会按照进入 lock 的先后顺序进行。","slug":"Java锁","published":1,"updated":"2022-09-03T07:30:55.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz83k000rtwfadsouphnm","content":"<p>Java中的锁记录下<a id=\"more\"></a></p>\n<h3 id=\"JAVA中的锁\"><a href=\"#JAVA中的锁\" class=\"headerlink\" title=\"JAVA中的锁\"></a>JAVA中的锁</h3><ul>\n<li><p>公平锁/非公平锁</p>\n<p><strong>非公平锁的性能要比公平锁高，因为不需要维护队列</strong></p>\n<ul>\n<li><p><strong>公平锁:多个线程按照申请锁的顺序来获取锁，也就是说申请锁的顺序和获取锁的顺序是一致的，加锁前会检查是否有排队等待锁的线程，如果有那么，先来先得</strong></p>\n<ul>\n<li><p>RetrantLock 默认是非公平锁，可以指定构造参数来构建公平锁。</p>\n<p>公平锁</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.convergence.support.lock;</span><br><span class=\"line\">    </span><br><span class=\"line\">import java.util.concurrent.ExecutorService;</span><br><span class=\"line\">import java.util.concurrent.Executors;</span><br><span class=\"line\">import java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\">    </span><br><span class=\"line\">/**</span><br><span class=\"line\">* 公平锁与非公平锁 之RetrantLock</span><br><span class=\"line\">* </span><br><span class=\"line\">* @author andreby</span><br><span class=\"line\">*</span><br><span class=\"line\">*/</span><br><span class=\"line\">public class RetrantLockDemo &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">private ReentrantLock reentrantLock;</span><br><span class=\"line\">    </span><br><span class=\"line\">public RetrantLockDemo(boolean isFair) &#123;</span><br><span class=\"line\">super();</span><br><span class=\"line\">this.reentrantLock = new ReentrantLock(isFair);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">public void testLock() &#123;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">reentrantLock.lock();</span><br><span class=\"line\">System.out.println(&quot;线程=&quot; + Thread.currentThread().getName() + &quot;已锁定&quot;);</span><br><span class=\"line\">&#125; catch (Exception e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">System.out.println(&quot;Something is wrong with it &quot;);</span><br><span class=\"line\">&#125; finally &#123;</span><br><span class=\"line\">reentrantLock.unlock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**</span><br><span class=\"line\">* 进行main方法测试公平锁</span><br><span class=\"line\">* @param args</span><br><span class=\"line\">*/</span><br><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">// 指定使用公平锁</span><br><span class=\"line\">RetrantLockDemo lockDemo = new RetrantLockDemo(true);</span><br><span class=\"line\">Thread thread = new Thread(new Runnable() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void run() &#123;</span><br><span class=\"line\">System.out.println(&quot;进来了&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">lockDemo.testLock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">executorService.execute(thread);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进来申请锁了pool-1-thread-2</span><br><span class=\"line\">进来申请锁了pool-1-thread-4</span><br><span class=\"line\">进来申请锁了pool-1-thread-3</span><br><span class=\"line\">进来申请锁了pool-1-thread-1</span><br><span class=\"line\">线程=pool-1-thread-2已锁定</span><br><span class=\"line\">进来申请锁了pool-1-thread-7</span><br><span class=\"line\">进来申请锁了pool-1-thread-8</span><br><span class=\"line\">进来申请锁了pool-1-thread-6</span><br><span class=\"line\">进来申请锁了pool-1-thread-5</span><br><span class=\"line\">线程=pool-1-thread-4已锁定</span><br><span class=\"line\">线程=pool-1-thread-3已锁定</span><br><span class=\"line\">线程=pool-1-thread-1已锁定</span><br><span class=\"line\">进来申请锁了pool-1-thread-9</span><br><span class=\"line\">进来申请锁了pool-1-thread-10</span><br><span class=\"line\">线程=pool-1-thread-7已锁定</span><br><span class=\"line\">线程=pool-1-thread-8已锁定</span><br><span class=\"line\">线程=pool-1-thread-6已锁定</span><br><span class=\"line\">线程=pool-1-thread-5已锁定</span><br><span class=\"line\">线程=pool-1-thread-9已锁定</span><br><span class=\"line\">线程=pool-1-thread-10已锁定</span><br></pre></td></tr></table></figure>\n\n<p>那么可以看到申请锁的顺序和获得锁的顺序是一致的</p>\n</li>\n<li><p><strong>非公平锁：多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请 先获得锁，加锁时候不考虑排队等待问题，直接尝试获取锁，获取不到的话自动到队尾等待，这样的话 有可能出现优先级反转或饥饿现象</strong></p>\n<p>RetrantLock 非公平锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.convergence.support.lock;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.concurrent.ExecutorService;</span><br><span class=\"line\">import java.util.concurrent.Executors;</span><br><span class=\"line\">import java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 公平锁与非公平锁 之RetrantLock</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @author andreby</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class RetrantLockDemo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate ReentrantLock reentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic RetrantLockDemo(boolean isFair) &#123;</span><br><span class=\"line\">\t\tsuper();</span><br><span class=\"line\">\t\tthis.reentrantLock = new ReentrantLock(isFair);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void testLock() &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\treentrantLock.lock();</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;线程=&quot; + Thread.currentThread().getName() + &quot;已锁定&quot;);</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;Something is wrong with it &quot;);</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\treentrantLock.unlock();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 进行main方法测试公平锁</span><br><span class=\"line\">\t * @param args</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t// 指定使用公平锁</span><br><span class=\"line\">\t\tRetrantLockDemo fairLock = new RetrantLockDemo(true);</span><br><span class=\"line\">\t\tThread thread = new Thread(new Runnable() &#123;</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;进来申请锁了&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">\t\t\t\tfairLock.testLock();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tExecutorService fairexecutorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\t\t\tfairexecutorService.execute(thread);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//使用非公平锁</span><br><span class=\"line\">\t\tRetrantLockDemo unFairLock = new RetrantLockDemo(false);</span><br><span class=\"line\">\t\tThread unFairThread= new Thread(new Runnable() &#123;</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;进来申请锁了&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">\t\t\t\tunFairLock.testLock();\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;=====================非公平锁===========================&quot;);</span><br><span class=\"line\">\t\tExecutorService unfairexecutorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\t\t\tunfairexecutorService.execute(unFairThread);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=====================非公平锁===========================</span><br><span class=\"line\">进来申请锁了pool-1-thread-8</span><br><span class=\"line\">线程=pool-1-thread-8已锁定</span><br><span class=\"line\">进来申请锁了pool-1-thread-1</span><br><span class=\"line\">线程=pool-1-thread-1已锁定</span><br><span class=\"line\">进来申请锁了pool-2-thread-2</span><br><span class=\"line\">线程=pool-2-thread-2已锁定</span><br><span class=\"line\">进来申请锁了pool-1-thread-3</span><br><span class=\"line\">线程=pool-1-thread-3已锁定</span><br><span class=\"line\">进来申请锁了pool-1-thread-4</span><br><span class=\"line\">线程=pool-1-thread-4已锁定</span><br><span class=\"line\">进来申请锁了pool-2-thread-3</span><br><span class=\"line\">进来申请锁了pool-1-thread-5</span><br><span class=\"line\">线程=pool-2-thread-3已锁定</span><br><span class=\"line\">线程=pool-1-thread-5已锁定</span><br><span class=\"line\">进来申请锁了pool-2-thread-8</span><br><span class=\"line\">进来申请锁了pool-2-thread-4</span><br><span class=\"line\">线程=pool-2-thread-8已锁定</span><br><span class=\"line\">线程=pool-2-thread-4已锁定</span><br><span class=\"line\">进来申请锁了pool-1-thread-9</span><br><span class=\"line\">进来申请锁了pool-2-thread-9</span><br><span class=\"line\">线程=pool-1-thread-9已锁定</span><br><span class=\"line\">线程=pool-2-thread-9已锁定</span><br><span class=\"line\">进来申请锁了pool-1-thread-10</span><br><span class=\"line\">线程=pool-1-thread-10已锁定</span><br><span class=\"line\">进来申请锁了pool-2-thread-1</span><br><span class=\"line\">线程=pool-2-thread-1已锁定</span><br><span class=\"line\">进来申请锁了pool-2-thread-5</span><br><span class=\"line\">线程=pool-2-thread-5已锁定</span><br><span class=\"line\">进来申请锁了pool-2-thread-6</span><br><span class=\"line\">线程=pool-2-thread-6已锁定</span><br><span class=\"line\">进来申请锁了pool-2-thread-7</span><br><span class=\"line\">线程=pool-2-thread-7已锁定</span><br><span class=\"line\">进来申请锁了pool-2-thread-2</span><br><span class=\"line\">线程=pool-2-thread-2已锁定</span><br></pre></td></tr></table></figure>\n\n<p>明显看到是谁申请锁就获取锁。</p>\n<p>Synchronize 非公平锁，不同于RetrantLock 它是不能变成公平锁的</p>\n<ul>\n<li><p>为方法加锁</p>\n<ul>\n<li><p>为静态方法加锁 锁对象是类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static synchronized void testStaticSyn() &#123;</span><br><span class=\"line\">\tSystem.out.println(&quot;synchronized 获取到锁了,当前线程=&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t\tTimeUnit.MILLISECONDS.sleep(10);</span><br><span class=\"line\">\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\tSystem.out.println(&quot;=====================非公平锁synchronized===========================&quot;);</span><br><span class=\"line\">\tThread synThread = new Thread(new Runnable() &#123;</span><br><span class=\"line\">\t\t@Override</span><br><span class=\"line\">\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;进来申请锁了当前线程=&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">\t\t\tRetrantLockDemo.testStaticSyn();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tExecutorService synexecutorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">\tfor (int i = 0; i &lt;5; i++) &#123;</span><br><span class=\"line\">\t\tsynexecutorService.execute(synThread);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：注意synchronized 获取到锁了 开头的字样为获取到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=====================非公平锁synchronized===========================</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-1</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-2</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-3</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-1</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-4</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-5</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-2</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-5</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-4</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-3</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为非静态方法加锁 锁对象为当前实例</p>\n<p><strong>同一个对象在两个线程中分别访问该对象的加锁方法 会互斥</strong></p>\n<p>*<em>不同对象在两个线程中调用同一个同步方法 不会互斥 *</em></p>\n<p>下面是不同对象的情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public synchronized  void testNoStaticStaticSyn() &#123;</span><br><span class=\"line\">\tSystem.out.println(&quot;synchronized 获取到锁了,当前线程=&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t\tTimeUnit.MILLISECONDS.sleep(10);</span><br><span class=\"line\">\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\tSystem.out.println(&quot;=====================非公平锁实例方法synchronized===========================&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">\tThread synNoStaticThread = new Thread(new Runnable() &#123;</span><br><span class=\"line\">\t\t@Override</span><br><span class=\"line\">\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;进来申请锁了当前线程=&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">\t\t\tRetrantLockDemo demo= new RetrantLockDemo(false);</span><br><span class=\"line\">\t\t\tdemo.testNoStaticStaticSyn();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tExecutorService synexecutorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">\tfor (int i = 0; i &lt;5; i++) &#123;</span><br><span class=\"line\">\t\tsynexecutorService.execute(synNoStaticThread);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出，不互斥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=====================非公平锁实例方法synchronized===========================</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-2</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-3</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-2</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-3</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-1</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-5</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-5</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-1</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-4</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-4</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>* 为代码块加锁</code></pre><ul>\n<li><p>可重入锁</p>\n<p>RetrantLock就是一个可重入锁。可重入锁就是递归锁。指同一个线程在外层方法获取锁的时候，进入内层方法 时会自动获取锁，synchronized也是个可重入锁。可重入锁在一定程度上可以避免思索。</p>\n<p>synchronized也是可重入锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synchronized void setA() throws Exception&#123;</span><br><span class=\"line\">    Thread.sleep(1000);</span><br><span class=\"line\">    setB();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//对象当setA获取到锁的时候SetA调用的setB方法会自动获取该对象的锁</span><br><span class=\"line\">synchronized void setB() throws Exception&#123;</span><br><span class=\"line\">    Thread.sleep(1000);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>独享锁/共享锁</p>\n<ul>\n<li><p>独享锁也是互斥锁，同时只有一个线程能获得这个锁。</p>\n<p>ReentrantLock  为独享锁，ReadWriteLock 也为独享锁。</p>\n</li>\n<li><p>共享锁 即为多个线程可以同时获得这个锁。</p>\n<p>Semaphore  、CountDownLatch  为共享锁。</p>\n<p>ReadWriteLock  中的读锁为共享锁。写锁为独享锁。</p>\n</li>\n</ul>\n</li>\n<li><p>互斥锁/读写锁</p>\n<p>互斥锁或读写锁为独享锁/共享锁的具体实现</p>\n<p>互斥锁的具体实现就是ReentrantLock  </p>\n<p>读写锁的具体实现就是ReadWriteLock  </p>\n</li>\n<li><p>乐观锁/悲观锁</p>\n<p>经典的乐观锁/悲观锁的应用场景大概是数据库中的乐观锁与悲观锁</p>\n<ul>\n<li><p>数据库中乐观锁</p>\n<p>表中有个字段为版本号 比如这个字段为version,当第一次进行数据库操作的时候，获取到这个字段，假设其他用户不会进行操作，但是在最后的事务提交阶段，需要进行版本检查，如果这个字段和第一次的时候一样那么就进行提交，否则就不提交。其实这算是应用逻辑层的方式，不是从数据库层面进行加锁。</p>\n</li>\n<li><p>数据库中的悲观锁</p>\n<p>读取的时候为后面的更新加锁，之后再来的读操作都会等待。这种是数据库锁 ，是从数据库层面进行的操作。</p>\n<p>比如ORM框架 hibernate，可以使用session.lock（）锁定对象实现悲观锁。</p>\n<p>mybatis的话一般用select xxx for update （行锁）lock xxx（表锁） 。但是一般很少有人用悲观锁吧，开销比较大</p>\n</li>\n</ul>\n<p>java中的乐观锁与悲观锁</p>\n<ul>\n<li><p>悲观锁：</p>\n<p>synchronized 是独占锁，获得该锁的线程才可以执行被锁住的代码，申请该锁的线程只能挂起等待直到该锁释放后才唤醒，拿到锁并进行执行。那么这样 的话开销很大，等待锁的线程在等待期间不能做任何事情，所以它是一种悲观锁。</p>\n</li>\n<li><p>乐观锁：</p>\n<p>获得锁后会一直持有锁以防本线程再次申请锁导致无谓的解锁加锁开销，或者假设没有冲突而去完成同步代码块如果冲突再循环重试，或者采取申请锁失败后不立刻挂起而是稍微等待再次尝试获取 等待策略，以减少线程因为挂起、阻塞、唤醒（发生 CPU 的调度切换） 而造成的开销。 也就是说失败后会充实避免过大的性能开销。</p>\n<p>偏向锁，轻量级锁(CAS轮询)、自旋锁就属于上述的乐观锁。</p>\n</li>\n</ul>\n</li>\n<li><p>分段锁</p>\n<p>一个容器中有多把锁，每一把锁用于锁容器中一部分数据，那么当多线程访问容器中不同数据段的数据的时候，线程就不存在锁竞争，从而可以有效的提高并发访问效率，这个在ConcurrentHashMap中 就有用到。</p>\n<p>比如：在 ConcurrentHashMap 中使用了一个包含 16 个锁的数组，每个锁保护所有散列桶的 1/16，其中第 N 个散列桶由第（N mod 16）个锁来保护。假设使用合理的散列算法使关键字能够均匀的分部，那么这大约能使对锁的请求减少到越来的 1/16。也正是这项技术使得 ConcurrentHashMap 支持多达 16 个并发的写入线程。</p>\n<p>缺点是因为对数据容器进行分段加锁，那么锁的维护就是个比较大的开销。</p>\n</li>\n<li><p>偏向锁/轻量级锁/重量级锁</p>\n<p>这三种锁，指的是锁的状态，针对synchronized来说的</p>\n<p>偏向锁只允许一个线程获得锁，加锁和解锁不需要额外的消耗，和执行非同步方法相比仅存在纳秒级的差距，但是如果线程间存在锁竞争，会带来额外的锁撤销的消耗，适用于只有一个线程访问同步块的场景。</p>\n<p>轻量级锁允许多个线程获得锁。竞争的线程不会阻塞，提高相应速度，但是如果始终得不到锁竞争的线程，会自旋消耗cpu,适用于追求响应速度，同步块执行速度非常快的场景。</p>\n<p>重量级锁：线程竞争不使用自旋，不会消耗cpu，但是会导致线程阻塞，响应时间缓慢，适用于追求吞吐量，同步块执行速度比较长的场景。</p>\n</li>\n<li><p>自旋锁</p>\n<p>指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，当循环条件被其他线程改变时，才能进入临界区，这样可以减少线程上下文的消耗，但是会消耗cpu资源，比如Disruptor这个框架中就是用了自旋锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SpinLock &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  private AtomicReference&lt;Thread&gt; sign =new AtomicReference&lt;&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">  public void lock()&#123;</span><br><span class=\"line\">    Thread current = Thread.currentThread();</span><br><span class=\"line\">    while(!sign .compareAndSet(null, current))&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public void unlock ()&#123;</span><br><span class=\"line\">    Thread current = Thread.currentThread();</span><br><span class=\"line\">    sign .compareAndSet(current, null);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用了 CAS 原子操作，lock 函数将 owner 设置为当前线程，并且预测原来的值为空。unlock 函数将 owner 设置为 null，并且预测值为当前线程。 </p>\n<p>当有第二个线程调用 lock 操作时由于 owner 值不为空，导致循环一直被执行，直至第一个线程调用 unlock 函数将 owner 设置为 null，第二个线程才能进入临界区。</p>\n<p>由于自旋锁只是将当前线程不停地执行循环体，不进行线程状态的改变，所以响应速度更快。但当线程数不停增加时，性能下降明显，因为每个线程都需要执行，占用 CPU 时间。如果线程竞争不激烈，并且保持锁的时间段。适合使用自旋锁。</p>\n<p>注：该例子为非公平锁，获得锁的先后顺序，不会按照进入 lock 的先后顺序进行。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Java中的锁记录下</p>","more":"<p></p>\n<h3 id=\"JAVA中的锁\"><a href=\"#JAVA中的锁\" class=\"headerlink\" title=\"JAVA中的锁\"></a>JAVA中的锁</h3><ul>\n<li><p>公平锁/非公平锁</p>\n<p><strong>非公平锁的性能要比公平锁高，因为不需要维护队列</strong></p>\n<ul>\n<li><p><strong>公平锁:多个线程按照申请锁的顺序来获取锁，也就是说申请锁的顺序和获取锁的顺序是一致的，加锁前会检查是否有排队等待锁的线程，如果有那么，先来先得</strong></p>\n<ul>\n<li><p>RetrantLock 默认是非公平锁，可以指定构造参数来构建公平锁。</p>\n<p>公平锁</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.convergence.support.lock;</span><br><span class=\"line\">    </span><br><span class=\"line\">import java.util.concurrent.ExecutorService;</span><br><span class=\"line\">import java.util.concurrent.Executors;</span><br><span class=\"line\">import java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\">    </span><br><span class=\"line\">/**</span><br><span class=\"line\">* 公平锁与非公平锁 之RetrantLock</span><br><span class=\"line\">* </span><br><span class=\"line\">* @author andreby</span><br><span class=\"line\">*</span><br><span class=\"line\">*/</span><br><span class=\"line\">public class RetrantLockDemo &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">private ReentrantLock reentrantLock;</span><br><span class=\"line\">    </span><br><span class=\"line\">public RetrantLockDemo(boolean isFair) &#123;</span><br><span class=\"line\">super();</span><br><span class=\"line\">this.reentrantLock = new ReentrantLock(isFair);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">public void testLock() &#123;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">reentrantLock.lock();</span><br><span class=\"line\">System.out.println(&quot;线程=&quot; + Thread.currentThread().getName() + &quot;已锁定&quot;);</span><br><span class=\"line\">&#125; catch (Exception e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">System.out.println(&quot;Something is wrong with it &quot;);</span><br><span class=\"line\">&#125; finally &#123;</span><br><span class=\"line\">reentrantLock.unlock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**</span><br><span class=\"line\">* 进行main方法测试公平锁</span><br><span class=\"line\">* @param args</span><br><span class=\"line\">*/</span><br><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">// 指定使用公平锁</span><br><span class=\"line\">RetrantLockDemo lockDemo = new RetrantLockDemo(true);</span><br><span class=\"line\">Thread thread = new Thread(new Runnable() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void run() &#123;</span><br><span class=\"line\">System.out.println(&quot;进来了&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">lockDemo.testLock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">executorService.execute(thread);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进来申请锁了pool-1-thread-2</span><br><span class=\"line\">进来申请锁了pool-1-thread-4</span><br><span class=\"line\">进来申请锁了pool-1-thread-3</span><br><span class=\"line\">进来申请锁了pool-1-thread-1</span><br><span class=\"line\">线程=pool-1-thread-2已锁定</span><br><span class=\"line\">进来申请锁了pool-1-thread-7</span><br><span class=\"line\">进来申请锁了pool-1-thread-8</span><br><span class=\"line\">进来申请锁了pool-1-thread-6</span><br><span class=\"line\">进来申请锁了pool-1-thread-5</span><br><span class=\"line\">线程=pool-1-thread-4已锁定</span><br><span class=\"line\">线程=pool-1-thread-3已锁定</span><br><span class=\"line\">线程=pool-1-thread-1已锁定</span><br><span class=\"line\">进来申请锁了pool-1-thread-9</span><br><span class=\"line\">进来申请锁了pool-1-thread-10</span><br><span class=\"line\">线程=pool-1-thread-7已锁定</span><br><span class=\"line\">线程=pool-1-thread-8已锁定</span><br><span class=\"line\">线程=pool-1-thread-6已锁定</span><br><span class=\"line\">线程=pool-1-thread-5已锁定</span><br><span class=\"line\">线程=pool-1-thread-9已锁定</span><br><span class=\"line\">线程=pool-1-thread-10已锁定</span><br></pre></td></tr></table></figure>\n\n<p>那么可以看到申请锁的顺序和获得锁的顺序是一致的</p>\n</li>\n<li><p><strong>非公平锁：多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请 先获得锁，加锁时候不考虑排队等待问题，直接尝试获取锁，获取不到的话自动到队尾等待，这样的话 有可能出现优先级反转或饥饿现象</strong></p>\n<p>RetrantLock 非公平锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.convergence.support.lock;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.concurrent.ExecutorService;</span><br><span class=\"line\">import java.util.concurrent.Executors;</span><br><span class=\"line\">import java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 公平锁与非公平锁 之RetrantLock</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @author andreby</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class RetrantLockDemo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate ReentrantLock reentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic RetrantLockDemo(boolean isFair) &#123;</span><br><span class=\"line\">\t\tsuper();</span><br><span class=\"line\">\t\tthis.reentrantLock = new ReentrantLock(isFair);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void testLock() &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\treentrantLock.lock();</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;线程=&quot; + Thread.currentThread().getName() + &quot;已锁定&quot;);</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;Something is wrong with it &quot;);</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\treentrantLock.unlock();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 进行main方法测试公平锁</span><br><span class=\"line\">\t * @param args</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t// 指定使用公平锁</span><br><span class=\"line\">\t\tRetrantLockDemo fairLock = new RetrantLockDemo(true);</span><br><span class=\"line\">\t\tThread thread = new Thread(new Runnable() &#123;</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;进来申请锁了&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">\t\t\t\tfairLock.testLock();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tExecutorService fairexecutorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\t\t\tfairexecutorService.execute(thread);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//使用非公平锁</span><br><span class=\"line\">\t\tRetrantLockDemo unFairLock = new RetrantLockDemo(false);</span><br><span class=\"line\">\t\tThread unFairThread= new Thread(new Runnable() &#123;</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;进来申请锁了&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">\t\t\t\tunFairLock.testLock();\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;=====================非公平锁===========================&quot;);</span><br><span class=\"line\">\t\tExecutorService unfairexecutorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\t\t\tunfairexecutorService.execute(unFairThread);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=====================非公平锁===========================</span><br><span class=\"line\">进来申请锁了pool-1-thread-8</span><br><span class=\"line\">线程=pool-1-thread-8已锁定</span><br><span class=\"line\">进来申请锁了pool-1-thread-1</span><br><span class=\"line\">线程=pool-1-thread-1已锁定</span><br><span class=\"line\">进来申请锁了pool-2-thread-2</span><br><span class=\"line\">线程=pool-2-thread-2已锁定</span><br><span class=\"line\">进来申请锁了pool-1-thread-3</span><br><span class=\"line\">线程=pool-1-thread-3已锁定</span><br><span class=\"line\">进来申请锁了pool-1-thread-4</span><br><span class=\"line\">线程=pool-1-thread-4已锁定</span><br><span class=\"line\">进来申请锁了pool-2-thread-3</span><br><span class=\"line\">进来申请锁了pool-1-thread-5</span><br><span class=\"line\">线程=pool-2-thread-3已锁定</span><br><span class=\"line\">线程=pool-1-thread-5已锁定</span><br><span class=\"line\">进来申请锁了pool-2-thread-8</span><br><span class=\"line\">进来申请锁了pool-2-thread-4</span><br><span class=\"line\">线程=pool-2-thread-8已锁定</span><br><span class=\"line\">线程=pool-2-thread-4已锁定</span><br><span class=\"line\">进来申请锁了pool-1-thread-9</span><br><span class=\"line\">进来申请锁了pool-2-thread-9</span><br><span class=\"line\">线程=pool-1-thread-9已锁定</span><br><span class=\"line\">线程=pool-2-thread-9已锁定</span><br><span class=\"line\">进来申请锁了pool-1-thread-10</span><br><span class=\"line\">线程=pool-1-thread-10已锁定</span><br><span class=\"line\">进来申请锁了pool-2-thread-1</span><br><span class=\"line\">线程=pool-2-thread-1已锁定</span><br><span class=\"line\">进来申请锁了pool-2-thread-5</span><br><span class=\"line\">线程=pool-2-thread-5已锁定</span><br><span class=\"line\">进来申请锁了pool-2-thread-6</span><br><span class=\"line\">线程=pool-2-thread-6已锁定</span><br><span class=\"line\">进来申请锁了pool-2-thread-7</span><br><span class=\"line\">线程=pool-2-thread-7已锁定</span><br><span class=\"line\">进来申请锁了pool-2-thread-2</span><br><span class=\"line\">线程=pool-2-thread-2已锁定</span><br></pre></td></tr></table></figure>\n\n<p>明显看到是谁申请锁就获取锁。</p>\n<p>Synchronize 非公平锁，不同于RetrantLock 它是不能变成公平锁的</p>\n<ul>\n<li><p>为方法加锁</p>\n<ul>\n<li><p>为静态方法加锁 锁对象是类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static synchronized void testStaticSyn() &#123;</span><br><span class=\"line\">\tSystem.out.println(&quot;synchronized 获取到锁了,当前线程=&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t\tTimeUnit.MILLISECONDS.sleep(10);</span><br><span class=\"line\">\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\tSystem.out.println(&quot;=====================非公平锁synchronized===========================&quot;);</span><br><span class=\"line\">\tThread synThread = new Thread(new Runnable() &#123;</span><br><span class=\"line\">\t\t@Override</span><br><span class=\"line\">\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;进来申请锁了当前线程=&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">\t\t\tRetrantLockDemo.testStaticSyn();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tExecutorService synexecutorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">\tfor (int i = 0; i &lt;5; i++) &#123;</span><br><span class=\"line\">\t\tsynexecutorService.execute(synThread);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：注意synchronized 获取到锁了 开头的字样为获取到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=====================非公平锁synchronized===========================</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-1</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-2</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-3</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-1</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-4</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-5</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-2</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-5</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-4</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-3</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为非静态方法加锁 锁对象为当前实例</p>\n<p><strong>同一个对象在两个线程中分别访问该对象的加锁方法 会互斥</strong></p>\n<p>*<em>不同对象在两个线程中调用同一个同步方法 不会互斥 *</em></p>\n<p>下面是不同对象的情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public synchronized  void testNoStaticStaticSyn() &#123;</span><br><span class=\"line\">\tSystem.out.println(&quot;synchronized 获取到锁了,当前线程=&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t\tTimeUnit.MILLISECONDS.sleep(10);</span><br><span class=\"line\">\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\tSystem.out.println(&quot;=====================非公平锁实例方法synchronized===========================&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">\tThread synNoStaticThread = new Thread(new Runnable() &#123;</span><br><span class=\"line\">\t\t@Override</span><br><span class=\"line\">\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;进来申请锁了当前线程=&quot; + Thread.currentThread().getName());</span><br><span class=\"line\">\t\t\tRetrantLockDemo demo= new RetrantLockDemo(false);</span><br><span class=\"line\">\t\t\tdemo.testNoStaticStaticSyn();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tExecutorService synexecutorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">\tfor (int i = 0; i &lt;5; i++) &#123;</span><br><span class=\"line\">\t\tsynexecutorService.execute(synNoStaticThread);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出，不互斥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=====================非公平锁实例方法synchronized===========================</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-2</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-3</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-2</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-3</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-1</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-5</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-5</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-1</span><br><span class=\"line\">进来申请锁了当前线程=pool-1-thread-4</span><br><span class=\"line\">synchronized 获取到锁了,当前线程=pool-1-thread-4</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>* 为代码块加锁</code></pre><ul>\n<li><p>可重入锁</p>\n<p>RetrantLock就是一个可重入锁。可重入锁就是递归锁。指同一个线程在外层方法获取锁的时候，进入内层方法 时会自动获取锁，synchronized也是个可重入锁。可重入锁在一定程度上可以避免思索。</p>\n<p>synchronized也是可重入锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synchronized void setA() throws Exception&#123;</span><br><span class=\"line\">    Thread.sleep(1000);</span><br><span class=\"line\">    setB();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//对象当setA获取到锁的时候SetA调用的setB方法会自动获取该对象的锁</span><br><span class=\"line\">synchronized void setB() throws Exception&#123;</span><br><span class=\"line\">    Thread.sleep(1000);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>独享锁/共享锁</p>\n<ul>\n<li><p>独享锁也是互斥锁，同时只有一个线程能获得这个锁。</p>\n<p>ReentrantLock  为独享锁，ReadWriteLock 也为独享锁。</p>\n</li>\n<li><p>共享锁 即为多个线程可以同时获得这个锁。</p>\n<p>Semaphore  、CountDownLatch  为共享锁。</p>\n<p>ReadWriteLock  中的读锁为共享锁。写锁为独享锁。</p>\n</li>\n</ul>\n</li>\n<li><p>互斥锁/读写锁</p>\n<p>互斥锁或读写锁为独享锁/共享锁的具体实现</p>\n<p>互斥锁的具体实现就是ReentrantLock  </p>\n<p>读写锁的具体实现就是ReadWriteLock  </p>\n</li>\n<li><p>乐观锁/悲观锁</p>\n<p>经典的乐观锁/悲观锁的应用场景大概是数据库中的乐观锁与悲观锁</p>\n<ul>\n<li><p>数据库中乐观锁</p>\n<p>表中有个字段为版本号 比如这个字段为version,当第一次进行数据库操作的时候，获取到这个字段，假设其他用户不会进行操作，但是在最后的事务提交阶段，需要进行版本检查，如果这个字段和第一次的时候一样那么就进行提交，否则就不提交。其实这算是应用逻辑层的方式，不是从数据库层面进行加锁。</p>\n</li>\n<li><p>数据库中的悲观锁</p>\n<p>读取的时候为后面的更新加锁，之后再来的读操作都会等待。这种是数据库锁 ，是从数据库层面进行的操作。</p>\n<p>比如ORM框架 hibernate，可以使用session.lock（）锁定对象实现悲观锁。</p>\n<p>mybatis的话一般用select xxx for update （行锁）lock xxx（表锁） 。但是一般很少有人用悲观锁吧，开销比较大</p>\n</li>\n</ul>\n<p>java中的乐观锁与悲观锁</p>\n<ul>\n<li><p>悲观锁：</p>\n<p>synchronized 是独占锁，获得该锁的线程才可以执行被锁住的代码，申请该锁的线程只能挂起等待直到该锁释放后才唤醒，拿到锁并进行执行。那么这样 的话开销很大，等待锁的线程在等待期间不能做任何事情，所以它是一种悲观锁。</p>\n</li>\n<li><p>乐观锁：</p>\n<p>获得锁后会一直持有锁以防本线程再次申请锁导致无谓的解锁加锁开销，或者假设没有冲突而去完成同步代码块如果冲突再循环重试，或者采取申请锁失败后不立刻挂起而是稍微等待再次尝试获取 等待策略，以减少线程因为挂起、阻塞、唤醒（发生 CPU 的调度切换） 而造成的开销。 也就是说失败后会充实避免过大的性能开销。</p>\n<p>偏向锁，轻量级锁(CAS轮询)、自旋锁就属于上述的乐观锁。</p>\n</li>\n</ul>\n</li>\n<li><p>分段锁</p>\n<p>一个容器中有多把锁，每一把锁用于锁容器中一部分数据，那么当多线程访问容器中不同数据段的数据的时候，线程就不存在锁竞争，从而可以有效的提高并发访问效率，这个在ConcurrentHashMap中 就有用到。</p>\n<p>比如：在 ConcurrentHashMap 中使用了一个包含 16 个锁的数组，每个锁保护所有散列桶的 1/16，其中第 N 个散列桶由第（N mod 16）个锁来保护。假设使用合理的散列算法使关键字能够均匀的分部，那么这大约能使对锁的请求减少到越来的 1/16。也正是这项技术使得 ConcurrentHashMap 支持多达 16 个并发的写入线程。</p>\n<p>缺点是因为对数据容器进行分段加锁，那么锁的维护就是个比较大的开销。</p>\n</li>\n<li><p>偏向锁/轻量级锁/重量级锁</p>\n<p>这三种锁，指的是锁的状态，针对synchronized来说的</p>\n<p>偏向锁只允许一个线程获得锁，加锁和解锁不需要额外的消耗，和执行非同步方法相比仅存在纳秒级的差距，但是如果线程间存在锁竞争，会带来额外的锁撤销的消耗，适用于只有一个线程访问同步块的场景。</p>\n<p>轻量级锁允许多个线程获得锁。竞争的线程不会阻塞，提高相应速度，但是如果始终得不到锁竞争的线程，会自旋消耗cpu,适用于追求响应速度，同步块执行速度非常快的场景。</p>\n<p>重量级锁：线程竞争不使用自旋，不会消耗cpu，但是会导致线程阻塞，响应时间缓慢，适用于追求吞吐量，同步块执行速度比较长的场景。</p>\n</li>\n<li><p>自旋锁</p>\n<p>指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，当循环条件被其他线程改变时，才能进入临界区，这样可以减少线程上下文的消耗，但是会消耗cpu资源，比如Disruptor这个框架中就是用了自旋锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SpinLock &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  private AtomicReference&lt;Thread&gt; sign =new AtomicReference&lt;&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">  public void lock()&#123;</span><br><span class=\"line\">    Thread current = Thread.currentThread();</span><br><span class=\"line\">    while(!sign .compareAndSet(null, current))&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public void unlock ()&#123;</span><br><span class=\"line\">    Thread current = Thread.currentThread();</span><br><span class=\"line\">    sign .compareAndSet(current, null);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用了 CAS 原子操作，lock 函数将 owner 设置为当前线程，并且预测原来的值为空。unlock 函数将 owner 设置为 null，并且预测值为当前线程。 </p>\n<p>当有第二个线程调用 lock 操作时由于 owner 值不为空，导致循环一直被执行，直至第一个线程调用 unlock 函数将 owner 设置为 null，第二个线程才能进入临界区。</p>\n<p>由于自旋锁只是将当前线程不停地执行循环体，不进行线程状态的改变，所以响应速度更快。但当线程数不停增加时，性能下降明显，因为每个线程都需要执行，占用 CPU 时间。如果线程竞争不激烈，并且保持锁的时间段。适合使用自旋锁。</p>\n<p>注：该例子为非公平锁，获得锁的先后顺序，不会按照进入 lock 的先后顺序进行。</p>\n</li>\n</ul>"},{"title":"Kafka安装配置","date":"2018-09-19T12:53:53.000Z","_content":"\n记录下Kafka<!--more-->\n\n最近可能要用到canal,看了下版本更新了，官方出了个和kafka集成的服务端，那么记录下kafka单机安装配置，后续会继续写关于kafka的一些东西\n\n### 环境概述\n\n* linux Ubuntu16.04\n* jdk1.8\n* zookeeper 3.4.12\n* git 2.7.4\n* sbt 最新版\n\n### Kafka安装\n\n* 下载\n\n  * 下载安装kafka\n\n    ```\n    wget http://mirrors.hust.edu.cn/apache/kafka/2.0.0/kafka_2.11-2.0.0.tgz\n    ```\n\n    ```\n    tar -zxvf kafka_2.11-2.0.0.tgz -C kafka2.11\n    ```\n\n  * 修改配置文件\n\n    ```\n    ##解开下面的注释，并修改ip\n    # The address the socket server listens on. It will get the value returned from \n    # java.net.InetAddress.getCanonicalHostName() if not configured.\n    #   FORMAT:\n    #     listeners = listener_name://host_name:port\n    #   EXAMPLE:\n    #     listeners = PLAINTEXT://your.host.name:9092\n    listeners=PLAINTEXT://127.0.0.1:9092\n    ##解开下面的注释，并修改ip，保证生产者和消费者能通信，\n    ##hostname、port 都会广播给 producer、consumer。如果你没有配置了这个属性的话，则使用 ##listeners 的值，如果 listeners 的值也没有配置的话，则使用##java.net.InetAddress.getCanonicalHostName() 返回值 (这里也就是返回 localhost 了)。\n    advertised.listeners=PLAINTEXT://127.0.0.1:9092\n    ##修改zookeeper地址\n    zookeeper.connect=127.0.0.1:2181\n    ```\n\n    server.properties这个关键文件中的一些其他配置说明：\n\n    ```\n    ##每一个 broker 在集群中的唯一表示，要求是正数。当该服务器的 IP 地址发生改变时，broker.id 没有##变化，则不会影响 consumers 的消息情况\n    broker.id=0\n    ## broker 处理消息的最大线程数，一般情况下数量为 cpu 核数\n    num.network.threads=2\n    ## broker 处理磁盘 IO 的线程数，数值为 cpu 核数 2 倍\n    num.io.threads=8\n    ## socket 的发送缓冲区，socket 的调优参数 SO_SNDBUFF\n    socket.send.buffer.bytes=1048576\n    ## socket 的接受缓冲区，socket 的调优参数 SO_RCVBUFF\n    socket.receive.buffer.bytes=1048576\n    ##socket 请求的最大数值，防止 serverOOM，message.max.bytes 必然要小于 ##socket.request.max.bytes，会被 topic 创建时的指定参数覆盖\n    \n    socket.request.max.bytes=104857600\n    \n    ##kafka 数据的存放地址，多个地址的话用逗号分割, 多个目录分布在不同磁盘上可以提高读写性能  ##/data/kafka-logs-1，/data/kafka-logs-2\n    \n    log.dirs=/tmp/kafka-logs\n    \n    ##每个 topic 的分区个数，若是在 topic 创建时候没有指定的话会被 topic 创建时的指定参数覆盖\n    \n    num.partitions=2\n    \n    ##数据文件保留多长时间， 存储的最大时间超过这个时间会根据 log.cleanup.policy 设置数据清除策略\n    \n    ##log.retention.bytes 和 log.retention.minutes 或 log.retention.hours 任意一个达到要求，都##会执行删除有两种删除数据文件方式：按照文件大小删除：log.retention.bytes，按照 不同时间粒度删##除：分别为分钟，小时\n    \n    log.retention.hours=168\n     \n    ##topic 的分区是以一堆 segment 文件存储的，这个控制每个 segment 的大小，会被 topic 创建时的指##定参数覆盖\n    \n    log.segment.bytes=536870912\n    ##文件大小检查的周期时间，是否处罚 log.cleanup.policy 中设置的策略\n    log.retention.check.interval.ms=60000\n    ##是否开启日志清理\n    log.cleaner.enable=false\n     \n    ##zookeeper 集群的地址，可以是多个，多个之间用逗号分割 ##hostname1:port1,hostname2:port2,hostname3:port3\n     \n    zookeeper.connect=127.0.0.1:2181\n    \n    ##ZooKeeper 的连接超时时间\n    zookeeper.connection.timeout.ms=1000000\n    ```\n\n    就先记录这么多。\n\n  * 启动\n\n    ```\n    cd /data/soft/kafka2.11\n    \n    bin/kafka-server-start.sh config/server.properties &\n    ```\n\n  * 联通测试\n\n    创建一个topic，并进行msg发送，注意这里的broker-list要和server.properties中一致\n\n    运行生产者脚本\n\n    ```\n    cd /data/soft/kafka2.11\n    \n    bin/kafka-console-producer.sh --broker-list 127.0.0.1:9092 --topic test\n    ##出现了这个\n    root@VM-0-17-ubuntu:/data/soft/kafka2.11# bin/kafka-console-producer.sh --broker-list 127.0.0.1:9092 --topic test\n    >hello kafka\n    ```\n\n    新开一个窗口，运行消费者脚本，注意这里的bootstrap-server要和server.properties中一致\n\n    ```\n    bin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic test --from-beginning\n    ```\n\n    **PS：**如果 使用`` bin/kafka-console-consumer.sh --zookeeper 127.0.0.1:2181 --topic test --from-beginning  ``会提示`` Using the ConsoleConsumer with old consumer is deprecated and will be removed in a future major release. Consider using the new consumer by passing [bootstrap-server] instead of [zookeeper].``\n\n    两者的区别在于：\n\n    Zookeeper 是直接连接的 zk，而 bootstrap-server 则是连接的 broker 的 ip. 因为在 0.9 之后，kafka 使用了新的 consumer API 进行消费。旧的 API 会逐步淘汰\n\n###  Kafka-Manager搭建\n\n   服务端搭建完了，要有个地方可以可以监控，类似zkui，dubboadmin，但是官方的好像没有，找了找，大概有 \n\n​    webconsole，manager，决定用manager,但是manager没有权限管理。\n\n * 下载kafka-manager的源码。\n\n   ```\n   git clone https://github.com/yahoo/kafka-manager\n   ```\n\n   或者(比较慢)\n\n   ```\n   mkdir kafka-manager\n   \n   wget https://github.com/yahoo/kafka-manager/archive/1.3.3.18.tar.gz\n   \n   tar -zxvf 1.3.3.18.tar.gz -C kafka-manager\n   \n   ```\n\n   或者手动下载，再上传到服务器\n\n*  修改配置\n\n   ```\n   cd /data/soft/kafka-manager/conf\n   \n   vim application.conf\n   ```\n\n   修改以下\n\n   ```\n    ##多个zookeeper 逗号隔开\n    kafka-manager.zkhosts=\"127.0.0.1:2181\"\n   ```\n\n*  下载安装sbt\n\n   默认的kafka-manager里面有一个sbt文件可以用\n\n   ```\n   cd /data/soft/kafka-manager\n   ./sbt clean dist\n   ##比较慢\n   Downloading sbt launcher for 0.13.9:\n     From  http://repo.typesafe.com/typesafe/ivy-releases/org.scala-sbt/sbt-launch/0.13.9/sbt-launch.jar\n       To  /root/.sbt/launchers/0.13.9/sbt-launch.jar\n   Getting org.scala-sbt sbt 0.13.9 ...\n   ```\n\n   也可以自己上``https://www.scala-sbt.org/download.html``下载sbt，就是scala build tool吧，然后再``/etc/profile``中配置好环境变量就行。（这种比较快）\n\n   执行完成后在/data/soft/kafka-manager/target中会生成一个zip包，\n\n   ```\n   mv /data/soft/kafka-manager /data/soft/kafka-manager-build\n   \n   cd /data/soft/kafka-manager-build/target\n   \n   cp  kafka-manager-1.3.3.18.zip /data/soft/\n   \n   unzip kafka-manager-1.3.3.18.zip\n   ```\n\n*  启动\n\n   ```\n   nohup bin/kafka-manager -Dconfig.file=conf/application.conf -Dhttp.port 9093 &\n   ```\n\n*  访问\n\n   ```\n   http://127.0.0.1:9093\n   ```\n\n   直接就进去界面了，首次访问需要进行设置kafka的cluster配置\n\n\n\n\n\n","source":"_posts/Kafka安装配置.md","raw":"---\ntitle: Kafka安装配置\ndate: 2018-09-19 20:53:53\ntags: [Kafka]\ncategories: [Kafka]\n---\n\n记录下Kafka<!--more-->\n\n最近可能要用到canal,看了下版本更新了，官方出了个和kafka集成的服务端，那么记录下kafka单机安装配置，后续会继续写关于kafka的一些东西\n\n### 环境概述\n\n* linux Ubuntu16.04\n* jdk1.8\n* zookeeper 3.4.12\n* git 2.7.4\n* sbt 最新版\n\n### Kafka安装\n\n* 下载\n\n  * 下载安装kafka\n\n    ```\n    wget http://mirrors.hust.edu.cn/apache/kafka/2.0.0/kafka_2.11-2.0.0.tgz\n    ```\n\n    ```\n    tar -zxvf kafka_2.11-2.0.0.tgz -C kafka2.11\n    ```\n\n  * 修改配置文件\n\n    ```\n    ##解开下面的注释，并修改ip\n    # The address the socket server listens on. It will get the value returned from \n    # java.net.InetAddress.getCanonicalHostName() if not configured.\n    #   FORMAT:\n    #     listeners = listener_name://host_name:port\n    #   EXAMPLE:\n    #     listeners = PLAINTEXT://your.host.name:9092\n    listeners=PLAINTEXT://127.0.0.1:9092\n    ##解开下面的注释，并修改ip，保证生产者和消费者能通信，\n    ##hostname、port 都会广播给 producer、consumer。如果你没有配置了这个属性的话，则使用 ##listeners 的值，如果 listeners 的值也没有配置的话，则使用##java.net.InetAddress.getCanonicalHostName() 返回值 (这里也就是返回 localhost 了)。\n    advertised.listeners=PLAINTEXT://127.0.0.1:9092\n    ##修改zookeeper地址\n    zookeeper.connect=127.0.0.1:2181\n    ```\n\n    server.properties这个关键文件中的一些其他配置说明：\n\n    ```\n    ##每一个 broker 在集群中的唯一表示，要求是正数。当该服务器的 IP 地址发生改变时，broker.id 没有##变化，则不会影响 consumers 的消息情况\n    broker.id=0\n    ## broker 处理消息的最大线程数，一般情况下数量为 cpu 核数\n    num.network.threads=2\n    ## broker 处理磁盘 IO 的线程数，数值为 cpu 核数 2 倍\n    num.io.threads=8\n    ## socket 的发送缓冲区，socket 的调优参数 SO_SNDBUFF\n    socket.send.buffer.bytes=1048576\n    ## socket 的接受缓冲区，socket 的调优参数 SO_RCVBUFF\n    socket.receive.buffer.bytes=1048576\n    ##socket 请求的最大数值，防止 serverOOM，message.max.bytes 必然要小于 ##socket.request.max.bytes，会被 topic 创建时的指定参数覆盖\n    \n    socket.request.max.bytes=104857600\n    \n    ##kafka 数据的存放地址，多个地址的话用逗号分割, 多个目录分布在不同磁盘上可以提高读写性能  ##/data/kafka-logs-1，/data/kafka-logs-2\n    \n    log.dirs=/tmp/kafka-logs\n    \n    ##每个 topic 的分区个数，若是在 topic 创建时候没有指定的话会被 topic 创建时的指定参数覆盖\n    \n    num.partitions=2\n    \n    ##数据文件保留多长时间， 存储的最大时间超过这个时间会根据 log.cleanup.policy 设置数据清除策略\n    \n    ##log.retention.bytes 和 log.retention.minutes 或 log.retention.hours 任意一个达到要求，都##会执行删除有两种删除数据文件方式：按照文件大小删除：log.retention.bytes，按照 不同时间粒度删##除：分别为分钟，小时\n    \n    log.retention.hours=168\n     \n    ##topic 的分区是以一堆 segment 文件存储的，这个控制每个 segment 的大小，会被 topic 创建时的指##定参数覆盖\n    \n    log.segment.bytes=536870912\n    ##文件大小检查的周期时间，是否处罚 log.cleanup.policy 中设置的策略\n    log.retention.check.interval.ms=60000\n    ##是否开启日志清理\n    log.cleaner.enable=false\n     \n    ##zookeeper 集群的地址，可以是多个，多个之间用逗号分割 ##hostname1:port1,hostname2:port2,hostname3:port3\n     \n    zookeeper.connect=127.0.0.1:2181\n    \n    ##ZooKeeper 的连接超时时间\n    zookeeper.connection.timeout.ms=1000000\n    ```\n\n    就先记录这么多。\n\n  * 启动\n\n    ```\n    cd /data/soft/kafka2.11\n    \n    bin/kafka-server-start.sh config/server.properties &\n    ```\n\n  * 联通测试\n\n    创建一个topic，并进行msg发送，注意这里的broker-list要和server.properties中一致\n\n    运行生产者脚本\n\n    ```\n    cd /data/soft/kafka2.11\n    \n    bin/kafka-console-producer.sh --broker-list 127.0.0.1:9092 --topic test\n    ##出现了这个\n    root@VM-0-17-ubuntu:/data/soft/kafka2.11# bin/kafka-console-producer.sh --broker-list 127.0.0.1:9092 --topic test\n    >hello kafka\n    ```\n\n    新开一个窗口，运行消费者脚本，注意这里的bootstrap-server要和server.properties中一致\n\n    ```\n    bin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic test --from-beginning\n    ```\n\n    **PS：**如果 使用`` bin/kafka-console-consumer.sh --zookeeper 127.0.0.1:2181 --topic test --from-beginning  ``会提示`` Using the ConsoleConsumer with old consumer is deprecated and will be removed in a future major release. Consider using the new consumer by passing [bootstrap-server] instead of [zookeeper].``\n\n    两者的区别在于：\n\n    Zookeeper 是直接连接的 zk，而 bootstrap-server 则是连接的 broker 的 ip. 因为在 0.9 之后，kafka 使用了新的 consumer API 进行消费。旧的 API 会逐步淘汰\n\n###  Kafka-Manager搭建\n\n   服务端搭建完了，要有个地方可以可以监控，类似zkui，dubboadmin，但是官方的好像没有，找了找，大概有 \n\n​    webconsole，manager，决定用manager,但是manager没有权限管理。\n\n * 下载kafka-manager的源码。\n\n   ```\n   git clone https://github.com/yahoo/kafka-manager\n   ```\n\n   或者(比较慢)\n\n   ```\n   mkdir kafka-manager\n   \n   wget https://github.com/yahoo/kafka-manager/archive/1.3.3.18.tar.gz\n   \n   tar -zxvf 1.3.3.18.tar.gz -C kafka-manager\n   \n   ```\n\n   或者手动下载，再上传到服务器\n\n*  修改配置\n\n   ```\n   cd /data/soft/kafka-manager/conf\n   \n   vim application.conf\n   ```\n\n   修改以下\n\n   ```\n    ##多个zookeeper 逗号隔开\n    kafka-manager.zkhosts=\"127.0.0.1:2181\"\n   ```\n\n*  下载安装sbt\n\n   默认的kafka-manager里面有一个sbt文件可以用\n\n   ```\n   cd /data/soft/kafka-manager\n   ./sbt clean dist\n   ##比较慢\n   Downloading sbt launcher for 0.13.9:\n     From  http://repo.typesafe.com/typesafe/ivy-releases/org.scala-sbt/sbt-launch/0.13.9/sbt-launch.jar\n       To  /root/.sbt/launchers/0.13.9/sbt-launch.jar\n   Getting org.scala-sbt sbt 0.13.9 ...\n   ```\n\n   也可以自己上``https://www.scala-sbt.org/download.html``下载sbt，就是scala build tool吧，然后再``/etc/profile``中配置好环境变量就行。（这种比较快）\n\n   执行完成后在/data/soft/kafka-manager/target中会生成一个zip包，\n\n   ```\n   mv /data/soft/kafka-manager /data/soft/kafka-manager-build\n   \n   cd /data/soft/kafka-manager-build/target\n   \n   cp  kafka-manager-1.3.3.18.zip /data/soft/\n   \n   unzip kafka-manager-1.3.3.18.zip\n   ```\n\n*  启动\n\n   ```\n   nohup bin/kafka-manager -Dconfig.file=conf/application.conf -Dhttp.port 9093 &\n   ```\n\n*  访问\n\n   ```\n   http://127.0.0.1:9093\n   ```\n\n   直接就进去界面了，首次访问需要进行设置kafka的cluster配置\n\n\n\n\n\n","slug":"Kafka安装配置","published":1,"updated":"2022-09-03T07:30:55.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz83p000ttwfagu2euq7a","content":"<p>记录下Kafka<a id=\"more\"></a></p>\n<p>最近可能要用到canal,看了下版本更新了，官方出了个和kafka集成的服务端，那么记录下kafka单机安装配置，后续会继续写关于kafka的一些东西</p>\n<h3 id=\"环境概述\"><a href=\"#环境概述\" class=\"headerlink\" title=\"环境概述\"></a>环境概述</h3><ul>\n<li>linux Ubuntu16.04</li>\n<li>jdk1.8</li>\n<li>zookeeper 3.4.12</li>\n<li>git 2.7.4</li>\n<li>sbt 最新版</li>\n</ul>\n<h3 id=\"Kafka安装\"><a href=\"#Kafka安装\" class=\"headerlink\" title=\"Kafka安装\"></a>Kafka安装</h3><ul>\n<li><p>下载</p>\n<ul>\n<li><p>下载安装kafka</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirrors.hust.edu.cn/apache/kafka/2.0.0/kafka_2.11-2.0.0.tgz</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf kafka_2.11-2.0.0.tgz -C kafka2.11</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##解开下面的注释，并修改ip</span><br><span class=\"line\"># The address the socket server listens on. It will get the value returned from </span><br><span class=\"line\"># java.net.InetAddress.getCanonicalHostName() if not configured.</span><br><span class=\"line\">#   FORMAT:</span><br><span class=\"line\">#     listeners = listener_name://host_name:port</span><br><span class=\"line\">#   EXAMPLE:</span><br><span class=\"line\">#     listeners = PLAINTEXT://your.host.name:9092</span><br><span class=\"line\">listeners=PLAINTEXT://127.0.0.1:9092</span><br><span class=\"line\">##解开下面的注释，并修改ip，保证生产者和消费者能通信，</span><br><span class=\"line\">##hostname、port 都会广播给 producer、consumer。如果你没有配置了这个属性的话，则使用 ##listeners 的值，如果 listeners 的值也没有配置的话，则使用##java.net.InetAddress.getCanonicalHostName() 返回值 (这里也就是返回 localhost 了)。</span><br><span class=\"line\">advertised.listeners=PLAINTEXT://127.0.0.1:9092</span><br><span class=\"line\">##修改zookeeper地址</span><br><span class=\"line\">zookeeper.connect=127.0.0.1:2181</span><br></pre></td></tr></table></figure>\n\n<p>server.properties这个关键文件中的一些其他配置说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##每一个 broker 在集群中的唯一表示，要求是正数。当该服务器的 IP 地址发生改变时，broker.id 没有##变化，则不会影响 consumers 的消息情况</span><br><span class=\"line\">broker.id=0</span><br><span class=\"line\">## broker 处理消息的最大线程数，一般情况下数量为 cpu 核数</span><br><span class=\"line\">num.network.threads=2</span><br><span class=\"line\">## broker 处理磁盘 IO 的线程数，数值为 cpu 核数 2 倍</span><br><span class=\"line\">num.io.threads=8</span><br><span class=\"line\">## socket 的发送缓冲区，socket 的调优参数 SO_SNDBUFF</span><br><span class=\"line\">socket.send.buffer.bytes=1048576</span><br><span class=\"line\">## socket 的接受缓冲区，socket 的调优参数 SO_RCVBUFF</span><br><span class=\"line\">socket.receive.buffer.bytes=1048576</span><br><span class=\"line\">##socket 请求的最大数值，防止 serverOOM，message.max.bytes 必然要小于 ##socket.request.max.bytes，会被 topic 创建时的指定参数覆盖</span><br><span class=\"line\"></span><br><span class=\"line\">socket.request.max.bytes=104857600</span><br><span class=\"line\"></span><br><span class=\"line\">##kafka 数据的存放地址，多个地址的话用逗号分割, 多个目录分布在不同磁盘上可以提高读写性能  ##/data/kafka-logs-1，/data/kafka-logs-2</span><br><span class=\"line\"></span><br><span class=\"line\">log.dirs=/tmp/kafka-logs</span><br><span class=\"line\"></span><br><span class=\"line\">##每个 topic 的分区个数，若是在 topic 创建时候没有指定的话会被 topic 创建时的指定参数覆盖</span><br><span class=\"line\"></span><br><span class=\"line\">num.partitions=2</span><br><span class=\"line\"></span><br><span class=\"line\">##数据文件保留多长时间， 存储的最大时间超过这个时间会根据 log.cleanup.policy 设置数据清除策略</span><br><span class=\"line\"></span><br><span class=\"line\">##log.retention.bytes 和 log.retention.minutes 或 log.retention.hours 任意一个达到要求，都##会执行删除有两种删除数据文件方式：按照文件大小删除：log.retention.bytes，按照 不同时间粒度删##除：分别为分钟，小时</span><br><span class=\"line\"></span><br><span class=\"line\">log.retention.hours=168</span><br><span class=\"line\"> </span><br><span class=\"line\">##topic 的分区是以一堆 segment 文件存储的，这个控制每个 segment 的大小，会被 topic 创建时的指##定参数覆盖</span><br><span class=\"line\"></span><br><span class=\"line\">log.segment.bytes=536870912</span><br><span class=\"line\">##文件大小检查的周期时间，是否处罚 log.cleanup.policy 中设置的策略</span><br><span class=\"line\">log.retention.check.interval.ms=60000</span><br><span class=\"line\">##是否开启日志清理</span><br><span class=\"line\">log.cleaner.enable=false</span><br><span class=\"line\"> </span><br><span class=\"line\">##zookeeper 集群的地址，可以是多个，多个之间用逗号分割 ##hostname1:port1,hostname2:port2,hostname3:port3</span><br><span class=\"line\"> </span><br><span class=\"line\">zookeeper.connect=127.0.0.1:2181</span><br><span class=\"line\"></span><br><span class=\"line\">##ZooKeeper 的连接超时时间</span><br><span class=\"line\">zookeeper.connection.timeout.ms=1000000</span><br></pre></td></tr></table></figure>\n\n<p>就先记录这么多。</p>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/kafka2.11</span><br><span class=\"line\"></span><br><span class=\"line\">bin/kafka-server-start.sh config/server.properties &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>联通测试</p>\n<p>创建一个topic，并进行msg发送，注意这里的broker-list要和server.properties中一致</p>\n<p>运行生产者脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/kafka2.11</span><br><span class=\"line\"></span><br><span class=\"line\">bin/kafka-console-producer.sh --broker-list 127.0.0.1:9092 --topic test</span><br><span class=\"line\">##出现了这个</span><br><span class=\"line\">root@VM-0-17-ubuntu:/data/soft/kafka2.11# bin/kafka-console-producer.sh --broker-list 127.0.0.1:9092 --topic test</span><br><span class=\"line\">&gt;hello kafka</span><br></pre></td></tr></table></figure>\n\n<p>新开一个窗口，运行消费者脚本，注意这里的bootstrap-server要和server.properties中一致</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic test --from-beginning</span><br></pre></td></tr></table></figure>\n\n<p><strong>PS：</strong>如果 使用<code>bin/kafka-console-consumer.sh --zookeeper 127.0.0.1:2181 --topic test --from-beginning</code>会提示<code>Using the ConsoleConsumer with old consumer is deprecated and will be removed in a future major release. Consider using the new consumer by passing [bootstrap-server] instead of [zookeeper].</code></p>\n<p>两者的区别在于：</p>\n<p>Zookeeper 是直接连接的 zk，而 bootstrap-server 则是连接的 broker 的 ip. 因为在 0.9 之后，kafka 使用了新的 consumer API 进行消费。旧的 API 会逐步淘汰</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Kafka-Manager搭建\"><a href=\"#Kafka-Manager搭建\" class=\"headerlink\" title=\"Kafka-Manager搭建\"></a>Kafka-Manager搭建</h3><p>   服务端搭建完了，要有个地方可以可以监控，类似zkui，dubboadmin，但是官方的好像没有，找了找，大概有 </p>\n<p>​    webconsole，manager，决定用manager,但是manager没有权限管理。</p>\n<ul>\n<li><p>下载kafka-manager的源码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/yahoo/kafka-manager</span><br></pre></td></tr></table></figure>\n\n<p>或者(比较慢)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir kafka-manager</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://github.com/yahoo/kafka-manager/archive/1.3.3.18.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -zxvf 1.3.3.18.tar.gz -C kafka-manager</span><br></pre></td></tr></table></figure>\n\n<p>或者手动下载，再上传到服务器</p>\n</li>\n</ul>\n<ul>\n<li><p>修改配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/kafka-manager/conf</span><br><span class=\"line\"></span><br><span class=\"line\">vim application.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改以下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##多个zookeeper 逗号隔开</span><br><span class=\"line\">kafka-manager.zkhosts=&quot;127.0.0.1:2181&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载安装sbt</p>\n<p>默认的kafka-manager里面有一个sbt文件可以用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/kafka-manager</span><br><span class=\"line\">./sbt clean dist</span><br><span class=\"line\">##比较慢</span><br><span class=\"line\">Downloading sbt launcher for 0.13.9:</span><br><span class=\"line\">  From  http://repo.typesafe.com/typesafe/ivy-releases/org.scala-sbt/sbt-launch/0.13.9/sbt-launch.jar</span><br><span class=\"line\">    To  /root/.sbt/launchers/0.13.9/sbt-launch.jar</span><br><span class=\"line\">Getting org.scala-sbt sbt 0.13.9 ...</span><br></pre></td></tr></table></figure>\n\n<p>也可以自己上<code>https://www.scala-sbt.org/download.html</code>下载sbt，就是scala build tool吧，然后再<code>/etc/profile</code>中配置好环境变量就行。（这种比较快）</p>\n<p>执行完成后在/data/soft/kafka-manager/target中会生成一个zip包，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /data/soft/kafka-manager /data/soft/kafka-manager-build</span><br><span class=\"line\"></span><br><span class=\"line\">cd /data/soft/kafka-manager-build/target</span><br><span class=\"line\"></span><br><span class=\"line\">cp  kafka-manager-1.3.3.18.zip /data/soft/</span><br><span class=\"line\"></span><br><span class=\"line\">unzip kafka-manager-1.3.3.18.zip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup bin/kafka-manager -Dconfig.file=conf/application.conf -Dhttp.port 9093 &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:9093</span><br></pre></td></tr></table></figure>\n\n<p>直接就进去界面了，首次访问需要进行设置kafka的cluster配置</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>记录下Kafka</p>","more":"<p></p>\n<p>最近可能要用到canal,看了下版本更新了，官方出了个和kafka集成的服务端，那么记录下kafka单机安装配置，后续会继续写关于kafka的一些东西</p>\n<h3 id=\"环境概述\"><a href=\"#环境概述\" class=\"headerlink\" title=\"环境概述\"></a>环境概述</h3><ul>\n<li>linux Ubuntu16.04</li>\n<li>jdk1.8</li>\n<li>zookeeper 3.4.12</li>\n<li>git 2.7.4</li>\n<li>sbt 最新版</li>\n</ul>\n<h3 id=\"Kafka安装\"><a href=\"#Kafka安装\" class=\"headerlink\" title=\"Kafka安装\"></a>Kafka安装</h3><ul>\n<li><p>下载</p>\n<ul>\n<li><p>下载安装kafka</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirrors.hust.edu.cn/apache/kafka/2.0.0/kafka_2.11-2.0.0.tgz</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf kafka_2.11-2.0.0.tgz -C kafka2.11</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##解开下面的注释，并修改ip</span><br><span class=\"line\"># The address the socket server listens on. It will get the value returned from </span><br><span class=\"line\"># java.net.InetAddress.getCanonicalHostName() if not configured.</span><br><span class=\"line\">#   FORMAT:</span><br><span class=\"line\">#     listeners = listener_name://host_name:port</span><br><span class=\"line\">#   EXAMPLE:</span><br><span class=\"line\">#     listeners = PLAINTEXT://your.host.name:9092</span><br><span class=\"line\">listeners=PLAINTEXT://127.0.0.1:9092</span><br><span class=\"line\">##解开下面的注释，并修改ip，保证生产者和消费者能通信，</span><br><span class=\"line\">##hostname、port 都会广播给 producer、consumer。如果你没有配置了这个属性的话，则使用 ##listeners 的值，如果 listeners 的值也没有配置的话，则使用##java.net.InetAddress.getCanonicalHostName() 返回值 (这里也就是返回 localhost 了)。</span><br><span class=\"line\">advertised.listeners=PLAINTEXT://127.0.0.1:9092</span><br><span class=\"line\">##修改zookeeper地址</span><br><span class=\"line\">zookeeper.connect=127.0.0.1:2181</span><br></pre></td></tr></table></figure>\n\n<p>server.properties这个关键文件中的一些其他配置说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##每一个 broker 在集群中的唯一表示，要求是正数。当该服务器的 IP 地址发生改变时，broker.id 没有##变化，则不会影响 consumers 的消息情况</span><br><span class=\"line\">broker.id=0</span><br><span class=\"line\">## broker 处理消息的最大线程数，一般情况下数量为 cpu 核数</span><br><span class=\"line\">num.network.threads=2</span><br><span class=\"line\">## broker 处理磁盘 IO 的线程数，数值为 cpu 核数 2 倍</span><br><span class=\"line\">num.io.threads=8</span><br><span class=\"line\">## socket 的发送缓冲区，socket 的调优参数 SO_SNDBUFF</span><br><span class=\"line\">socket.send.buffer.bytes=1048576</span><br><span class=\"line\">## socket 的接受缓冲区，socket 的调优参数 SO_RCVBUFF</span><br><span class=\"line\">socket.receive.buffer.bytes=1048576</span><br><span class=\"line\">##socket 请求的最大数值，防止 serverOOM，message.max.bytes 必然要小于 ##socket.request.max.bytes，会被 topic 创建时的指定参数覆盖</span><br><span class=\"line\"></span><br><span class=\"line\">socket.request.max.bytes=104857600</span><br><span class=\"line\"></span><br><span class=\"line\">##kafka 数据的存放地址，多个地址的话用逗号分割, 多个目录分布在不同磁盘上可以提高读写性能  ##/data/kafka-logs-1，/data/kafka-logs-2</span><br><span class=\"line\"></span><br><span class=\"line\">log.dirs=/tmp/kafka-logs</span><br><span class=\"line\"></span><br><span class=\"line\">##每个 topic 的分区个数，若是在 topic 创建时候没有指定的话会被 topic 创建时的指定参数覆盖</span><br><span class=\"line\"></span><br><span class=\"line\">num.partitions=2</span><br><span class=\"line\"></span><br><span class=\"line\">##数据文件保留多长时间， 存储的最大时间超过这个时间会根据 log.cleanup.policy 设置数据清除策略</span><br><span class=\"line\"></span><br><span class=\"line\">##log.retention.bytes 和 log.retention.minutes 或 log.retention.hours 任意一个达到要求，都##会执行删除有两种删除数据文件方式：按照文件大小删除：log.retention.bytes，按照 不同时间粒度删##除：分别为分钟，小时</span><br><span class=\"line\"></span><br><span class=\"line\">log.retention.hours=168</span><br><span class=\"line\"> </span><br><span class=\"line\">##topic 的分区是以一堆 segment 文件存储的，这个控制每个 segment 的大小，会被 topic 创建时的指##定参数覆盖</span><br><span class=\"line\"></span><br><span class=\"line\">log.segment.bytes=536870912</span><br><span class=\"line\">##文件大小检查的周期时间，是否处罚 log.cleanup.policy 中设置的策略</span><br><span class=\"line\">log.retention.check.interval.ms=60000</span><br><span class=\"line\">##是否开启日志清理</span><br><span class=\"line\">log.cleaner.enable=false</span><br><span class=\"line\"> </span><br><span class=\"line\">##zookeeper 集群的地址，可以是多个，多个之间用逗号分割 ##hostname1:port1,hostname2:port2,hostname3:port3</span><br><span class=\"line\"> </span><br><span class=\"line\">zookeeper.connect=127.0.0.1:2181</span><br><span class=\"line\"></span><br><span class=\"line\">##ZooKeeper 的连接超时时间</span><br><span class=\"line\">zookeeper.connection.timeout.ms=1000000</span><br></pre></td></tr></table></figure>\n\n<p>就先记录这么多。</p>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/kafka2.11</span><br><span class=\"line\"></span><br><span class=\"line\">bin/kafka-server-start.sh config/server.properties &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>联通测试</p>\n<p>创建一个topic，并进行msg发送，注意这里的broker-list要和server.properties中一致</p>\n<p>运行生产者脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/kafka2.11</span><br><span class=\"line\"></span><br><span class=\"line\">bin/kafka-console-producer.sh --broker-list 127.0.0.1:9092 --topic test</span><br><span class=\"line\">##出现了这个</span><br><span class=\"line\">root@VM-0-17-ubuntu:/data/soft/kafka2.11# bin/kafka-console-producer.sh --broker-list 127.0.0.1:9092 --topic test</span><br><span class=\"line\">&gt;hello kafka</span><br></pre></td></tr></table></figure>\n\n<p>新开一个窗口，运行消费者脚本，注意这里的bootstrap-server要和server.properties中一致</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic test --from-beginning</span><br></pre></td></tr></table></figure>\n\n<p><strong>PS：</strong>如果 使用<code>bin/kafka-console-consumer.sh --zookeeper 127.0.0.1:2181 --topic test --from-beginning</code>会提示<code>Using the ConsoleConsumer with old consumer is deprecated and will be removed in a future major release. Consider using the new consumer by passing [bootstrap-server] instead of [zookeeper].</code></p>\n<p>两者的区别在于：</p>\n<p>Zookeeper 是直接连接的 zk，而 bootstrap-server 则是连接的 broker 的 ip. 因为在 0.9 之后，kafka 使用了新的 consumer API 进行消费。旧的 API 会逐步淘汰</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Kafka-Manager搭建\"><a href=\"#Kafka-Manager搭建\" class=\"headerlink\" title=\"Kafka-Manager搭建\"></a>Kafka-Manager搭建</h3><p>   服务端搭建完了，要有个地方可以可以监控，类似zkui，dubboadmin，但是官方的好像没有，找了找，大概有 </p>\n<p>​    webconsole，manager，决定用manager,但是manager没有权限管理。</p>\n<ul>\n<li><p>下载kafka-manager的源码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/yahoo/kafka-manager</span><br></pre></td></tr></table></figure>\n\n<p>或者(比较慢)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir kafka-manager</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://github.com/yahoo/kafka-manager/archive/1.3.3.18.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -zxvf 1.3.3.18.tar.gz -C kafka-manager</span><br></pre></td></tr></table></figure>\n\n<p>或者手动下载，再上传到服务器</p>\n</li>\n</ul>\n<ul>\n<li><p>修改配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/kafka-manager/conf</span><br><span class=\"line\"></span><br><span class=\"line\">vim application.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改以下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##多个zookeeper 逗号隔开</span><br><span class=\"line\">kafka-manager.zkhosts=&quot;127.0.0.1:2181&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载安装sbt</p>\n<p>默认的kafka-manager里面有一个sbt文件可以用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/kafka-manager</span><br><span class=\"line\">./sbt clean dist</span><br><span class=\"line\">##比较慢</span><br><span class=\"line\">Downloading sbt launcher for 0.13.9:</span><br><span class=\"line\">  From  http://repo.typesafe.com/typesafe/ivy-releases/org.scala-sbt/sbt-launch/0.13.9/sbt-launch.jar</span><br><span class=\"line\">    To  /root/.sbt/launchers/0.13.9/sbt-launch.jar</span><br><span class=\"line\">Getting org.scala-sbt sbt 0.13.9 ...</span><br></pre></td></tr></table></figure>\n\n<p>也可以自己上<code>https://www.scala-sbt.org/download.html</code>下载sbt，就是scala build tool吧，然后再<code>/etc/profile</code>中配置好环境变量就行。（这种比较快）</p>\n<p>执行完成后在/data/soft/kafka-manager/target中会生成一个zip包，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /data/soft/kafka-manager /data/soft/kafka-manager-build</span><br><span class=\"line\"></span><br><span class=\"line\">cd /data/soft/kafka-manager-build/target</span><br><span class=\"line\"></span><br><span class=\"line\">cp  kafka-manager-1.3.3.18.zip /data/soft/</span><br><span class=\"line\"></span><br><span class=\"line\">unzip kafka-manager-1.3.3.18.zip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup bin/kafka-manager -Dconfig.file=conf/application.conf -Dhttp.port 9093 &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:9093</span><br></pre></td></tr></table></figure>\n\n<p>直接就进去界面了，首次访问需要进行设置kafka的cluster配置</p>\n</li>\n</ul>"},{"title":"Manjaro如何自动挂载机械硬盘分区","date":"2019-11-24T06:19:43.000Z","_content":"\nManjaro如何自动挂载机械硬盘分区<!--more-->\n\n* 找到要挂载的硬盘的分区\n\n```\nsudo fdisk -l\n```\n\n* 安装 ntfs-3g\n\n```\nsu root pacman -Sy ntfs-3g\n```\n\n* 查看机械硬盘对应的分区的UUID\n\n```\nls -l /dev/disk/by-uuid/\n\nlrwxrwxrwx 1 root root 10 11月 24 14:15 488F7D9C353C6AC0 -> ../../sdb1\nlrwxrwxrwx 1 root root 10 11月 24 14:15 4CBE55FEBE55E0CE -> ../../sdc3\nlrwxrwxrwx 1 root root 10 11月 24 14:15 52E8632FE8631091 -> ../../sdb2\nlrwxrwxrwx 1 root root 10 11月 24 14:15 5fb9899e-3d1c-457e-a56f-b5897afb52f0 -> ../../sda5\nlrwxrwxrwx 1 root root 10 11月 24 14:15 6EA4AF17A4AEE0B7 -> ../../sdb3\nlrwxrwxrwx 1 root root 10 11月 24 14:15 72F8E430F8E3EFF1 -> ../../sdc1\nlrwxrwxrwx 1 root root 10 11月 24 14:15 8072a077-8a2a-48e3-b673-fb9e065e528c -> ../../sda4\nlrwxrwxrwx 1 root root 10 11月 24 14:15 aa585056-a791-49ca-88b3-9be7591a845b -> ../../sda3\nlrwxrwxrwx 1 root root 10 11月 24 14:15 ace96684-1f71-4c5d-8570-1bb7394d0de6 -> ../../sda6\nlrwxrwxrwx 1 root root 10 11月 24 14:15 b54b7ab8-f8cf-4e21-ba81-8d7d04bbda28 -> ../../sda7\nlrwxrwxrwx 1 root root 10 11月 24 14:15 C14D-581B -> ../../sda1\n\n\n```\n\n上述的 sdb1sdb2 sdb3就是要设置自动挂载的机械硬盘分区\n\n* 编辑/etc/fstab文件\n\n  该文件是系统启动文件 编辑的时候一定 要慎重\n\n  * 设置好sdb1的挂载点\n\n    ```\n    /home/andy/DISKS/Amuse/\n    ```\n\n  * 编辑`/etc/fstab`文件\n\n    ```\n    sudo vim /etc/fstab\n      1 # /etc/fstab: static file system information.                                         \n      2 #                                                                                     \n      3 # Use 'blkid' to print the universally unique identifier for a device; this may       \n      4 # be used with UUID= as a more robust way to name devices that works even if          \n      5 # disks are added and removed. See fstab(5).                                          \n      6 #                                                                                     \n      7 # <file system>             <mount point>  <type>  <options>  <dump>  <pass>          \n      8 UUID=8072a077-8a2a-48e3-b673-fb9e065e528c /boot          ext4    defaults,noatime,discard 0 2\n      9 UUID=C14D-581B                            /boot/efi      vfat    defaults,noatime 0 2 \n     10 UUID=aa585056-a791-49ca-88b3-9be7591a845b swap           swap    defaults,noatime,discard 0 2\n     11 UUID=5fb9899e-3d1c-457e-a56f-b5897afb52f0 /var           ext4    defaults,noatime,discard 0 2\n     12 UUID=ace96684-1f71-4c5d-8570-1bb7394d0de6 /              ext4    defaults,noatime,discard 0 1\n     13 UUID=b54b7ab8-f8cf-4e21-ba81-8d7d04bbda28 /home          ext4    defaults,noatime,discard 0 2\n     14 tmpfs                                     /tmp           tmpfs   defaults,noatime,mode=1777 0 0\n     15 UUID=488F7D9C353C6AC0                     /home/andreby/DISKS/Amuse/ ntfs defaults 0 0\n    ```\n\n    如上图 第15行就是新加入的挂载项\n\n    * UUID是刚刚查询出来的\n    * /home/mazo/data表示挂载点\n    * ntfs表示格式，小写\n    * 0 0表示开机不检查磁盘。\n\n    修改完成后重启，使用`df -h`  查看挂载情况\n\n    \n\n    ```\n    ...\n    /dev/sdb1       327G   42G  285G   13% /home/andreby/DISKS/Amuse/\n    ...\n    ```\n\n    **DONE**","source":"_posts/Manjaro如何自动挂载机械硬盘分区.md","raw":"---\ntitle: Manjaro如何自动挂载机械硬盘分区\ndate: 2019-11-24 14:19:43\ntags: [Linux]\n---\n\nManjaro如何自动挂载机械硬盘分区<!--more-->\n\n* 找到要挂载的硬盘的分区\n\n```\nsudo fdisk -l\n```\n\n* 安装 ntfs-3g\n\n```\nsu root pacman -Sy ntfs-3g\n```\n\n* 查看机械硬盘对应的分区的UUID\n\n```\nls -l /dev/disk/by-uuid/\n\nlrwxrwxrwx 1 root root 10 11月 24 14:15 488F7D9C353C6AC0 -> ../../sdb1\nlrwxrwxrwx 1 root root 10 11月 24 14:15 4CBE55FEBE55E0CE -> ../../sdc3\nlrwxrwxrwx 1 root root 10 11月 24 14:15 52E8632FE8631091 -> ../../sdb2\nlrwxrwxrwx 1 root root 10 11月 24 14:15 5fb9899e-3d1c-457e-a56f-b5897afb52f0 -> ../../sda5\nlrwxrwxrwx 1 root root 10 11月 24 14:15 6EA4AF17A4AEE0B7 -> ../../sdb3\nlrwxrwxrwx 1 root root 10 11月 24 14:15 72F8E430F8E3EFF1 -> ../../sdc1\nlrwxrwxrwx 1 root root 10 11月 24 14:15 8072a077-8a2a-48e3-b673-fb9e065e528c -> ../../sda4\nlrwxrwxrwx 1 root root 10 11月 24 14:15 aa585056-a791-49ca-88b3-9be7591a845b -> ../../sda3\nlrwxrwxrwx 1 root root 10 11月 24 14:15 ace96684-1f71-4c5d-8570-1bb7394d0de6 -> ../../sda6\nlrwxrwxrwx 1 root root 10 11月 24 14:15 b54b7ab8-f8cf-4e21-ba81-8d7d04bbda28 -> ../../sda7\nlrwxrwxrwx 1 root root 10 11月 24 14:15 C14D-581B -> ../../sda1\n\n\n```\n\n上述的 sdb1sdb2 sdb3就是要设置自动挂载的机械硬盘分区\n\n* 编辑/etc/fstab文件\n\n  该文件是系统启动文件 编辑的时候一定 要慎重\n\n  * 设置好sdb1的挂载点\n\n    ```\n    /home/andy/DISKS/Amuse/\n    ```\n\n  * 编辑`/etc/fstab`文件\n\n    ```\n    sudo vim /etc/fstab\n      1 # /etc/fstab: static file system information.                                         \n      2 #                                                                                     \n      3 # Use 'blkid' to print the universally unique identifier for a device; this may       \n      4 # be used with UUID= as a more robust way to name devices that works even if          \n      5 # disks are added and removed. See fstab(5).                                          \n      6 #                                                                                     \n      7 # <file system>             <mount point>  <type>  <options>  <dump>  <pass>          \n      8 UUID=8072a077-8a2a-48e3-b673-fb9e065e528c /boot          ext4    defaults,noatime,discard 0 2\n      9 UUID=C14D-581B                            /boot/efi      vfat    defaults,noatime 0 2 \n     10 UUID=aa585056-a791-49ca-88b3-9be7591a845b swap           swap    defaults,noatime,discard 0 2\n     11 UUID=5fb9899e-3d1c-457e-a56f-b5897afb52f0 /var           ext4    defaults,noatime,discard 0 2\n     12 UUID=ace96684-1f71-4c5d-8570-1bb7394d0de6 /              ext4    defaults,noatime,discard 0 1\n     13 UUID=b54b7ab8-f8cf-4e21-ba81-8d7d04bbda28 /home          ext4    defaults,noatime,discard 0 2\n     14 tmpfs                                     /tmp           tmpfs   defaults,noatime,mode=1777 0 0\n     15 UUID=488F7D9C353C6AC0                     /home/andreby/DISKS/Amuse/ ntfs defaults 0 0\n    ```\n\n    如上图 第15行就是新加入的挂载项\n\n    * UUID是刚刚查询出来的\n    * /home/mazo/data表示挂载点\n    * ntfs表示格式，小写\n    * 0 0表示开机不检查磁盘。\n\n    修改完成后重启，使用`df -h`  查看挂载情况\n\n    \n\n    ```\n    ...\n    /dev/sdb1       327G   42G  285G   13% /home/andreby/DISKS/Amuse/\n    ...\n    ```\n\n    **DONE**","slug":"Manjaro如何自动挂载机械硬盘分区","published":1,"updated":"2022-09-03T07:30:55.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz83s000wtwfaj2h21hzq","content":"<p>Manjaro如何自动挂载机械硬盘分区<a id=\"more\"></a></p>\n<ul>\n<li>找到要挂载的硬盘的分区</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fdisk -l</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装 ntfs-3g</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su root pacman -Sy ntfs-3g</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看机械硬盘对应的分区的UUID</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l /dev/disk/by-uuid/</span><br><span class=\"line\"></span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 488F7D9C353C6AC0 -&gt; ../../sdb1</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 4CBE55FEBE55E0CE -&gt; ../../sdc3</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 52E8632FE8631091 -&gt; ../../sdb2</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 5fb9899e-3d1c-457e-a56f-b5897afb52f0 -&gt; ../../sda5</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 6EA4AF17A4AEE0B7 -&gt; ../../sdb3</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 72F8E430F8E3EFF1 -&gt; ../../sdc1</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 8072a077-8a2a-48e3-b673-fb9e065e528c -&gt; ../../sda4</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 aa585056-a791-49ca-88b3-9be7591a845b -&gt; ../../sda3</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 ace96684-1f71-4c5d-8570-1bb7394d0de6 -&gt; ../../sda6</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 b54b7ab8-f8cf-4e21-ba81-8d7d04bbda28 -&gt; ../../sda7</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 C14D-581B -&gt; ../../sda1</span><br></pre></td></tr></table></figure>\n\n<p>上述的 sdb1sdb2 sdb3就是要设置自动挂载的机械硬盘分区</p>\n<ul>\n<li><p>编辑/etc/fstab文件</p>\n<p>该文件是系统启动文件 编辑的时候一定 要慎重</p>\n<ul>\n<li><p>设置好sdb1的挂载点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/andy/DISKS/Amuse/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑<code>/etc/fstab</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/fstab</span><br><span class=\"line\">  1 # /etc/fstab: static file system information.                                         </span><br><span class=\"line\">  2 #                                                                                     </span><br><span class=\"line\">  3 # Use &apos;blkid&apos; to print the universally unique identifier for a device; this may       </span><br><span class=\"line\">  4 # be used with UUID= as a more robust way to name devices that works even if          </span><br><span class=\"line\">  5 # disks are added and removed. See fstab(5).                                          </span><br><span class=\"line\">  6 #                                                                                     </span><br><span class=\"line\">  7 # &lt;file system&gt;             &lt;mount point&gt;  &lt;type&gt;  &lt;options&gt;  &lt;dump&gt;  &lt;pass&gt;          </span><br><span class=\"line\">  8 UUID=8072a077-8a2a-48e3-b673-fb9e065e528c /boot          ext4    defaults,noatime,discard 0 2</span><br><span class=\"line\">  9 UUID=C14D-581B                            /boot/efi      vfat    defaults,noatime 0 2 </span><br><span class=\"line\"> 10 UUID=aa585056-a791-49ca-88b3-9be7591a845b swap           swap    defaults,noatime,discard 0 2</span><br><span class=\"line\"> 11 UUID=5fb9899e-3d1c-457e-a56f-b5897afb52f0 /var           ext4    defaults,noatime,discard 0 2</span><br><span class=\"line\"> 12 UUID=ace96684-1f71-4c5d-8570-1bb7394d0de6 /              ext4    defaults,noatime,discard 0 1</span><br><span class=\"line\"> 13 UUID=b54b7ab8-f8cf-4e21-ba81-8d7d04bbda28 /home          ext4    defaults,noatime,discard 0 2</span><br><span class=\"line\"> 14 tmpfs                                     /tmp           tmpfs   defaults,noatime,mode=1777 0 0</span><br><span class=\"line\"> 15 UUID=488F7D9C353C6AC0                     /home/andreby/DISKS/Amuse/ ntfs defaults 0 0</span><br></pre></td></tr></table></figure>\n\n<p>如上图 第15行就是新加入的挂载项</p>\n<ul>\n<li>UUID是刚刚查询出来的</li>\n<li>/home/mazo/data表示挂载点</li>\n<li>ntfs表示格式，小写</li>\n<li>0 0表示开机不检查磁盘。</li>\n</ul>\n<p>修改完成后重启，使用<code>df -h</code>  查看挂载情况</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">/dev/sdb1       327G   42G  285G   13% /home/andreby/DISKS/Amuse/</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n**DONE**</code></pre>","site":{"data":{}},"excerpt":"<p>Manjaro如何自动挂载机械硬盘分区</p>","more":"<p></p>\n<ul>\n<li>找到要挂载的硬盘的分区</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fdisk -l</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装 ntfs-3g</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su root pacman -Sy ntfs-3g</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看机械硬盘对应的分区的UUID</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l /dev/disk/by-uuid/</span><br><span class=\"line\"></span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 488F7D9C353C6AC0 -&gt; ../../sdb1</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 4CBE55FEBE55E0CE -&gt; ../../sdc3</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 52E8632FE8631091 -&gt; ../../sdb2</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 5fb9899e-3d1c-457e-a56f-b5897afb52f0 -&gt; ../../sda5</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 6EA4AF17A4AEE0B7 -&gt; ../../sdb3</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 72F8E430F8E3EFF1 -&gt; ../../sdc1</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 8072a077-8a2a-48e3-b673-fb9e065e528c -&gt; ../../sda4</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 aa585056-a791-49ca-88b3-9be7591a845b -&gt; ../../sda3</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 ace96684-1f71-4c5d-8570-1bb7394d0de6 -&gt; ../../sda6</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 b54b7ab8-f8cf-4e21-ba81-8d7d04bbda28 -&gt; ../../sda7</span><br><span class=\"line\">lrwxrwxrwx 1 root root 10 11月 24 14:15 C14D-581B -&gt; ../../sda1</span><br></pre></td></tr></table></figure>\n\n<p>上述的 sdb1sdb2 sdb3就是要设置自动挂载的机械硬盘分区</p>\n<ul>\n<li><p>编辑/etc/fstab文件</p>\n<p>该文件是系统启动文件 编辑的时候一定 要慎重</p>\n<ul>\n<li><p>设置好sdb1的挂载点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/andy/DISKS/Amuse/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑<code>/etc/fstab</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/fstab</span><br><span class=\"line\">  1 # /etc/fstab: static file system information.                                         </span><br><span class=\"line\">  2 #                                                                                     </span><br><span class=\"line\">  3 # Use &apos;blkid&apos; to print the universally unique identifier for a device; this may       </span><br><span class=\"line\">  4 # be used with UUID= as a more robust way to name devices that works even if          </span><br><span class=\"line\">  5 # disks are added and removed. See fstab(5).                                          </span><br><span class=\"line\">  6 #                                                                                     </span><br><span class=\"line\">  7 # &lt;file system&gt;             &lt;mount point&gt;  &lt;type&gt;  &lt;options&gt;  &lt;dump&gt;  &lt;pass&gt;          </span><br><span class=\"line\">  8 UUID=8072a077-8a2a-48e3-b673-fb9e065e528c /boot          ext4    defaults,noatime,discard 0 2</span><br><span class=\"line\">  9 UUID=C14D-581B                            /boot/efi      vfat    defaults,noatime 0 2 </span><br><span class=\"line\"> 10 UUID=aa585056-a791-49ca-88b3-9be7591a845b swap           swap    defaults,noatime,discard 0 2</span><br><span class=\"line\"> 11 UUID=5fb9899e-3d1c-457e-a56f-b5897afb52f0 /var           ext4    defaults,noatime,discard 0 2</span><br><span class=\"line\"> 12 UUID=ace96684-1f71-4c5d-8570-1bb7394d0de6 /              ext4    defaults,noatime,discard 0 1</span><br><span class=\"line\"> 13 UUID=b54b7ab8-f8cf-4e21-ba81-8d7d04bbda28 /home          ext4    defaults,noatime,discard 0 2</span><br><span class=\"line\"> 14 tmpfs                                     /tmp           tmpfs   defaults,noatime,mode=1777 0 0</span><br><span class=\"line\"> 15 UUID=488F7D9C353C6AC0                     /home/andreby/DISKS/Amuse/ ntfs defaults 0 0</span><br></pre></td></tr></table></figure>\n\n<p>如上图 第15行就是新加入的挂载项</p>\n<ul>\n<li>UUID是刚刚查询出来的</li>\n<li>/home/mazo/data表示挂载点</li>\n<li>ntfs表示格式，小写</li>\n<li>0 0表示开机不检查磁盘。</li>\n</ul>\n<p>修改完成后重启，使用<code>df -h</code>  查看挂载情况</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">/dev/sdb1       327G   42G  285G   13% /home/andreby/DISKS/Amuse/</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n**DONE**</code></pre>"},{"title":"Mybatis源码分析(一)","date":"2018-03-10T05:10:07.000Z","_content":"\n​\tMybatis源码分析<!--more-->\n\n## 核心接口（对象）\n\n\n#### sqlSessionFactory 对象\n\nsqlSessionFactory 是 mybatis 核心配置类，管理 mybatis 全局配置。\n\n#### sqlSession 接口\n\n一个或者多个sql操作的执行单元。实现一个完整的sql操作。依赖sqlSessionFactory创建\n\n#### Executor 接口\n\n对应 jdbc 底层一个完整的 sql 操作。sqlSession 实际通过 Executor 执行 sql 操作\n\n#### MapperProxy 类\n\n代理实现 mybatis 的客户端 mapper 接口\n\n#### MapperMethod 类\n\n对应客户端代码的 mapper 接口里面的一个方法。该实例缓存了。\n\n#### StatementHandler 接口\n\njdbc Statement 的装饰器\n\n#### ResultSetHandler 接口\n\njdbc resultSet 的装饰器\n\n## mybaits 执行 orm 操作细节\n\n![mybaits执行orm操作细节](Mybatis源码分析-一/20170308.png)\n\n**sqlsession 的 close 方法会关闭底层 jdbc connection**\n\n## mybatis 插件机制\n\nmybatis 插件是基于代理实现的，具体支持一下四个接口\n\n- Executor\n- ParameterHandler\n\n\n- ResultSetHandler\n\n\n- StatemetHandler\n\n\n[]: http://www.chenxun.wiki/2017/03/01/mybatis-01/\n\n","source":"_posts/Mybatis源码分析-一.md","raw":"---\ntitle: Mybatis源码分析(一)\ndate: 2018-03-10 13:10:07\ntags: [转载]\ncategories: [Mybatis]\n---\n\n​\tMybatis源码分析<!--more-->\n\n## 核心接口（对象）\n\n\n#### sqlSessionFactory 对象\n\nsqlSessionFactory 是 mybatis 核心配置类，管理 mybatis 全局配置。\n\n#### sqlSession 接口\n\n一个或者多个sql操作的执行单元。实现一个完整的sql操作。依赖sqlSessionFactory创建\n\n#### Executor 接口\n\n对应 jdbc 底层一个完整的 sql 操作。sqlSession 实际通过 Executor 执行 sql 操作\n\n#### MapperProxy 类\n\n代理实现 mybatis 的客户端 mapper 接口\n\n#### MapperMethod 类\n\n对应客户端代码的 mapper 接口里面的一个方法。该实例缓存了。\n\n#### StatementHandler 接口\n\njdbc Statement 的装饰器\n\n#### ResultSetHandler 接口\n\njdbc resultSet 的装饰器\n\n## mybaits 执行 orm 操作细节\n\n![mybaits执行orm操作细节](Mybatis源码分析-一/20170308.png)\n\n**sqlsession 的 close 方法会关闭底层 jdbc connection**\n\n## mybatis 插件机制\n\nmybatis 插件是基于代理实现的，具体支持一下四个接口\n\n- Executor\n- ParameterHandler\n\n\n- ResultSetHandler\n\n\n- StatemetHandler\n\n\n[]: http://www.chenxun.wiki/2017/03/01/mybatis-01/\n\n","slug":"Mybatis源码分析-一","published":1,"updated":"2022-09-03T07:30:55.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz83u000ztwfauln6x6nx","content":"<p>​    Mybatis源码分析<a id=\"more\"></a></p>\n<h2 id=\"核心接口（对象）\"><a href=\"#核心接口（对象）\" class=\"headerlink\" title=\"核心接口（对象）\"></a>核心接口（对象）</h2><h4 id=\"sqlSessionFactory-对象\"><a href=\"#sqlSessionFactory-对象\" class=\"headerlink\" title=\"sqlSessionFactory 对象\"></a>sqlSessionFactory 对象</h4><p>sqlSessionFactory 是 mybatis 核心配置类，管理 mybatis 全局配置。</p>\n<h4 id=\"sqlSession-接口\"><a href=\"#sqlSession-接口\" class=\"headerlink\" title=\"sqlSession 接口\"></a>sqlSession 接口</h4><p>一个或者多个sql操作的执行单元。实现一个完整的sql操作。依赖sqlSessionFactory创建</p>\n<h4 id=\"Executor-接口\"><a href=\"#Executor-接口\" class=\"headerlink\" title=\"Executor 接口\"></a>Executor 接口</h4><p>对应 jdbc 底层一个完整的 sql 操作。sqlSession 实际通过 Executor 执行 sql 操作</p>\n<h4 id=\"MapperProxy-类\"><a href=\"#MapperProxy-类\" class=\"headerlink\" title=\"MapperProxy 类\"></a>MapperProxy 类</h4><p>代理实现 mybatis 的客户端 mapper 接口</p>\n<h4 id=\"MapperMethod-类\"><a href=\"#MapperMethod-类\" class=\"headerlink\" title=\"MapperMethod 类\"></a>MapperMethod 类</h4><p>对应客户端代码的 mapper 接口里面的一个方法。该实例缓存了。</p>\n<h4 id=\"StatementHandler-接口\"><a href=\"#StatementHandler-接口\" class=\"headerlink\" title=\"StatementHandler 接口\"></a>StatementHandler 接口</h4><p>jdbc Statement 的装饰器</p>\n<h4 id=\"ResultSetHandler-接口\"><a href=\"#ResultSetHandler-接口\" class=\"headerlink\" title=\"ResultSetHandler 接口\"></a>ResultSetHandler 接口</h4><p>jdbc resultSet 的装饰器</p>\n<h2 id=\"mybaits-执行-orm-操作细节\"><a href=\"#mybaits-执行-orm-操作细节\" class=\"headerlink\" title=\"mybaits 执行 orm 操作细节\"></a>mybaits 执行 orm 操作细节</h2><p><img src=\"/2018/03/10/Mybatis源码分析-一/Mybatis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%B8%80/20170308.png\" alt=\"mybaits执行orm操作细节\"></p>\n<p><strong>sqlsession 的 close 方法会关闭底层 jdbc connection</strong></p>\n<h2 id=\"mybatis-插件机制\"><a href=\"#mybatis-插件机制\" class=\"headerlink\" title=\"mybatis 插件机制\"></a>mybatis 插件机制</h2><p>mybatis 插件是基于代理实现的，具体支持一下四个接口</p>\n<ul>\n<li>Executor</li>\n<li>ParameterHandler</li>\n</ul>\n<ul>\n<li>ResultSetHandler</li>\n</ul>\n<ul>\n<li>StatemetHandler</li>\n</ul>\n<p>[]: <a href=\"http://www.chenxun.wiki/2017/03/01/mybatis-01/\" target=\"_blank\" rel=\"noopener\">http://www.chenxun.wiki/2017/03/01/mybatis-01/</a></p>\n","site":{"data":{}},"excerpt":"<p>​    Mybatis源码分析</p>","more":"<p></p>\n<h2 id=\"核心接口（对象）\"><a href=\"#核心接口（对象）\" class=\"headerlink\" title=\"核心接口（对象）\"></a>核心接口（对象）</h2><h4 id=\"sqlSessionFactory-对象\"><a href=\"#sqlSessionFactory-对象\" class=\"headerlink\" title=\"sqlSessionFactory 对象\"></a>sqlSessionFactory 对象</h4><p>sqlSessionFactory 是 mybatis 核心配置类，管理 mybatis 全局配置。</p>\n<h4 id=\"sqlSession-接口\"><a href=\"#sqlSession-接口\" class=\"headerlink\" title=\"sqlSession 接口\"></a>sqlSession 接口</h4><p>一个或者多个sql操作的执行单元。实现一个完整的sql操作。依赖sqlSessionFactory创建</p>\n<h4 id=\"Executor-接口\"><a href=\"#Executor-接口\" class=\"headerlink\" title=\"Executor 接口\"></a>Executor 接口</h4><p>对应 jdbc 底层一个完整的 sql 操作。sqlSession 实际通过 Executor 执行 sql 操作</p>\n<h4 id=\"MapperProxy-类\"><a href=\"#MapperProxy-类\" class=\"headerlink\" title=\"MapperProxy 类\"></a>MapperProxy 类</h4><p>代理实现 mybatis 的客户端 mapper 接口</p>\n<h4 id=\"MapperMethod-类\"><a href=\"#MapperMethod-类\" class=\"headerlink\" title=\"MapperMethod 类\"></a>MapperMethod 类</h4><p>对应客户端代码的 mapper 接口里面的一个方法。该实例缓存了。</p>\n<h4 id=\"StatementHandler-接口\"><a href=\"#StatementHandler-接口\" class=\"headerlink\" title=\"StatementHandler 接口\"></a>StatementHandler 接口</h4><p>jdbc Statement 的装饰器</p>\n<h4 id=\"ResultSetHandler-接口\"><a href=\"#ResultSetHandler-接口\" class=\"headerlink\" title=\"ResultSetHandler 接口\"></a>ResultSetHandler 接口</h4><p>jdbc resultSet 的装饰器</p>\n<h2 id=\"mybaits-执行-orm-操作细节\"><a href=\"#mybaits-执行-orm-操作细节\" class=\"headerlink\" title=\"mybaits 执行 orm 操作细节\"></a>mybaits 执行 orm 操作细节</h2><p><img src=\"/2018/03/10/Mybatis源码分析-一/Mybatis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%B8%80/20170308.png\" alt=\"mybaits执行orm操作细节\"></p>\n<p><strong>sqlsession 的 close 方法会关闭底层 jdbc connection</strong></p>\n<h2 id=\"mybatis-插件机制\"><a href=\"#mybatis-插件机制\" class=\"headerlink\" title=\"mybatis 插件机制\"></a>mybatis 插件机制</h2><p>mybatis 插件是基于代理实现的，具体支持一下四个接口</p>\n<ul>\n<li>Executor</li>\n<li>ParameterHandler</li>\n</ul>\n<ul>\n<li>ResultSetHandler</li>\n</ul>\n<ul>\n<li>StatemetHandler</li>\n</ul>\n<p>[]: <a href=\"http://www.chenxun.wiki/2017/03/01/mybatis-01/\" target=\"_blank\" rel=\"noopener\">http://www.chenxun.wiki/2017/03/01/mybatis-01/</a></p>"},{"title":"Mysql问题集锦","date":"2018-03-10T03:53:19.000Z","_content":"\n​\t开发中遇到的mysql的问题的解决集锦<!--more-->\n\n *  The total number of locks exceeds the lock table size\n\n    ```\n    show variables like \"%_buffer%\";\n    SET GLOBAL innodb_buffer_pool_size=67108864;\n    ```\n\n    ​","source":"_posts/Mysql问题集锦.md","raw":"---\ntitle: Mysql问题集锦\ndate: 2018-03-10 11:53:19\ncategories: [Mysql]\ntags: [Mysql]\n---\n\n​\t开发中遇到的mysql的问题的解决集锦<!--more-->\n\n *  The total number of locks exceeds the lock table size\n\n    ```\n    show variables like \"%_buffer%\";\n    SET GLOBAL innodb_buffer_pool_size=67108864;\n    ```\n\n    ​","slug":"Mysql问题集锦","published":1,"updated":"2022-09-03T07:30:55.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz8410013twfagvcalzi9","content":"<p>​    开发中遇到的mysql的问题的解决集锦<a id=\"more\"></a></p>\n<ul>\n<li><p>The total number of locks exceeds the lock table size</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like &quot;%_buffer%&quot;;</span><br><span class=\"line\">SET GLOBAL innodb_buffer_pool_size=67108864;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>​    开发中遇到的mysql的问题的解决集锦</p>","more":"<p></p>\n<ul>\n<li><p>The total number of locks exceeds the lock table size</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like &quot;%_buffer%&quot;;</span><br><span class=\"line\">SET GLOBAL innodb_buffer_pool_size=67108864;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n</ul>"},{"title":"Netty之ChannelOption","date":"2018-04-10T13:34:42.000Z","_content":"\nChannelOption 了解下<!--more-->\n\n#### ChannelOption \n\nChannelOption 是一个配置类 继承*** AbstractConstant<ChannelOption<T>>***\n\n它的类注释是这样写的：\n\n```\n/**\n * A {@link ChannelOption} allows to configure a {@link ChannelConfig} in a type-safe\n * way. Which {@link ChannelOption} is supported depends on the actual implementation\n * of {@link ChannelConfig} and may depend on the nature of the transport it belongs\n * to.\n *\n * @param <T>   the type of the value which is valid for the {@link ChannelOption}\n */\n```\n\n可以很明显的看到这是个配置类\n\n```\n //构建常量配置池\n private static final ConstantPool<ChannelOption<Object>> pool = new ConstantPool<ChannelOption<Object>>() {\n        @Override\n        protected ChannelOption<Object> newConstant(int id, String name) {\n            return new ChannelOption<Object>(id, name);\n        }\n    };\n    /**\n     * Returns the {@link ChannelOption} of the specified name. 这里是主要的方法\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> ChannelOption<T> valueOf(String name) {\n        return (ChannelOption<T>) pool.valueOf(name);\n    }\n    //具体的调用\n    /**\n     * Shortcut of {@link #valueOf(String) valueOf(firstNameComponent.getName() + \"#\" + \t\t\tsecondNameComponent)}.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> ChannelOption<T> valueOf(Class<?> firstNameComponent, String secondNameComponent) {\n        return (ChannelOption<T>) pool.valueOf(firstNameComponent, secondNameComponent);\n    }\n    //具体的常量配置\n        public static final ChannelOption<Integer> CONNECT_TIMEOUT_MILLIS = valueOf(\"CONNECT_TIMEOUT_MILLIS\");\n\n```\n\n下面解释每项参数：\n\n* ChannelOption.SO_BACKLOG\n\n  ChannelOption.SO_BACKLOG 对应的是 tcp/ip 协议 listen 函数中的 backlog 参数，函数 listen(int socketfd,int backlog) 用来初始化服务端可连接队列，服务端处理客户端连接请求是顺序处理的，所以同一时间只能处理一个客户端连接，多个客户端来的时候，服务端将不能处理的客户端连接请求放在队列中等待处理，***backlog 参数指定了队列的大小***\n\n* ChannelOption.SO_REUSEADDR\n\n  ChanneOption.SO_REUSEADDR 对应于套接字选项中的 SO_REUSEADDR，这个参数***表示允许重复使用本地地址和端口***，比如，某个服务器进程占用了 TCP 的 80 端口进行监听，此时再次监听该端口就会返回错误，使用该参数就可以解决问题，该参数允许共用该端口，这个在服务器程序中比较常使用，比如某个进程非正常退出，该程序占用的端口可能要被占用一段时间才能允许其他进程使用，而且程序死掉以后，内核一需要一定的时间才能够释放此端口，不设置 SO_REUSEADDR\n\n* ChannelOption.SO_KEEPALIVE\n\n  这个就比较常见了，Channeloption.SO_KEEPALIVE 参数对应于套接字选项中的 SO_KEEPALIVE，该参数用于设置 TCP 连接，***当设置该选项以后，连接会测试链接的状态***，这个选项用于可能长时间没有数据交流的连接。当设置该选项以后，如果在两小时内没有数据的通信时，TCP 会自动发送一个活动探测数据报文\n\n* ChannelOption.SO_SNDBUF 和 ChannelOption.SO_RCVBUF\n\n  ChannelOption.SO_SNDBUF 参数对应于套接字选项中的 SO_SNDBUF，ChannelOption.SO_RCVBUF 参数对应于套接字选项中的 SO_RCVBUF 这两个参数***用于操作接收缓冲区和发送缓冲区的大小***，接收缓冲区用于保存网络协议站内收到的数据，直到应用程序读取成功，发送缓冲区用于保存发送数据，直到发送成功。\n\n* ChannelOption.SO_LINGER\n\n  ChannelOption.SO_LINGER 参数对应于套接字选项中的 SO_LINGER,Linux 内核默认的处理方式是当用户调用 close（）方法的时候，函数返回，在可能的情况下，尽量发送数据，不一定保证会发生剩余的数据，造成了数据的不确定性，***使用 SO_LINGER 可以阻塞 close() 的调用时间，直到数据完全发送***\n\n* ChannelOption.TCP_NODELAY\n\n  ChannelOption.TCP_NODELAY 参数对应于套接字选项中的 TCP_NODELAY, 该参数的使用与 Nagle 算法有关\n\n  Nagle 算法是将小的数据包组装为更大的帧然后进行发送，而不是输入一次发送一次, 因此在数据包不足的时候会等待其他数据的到了，组装成大的数据包进行发送，虽然该方式有效提高网络的有效负载，但是却造成了延时，而***该参数的作用就是禁止使用 Nagle 算法，使用于小数据即时传输***，于 TCP_NODELAY 相对应的是 TCP_CORK，该选项是需要等到发送的数据量最大的时候，一次性发送数据，适用于文件传输。\n\n* ChannelOption.ALLOW_HALF_CLOSURE\n\n  可用于防止 Netty 在 `SocketChannel.read(..)` 返回 `-1` 时自动关闭连接\n\n* ChannelOption.AUTO_READ\n\n  `ChannelOption.AUTO_READ` 为 true 时，在 Channel Active 事件或读完成事件之后，Netty 便将 NIO channel 所对应的 SelectionKey 加上 OP_READ `selectionKey.interestOps(interestOps | readInterestOp)`\n\n  ***有时通道建立起来之后并不想读取消息，也许只是发消息，或者手工，或者特定条件下读取消息，这是就不应该设置 ChannelOption.AUTO_READ***。`NioServerSocketChannel` 在接受客户端连接之后，便会在客户端连接对应的 Selector 上添加 `OP_READ`，所以不用设置 `ChannelOption.AUTO_READ`。\n\n* ChannelOption.SO_TIMEOUT\n\n  等待客户端链接超时时间设置\n\n* ChannelOption.WRITE_BUFFER_WATER_MARK \n\n  替代了原来的WRITE_BUFFER_LOW_WATER_MARK 与 WRITE_BUFFER_HIGH_WATER_MARK\n\n  意为设置应用支持的连接数的buffer水位控制\n\n* ChannelOption.CONNECT_TIMEOUT_MILLIS \n\n  链接超时毫秒数 注意和bootstrap.connect(address).await(1000, TimeUnit.MILLISECONDS) 这个await 要适应\n\n  ​\n\n  ​","source":"_posts/Netty之ChannelOption.md","raw":"---\ntitle: Netty之ChannelOption\ndate: 2018-04-10 21:34:42\ntags: [Netty]\ncategories: [Netty]\n---\n\nChannelOption 了解下<!--more-->\n\n#### ChannelOption \n\nChannelOption 是一个配置类 继承*** AbstractConstant<ChannelOption<T>>***\n\n它的类注释是这样写的：\n\n```\n/**\n * A {@link ChannelOption} allows to configure a {@link ChannelConfig} in a type-safe\n * way. Which {@link ChannelOption} is supported depends on the actual implementation\n * of {@link ChannelConfig} and may depend on the nature of the transport it belongs\n * to.\n *\n * @param <T>   the type of the value which is valid for the {@link ChannelOption}\n */\n```\n\n可以很明显的看到这是个配置类\n\n```\n //构建常量配置池\n private static final ConstantPool<ChannelOption<Object>> pool = new ConstantPool<ChannelOption<Object>>() {\n        @Override\n        protected ChannelOption<Object> newConstant(int id, String name) {\n            return new ChannelOption<Object>(id, name);\n        }\n    };\n    /**\n     * Returns the {@link ChannelOption} of the specified name. 这里是主要的方法\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> ChannelOption<T> valueOf(String name) {\n        return (ChannelOption<T>) pool.valueOf(name);\n    }\n    //具体的调用\n    /**\n     * Shortcut of {@link #valueOf(String) valueOf(firstNameComponent.getName() + \"#\" + \t\t\tsecondNameComponent)}.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> ChannelOption<T> valueOf(Class<?> firstNameComponent, String secondNameComponent) {\n        return (ChannelOption<T>) pool.valueOf(firstNameComponent, secondNameComponent);\n    }\n    //具体的常量配置\n        public static final ChannelOption<Integer> CONNECT_TIMEOUT_MILLIS = valueOf(\"CONNECT_TIMEOUT_MILLIS\");\n\n```\n\n下面解释每项参数：\n\n* ChannelOption.SO_BACKLOG\n\n  ChannelOption.SO_BACKLOG 对应的是 tcp/ip 协议 listen 函数中的 backlog 参数，函数 listen(int socketfd,int backlog) 用来初始化服务端可连接队列，服务端处理客户端连接请求是顺序处理的，所以同一时间只能处理一个客户端连接，多个客户端来的时候，服务端将不能处理的客户端连接请求放在队列中等待处理，***backlog 参数指定了队列的大小***\n\n* ChannelOption.SO_REUSEADDR\n\n  ChanneOption.SO_REUSEADDR 对应于套接字选项中的 SO_REUSEADDR，这个参数***表示允许重复使用本地地址和端口***，比如，某个服务器进程占用了 TCP 的 80 端口进行监听，此时再次监听该端口就会返回错误，使用该参数就可以解决问题，该参数允许共用该端口，这个在服务器程序中比较常使用，比如某个进程非正常退出，该程序占用的端口可能要被占用一段时间才能允许其他进程使用，而且程序死掉以后，内核一需要一定的时间才能够释放此端口，不设置 SO_REUSEADDR\n\n* ChannelOption.SO_KEEPALIVE\n\n  这个就比较常见了，Channeloption.SO_KEEPALIVE 参数对应于套接字选项中的 SO_KEEPALIVE，该参数用于设置 TCP 连接，***当设置该选项以后，连接会测试链接的状态***，这个选项用于可能长时间没有数据交流的连接。当设置该选项以后，如果在两小时内没有数据的通信时，TCP 会自动发送一个活动探测数据报文\n\n* ChannelOption.SO_SNDBUF 和 ChannelOption.SO_RCVBUF\n\n  ChannelOption.SO_SNDBUF 参数对应于套接字选项中的 SO_SNDBUF，ChannelOption.SO_RCVBUF 参数对应于套接字选项中的 SO_RCVBUF 这两个参数***用于操作接收缓冲区和发送缓冲区的大小***，接收缓冲区用于保存网络协议站内收到的数据，直到应用程序读取成功，发送缓冲区用于保存发送数据，直到发送成功。\n\n* ChannelOption.SO_LINGER\n\n  ChannelOption.SO_LINGER 参数对应于套接字选项中的 SO_LINGER,Linux 内核默认的处理方式是当用户调用 close（）方法的时候，函数返回，在可能的情况下，尽量发送数据，不一定保证会发生剩余的数据，造成了数据的不确定性，***使用 SO_LINGER 可以阻塞 close() 的调用时间，直到数据完全发送***\n\n* ChannelOption.TCP_NODELAY\n\n  ChannelOption.TCP_NODELAY 参数对应于套接字选项中的 TCP_NODELAY, 该参数的使用与 Nagle 算法有关\n\n  Nagle 算法是将小的数据包组装为更大的帧然后进行发送，而不是输入一次发送一次, 因此在数据包不足的时候会等待其他数据的到了，组装成大的数据包进行发送，虽然该方式有效提高网络的有效负载，但是却造成了延时，而***该参数的作用就是禁止使用 Nagle 算法，使用于小数据即时传输***，于 TCP_NODELAY 相对应的是 TCP_CORK，该选项是需要等到发送的数据量最大的时候，一次性发送数据，适用于文件传输。\n\n* ChannelOption.ALLOW_HALF_CLOSURE\n\n  可用于防止 Netty 在 `SocketChannel.read(..)` 返回 `-1` 时自动关闭连接\n\n* ChannelOption.AUTO_READ\n\n  `ChannelOption.AUTO_READ` 为 true 时，在 Channel Active 事件或读完成事件之后，Netty 便将 NIO channel 所对应的 SelectionKey 加上 OP_READ `selectionKey.interestOps(interestOps | readInterestOp)`\n\n  ***有时通道建立起来之后并不想读取消息，也许只是发消息，或者手工，或者特定条件下读取消息，这是就不应该设置 ChannelOption.AUTO_READ***。`NioServerSocketChannel` 在接受客户端连接之后，便会在客户端连接对应的 Selector 上添加 `OP_READ`，所以不用设置 `ChannelOption.AUTO_READ`。\n\n* ChannelOption.SO_TIMEOUT\n\n  等待客户端链接超时时间设置\n\n* ChannelOption.WRITE_BUFFER_WATER_MARK \n\n  替代了原来的WRITE_BUFFER_LOW_WATER_MARK 与 WRITE_BUFFER_HIGH_WATER_MARK\n\n  意为设置应用支持的连接数的buffer水位控制\n\n* ChannelOption.CONNECT_TIMEOUT_MILLIS \n\n  链接超时毫秒数 注意和bootstrap.connect(address).await(1000, TimeUnit.MILLISECONDS) 这个await 要适应\n\n  ​\n\n  ​","slug":"Netty之ChannelOption","published":1,"updated":"2022-09-03T07:30:55.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz8430015twfabrnf5cm9","content":"<p>ChannelOption 了解下<a id=\"more\"></a></p>\n<h4 id=\"ChannelOption\"><a href=\"#ChannelOption\" class=\"headerlink\" title=\"ChannelOption\"></a>ChannelOption</h4><p>ChannelOption 是一个配置类 继承<strong>* AbstractConstant&lt;ChannelOption<t>&gt;*</t></strong></p>\n<p>它的类注释是这样写的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * A &#123;@link ChannelOption&#125; allows to configure a &#123;@link ChannelConfig&#125; in a type-safe</span><br><span class=\"line\"> * way. Which &#123;@link ChannelOption&#125; is supported depends on the actual implementation</span><br><span class=\"line\"> * of &#123;@link ChannelConfig&#125; and may depend on the nature of the transport it belongs</span><br><span class=\"line\"> * to.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &lt;T&gt;   the type of the value which is valid for the &#123;@link ChannelOption&#125;</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n\n<p>可以很明显的看到这是个配置类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//构建常量配置池</span><br><span class=\"line\">private static final ConstantPool&lt;ChannelOption&lt;Object&gt;&gt; pool = new ConstantPool&lt;ChannelOption&lt;Object&gt;&gt;() &#123;</span><br><span class=\"line\">       @Override</span><br><span class=\"line\">       protected ChannelOption&lt;Object&gt; newConstant(int id, String name) &#123;</span><br><span class=\"line\">           return new ChannelOption&lt;Object&gt;(id, name);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">   /**</span><br><span class=\"line\">    * Returns the &#123;@link ChannelOption&#125; of the specified name. 这里是主要的方法</span><br><span class=\"line\">    */</span><br><span class=\"line\">   @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">   public static &lt;T&gt; ChannelOption&lt;T&gt; valueOf(String name) &#123;</span><br><span class=\"line\">       return (ChannelOption&lt;T&gt;) pool.valueOf(name);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   //具体的调用</span><br><span class=\"line\">   /**</span><br><span class=\"line\">    * Shortcut of &#123;@link #valueOf(String) valueOf(firstNameComponent.getName() + &quot;#&quot; + \t\t\tsecondNameComponent)&#125;.</span><br><span class=\"line\">    */</span><br><span class=\"line\">   @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">   public static &lt;T&gt; ChannelOption&lt;T&gt; valueOf(Class&lt;?&gt; firstNameComponent, String secondNameComponent) &#123;</span><br><span class=\"line\">       return (ChannelOption&lt;T&gt;) pool.valueOf(firstNameComponent, secondNameComponent);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   //具体的常量配置</span><br><span class=\"line\">       public static final ChannelOption&lt;Integer&gt; CONNECT_TIMEOUT_MILLIS = valueOf(&quot;CONNECT_TIMEOUT_MILLIS&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>下面解释每项参数：</p>\n<ul>\n<li><p>ChannelOption.SO_BACKLOG</p>\n<p>ChannelOption.SO_BACKLOG 对应的是 tcp/ip 协议 listen 函数中的 backlog 参数，函数 listen(int socketfd,int backlog) 用来初始化服务端可连接队列，服务端处理客户端连接请求是顺序处理的，所以同一时间只能处理一个客户端连接，多个客户端来的时候，服务端将不能处理的客户端连接请求放在队列中等待处理，<strong><em>backlog 参数指定了队列的大小</em></strong></p>\n</li>\n<li><p>ChannelOption.SO_REUSEADDR</p>\n<p>ChanneOption.SO_REUSEADDR 对应于套接字选项中的 SO_REUSEADDR，这个参数<strong><em>表示允许重复使用本地地址和端口</em></strong>，比如，某个服务器进程占用了 TCP 的 80 端口进行监听，此时再次监听该端口就会返回错误，使用该参数就可以解决问题，该参数允许共用该端口，这个在服务器程序中比较常使用，比如某个进程非正常退出，该程序占用的端口可能要被占用一段时间才能允许其他进程使用，而且程序死掉以后，内核一需要一定的时间才能够释放此端口，不设置 SO_REUSEADDR</p>\n</li>\n<li><p>ChannelOption.SO_KEEPALIVE</p>\n<p>这个就比较常见了，Channeloption.SO_KEEPALIVE 参数对应于套接字选项中的 SO_KEEPALIVE，该参数用于设置 TCP 连接，<strong><em>当设置该选项以后，连接会测试链接的状态</em></strong>，这个选项用于可能长时间没有数据交流的连接。当设置该选项以后，如果在两小时内没有数据的通信时，TCP 会自动发送一个活动探测数据报文</p>\n</li>\n<li><p>ChannelOption.SO_SNDBUF 和 ChannelOption.SO_RCVBUF</p>\n<p>ChannelOption.SO_SNDBUF 参数对应于套接字选项中的 SO_SNDBUF，ChannelOption.SO_RCVBUF 参数对应于套接字选项中的 SO_RCVBUF 这两个参数<strong><em>用于操作接收缓冲区和发送缓冲区的大小</em></strong>，接收缓冲区用于保存网络协议站内收到的数据，直到应用程序读取成功，发送缓冲区用于保存发送数据，直到发送成功。</p>\n</li>\n<li><p>ChannelOption.SO_LINGER</p>\n<p>ChannelOption.SO_LINGER 参数对应于套接字选项中的 SO_LINGER,Linux 内核默认的处理方式是当用户调用 close（）方法的时候，函数返回，在可能的情况下，尽量发送数据，不一定保证会发生剩余的数据，造成了数据的不确定性，<strong><em>使用 SO_LINGER 可以阻塞 close() 的调用时间，直到数据完全发送</em></strong></p>\n</li>\n<li><p>ChannelOption.TCP_NODELAY</p>\n<p>ChannelOption.TCP_NODELAY 参数对应于套接字选项中的 TCP_NODELAY, 该参数的使用与 Nagle 算法有关</p>\n<p>Nagle 算法是将小的数据包组装为更大的帧然后进行发送，而不是输入一次发送一次, 因此在数据包不足的时候会等待其他数据的到了，组装成大的数据包进行发送，虽然该方式有效提高网络的有效负载，但是却造成了延时，而<strong><em>该参数的作用就是禁止使用 Nagle 算法，使用于小数据即时传输</em></strong>，于 TCP_NODELAY 相对应的是 TCP_CORK，该选项是需要等到发送的数据量最大的时候，一次性发送数据，适用于文件传输。</p>\n</li>\n<li><p>ChannelOption.ALLOW_HALF_CLOSURE</p>\n<p>可用于防止 Netty 在 <code>SocketChannel.read(..)</code> 返回 <code>-1</code> 时自动关闭连接</p>\n</li>\n<li><p>ChannelOption.AUTO_READ</p>\n<p><code>ChannelOption.AUTO_READ</code> 为 true 时，在 Channel Active 事件或读完成事件之后，Netty 便将 NIO channel 所对应的 SelectionKey 加上 OP_READ <code>selectionKey.interestOps(interestOps | readInterestOp)</code></p>\n<p><strong><em>有时通道建立起来之后并不想读取消息，也许只是发消息，或者手工，或者特定条件下读取消息，这是就不应该设置 ChannelOption.AUTO_READ</em></strong>。<code>NioServerSocketChannel</code> 在接受客户端连接之后，便会在客户端连接对应的 Selector 上添加 <code>OP_READ</code>，所以不用设置 <code>ChannelOption.AUTO_READ</code>。</p>\n</li>\n<li><p>ChannelOption.SO_TIMEOUT</p>\n<p>等待客户端链接超时时间设置</p>\n</li>\n<li><p>ChannelOption.WRITE_BUFFER_WATER_MARK </p>\n<p>替代了原来的WRITE_BUFFER_LOW_WATER_MARK 与 WRITE_BUFFER_HIGH_WATER_MARK</p>\n<p>意为设置应用支持的连接数的buffer水位控制</p>\n</li>\n<li><p>ChannelOption.CONNECT_TIMEOUT_MILLIS </p>\n<p>链接超时毫秒数 注意和bootstrap.connect(address).await(1000, TimeUnit.MILLISECONDS) 这个await 要适应</p>\n<p>​</p>\n<p>​</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>ChannelOption 了解下</p>","more":"<p></p>\n<h4 id=\"ChannelOption\"><a href=\"#ChannelOption\" class=\"headerlink\" title=\"ChannelOption\"></a>ChannelOption</h4><p>ChannelOption 是一个配置类 继承<strong>* AbstractConstant&lt;ChannelOption<t>&gt;*</t></strong></p>\n<p>它的类注释是这样写的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * A &#123;@link ChannelOption&#125; allows to configure a &#123;@link ChannelConfig&#125; in a type-safe</span><br><span class=\"line\"> * way. Which &#123;@link ChannelOption&#125; is supported depends on the actual implementation</span><br><span class=\"line\"> * of &#123;@link ChannelConfig&#125; and may depend on the nature of the transport it belongs</span><br><span class=\"line\"> * to.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &lt;T&gt;   the type of the value which is valid for the &#123;@link ChannelOption&#125;</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n\n<p>可以很明显的看到这是个配置类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//构建常量配置池</span><br><span class=\"line\">private static final ConstantPool&lt;ChannelOption&lt;Object&gt;&gt; pool = new ConstantPool&lt;ChannelOption&lt;Object&gt;&gt;() &#123;</span><br><span class=\"line\">       @Override</span><br><span class=\"line\">       protected ChannelOption&lt;Object&gt; newConstant(int id, String name) &#123;</span><br><span class=\"line\">           return new ChannelOption&lt;Object&gt;(id, name);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">   /**</span><br><span class=\"line\">    * Returns the &#123;@link ChannelOption&#125; of the specified name. 这里是主要的方法</span><br><span class=\"line\">    */</span><br><span class=\"line\">   @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">   public static &lt;T&gt; ChannelOption&lt;T&gt; valueOf(String name) &#123;</span><br><span class=\"line\">       return (ChannelOption&lt;T&gt;) pool.valueOf(name);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   //具体的调用</span><br><span class=\"line\">   /**</span><br><span class=\"line\">    * Shortcut of &#123;@link #valueOf(String) valueOf(firstNameComponent.getName() + &quot;#&quot; + \t\t\tsecondNameComponent)&#125;.</span><br><span class=\"line\">    */</span><br><span class=\"line\">   @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">   public static &lt;T&gt; ChannelOption&lt;T&gt; valueOf(Class&lt;?&gt; firstNameComponent, String secondNameComponent) &#123;</span><br><span class=\"line\">       return (ChannelOption&lt;T&gt;) pool.valueOf(firstNameComponent, secondNameComponent);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   //具体的常量配置</span><br><span class=\"line\">       public static final ChannelOption&lt;Integer&gt; CONNECT_TIMEOUT_MILLIS = valueOf(&quot;CONNECT_TIMEOUT_MILLIS&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>下面解释每项参数：</p>\n<ul>\n<li><p>ChannelOption.SO_BACKLOG</p>\n<p>ChannelOption.SO_BACKLOG 对应的是 tcp/ip 协议 listen 函数中的 backlog 参数，函数 listen(int socketfd,int backlog) 用来初始化服务端可连接队列，服务端处理客户端连接请求是顺序处理的，所以同一时间只能处理一个客户端连接，多个客户端来的时候，服务端将不能处理的客户端连接请求放在队列中等待处理，<strong><em>backlog 参数指定了队列的大小</em></strong></p>\n</li>\n<li><p>ChannelOption.SO_REUSEADDR</p>\n<p>ChanneOption.SO_REUSEADDR 对应于套接字选项中的 SO_REUSEADDR，这个参数<strong><em>表示允许重复使用本地地址和端口</em></strong>，比如，某个服务器进程占用了 TCP 的 80 端口进行监听，此时再次监听该端口就会返回错误，使用该参数就可以解决问题，该参数允许共用该端口，这个在服务器程序中比较常使用，比如某个进程非正常退出，该程序占用的端口可能要被占用一段时间才能允许其他进程使用，而且程序死掉以后，内核一需要一定的时间才能够释放此端口，不设置 SO_REUSEADDR</p>\n</li>\n<li><p>ChannelOption.SO_KEEPALIVE</p>\n<p>这个就比较常见了，Channeloption.SO_KEEPALIVE 参数对应于套接字选项中的 SO_KEEPALIVE，该参数用于设置 TCP 连接，<strong><em>当设置该选项以后，连接会测试链接的状态</em></strong>，这个选项用于可能长时间没有数据交流的连接。当设置该选项以后，如果在两小时内没有数据的通信时，TCP 会自动发送一个活动探测数据报文</p>\n</li>\n<li><p>ChannelOption.SO_SNDBUF 和 ChannelOption.SO_RCVBUF</p>\n<p>ChannelOption.SO_SNDBUF 参数对应于套接字选项中的 SO_SNDBUF，ChannelOption.SO_RCVBUF 参数对应于套接字选项中的 SO_RCVBUF 这两个参数<strong><em>用于操作接收缓冲区和发送缓冲区的大小</em></strong>，接收缓冲区用于保存网络协议站内收到的数据，直到应用程序读取成功，发送缓冲区用于保存发送数据，直到发送成功。</p>\n</li>\n<li><p>ChannelOption.SO_LINGER</p>\n<p>ChannelOption.SO_LINGER 参数对应于套接字选项中的 SO_LINGER,Linux 内核默认的处理方式是当用户调用 close（）方法的时候，函数返回，在可能的情况下，尽量发送数据，不一定保证会发生剩余的数据，造成了数据的不确定性，<strong><em>使用 SO_LINGER 可以阻塞 close() 的调用时间，直到数据完全发送</em></strong></p>\n</li>\n<li><p>ChannelOption.TCP_NODELAY</p>\n<p>ChannelOption.TCP_NODELAY 参数对应于套接字选项中的 TCP_NODELAY, 该参数的使用与 Nagle 算法有关</p>\n<p>Nagle 算法是将小的数据包组装为更大的帧然后进行发送，而不是输入一次发送一次, 因此在数据包不足的时候会等待其他数据的到了，组装成大的数据包进行发送，虽然该方式有效提高网络的有效负载，但是却造成了延时，而<strong><em>该参数的作用就是禁止使用 Nagle 算法，使用于小数据即时传输</em></strong>，于 TCP_NODELAY 相对应的是 TCP_CORK，该选项是需要等到发送的数据量最大的时候，一次性发送数据，适用于文件传输。</p>\n</li>\n<li><p>ChannelOption.ALLOW_HALF_CLOSURE</p>\n<p>可用于防止 Netty 在 <code>SocketChannel.read(..)</code> 返回 <code>-1</code> 时自动关闭连接</p>\n</li>\n<li><p>ChannelOption.AUTO_READ</p>\n<p><code>ChannelOption.AUTO_READ</code> 为 true 时，在 Channel Active 事件或读完成事件之后，Netty 便将 NIO channel 所对应的 SelectionKey 加上 OP_READ <code>selectionKey.interestOps(interestOps | readInterestOp)</code></p>\n<p><strong><em>有时通道建立起来之后并不想读取消息，也许只是发消息，或者手工，或者特定条件下读取消息，这是就不应该设置 ChannelOption.AUTO_READ</em></strong>。<code>NioServerSocketChannel</code> 在接受客户端连接之后，便会在客户端连接对应的 Selector 上添加 <code>OP_READ</code>，所以不用设置 <code>ChannelOption.AUTO_READ</code>。</p>\n</li>\n<li><p>ChannelOption.SO_TIMEOUT</p>\n<p>等待客户端链接超时时间设置</p>\n</li>\n<li><p>ChannelOption.WRITE_BUFFER_WATER_MARK </p>\n<p>替代了原来的WRITE_BUFFER_LOW_WATER_MARK 与 WRITE_BUFFER_HIGH_WATER_MARK</p>\n<p>意为设置应用支持的连接数的buffer水位控制</p>\n</li>\n<li><p>ChannelOption.CONNECT_TIMEOUT_MILLIS </p>\n<p>链接超时毫秒数 注意和bootstrap.connect(address).await(1000, TimeUnit.MILLISECONDS) 这个await 要适应</p>\n<p>​</p>\n<p>​</p>\n</li>\n</ul>"},{"title":"Pulsar安装与配置","date":"2018-12-02T14:32:47.000Z","_content":"\nPulsar的安装与配置<!--more-->\n\n### 环境概述\n\n* Linux环境Ubuntu16.04\n* java 1.8\n* zookeeper 3.4.13\n\n### 安装\n\n* 下载\n\n  ```\n  wget https://www.apache.org/dyn/mirrors/mirrors.cgi?action=download&filename=pulsar/pulsar-2.2.0/apache-pulsar-2.2.0-bin.tar.gz\n  ```\n\n* 解压\n\n  ```\n  tar -zxvf  apache-pulsar-2.2.0-bin.tar.gz -C pulsar\n  ```\n\n* 目录介绍\n\n  ```\n  drwxr-xr-x  8 root root   4096 Dec  2 15:01 ./\n  drwxr-xr-x 15 root root   4096 Dec  2 15:33 ../\n  drwxr-xr-x  3  501 staff  4096 Oct 13 06:01 bin/\n  drwxr-xr-x  4  501 staff  4096 Dec  2 22:35 conf/\n  drwxr-xr-x  3 root root   4096 Dec  2 15:01 examples/\n  drwxr-xr-x  3 root root   4096 Dec  2 15:01 instances/\n  drwxr-xr-x  3 root root  20480 Dec  2 15:01 lib/\n  -rw-r--r--  1  501 staff 28876 Oct 13 06:01 LICENSE\n  drwxr-xr-x  2  501 staff  4096 Oct 13 06:01 licenses/\n  -rw-r--r--  1  501 staff  5857 Oct 13 06:01 NOTICE\n  -rw-r--r--  1  501 staff  1269 Oct 13 06:01 README\n  \n  ```\n\n  * bin：Pulsar 的命令行工具，例如 pulsar 和 pulsar-admin \n  * conf: Pulsar 的配置文件，包括 broker 配置、zookeeper 配置等等 \n  * examples: Pulsar function 的示例，有java的jar 和yaml配置文件\n  * instances：为Pulsar function 所创建的一些组件\n  * lib ： Pulsar依赖的jar\n  * LICENSE：许可证文件\n  * licenses：一些依赖的许可证文件的目录\n\n  一旦你开始运行 Pulsar，下面的这些目录将会被创建：\n\n  * data ：ZooKeeper 和 BookKeeper 使用的数据存储目录 \n  * instances ：为 Pulsar Function 创建的 Artifact \n  * logs :安装时创建的 log  \n\n* 单机模式启动\n\n  运行`pulsar help` 查看帮助命令\n\n  ```\n  Usage: pulsar <command>\n  where command is one of:\n  \n      broker              Run a broker server\n      bookie              Run a bookie server\n      zookeeper           Run a zookeeper server\n      configuration-store Run a configuration-store server\n      discovery           Run a discovery server\n      proxy               Run a pulsar proxy\n      websocket           Run a web socket proxy server\n      functions-worker    Run a functions worker server\n      sql-worker          Run a sql worker server\n      sql                 Run sql CLI\n      standalone          Run a broker server with local bookies and local zookeeper\n  \n      initialize-cluster-metadata     One-time metadata initialization\n      compact-topic       Run compaction against a topic\n      zookeeper-shell     Open a ZK shell client\n  \n      help                This help message\n  \n  or command is the full name of a class with a defined main() method.\n  \n  Environment variables:\n     PULSAR_LOG_CONF               Log4j configuration file (default /data/soft/pulsar/conf/log4j2.yaml)\n     PULSAR_BROKER_CONF            Configuration file for broker (default: /data/soft/pulsar/conf/broker.conf)\n     PULSAR_BOOKKEEPER_CONF        Configuration file for bookie (default: /data/soft/pulsar/conf/bookkeeper.conf)\n     PULSAR_ZK_CONF                Configuration file for zookeeper (default: /data/soft/pulsar/conf/zookeeper.conf)\n     PULSAR_CONFIGURATION_STORE_CONF         Configuration file for global configuration store (default: /data/soft/pulsar/conf/global_zookeeper.conf)\n     PULSAR_DISCOVERY_CONF         Configuration file for discovery service (default: /data/soft/pulsar/conf/discovery.conf)\n     PULSAR_WEBSOCKET_CONF         Configuration file for websocket proxy (default: /data/soft/pulsar/conf/websocket.conf)\n     PULSAR_PROXY_CONF             Configuration file for Pulsar proxy (default: /data/soft/pulsar/conf/proxy.conf)\n     PULSAR_WORKER_CONF            Configuration file for functions worker (default: /data/soft/pulsar/conf/functions_worker.yml)\n     PULSAR_STANDALONE_CONF        Configuration file for standalone (default: /data/soft/pulsar/conf/standalone.conf)\n     PULSAR_PRESTO_CONF            Configuration directory for Pulsar Presto (default: /data/soft/pulsar/conf/presto)\n     PULSAR_EXTRA_OPTS             Extra options to be passed to the jvm\n     PULSAR_EXTRA_CLASSPATH        Add extra paths to the pulsar classpath\n     PULSAR_PID_DIR                Folder where the pulsar server PID file should be stored\n     PULSAR_STOP_TIMEOUT           Wait time before forcefully kill the pulsar server instance, if the stop is not successful\n  \n  These variable can also be set in conf/pulsar_env.sh\n  \n  ```\n\n  使用standalone  `Run a broker server with local bookies and local zookeeper`\n\n  ```\n  bin/pulsar standalone\n  ```\n\n  报错了\n\n  ```\n  Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000080000000, 2147483648, 0) failed; error='Cannot allocate memory' (errno=12)\n  #\n  # There is insufficient memory for the Java Runtime Environment to continue.\n  # Native memory allocation (mmap) failed to map 2147483648 bytes for committing reserved memory.\n  # An error report file with more information is saved as:\n  # /data/soft/pulsar/hs_err_pid10684.log\n  ```\n\n  ```\n  ...\n  There is insufficient memory for the Java Runtime Environment to continue.\n  ...\n  ```\n\n  你说气人不气人，我的小鸡内存不足了。\n\n* 下载内置连接器\n\n  ```\n  $ wget https://archive.apache.org/dist/pulsar/pulsar-2.2.0/apache-pulsar-io-connectors-2.2.0-bin.tar.gz\n  ```\n\n  下载完成后在 pulsar 目录中，解压缩 io-connectors 软件包并复制连接器，如`connectors` pulsar 目录中所示： \n\n  ```\n  tar xvfz /path/to/apache-pulsar-io-connectors-2.2.0-bin.tar.gz\n  // you will find a directory named `apache-pulsar-io-connectors-2.2.0` in the pulsar directory\n  // then copy the connectors\n  \n  $ cd apache-pulsar-io-connectors-2.2.0/connectors connectors\n  \n  $ ls connectors\n  pulsar-io-aerospike-2.2.0.nar\n  pulsar-io-cassandra-2.2.0.nar\n  pulsar-io-kafka-2.2.0.nar\n  pulsar-io-kinesis-2.2.0.nar\n  pulsar-io-rabbitmq-2.2.0.nar\n  pulsar-io-twitter-2.2.0.nar\n  ...\n  ```\n\n  \n\n### 配置\n\n* BrokerKeeper ,是一个复制的日志存储系统，Pulsar 使用它来持久存储所有消息。\n\n  | 名称                             | 描述                                                         | 默认值                                                   |\n  | -------------------------------- | ------------------------------------------------------------ | -------------------------------------------------------- |\n  | bookiePort                       | bookie 服务器侦听的端口。                                    | 3181                                                     |\n  | allowLoopback                    | Whether the bookie is allowed to use a loopback interface as its primary interface (i.e. the interface used to establish its identity). By default, loopback interfaces are not allowed as the primary interface. Using a loopback interface as the primary interface usually indicates a configuration error. For example, it’s fairly common in some VPS setups to not configure a hostname or to have the hostname resolve to `127.0.0.1`. If this is the case, then all bookies in the cluster will establish their identities as `127.0.0.1:3181` and only one will be able to join the cluster. For VPSs configured like this, you should explicitly set the listening interface. | false                                                    |\n  | listeningInterface               | bookie 侦听的网络接口。如果没有设置，bookie 将监听所有接口。 | eth0                                                     |\n  | journalDirectory                 | The directory where Bookkeeper outputs its write-ahead log (WAL) | data/bookkeeper/journal                                  |\n  | ledgerDirectories                | The directory where Bookkeeper outputs ledger snapshots. This could define multiple directories to store snapshots separated by comma, for example `ledgerDirectories=/tmp/bk1-data,/tmp/bk2-data`. Ideally, ledger dirs and the journal dir are each in a different device, which reduces the contention between random I/O and sequential write. It is possible to run with a single disk, but performance will be significantly lower. | data/bookkeeper/ledgers                                  |\n  | ledgerManagerType                | The type of ledger manager used to manage how ledgers are stored, managed, and garbage collected. See [BookKeeper Internals](http://bookkeeper.apache.org/docs/latest/getting-started/concepts) for more info | hierarchical                                             |\n  | zkLedgersRootPath                | The root ZooKeeper path used to store ledger metadata. This parameter is used by the ZooKeeper-based ledger manager as a root znode to store all ledgers. | /ledgers                                                 |\n  | ledgerStorageClass               | Ledger storage implementation class                          | org.apache.bookkeeper.bookie.storage.ldb.DbLedgerStorage |\n  | entryLogFilePreallocationEnabled | Enable or disable entry logger preallocation                 |                                                          |\n  | logSizeLimit                     | Max file size of the entry logger, in bytes. A new entry log file will be created when the old one reaches the file size limitation. | 2147483648                                               |\n  | minorCompactionThreshold         | Threshold of minor compaction. Entry log files whose remaining size percentage reaches below this threshold will be compacted in a minor compaction. If set to less than zero, the minor compaction is disabled. | 0.2                                                      |\n  | minorCompactionInterval          | Time interval to run minor compaction, in seconds. If set to less than zero, the minor compaction is disabled. | 3600                                                     |\n  | majorCompactionThreshold         | The threshold of major compaction. Entry log files whose remaining size percentage reaches below this threshold will be compacted in a major compaction. Those entry log files whose remaining size percentage is still higher than the threshold will never be compacted. If set to less than zero, the minor compaction is disabled. | 0.5                                                      |\n  | majorCompactionInterval          | The time interval to run major compaction, in seconds. If set to less than zero, the major compaction is disabled. | 86400                                                    |\n  | compactionMaxOutstandingRequests | Sets the maximum number of entries that can be compacted without flushing. When compacting, the entries are written to the entrylog and the new offsets are cached in memory. Once the entrylog is flushed the index is updated with the new offsets. This parameter controls the number of entries added to the entrylog before a flush is forced. A higher value for this parameter means more memory will be used for offsets. Each offset consists of 3 longs. This parameter should not be modified unless you’re fully aware of the consequences. | 100000                                                   |\n  | compactionRate                   | The rate at which compaction will read entries, in adds per second. | 1000                                                     |\n  | isThrottleByBytes                | Throttle compaction by bytes or by entries.                  | false                                                    |\n  | compactionRateByEntries          | The rate at which compaction will read entries, in adds per second. | 1000                                                     |\n  | compactionRateByBytes            | Set the rate at which compaction will readd entries. The unit is bytes added per second. | 1000000                                                  |\n  | journalMaxSizeMB                 | Max file size of journal file, in megabytes. A new journal file will be created when the old one reaches the file size limitation. | 2048                                                     |\n  | journalMaxBackups                | The max number of old journal filse to keep. Keeping a number of old journal files would help data recovery in special cases. | 5                                                        |\n  | journalPreAllocSizeMB            | How space to pre-allocate at a time in the journal.          | 16                                                       |\n  | journalWriteBufferSizeKB         | 用于日志的写缓冲区。                                         | 64                                                       |\n  | journalRemoveFromPageCache       | Whether pages should be removed from the page cache after force write. | true                                                     |\n  | journalAdaptiveGroupWrites       | Whether to group journal force writes, which optimizes group commit for higher throughput. | true                                                     |\n  | journalMaxGroupWaitMSec          | The maximum latency to impose on a journal write to achieve grouping. | 1                                                        |\n  | journalAlignmentSize             | All the journal writes and commits should be aligned to given size | 4096                                                     |\n  | journalBufferedWritesThreshold   | Maximum writes to buffer to achieve grouping                 | 524288                                                   |\n  | journalFlushWhenQueueEmpty       | If we should flush the journal when journal queue is empty   | false                                                    |\n  | numJournalCallbackThreads        |                                                              |                                                          |\n\n   \n\n* pulsar_env.sh\n\n  默认的启动pulsar broker的配置\n\n  ```\n  \n  # default settings for starting pulsar broker\n  \n  # Log4j configuration file\n  # PULSAR_LOG_CONF=\n  \n  # Logs location\n  # PULSAR_LOG_DIR=\n  \n  # Configuration file of settings used in broker server\n  # PULSAR_BROKER_CONF=\n  \n  # Configuration file of settings used in bookie server\n  # PULSAR_BOOKKEEPER_CONF=\n  \n  # Configuration file of settings used in zookeeper server\n  # PULSAR_ZK_CONF=\n  \n  # Configuration file of settings used in global zookeeper server\n  # PULSAR_GLOBAL_ZK_CONF=\n  \n  # Extra options to be passed to the jvm\n  PULSAR_MEM=\" -Xms1g -Xmx1g -XX:MaxDirectMemorySize=1g\"\n  \n  # Garbage collection options GC参数的配置\n  PULSAR_GC=\" -XX:+UseG1GC -XX:MaxGCPauseMillis=10 -XX:+ParallelRefProcEnabled -XX:+UnlockExperimentalVMOptions -XX:+AggressiveOpts -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=32 -XX:ConcGCThreads=32 -XX:G1NewSizePercent=50 -XX:+DisableExplicitGC -XX:-ResizePLAB\"\n  \n  # Extra options to be passed to the jvm\n  PULSAR_EXTRA_OPTS=\"${PULSAR_EXTRA_OPTS} ${PULSAR_MEM} ${PULSAR_GC} -Dio.netty.leakDetectionLevel=disabled -Dio.netty.recycler.maxCapacity.default=1000 -Dio.netty.recycler.linkCapacity=1024\"\n  \n  # Add extra paths to the bookkeeper classpath\n  # PULSAR_EXTRA_CLASSPATH=\n  \n  #Folder where the Bookie server PID file should be stored\n  #PULSAR_PID_DIR=\n  \n  #Wait time before forcefully kill the pulser server instance, if the stop is not successful\n  #PULSAR_STOP_TIMEOUT=\n  \n  ```\n\n* pulsar_tools_env.sh\n\n  ```\n  #!/usr/bin/env bash\n  #\n  # Licensed to the Apache Software Foundation (ASF) under one\n  # or more contributor license agreements.  See the NOTICE file\n  # distributed with this work for additional information\n  # regarding copyright ownership.  The ASF licenses this file\n  # to you under the Apache License, Version 2.0 (the\n  # \"License\"); you may not use this file except in compliance\n  # with the License.  You may obtain a copy of the License at\n  #\n  #   http://www.apache.org/licenses/LICENSE-2.0\n  #\n  # Unless required by applicable law or agreed to in writing,\n  # software distributed under the License is distributed on an\n  # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  # KIND, either express or implied.  See the License for the\n  # specific language governing permissions and limitations\n  # under the License.\n  #\n  \n  # Set JAVA_HOME here to override the environment setting\n  # JAVA_HOME=\n  \n  # default settings for starting pulsar broker\n  \n  # Log4j configuration file\n  # PULSAR_LOG_CONF=\n  \n  # Logs location\n  # PULSAR_LOG_DIR=\n  \n  # Configuration file of settings used in broker server\n  # PULSAR_BROKER_CONF=\n  \n  # Configuration file of settings used in bookie server\n  # PULSAR_BOOKKEEPER_CONF=\n  \n  # Configuration file of settings used in zookeeper server\n  # PULSAR_ZK_CONF=\n  \n  # Configuration file of settings used in global zookeeper server\n  # PULSAR_GLOBAL_ZK_CONF=\n  \n  # Extra options to be passed to the jvm\n  PULSAR_MEM=${PULSAR_MEM:-\"-Xmx256m -XX:MaxDirectMemorySize=256m\"}\n  \n  # Garbage collection options\n  PULSAR_GC=\" -client \"\n  \n  # Extra options to be passed to the jvm\n  PULSAR_EXTRA_OPTS=\"${PULSAR_EXTRA_OPTS} ${PULSAR_MEM} ${PULSAR_GC} -Dio.netty.leakDetectionLevel=disabled\"\n  \n  # Add extra paths to the bookkeeper classpath\n  # PULSAR_EXTRA_CLASSPATH=\n  \n  #Folder where the Bookie server PID file should be stored\n  #PULSAR_PID_DIR=\n  \n  #Wait time before forcefully kill the pulser server instance, if the stop is not successful\n  #PULSAR_STOP_TIMEOUT=\n  ```\n\n* broker.conf 定义broker的一些配置\n\n  ```\n  #\n  # Licensed to the Apache Software Foundation (ASF) under one\n  # or more contributor license agreements.  See the NOTICE file\n  # distributed with this work for additional information\n  # regarding copyright ownership.  The ASF licenses this file\n  # to you under the Apache License, Version 2.0 (the\n  # \"License\"); you may not use this file except in compliance\n  # with the License.  You may obtain a copy of the License at\n  #\n  #   http://www.apache.org/licenses/LICENSE-2.0\n  #\n  # Unless required by applicable law or agreed to in writing,\n  # software distributed under the License is distributed on an\n  # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  # KIND, either express or implied.  See the License for the\n  # specific language governing permissions and limitations\n  # under the License.\n  #\n  \n  ### --- General broker settings --- ###\n  \n  # Zookeeper quorum connection string\n  zookeeperServers=172.17.83.72:2181\n  \n  # Global Zookeeper quorum connection string\n  globalZookeeperServers=172.17.83.72:2181\n  \n  # Broker data port\n  brokerServicePort=6650\n  \n  # Broker data port for TLS\n  brokerServicePortTls=6651\n  \n  # Port to use to server HTTP request\n  webServicePort=8080\n  \n  # Port to use to server HTTPS request\n  webServicePortTls=8443\n  \n  # Hostname or IP address the service binds on, default is 0.0.0.0.\n  bindAddress=0.0.0.0\n  \n  # Hostname or IP address the service advertises to the outside world. If not set, the value of InetAddress.getLocalHost().getHostName() is used.\n  advertisedAddress=172.17.83.72\n  \n  # Name of the cluster to which this broker belongs to\n  clusterName=pulsar-cluster-1\n  \n  # Enable cluster's failure-domain which can distribute brokers into logical region\n  failureDomainsEnabled=false\n  \n  # Zookeeper session timeout in milliseconds\n  zooKeeperSessionTimeoutMillis=30000\n  \n  # Time to wait for broker graceful shutdown. After this time elapses, the process will be killed\n  ##定义优雅关机超时时间\n  brokerShutdownTimeoutMs=3000\n  \n  # Enable backlog quota check. Enforces action on topic when the quota is reached\n  backlogQuotaCheckEnabled=true\n  \n  # How often to check for topics that have reached the quota\n  backlogQuotaCheckIntervalInSeconds=60\n  \n  # Default per-topic backlog quota limit\n  backlogQuotaDefaultLimitGB=10\n  \n  # Enable the deletion of inactive topics\n  brokerDeleteInactiveTopicsEnabled=true\n  \n  # How often to check for inactive topics\n  brokerDeleteInactiveTopicsFrequencySeconds=60\n  \n  # How frequently to proactively check and purge expired messages\n  messageExpiryCheckIntervalInMinutes=5\n  \n  # How long to delay rewinding cursor and dispatching messages when active consumer is changed\n  activeConsumerFailoverDelayTimeMillis=1000\n  \n  # Set the default behavior for message deduplication in the broker\n  # This can be overridden per-namespace. If enabled, broker will reject\n  # messages that were already stored in the topic\n  brokerDeduplicationEnabled=false\n  \n  # Maximum number of producer information that it's going to be\n  # persisted for deduplication purposes\n  brokerDeduplicationMaxNumberOfProducers=10000\n  \n  # Number of entries after which a dedup info snapshot is taken.\n  # A bigger interval will lead to less snapshots being taken though it would\n  # increase the topic recovery time, when the entries published after the\n  # snapshot need to be replayed\n  brokerDeduplicationEntriesInterval=1000\n  \n  # Time of inactivity after which the broker will discard the deduplication information\n  # relative to a disconnected producer. Default is 6 hours.\n  brokerDeduplicationProducerInactivityTimeoutMinutes=360\n  \n  # When a namespace is created without specifying the number of bundle, this\n  # value will be used as the default\n  defaultNumberOfNamespaceBundles=3\n  \n  # Enable check for minimum allowed client library version\n  clientLibraryVersionCheckEnabled=false\n  \n  # Path for the file used to determine the rotation status for the broker when responding\n  # to service discovery health checks\n  statusFilePath=\n  \n  # If true, (and ModularLoadManagerImpl is being used), the load manager will attempt to\n  # use only brokers running the latest software version (to minimize impact to bundles)\n  preferLaterVersions=false\n  \n  # Max number of unacknowledged messages allowed to receive messages by a consumer on a shared subscription. Broker will stop sending\n  # messages to consumer once, this limit reaches until consumer starts acknowledging messages back.\n  # Using a value of 0, is disabling unackeMessage limit check and consumer can receive messages without any restriction\n  maxUnackedMessagesPerConsumer=50000\n  \n  # Max number of unacknowledged messages allowed per shared subscription. Broker will stop dispatching messages to\n  # all consumers of the subscription once this limit reaches until consumer starts acknowledging messages back and\n  # unack count reaches to limit/2. Using a value of 0, is disabling unackedMessage-limit\n  # check and dispatcher can dispatch messages without any restriction\n  maxUnackedMessagesPerSubscription=200000\n  \n  # Max number of unacknowledged messages allowed per broker. Once this limit reaches, broker will stop dispatching\n  # messages to all shared subscription which has higher number of unack messages until subscriptions start\n  # acknowledging messages back and unack count reaches to limit/2. Using a value of 0, is disabling\n  # unackedMessage-limit check and broker doesn't block dispatchers\n  maxUnackedMessagesPerBroker=0\n  \n  # Once broker reaches maxUnackedMessagesPerBroker limit, it blocks subscriptions which has higher unacked messages\n  # than this percentage limit and subscription will not receive any new messages until that subscription acks back\n  # limit/2 messages\n  maxUnackedMessagesPerSubscriptionOnBrokerBlocked=0.16\n  \n  # Default messages per second dispatch throttling-limit for every topic. Using a value of 0, is disabling default\n  # message dispatch-throttling\n  dispatchThrottlingRatePerTopicInMsg=0\n  \n  # Default bytes per second dispatch throttling-limit for every topic. Using a value of 0, is disabling\n  # default message-byte dispatch-throttling\n  dispatchThrottlingRatePerTopicInByte=0\n  \n  # Default dispatch-throttling is disabled for consumers which already caught-up with published messages and\n  # don't have backlog. This enables dispatch-throttling for non-backlog consumers as well.\n  dispatchThrottlingOnNonBacklogConsumerEnabled=false\n  \n  # Max number of concurrent lookup request broker allows to throttle heavy incoming lookup traffic\n  maxConcurrentLookupRequest=10000\n  \n  # Max number of concurrent topic loading request broker allows to control number of zk-operations\n  maxConcurrentTopicLoadRequest=5000\n  \n  # Max concurrent non-persistent message can be processed per connection\n  maxConcurrentNonPersistentMessagePerConnection=1000\n  \n  # Number of worker threads to serve non-persistent topic\n  numWorkerThreadsForNonPersistentTopic=8\n  \n  # Enable broker to load persistent topics\n  enablePersistentTopics=true\n  \n  # Enable broker to load non-persistent topics\n  enableNonPersistentTopics=true\n  \n  # Enable to run bookie along with broker\n  enableRunBookieTogether=false\n  \n  # Enable to run bookie autorecovery along with broker\n  enableRunBookieAutoRecoveryTogether=false\n  \n  ### --- Authentication --- ###\n  # Role names that are treated as \"proxy roles\". If the broker sees a request with\n  #role as proxyRoles - it will demand to see a valid original principal.\n  proxyRoles=\n  \n  # If this flag is set then the broker authenticates the original Auth data\n  # else it just accepts the originalPrincipal and authorizes it (if required).  \n  authenticateOriginalAuthData=false\n  \n  # Enable TLS\n  tlsEnabled=true\n  \n  # Path for the TLS certificate file\n  tlsCertificateFilePath=/search/data/pulsar/cert/broker/broker.cert.pem\n  \n  # Path for the TLS private key file\n  tlsKeyFilePath=/search/data/pulsar/cert/broker/broker.key-pk8.pem\n  \n  # Path for the trusted TLS certificate file\n  tlsTrustCertsFilePath=/search/data/pulsar/cert/ca/certs/ca.cert.pem\n  \n  # Accept untrusted TLS certificate from client\n  tlsAllowInsecureConnection=false\n  \n  ### --- Authentication --- ###\n  \n  # Enable authentication\n  authenticationEnabled=true\n  \n  # Autentication provider name list, which is comma separated list of class names\n  authenticationProviders=org.apache.pulsar.broker.authentication.AuthenticationProviderTls\n  \n  # Enforce authorization\n  authorizationEnabled=true\n  \n  # Authorization provider fully qualified class-name\n  authorizationProvider=org.apache.pulsar.broker.authorization.PulsarAuthorizationProvider\n  \n  # Allow wildcard matching in authorization\n  # (wildcard matching only applicable if wildcard-char:\n  # * presents at first or last position eg: *.pulsar.service, pulsar.service.*)\n  authorizationAllowWildcardsMatching=false\n  \n  # Role names that are treated as \"super-user\", meaning they will be able to do all admin\n  # operations and publish/consume from all topics\n  superUserRoles=admin\n  \n  # Authentication settings of the broker itself. Used when the broker connects to other brokers,\n  # either in same or other clusters\n  brokerClientAuthenticationPlugin=\n  brokerClientAuthenticationParameters=\n  \n  # Supported Athenz provider domain names(comma separated) for authentication\n  athenzDomainNames=\n  \n  # When this parameter is not empty, unauthenticated users perform as anonymousUserRole\n  anonymousUserRole=\n  \n  ### --- BookKeeper Client --- ###\n  \n  # Authentication plugin to use when connecting to bookies\n  bookkeeperClientAuthenticationPlugin=\n  \n  # BookKeeper auth plugin implementatation specifics parameters name and values\n  bookkeeperClientAuthenticationParametersName=\n  bookkeeperClientAuthenticationParameters=\n  \n  # Timeout for BK add / read operations\n  bookkeeperClientTimeoutInSeconds=30\n  \n  # Speculative reads are initiated if a read request doesn't complete within a certain time\n  # Using a value of 0, is disabling the speculative reads\n  bookkeeperClientSpeculativeReadTimeoutInMillis=0\n  \n  # Enable bookies health check. Bookies that have more than the configured number of failure within\n  # the interval will be quarantined for some time. During this period, new ledgers won't be created\n  # on these bookies\n  bookkeeperClientHealthCheckEnabled=true\n  bookkeeperClientHealthCheckIntervalSeconds=60\n  bookkeeperClientHealthCheckErrorThresholdPerInterval=5\n  bookkeeperClientHealthCheckQuarantineTimeInSeconds=1800\n  \n  # Enable rack-aware bookie selection policy. BK will chose bookies from different racks when\n  # forming a new bookie ensemble\n  bookkeeperClientRackawarePolicyEnabled=true\n  \n  # Enable bookie isolation by specifying a list of bookie groups to choose from. Any bookie\n  # outside the specified groups will not be used by the broker\n  bookkeeperClientIsolationGroups=\n  \n  ### --- Managed Ledger --- ###\n  \n  # Number of bookies to use when creating a ledger\n  managedLedgerDefaultEnsembleSize=1\n  \n  # Number of copies to store for each message\n  managedLedgerDefaultWriteQuorum=1\n  \n  # Number of guaranteed copies (acks to wait before write is complete)\n  managedLedgerDefaultAckQuorum=1\n  \n  # Amount of memory to use for caching data payload in managed ledger. This memory\n  # is allocated from JVM direct memory and it's shared across all the topics\n  # running  in the same broker\n  managedLedgerCacheSizeMB=1024\n  \n  # Threshold to which bring down the cache level when eviction is triggered\n  managedLedgerCacheEvictionWatermark=0.9\n  \n  # Rate limit the amount of writes per second generated by consumer acking the messages\n  managedLedgerDefaultMarkDeleteRateLimit=1.0\n  \n  # Max number of entries to append to a ledger before triggering a rollover\n  # A ledger rollover is triggered on these conditions\n  #  * Either the max rollover time has been reached\n  #  * or max entries have been written to the ledged and at least min-time\n  #    has passed\n  managedLedgerMaxEntriesPerLedger=50000\n  \n  # Minimum time between ledger rollover for a topic\n  managedLedgerMinLedgerRolloverTimeMinutes=10\n  \n  # Maximum time before forcing a ledger rollover for a topic\n  managedLedgerMaxLedgerRolloverTimeMinutes=240\n  \n  # Max number of entries to append to a cursor ledger\n  managedLedgerCursorMaxEntriesPerLedger=50000\n  \n  # Max time before triggering a rollover on a cursor ledger\n  managedLedgerCursorRolloverTimeInSeconds=14400\n  \n  # Max number of \"acknowledgment holes\" that are going to be persistently stored.\n  # When acknowledging out of order, a consumer will leave holes that are supposed\n  # to be quickly filled by acking all the messages. The information of which\n  # messages are acknowledged is persisted by compressing in \"ranges\" of messages\n  # that were acknowledged. After the max number of ranges is reached, the information\n  # will only be tracked in memory and messages will be redelivered in case of\n  # crashes.\n  managedLedgerMaxUnackedRangesToPersist=10000\n  \n  # Max number of \"acknowledgment holes\" that can be stored in Zookeeper. If number of unack message range is higher\n  # than this limit then broker will persist unacked ranges into bookkeeper to avoid additional data overhead into\n  # zookeeper.\n  managedLedgerMaxUnackedRangesToPersistInZooKeeper=1000\n  \n  # Skip reading non-recoverable/unreadable data-ledger under managed-ledger's list. It helps when data-ledgers gets\n  # corrupted at bookkeeper and managed-cursor is stuck at that ledger.\n  autoSkipNonRecoverableData=false\n  \n  ### --- Load balancer --- ###\n  \n  # Enable load balancer\n  loadBalancerEnabled=true\n  \n  # Percentage of change to trigger load report update\n  loadBalancerReportUpdateThresholdPercentage=10\n  \n  # maximum interval to update load report\n  loadBalancerReportUpdateMaxIntervalMinutes=15\n  \n  # Frequency of report to collect\n  loadBalancerHostUsageCheckIntervalMinutes=1\n  \n  # Load shedding interval. Broker periodically checks whether some traffic should be offload from\n  # some over-loaded broker to other under-loaded brokers\n  loadBalancerSheddingIntervalMinutes=5\n  \n  # Prevent the same topics to be shed and moved to other broker more that once within this timeframe\n  loadBalancerSheddingGracePeriodMinutes=30\n  \n  # Usage threshold to allocate max number of topics to broker\n  loadBalancerBrokerMaxTopics=50000\n  \n  # Interval to flush dynamic resource quota to ZooKeeper\n  loadBalancerResourceQuotaUpdateIntervalMinutes=15\n  \n  # enable/disable namespace bundle auto split\n  loadBalancerAutoBundleSplitEnabled=true\n  \n  # enable/disable automatic unloading of split bundles\n  loadBalancerAutoUnloadSplitBundlesEnabled=true\n  \n  # maximum topics in a bundle, otherwise bundle split will be triggered\n  loadBalancerNamespaceBundleMaxTopics=1000\n  \n  # maximum sessions (producers + consumers) in a bundle, otherwise bundle split will be triggered\n  loadBalancerNamespaceBundleMaxSessions=1000\n  \n  # maximum msgRate (in + out) in a bundle, otherwise bundle split will be triggered\n  loadBalancerNamespaceBundleMaxMsgRate=30000\n  \n  # maximum bandwidth (in + out) in a bundle, otherwise bundle split will be triggered\n  loadBalancerNamespaceBundleMaxBandwidthMbytes=100\n  \n  # maximum number of bundles in a namespace\n  loadBalancerNamespaceMaximumBundles=128\n  \n  # Override the auto-detection of the network interfaces max speed. \n  # This option is useful in some environments (eg: EC2 VMs) where the max speed\n  # reported by Linux is not reflecting the real bandwidth available to the broker.\n  # Since the network usage is employed by the load manager to decide when a broker\n  # is overloaded, it is important to make sure the info is correct or override it \n  # with the right value here. The configured value can be a double (eg: 0.8) and that\n  # can be used to trigger load-shedding even before hitting on NIC limits.\n  loadBalancerOverrideBrokerNicSpeedGbps=\n  \n  # Name of load manager to use\n  loadManagerClassName=org.apache.pulsar.broker.loadbalance.impl.ModularLoadManagerImpl\n  \n  ### --- Replication --- ###\n  \n  # Enable replication metrics\n  replicationMetricsEnabled=true\n  \n  # Max number of connections to open for each broker in a remote cluster\n  # More connections host-to-host lead to better throughput over high-latency\n  # links.\n  replicationConnectionsPerBroker=16\n  \n  # Replicator producer queue size\n  replicationProducerQueueSize=1000\n  \n  # Replicator prefix used for replicator producer name and cursor name\n  replicatorPrefix=pulsar.repl\n  \n  # Enable TLS when talking with other clusters to replicate messages\n  replicationTlsEnabled=false\n  \n  # Default message retention time\n  defaultRetentionTimeInMinutes=0\n  \n  # Default retention size\n  defaultRetentionSizeInMB=0\n  \n  # How often to check whether the connections are still alive\n  keepAliveIntervalSeconds=30\n  \n  # How often broker checks for inactive topics to be deleted (topics with no subscriptions and no one connected)\n  brokerServicePurgeInactiveFrequencyInSeconds=60\n  \n  ### --- WebSocket --- ###\n  \n  # Enable the WebSocket API service in broker\n  webSocketServiceEnabled=false\n  \n  # Number of IO threads in Pulsar Client used in WebSocket proxy\n  webSocketNumIoThreads=8\n  \n  # Number of connections per Broker in Pulsar Client used in WebSocket proxy\n  webSocketConnectionsPerBroker=8\n  \n  \n  ### --- Metrics --- ###\n  \n  # Enable topic level metrics\n  exposeTopicLevelMetricsInPrometheus=true\n  ```\n\n* client.conf 定义客户端的一些配置\n\n  ```\n  # Configuration for pulsar-client and pulsar-admin CLI tools\n  \n  # URL for Pulsar REST API (for admin operations)\n  # For TLS:\n  # webServiceUrl=https://localhost:8443/\n  webServiceUrl=http://localhost:8080/\n  \n  # URL for Pulsar Binary Protocol (for produce and consume operations)\n  # For TLS:\n  # brokerServiceUrl=pulsar+ssl://localhost:6651/\n  brokerServiceUrl=pulsar://localhost:6650/\n  \n  # Authentication plugin to authenticate with servers\n  # e.g. for TLS\n  # authPlugin=org.apache.pulsar.client.impl.auth.AuthenticationTls\n  authPlugin=\n  \n  # Parameters passed to authentication plugin.\n  # A comma separated list of key:value pairs.\n  # Keys depend on the configured authPlugin.\n  # e.g. for TLS\n  # authParams=tlsCertFile:/path/to/client-cert.pem,tlsKeyFile:/path/to/client-key.pem\n  authParams=\n  \n  # Allow TLS connections to servers whose certificate cannot be\n  # be verified to have been signed by a trusted certificate\n  # authority.\n  tlsAllowInsecureConnection=false\n  \n  # Whether server hostname must match the common name of the certificate\n  # the server is using.\n  tlsEnableHostnameVerification=false\n  \n  # Path for the trusted TLS certificate file.\n  # This cert is used to verify that any cert presented by a server\n  # is signed by a certificate authority. If this verification\n  # fails, then the cert is untrusted and the connection is dropped.\n  tlsTrustCertsFilePath=\n  \n  ```\n\n  \n\n\n\n\n\n","source":"_posts/Pulsar安装与配置.md","raw":"---\ntitle: Pulsar安装与配置\ndate: 2018-12-02 22:32:47\ntags: [Pulsar]\ncategories: [Pulsar]\n---\n\nPulsar的安装与配置<!--more-->\n\n### 环境概述\n\n* Linux环境Ubuntu16.04\n* java 1.8\n* zookeeper 3.4.13\n\n### 安装\n\n* 下载\n\n  ```\n  wget https://www.apache.org/dyn/mirrors/mirrors.cgi?action=download&filename=pulsar/pulsar-2.2.0/apache-pulsar-2.2.0-bin.tar.gz\n  ```\n\n* 解压\n\n  ```\n  tar -zxvf  apache-pulsar-2.2.0-bin.tar.gz -C pulsar\n  ```\n\n* 目录介绍\n\n  ```\n  drwxr-xr-x  8 root root   4096 Dec  2 15:01 ./\n  drwxr-xr-x 15 root root   4096 Dec  2 15:33 ../\n  drwxr-xr-x  3  501 staff  4096 Oct 13 06:01 bin/\n  drwxr-xr-x  4  501 staff  4096 Dec  2 22:35 conf/\n  drwxr-xr-x  3 root root   4096 Dec  2 15:01 examples/\n  drwxr-xr-x  3 root root   4096 Dec  2 15:01 instances/\n  drwxr-xr-x  3 root root  20480 Dec  2 15:01 lib/\n  -rw-r--r--  1  501 staff 28876 Oct 13 06:01 LICENSE\n  drwxr-xr-x  2  501 staff  4096 Oct 13 06:01 licenses/\n  -rw-r--r--  1  501 staff  5857 Oct 13 06:01 NOTICE\n  -rw-r--r--  1  501 staff  1269 Oct 13 06:01 README\n  \n  ```\n\n  * bin：Pulsar 的命令行工具，例如 pulsar 和 pulsar-admin \n  * conf: Pulsar 的配置文件，包括 broker 配置、zookeeper 配置等等 \n  * examples: Pulsar function 的示例，有java的jar 和yaml配置文件\n  * instances：为Pulsar function 所创建的一些组件\n  * lib ： Pulsar依赖的jar\n  * LICENSE：许可证文件\n  * licenses：一些依赖的许可证文件的目录\n\n  一旦你开始运行 Pulsar，下面的这些目录将会被创建：\n\n  * data ：ZooKeeper 和 BookKeeper 使用的数据存储目录 \n  * instances ：为 Pulsar Function 创建的 Artifact \n  * logs :安装时创建的 log  \n\n* 单机模式启动\n\n  运行`pulsar help` 查看帮助命令\n\n  ```\n  Usage: pulsar <command>\n  where command is one of:\n  \n      broker              Run a broker server\n      bookie              Run a bookie server\n      zookeeper           Run a zookeeper server\n      configuration-store Run a configuration-store server\n      discovery           Run a discovery server\n      proxy               Run a pulsar proxy\n      websocket           Run a web socket proxy server\n      functions-worker    Run a functions worker server\n      sql-worker          Run a sql worker server\n      sql                 Run sql CLI\n      standalone          Run a broker server with local bookies and local zookeeper\n  \n      initialize-cluster-metadata     One-time metadata initialization\n      compact-topic       Run compaction against a topic\n      zookeeper-shell     Open a ZK shell client\n  \n      help                This help message\n  \n  or command is the full name of a class with a defined main() method.\n  \n  Environment variables:\n     PULSAR_LOG_CONF               Log4j configuration file (default /data/soft/pulsar/conf/log4j2.yaml)\n     PULSAR_BROKER_CONF            Configuration file for broker (default: /data/soft/pulsar/conf/broker.conf)\n     PULSAR_BOOKKEEPER_CONF        Configuration file for bookie (default: /data/soft/pulsar/conf/bookkeeper.conf)\n     PULSAR_ZK_CONF                Configuration file for zookeeper (default: /data/soft/pulsar/conf/zookeeper.conf)\n     PULSAR_CONFIGURATION_STORE_CONF         Configuration file for global configuration store (default: /data/soft/pulsar/conf/global_zookeeper.conf)\n     PULSAR_DISCOVERY_CONF         Configuration file for discovery service (default: /data/soft/pulsar/conf/discovery.conf)\n     PULSAR_WEBSOCKET_CONF         Configuration file for websocket proxy (default: /data/soft/pulsar/conf/websocket.conf)\n     PULSAR_PROXY_CONF             Configuration file for Pulsar proxy (default: /data/soft/pulsar/conf/proxy.conf)\n     PULSAR_WORKER_CONF            Configuration file for functions worker (default: /data/soft/pulsar/conf/functions_worker.yml)\n     PULSAR_STANDALONE_CONF        Configuration file for standalone (default: /data/soft/pulsar/conf/standalone.conf)\n     PULSAR_PRESTO_CONF            Configuration directory for Pulsar Presto (default: /data/soft/pulsar/conf/presto)\n     PULSAR_EXTRA_OPTS             Extra options to be passed to the jvm\n     PULSAR_EXTRA_CLASSPATH        Add extra paths to the pulsar classpath\n     PULSAR_PID_DIR                Folder where the pulsar server PID file should be stored\n     PULSAR_STOP_TIMEOUT           Wait time before forcefully kill the pulsar server instance, if the stop is not successful\n  \n  These variable can also be set in conf/pulsar_env.sh\n  \n  ```\n\n  使用standalone  `Run a broker server with local bookies and local zookeeper`\n\n  ```\n  bin/pulsar standalone\n  ```\n\n  报错了\n\n  ```\n  Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000080000000, 2147483648, 0) failed; error='Cannot allocate memory' (errno=12)\n  #\n  # There is insufficient memory for the Java Runtime Environment to continue.\n  # Native memory allocation (mmap) failed to map 2147483648 bytes for committing reserved memory.\n  # An error report file with more information is saved as:\n  # /data/soft/pulsar/hs_err_pid10684.log\n  ```\n\n  ```\n  ...\n  There is insufficient memory for the Java Runtime Environment to continue.\n  ...\n  ```\n\n  你说气人不气人，我的小鸡内存不足了。\n\n* 下载内置连接器\n\n  ```\n  $ wget https://archive.apache.org/dist/pulsar/pulsar-2.2.0/apache-pulsar-io-connectors-2.2.0-bin.tar.gz\n  ```\n\n  下载完成后在 pulsar 目录中，解压缩 io-connectors 软件包并复制连接器，如`connectors` pulsar 目录中所示： \n\n  ```\n  tar xvfz /path/to/apache-pulsar-io-connectors-2.2.0-bin.tar.gz\n  // you will find a directory named `apache-pulsar-io-connectors-2.2.0` in the pulsar directory\n  // then copy the connectors\n  \n  $ cd apache-pulsar-io-connectors-2.2.0/connectors connectors\n  \n  $ ls connectors\n  pulsar-io-aerospike-2.2.0.nar\n  pulsar-io-cassandra-2.2.0.nar\n  pulsar-io-kafka-2.2.0.nar\n  pulsar-io-kinesis-2.2.0.nar\n  pulsar-io-rabbitmq-2.2.0.nar\n  pulsar-io-twitter-2.2.0.nar\n  ...\n  ```\n\n  \n\n### 配置\n\n* BrokerKeeper ,是一个复制的日志存储系统，Pulsar 使用它来持久存储所有消息。\n\n  | 名称                             | 描述                                                         | 默认值                                                   |\n  | -------------------------------- | ------------------------------------------------------------ | -------------------------------------------------------- |\n  | bookiePort                       | bookie 服务器侦听的端口。                                    | 3181                                                     |\n  | allowLoopback                    | Whether the bookie is allowed to use a loopback interface as its primary interface (i.e. the interface used to establish its identity). By default, loopback interfaces are not allowed as the primary interface. Using a loopback interface as the primary interface usually indicates a configuration error. For example, it’s fairly common in some VPS setups to not configure a hostname or to have the hostname resolve to `127.0.0.1`. If this is the case, then all bookies in the cluster will establish their identities as `127.0.0.1:3181` and only one will be able to join the cluster. For VPSs configured like this, you should explicitly set the listening interface. | false                                                    |\n  | listeningInterface               | bookie 侦听的网络接口。如果没有设置，bookie 将监听所有接口。 | eth0                                                     |\n  | journalDirectory                 | The directory where Bookkeeper outputs its write-ahead log (WAL) | data/bookkeeper/journal                                  |\n  | ledgerDirectories                | The directory where Bookkeeper outputs ledger snapshots. This could define multiple directories to store snapshots separated by comma, for example `ledgerDirectories=/tmp/bk1-data,/tmp/bk2-data`. Ideally, ledger dirs and the journal dir are each in a different device, which reduces the contention between random I/O and sequential write. It is possible to run with a single disk, but performance will be significantly lower. | data/bookkeeper/ledgers                                  |\n  | ledgerManagerType                | The type of ledger manager used to manage how ledgers are stored, managed, and garbage collected. See [BookKeeper Internals](http://bookkeeper.apache.org/docs/latest/getting-started/concepts) for more info | hierarchical                                             |\n  | zkLedgersRootPath                | The root ZooKeeper path used to store ledger metadata. This parameter is used by the ZooKeeper-based ledger manager as a root znode to store all ledgers. | /ledgers                                                 |\n  | ledgerStorageClass               | Ledger storage implementation class                          | org.apache.bookkeeper.bookie.storage.ldb.DbLedgerStorage |\n  | entryLogFilePreallocationEnabled | Enable or disable entry logger preallocation                 |                                                          |\n  | logSizeLimit                     | Max file size of the entry logger, in bytes. A new entry log file will be created when the old one reaches the file size limitation. | 2147483648                                               |\n  | minorCompactionThreshold         | Threshold of minor compaction. Entry log files whose remaining size percentage reaches below this threshold will be compacted in a minor compaction. If set to less than zero, the minor compaction is disabled. | 0.2                                                      |\n  | minorCompactionInterval          | Time interval to run minor compaction, in seconds. If set to less than zero, the minor compaction is disabled. | 3600                                                     |\n  | majorCompactionThreshold         | The threshold of major compaction. Entry log files whose remaining size percentage reaches below this threshold will be compacted in a major compaction. Those entry log files whose remaining size percentage is still higher than the threshold will never be compacted. If set to less than zero, the minor compaction is disabled. | 0.5                                                      |\n  | majorCompactionInterval          | The time interval to run major compaction, in seconds. If set to less than zero, the major compaction is disabled. | 86400                                                    |\n  | compactionMaxOutstandingRequests | Sets the maximum number of entries that can be compacted without flushing. When compacting, the entries are written to the entrylog and the new offsets are cached in memory. Once the entrylog is flushed the index is updated with the new offsets. This parameter controls the number of entries added to the entrylog before a flush is forced. A higher value for this parameter means more memory will be used for offsets. Each offset consists of 3 longs. This parameter should not be modified unless you’re fully aware of the consequences. | 100000                                                   |\n  | compactionRate                   | The rate at which compaction will read entries, in adds per second. | 1000                                                     |\n  | isThrottleByBytes                | Throttle compaction by bytes or by entries.                  | false                                                    |\n  | compactionRateByEntries          | The rate at which compaction will read entries, in adds per second. | 1000                                                     |\n  | compactionRateByBytes            | Set the rate at which compaction will readd entries. The unit is bytes added per second. | 1000000                                                  |\n  | journalMaxSizeMB                 | Max file size of journal file, in megabytes. A new journal file will be created when the old one reaches the file size limitation. | 2048                                                     |\n  | journalMaxBackups                | The max number of old journal filse to keep. Keeping a number of old journal files would help data recovery in special cases. | 5                                                        |\n  | journalPreAllocSizeMB            | How space to pre-allocate at a time in the journal.          | 16                                                       |\n  | journalWriteBufferSizeKB         | 用于日志的写缓冲区。                                         | 64                                                       |\n  | journalRemoveFromPageCache       | Whether pages should be removed from the page cache after force write. | true                                                     |\n  | journalAdaptiveGroupWrites       | Whether to group journal force writes, which optimizes group commit for higher throughput. | true                                                     |\n  | journalMaxGroupWaitMSec          | The maximum latency to impose on a journal write to achieve grouping. | 1                                                        |\n  | journalAlignmentSize             | All the journal writes and commits should be aligned to given size | 4096                                                     |\n  | journalBufferedWritesThreshold   | Maximum writes to buffer to achieve grouping                 | 524288                                                   |\n  | journalFlushWhenQueueEmpty       | If we should flush the journal when journal queue is empty   | false                                                    |\n  | numJournalCallbackThreads        |                                                              |                                                          |\n\n   \n\n* pulsar_env.sh\n\n  默认的启动pulsar broker的配置\n\n  ```\n  \n  # default settings for starting pulsar broker\n  \n  # Log4j configuration file\n  # PULSAR_LOG_CONF=\n  \n  # Logs location\n  # PULSAR_LOG_DIR=\n  \n  # Configuration file of settings used in broker server\n  # PULSAR_BROKER_CONF=\n  \n  # Configuration file of settings used in bookie server\n  # PULSAR_BOOKKEEPER_CONF=\n  \n  # Configuration file of settings used in zookeeper server\n  # PULSAR_ZK_CONF=\n  \n  # Configuration file of settings used in global zookeeper server\n  # PULSAR_GLOBAL_ZK_CONF=\n  \n  # Extra options to be passed to the jvm\n  PULSAR_MEM=\" -Xms1g -Xmx1g -XX:MaxDirectMemorySize=1g\"\n  \n  # Garbage collection options GC参数的配置\n  PULSAR_GC=\" -XX:+UseG1GC -XX:MaxGCPauseMillis=10 -XX:+ParallelRefProcEnabled -XX:+UnlockExperimentalVMOptions -XX:+AggressiveOpts -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=32 -XX:ConcGCThreads=32 -XX:G1NewSizePercent=50 -XX:+DisableExplicitGC -XX:-ResizePLAB\"\n  \n  # Extra options to be passed to the jvm\n  PULSAR_EXTRA_OPTS=\"${PULSAR_EXTRA_OPTS} ${PULSAR_MEM} ${PULSAR_GC} -Dio.netty.leakDetectionLevel=disabled -Dio.netty.recycler.maxCapacity.default=1000 -Dio.netty.recycler.linkCapacity=1024\"\n  \n  # Add extra paths to the bookkeeper classpath\n  # PULSAR_EXTRA_CLASSPATH=\n  \n  #Folder where the Bookie server PID file should be stored\n  #PULSAR_PID_DIR=\n  \n  #Wait time before forcefully kill the pulser server instance, if the stop is not successful\n  #PULSAR_STOP_TIMEOUT=\n  \n  ```\n\n* pulsar_tools_env.sh\n\n  ```\n  #!/usr/bin/env bash\n  #\n  # Licensed to the Apache Software Foundation (ASF) under one\n  # or more contributor license agreements.  See the NOTICE file\n  # distributed with this work for additional information\n  # regarding copyright ownership.  The ASF licenses this file\n  # to you under the Apache License, Version 2.0 (the\n  # \"License\"); you may not use this file except in compliance\n  # with the License.  You may obtain a copy of the License at\n  #\n  #   http://www.apache.org/licenses/LICENSE-2.0\n  #\n  # Unless required by applicable law or agreed to in writing,\n  # software distributed under the License is distributed on an\n  # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  # KIND, either express or implied.  See the License for the\n  # specific language governing permissions and limitations\n  # under the License.\n  #\n  \n  # Set JAVA_HOME here to override the environment setting\n  # JAVA_HOME=\n  \n  # default settings for starting pulsar broker\n  \n  # Log4j configuration file\n  # PULSAR_LOG_CONF=\n  \n  # Logs location\n  # PULSAR_LOG_DIR=\n  \n  # Configuration file of settings used in broker server\n  # PULSAR_BROKER_CONF=\n  \n  # Configuration file of settings used in bookie server\n  # PULSAR_BOOKKEEPER_CONF=\n  \n  # Configuration file of settings used in zookeeper server\n  # PULSAR_ZK_CONF=\n  \n  # Configuration file of settings used in global zookeeper server\n  # PULSAR_GLOBAL_ZK_CONF=\n  \n  # Extra options to be passed to the jvm\n  PULSAR_MEM=${PULSAR_MEM:-\"-Xmx256m -XX:MaxDirectMemorySize=256m\"}\n  \n  # Garbage collection options\n  PULSAR_GC=\" -client \"\n  \n  # Extra options to be passed to the jvm\n  PULSAR_EXTRA_OPTS=\"${PULSAR_EXTRA_OPTS} ${PULSAR_MEM} ${PULSAR_GC} -Dio.netty.leakDetectionLevel=disabled\"\n  \n  # Add extra paths to the bookkeeper classpath\n  # PULSAR_EXTRA_CLASSPATH=\n  \n  #Folder where the Bookie server PID file should be stored\n  #PULSAR_PID_DIR=\n  \n  #Wait time before forcefully kill the pulser server instance, if the stop is not successful\n  #PULSAR_STOP_TIMEOUT=\n  ```\n\n* broker.conf 定义broker的一些配置\n\n  ```\n  #\n  # Licensed to the Apache Software Foundation (ASF) under one\n  # or more contributor license agreements.  See the NOTICE file\n  # distributed with this work for additional information\n  # regarding copyright ownership.  The ASF licenses this file\n  # to you under the Apache License, Version 2.0 (the\n  # \"License\"); you may not use this file except in compliance\n  # with the License.  You may obtain a copy of the License at\n  #\n  #   http://www.apache.org/licenses/LICENSE-2.0\n  #\n  # Unless required by applicable law or agreed to in writing,\n  # software distributed under the License is distributed on an\n  # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  # KIND, either express or implied.  See the License for the\n  # specific language governing permissions and limitations\n  # under the License.\n  #\n  \n  ### --- General broker settings --- ###\n  \n  # Zookeeper quorum connection string\n  zookeeperServers=172.17.83.72:2181\n  \n  # Global Zookeeper quorum connection string\n  globalZookeeperServers=172.17.83.72:2181\n  \n  # Broker data port\n  brokerServicePort=6650\n  \n  # Broker data port for TLS\n  brokerServicePortTls=6651\n  \n  # Port to use to server HTTP request\n  webServicePort=8080\n  \n  # Port to use to server HTTPS request\n  webServicePortTls=8443\n  \n  # Hostname or IP address the service binds on, default is 0.0.0.0.\n  bindAddress=0.0.0.0\n  \n  # Hostname or IP address the service advertises to the outside world. If not set, the value of InetAddress.getLocalHost().getHostName() is used.\n  advertisedAddress=172.17.83.72\n  \n  # Name of the cluster to which this broker belongs to\n  clusterName=pulsar-cluster-1\n  \n  # Enable cluster's failure-domain which can distribute brokers into logical region\n  failureDomainsEnabled=false\n  \n  # Zookeeper session timeout in milliseconds\n  zooKeeperSessionTimeoutMillis=30000\n  \n  # Time to wait for broker graceful shutdown. After this time elapses, the process will be killed\n  ##定义优雅关机超时时间\n  brokerShutdownTimeoutMs=3000\n  \n  # Enable backlog quota check. Enforces action on topic when the quota is reached\n  backlogQuotaCheckEnabled=true\n  \n  # How often to check for topics that have reached the quota\n  backlogQuotaCheckIntervalInSeconds=60\n  \n  # Default per-topic backlog quota limit\n  backlogQuotaDefaultLimitGB=10\n  \n  # Enable the deletion of inactive topics\n  brokerDeleteInactiveTopicsEnabled=true\n  \n  # How often to check for inactive topics\n  brokerDeleteInactiveTopicsFrequencySeconds=60\n  \n  # How frequently to proactively check and purge expired messages\n  messageExpiryCheckIntervalInMinutes=5\n  \n  # How long to delay rewinding cursor and dispatching messages when active consumer is changed\n  activeConsumerFailoverDelayTimeMillis=1000\n  \n  # Set the default behavior for message deduplication in the broker\n  # This can be overridden per-namespace. If enabled, broker will reject\n  # messages that were already stored in the topic\n  brokerDeduplicationEnabled=false\n  \n  # Maximum number of producer information that it's going to be\n  # persisted for deduplication purposes\n  brokerDeduplicationMaxNumberOfProducers=10000\n  \n  # Number of entries after which a dedup info snapshot is taken.\n  # A bigger interval will lead to less snapshots being taken though it would\n  # increase the topic recovery time, when the entries published after the\n  # snapshot need to be replayed\n  brokerDeduplicationEntriesInterval=1000\n  \n  # Time of inactivity after which the broker will discard the deduplication information\n  # relative to a disconnected producer. Default is 6 hours.\n  brokerDeduplicationProducerInactivityTimeoutMinutes=360\n  \n  # When a namespace is created without specifying the number of bundle, this\n  # value will be used as the default\n  defaultNumberOfNamespaceBundles=3\n  \n  # Enable check for minimum allowed client library version\n  clientLibraryVersionCheckEnabled=false\n  \n  # Path for the file used to determine the rotation status for the broker when responding\n  # to service discovery health checks\n  statusFilePath=\n  \n  # If true, (and ModularLoadManagerImpl is being used), the load manager will attempt to\n  # use only brokers running the latest software version (to minimize impact to bundles)\n  preferLaterVersions=false\n  \n  # Max number of unacknowledged messages allowed to receive messages by a consumer on a shared subscription. Broker will stop sending\n  # messages to consumer once, this limit reaches until consumer starts acknowledging messages back.\n  # Using a value of 0, is disabling unackeMessage limit check and consumer can receive messages without any restriction\n  maxUnackedMessagesPerConsumer=50000\n  \n  # Max number of unacknowledged messages allowed per shared subscription. Broker will stop dispatching messages to\n  # all consumers of the subscription once this limit reaches until consumer starts acknowledging messages back and\n  # unack count reaches to limit/2. Using a value of 0, is disabling unackedMessage-limit\n  # check and dispatcher can dispatch messages without any restriction\n  maxUnackedMessagesPerSubscription=200000\n  \n  # Max number of unacknowledged messages allowed per broker. Once this limit reaches, broker will stop dispatching\n  # messages to all shared subscription which has higher number of unack messages until subscriptions start\n  # acknowledging messages back and unack count reaches to limit/2. Using a value of 0, is disabling\n  # unackedMessage-limit check and broker doesn't block dispatchers\n  maxUnackedMessagesPerBroker=0\n  \n  # Once broker reaches maxUnackedMessagesPerBroker limit, it blocks subscriptions which has higher unacked messages\n  # than this percentage limit and subscription will not receive any new messages until that subscription acks back\n  # limit/2 messages\n  maxUnackedMessagesPerSubscriptionOnBrokerBlocked=0.16\n  \n  # Default messages per second dispatch throttling-limit for every topic. Using a value of 0, is disabling default\n  # message dispatch-throttling\n  dispatchThrottlingRatePerTopicInMsg=0\n  \n  # Default bytes per second dispatch throttling-limit for every topic. Using a value of 0, is disabling\n  # default message-byte dispatch-throttling\n  dispatchThrottlingRatePerTopicInByte=0\n  \n  # Default dispatch-throttling is disabled for consumers which already caught-up with published messages and\n  # don't have backlog. This enables dispatch-throttling for non-backlog consumers as well.\n  dispatchThrottlingOnNonBacklogConsumerEnabled=false\n  \n  # Max number of concurrent lookup request broker allows to throttle heavy incoming lookup traffic\n  maxConcurrentLookupRequest=10000\n  \n  # Max number of concurrent topic loading request broker allows to control number of zk-operations\n  maxConcurrentTopicLoadRequest=5000\n  \n  # Max concurrent non-persistent message can be processed per connection\n  maxConcurrentNonPersistentMessagePerConnection=1000\n  \n  # Number of worker threads to serve non-persistent topic\n  numWorkerThreadsForNonPersistentTopic=8\n  \n  # Enable broker to load persistent topics\n  enablePersistentTopics=true\n  \n  # Enable broker to load non-persistent topics\n  enableNonPersistentTopics=true\n  \n  # Enable to run bookie along with broker\n  enableRunBookieTogether=false\n  \n  # Enable to run bookie autorecovery along with broker\n  enableRunBookieAutoRecoveryTogether=false\n  \n  ### --- Authentication --- ###\n  # Role names that are treated as \"proxy roles\". If the broker sees a request with\n  #role as proxyRoles - it will demand to see a valid original principal.\n  proxyRoles=\n  \n  # If this flag is set then the broker authenticates the original Auth data\n  # else it just accepts the originalPrincipal and authorizes it (if required).  \n  authenticateOriginalAuthData=false\n  \n  # Enable TLS\n  tlsEnabled=true\n  \n  # Path for the TLS certificate file\n  tlsCertificateFilePath=/search/data/pulsar/cert/broker/broker.cert.pem\n  \n  # Path for the TLS private key file\n  tlsKeyFilePath=/search/data/pulsar/cert/broker/broker.key-pk8.pem\n  \n  # Path for the trusted TLS certificate file\n  tlsTrustCertsFilePath=/search/data/pulsar/cert/ca/certs/ca.cert.pem\n  \n  # Accept untrusted TLS certificate from client\n  tlsAllowInsecureConnection=false\n  \n  ### --- Authentication --- ###\n  \n  # Enable authentication\n  authenticationEnabled=true\n  \n  # Autentication provider name list, which is comma separated list of class names\n  authenticationProviders=org.apache.pulsar.broker.authentication.AuthenticationProviderTls\n  \n  # Enforce authorization\n  authorizationEnabled=true\n  \n  # Authorization provider fully qualified class-name\n  authorizationProvider=org.apache.pulsar.broker.authorization.PulsarAuthorizationProvider\n  \n  # Allow wildcard matching in authorization\n  # (wildcard matching only applicable if wildcard-char:\n  # * presents at first or last position eg: *.pulsar.service, pulsar.service.*)\n  authorizationAllowWildcardsMatching=false\n  \n  # Role names that are treated as \"super-user\", meaning they will be able to do all admin\n  # operations and publish/consume from all topics\n  superUserRoles=admin\n  \n  # Authentication settings of the broker itself. Used when the broker connects to other brokers,\n  # either in same or other clusters\n  brokerClientAuthenticationPlugin=\n  brokerClientAuthenticationParameters=\n  \n  # Supported Athenz provider domain names(comma separated) for authentication\n  athenzDomainNames=\n  \n  # When this parameter is not empty, unauthenticated users perform as anonymousUserRole\n  anonymousUserRole=\n  \n  ### --- BookKeeper Client --- ###\n  \n  # Authentication plugin to use when connecting to bookies\n  bookkeeperClientAuthenticationPlugin=\n  \n  # BookKeeper auth plugin implementatation specifics parameters name and values\n  bookkeeperClientAuthenticationParametersName=\n  bookkeeperClientAuthenticationParameters=\n  \n  # Timeout for BK add / read operations\n  bookkeeperClientTimeoutInSeconds=30\n  \n  # Speculative reads are initiated if a read request doesn't complete within a certain time\n  # Using a value of 0, is disabling the speculative reads\n  bookkeeperClientSpeculativeReadTimeoutInMillis=0\n  \n  # Enable bookies health check. Bookies that have more than the configured number of failure within\n  # the interval will be quarantined for some time. During this period, new ledgers won't be created\n  # on these bookies\n  bookkeeperClientHealthCheckEnabled=true\n  bookkeeperClientHealthCheckIntervalSeconds=60\n  bookkeeperClientHealthCheckErrorThresholdPerInterval=5\n  bookkeeperClientHealthCheckQuarantineTimeInSeconds=1800\n  \n  # Enable rack-aware bookie selection policy. BK will chose bookies from different racks when\n  # forming a new bookie ensemble\n  bookkeeperClientRackawarePolicyEnabled=true\n  \n  # Enable bookie isolation by specifying a list of bookie groups to choose from. Any bookie\n  # outside the specified groups will not be used by the broker\n  bookkeeperClientIsolationGroups=\n  \n  ### --- Managed Ledger --- ###\n  \n  # Number of bookies to use when creating a ledger\n  managedLedgerDefaultEnsembleSize=1\n  \n  # Number of copies to store for each message\n  managedLedgerDefaultWriteQuorum=1\n  \n  # Number of guaranteed copies (acks to wait before write is complete)\n  managedLedgerDefaultAckQuorum=1\n  \n  # Amount of memory to use for caching data payload in managed ledger. This memory\n  # is allocated from JVM direct memory and it's shared across all the topics\n  # running  in the same broker\n  managedLedgerCacheSizeMB=1024\n  \n  # Threshold to which bring down the cache level when eviction is triggered\n  managedLedgerCacheEvictionWatermark=0.9\n  \n  # Rate limit the amount of writes per second generated by consumer acking the messages\n  managedLedgerDefaultMarkDeleteRateLimit=1.0\n  \n  # Max number of entries to append to a ledger before triggering a rollover\n  # A ledger rollover is triggered on these conditions\n  #  * Either the max rollover time has been reached\n  #  * or max entries have been written to the ledged and at least min-time\n  #    has passed\n  managedLedgerMaxEntriesPerLedger=50000\n  \n  # Minimum time between ledger rollover for a topic\n  managedLedgerMinLedgerRolloverTimeMinutes=10\n  \n  # Maximum time before forcing a ledger rollover for a topic\n  managedLedgerMaxLedgerRolloverTimeMinutes=240\n  \n  # Max number of entries to append to a cursor ledger\n  managedLedgerCursorMaxEntriesPerLedger=50000\n  \n  # Max time before triggering a rollover on a cursor ledger\n  managedLedgerCursorRolloverTimeInSeconds=14400\n  \n  # Max number of \"acknowledgment holes\" that are going to be persistently stored.\n  # When acknowledging out of order, a consumer will leave holes that are supposed\n  # to be quickly filled by acking all the messages. The information of which\n  # messages are acknowledged is persisted by compressing in \"ranges\" of messages\n  # that were acknowledged. After the max number of ranges is reached, the information\n  # will only be tracked in memory and messages will be redelivered in case of\n  # crashes.\n  managedLedgerMaxUnackedRangesToPersist=10000\n  \n  # Max number of \"acknowledgment holes\" that can be stored in Zookeeper. If number of unack message range is higher\n  # than this limit then broker will persist unacked ranges into bookkeeper to avoid additional data overhead into\n  # zookeeper.\n  managedLedgerMaxUnackedRangesToPersistInZooKeeper=1000\n  \n  # Skip reading non-recoverable/unreadable data-ledger under managed-ledger's list. It helps when data-ledgers gets\n  # corrupted at bookkeeper and managed-cursor is stuck at that ledger.\n  autoSkipNonRecoverableData=false\n  \n  ### --- Load balancer --- ###\n  \n  # Enable load balancer\n  loadBalancerEnabled=true\n  \n  # Percentage of change to trigger load report update\n  loadBalancerReportUpdateThresholdPercentage=10\n  \n  # maximum interval to update load report\n  loadBalancerReportUpdateMaxIntervalMinutes=15\n  \n  # Frequency of report to collect\n  loadBalancerHostUsageCheckIntervalMinutes=1\n  \n  # Load shedding interval. Broker periodically checks whether some traffic should be offload from\n  # some over-loaded broker to other under-loaded brokers\n  loadBalancerSheddingIntervalMinutes=5\n  \n  # Prevent the same topics to be shed and moved to other broker more that once within this timeframe\n  loadBalancerSheddingGracePeriodMinutes=30\n  \n  # Usage threshold to allocate max number of topics to broker\n  loadBalancerBrokerMaxTopics=50000\n  \n  # Interval to flush dynamic resource quota to ZooKeeper\n  loadBalancerResourceQuotaUpdateIntervalMinutes=15\n  \n  # enable/disable namespace bundle auto split\n  loadBalancerAutoBundleSplitEnabled=true\n  \n  # enable/disable automatic unloading of split bundles\n  loadBalancerAutoUnloadSplitBundlesEnabled=true\n  \n  # maximum topics in a bundle, otherwise bundle split will be triggered\n  loadBalancerNamespaceBundleMaxTopics=1000\n  \n  # maximum sessions (producers + consumers) in a bundle, otherwise bundle split will be triggered\n  loadBalancerNamespaceBundleMaxSessions=1000\n  \n  # maximum msgRate (in + out) in a bundle, otherwise bundle split will be triggered\n  loadBalancerNamespaceBundleMaxMsgRate=30000\n  \n  # maximum bandwidth (in + out) in a bundle, otherwise bundle split will be triggered\n  loadBalancerNamespaceBundleMaxBandwidthMbytes=100\n  \n  # maximum number of bundles in a namespace\n  loadBalancerNamespaceMaximumBundles=128\n  \n  # Override the auto-detection of the network interfaces max speed. \n  # This option is useful in some environments (eg: EC2 VMs) where the max speed\n  # reported by Linux is not reflecting the real bandwidth available to the broker.\n  # Since the network usage is employed by the load manager to decide when a broker\n  # is overloaded, it is important to make sure the info is correct or override it \n  # with the right value here. The configured value can be a double (eg: 0.8) and that\n  # can be used to trigger load-shedding even before hitting on NIC limits.\n  loadBalancerOverrideBrokerNicSpeedGbps=\n  \n  # Name of load manager to use\n  loadManagerClassName=org.apache.pulsar.broker.loadbalance.impl.ModularLoadManagerImpl\n  \n  ### --- Replication --- ###\n  \n  # Enable replication metrics\n  replicationMetricsEnabled=true\n  \n  # Max number of connections to open for each broker in a remote cluster\n  # More connections host-to-host lead to better throughput over high-latency\n  # links.\n  replicationConnectionsPerBroker=16\n  \n  # Replicator producer queue size\n  replicationProducerQueueSize=1000\n  \n  # Replicator prefix used for replicator producer name and cursor name\n  replicatorPrefix=pulsar.repl\n  \n  # Enable TLS when talking with other clusters to replicate messages\n  replicationTlsEnabled=false\n  \n  # Default message retention time\n  defaultRetentionTimeInMinutes=0\n  \n  # Default retention size\n  defaultRetentionSizeInMB=0\n  \n  # How often to check whether the connections are still alive\n  keepAliveIntervalSeconds=30\n  \n  # How often broker checks for inactive topics to be deleted (topics with no subscriptions and no one connected)\n  brokerServicePurgeInactiveFrequencyInSeconds=60\n  \n  ### --- WebSocket --- ###\n  \n  # Enable the WebSocket API service in broker\n  webSocketServiceEnabled=false\n  \n  # Number of IO threads in Pulsar Client used in WebSocket proxy\n  webSocketNumIoThreads=8\n  \n  # Number of connections per Broker in Pulsar Client used in WebSocket proxy\n  webSocketConnectionsPerBroker=8\n  \n  \n  ### --- Metrics --- ###\n  \n  # Enable topic level metrics\n  exposeTopicLevelMetricsInPrometheus=true\n  ```\n\n* client.conf 定义客户端的一些配置\n\n  ```\n  # Configuration for pulsar-client and pulsar-admin CLI tools\n  \n  # URL for Pulsar REST API (for admin operations)\n  # For TLS:\n  # webServiceUrl=https://localhost:8443/\n  webServiceUrl=http://localhost:8080/\n  \n  # URL for Pulsar Binary Protocol (for produce and consume operations)\n  # For TLS:\n  # brokerServiceUrl=pulsar+ssl://localhost:6651/\n  brokerServiceUrl=pulsar://localhost:6650/\n  \n  # Authentication plugin to authenticate with servers\n  # e.g. for TLS\n  # authPlugin=org.apache.pulsar.client.impl.auth.AuthenticationTls\n  authPlugin=\n  \n  # Parameters passed to authentication plugin.\n  # A comma separated list of key:value pairs.\n  # Keys depend on the configured authPlugin.\n  # e.g. for TLS\n  # authParams=tlsCertFile:/path/to/client-cert.pem,tlsKeyFile:/path/to/client-key.pem\n  authParams=\n  \n  # Allow TLS connections to servers whose certificate cannot be\n  # be verified to have been signed by a trusted certificate\n  # authority.\n  tlsAllowInsecureConnection=false\n  \n  # Whether server hostname must match the common name of the certificate\n  # the server is using.\n  tlsEnableHostnameVerification=false\n  \n  # Path for the trusted TLS certificate file.\n  # This cert is used to verify that any cert presented by a server\n  # is signed by a certificate authority. If this verification\n  # fails, then the cert is untrusted and the connection is dropped.\n  tlsTrustCertsFilePath=\n  \n  ```\n\n  \n\n\n\n\n\n","slug":"Pulsar安装与配置","published":1,"updated":"2022-09-03T07:30:55.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz8450018twfayvuhuoc3","content":"<p>Pulsar的安装与配置<a id=\"more\"></a></p>\n<h3 id=\"环境概述\"><a href=\"#环境概述\" class=\"headerlink\" title=\"环境概述\"></a>环境概述</h3><ul>\n<li>Linux环境Ubuntu16.04</li>\n<li>java 1.8</li>\n<li>zookeeper 3.4.13</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li><p>下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.apache.org/dyn/mirrors/mirrors.cgi?action=download&amp;filename=pulsar/pulsar-2.2.0/apache-pulsar-2.2.0-bin.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf  apache-pulsar-2.2.0-bin.tar.gz -C pulsar</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>目录介绍</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x  8 root root   4096 Dec  2 15:01 ./</span><br><span class=\"line\">drwxr-xr-x 15 root root   4096 Dec  2 15:33 ../</span><br><span class=\"line\">drwxr-xr-x  3  501 staff  4096 Oct 13 06:01 bin/</span><br><span class=\"line\">drwxr-xr-x  4  501 staff  4096 Dec  2 22:35 conf/</span><br><span class=\"line\">drwxr-xr-x  3 root root   4096 Dec  2 15:01 examples/</span><br><span class=\"line\">drwxr-xr-x  3 root root   4096 Dec  2 15:01 instances/</span><br><span class=\"line\">drwxr-xr-x  3 root root  20480 Dec  2 15:01 lib/</span><br><span class=\"line\">-rw-r--r--  1  501 staff 28876 Oct 13 06:01 LICENSE</span><br><span class=\"line\">drwxr-xr-x  2  501 staff  4096 Oct 13 06:01 licenses/</span><br><span class=\"line\">-rw-r--r--  1  501 staff  5857 Oct 13 06:01 NOTICE</span><br><span class=\"line\">-rw-r--r--  1  501 staff  1269 Oct 13 06:01 README</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>bin：Pulsar 的命令行工具，例如 pulsar 和 pulsar-admin </li>\n<li>conf: Pulsar 的配置文件，包括 broker 配置、zookeeper 配置等等 </li>\n<li>examples: Pulsar function 的示例，有java的jar 和yaml配置文件</li>\n<li>instances：为Pulsar function 所创建的一些组件</li>\n<li>lib ： Pulsar依赖的jar</li>\n<li>LICENSE：许可证文件</li>\n<li>licenses：一些依赖的许可证文件的目录</li>\n</ul>\n<p>一旦你开始运行 Pulsar，下面的这些目录将会被创建：</p>\n<ul>\n<li>data ：ZooKeeper 和 BookKeeper 使用的数据存储目录 </li>\n<li>instances ：为 Pulsar Function 创建的 Artifact </li>\n<li>logs :安装时创建的 log  </li>\n</ul>\n</li>\n<li><p>单机模式启动</p>\n<p>运行<code>pulsar help</code> 查看帮助命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: pulsar &lt;command&gt;</span><br><span class=\"line\">where command is one of:</span><br><span class=\"line\"></span><br><span class=\"line\">    broker              Run a broker server</span><br><span class=\"line\">    bookie              Run a bookie server</span><br><span class=\"line\">    zookeeper           Run a zookeeper server</span><br><span class=\"line\">    configuration-store Run a configuration-store server</span><br><span class=\"line\">    discovery           Run a discovery server</span><br><span class=\"line\">    proxy               Run a pulsar proxy</span><br><span class=\"line\">    websocket           Run a web socket proxy server</span><br><span class=\"line\">    functions-worker    Run a functions worker server</span><br><span class=\"line\">    sql-worker          Run a sql worker server</span><br><span class=\"line\">    sql                 Run sql CLI</span><br><span class=\"line\">    standalone          Run a broker server with local bookies and local zookeeper</span><br><span class=\"line\"></span><br><span class=\"line\">    initialize-cluster-metadata     One-time metadata initialization</span><br><span class=\"line\">    compact-topic       Run compaction against a topic</span><br><span class=\"line\">    zookeeper-shell     Open a ZK shell client</span><br><span class=\"line\"></span><br><span class=\"line\">    help                This help message</span><br><span class=\"line\"></span><br><span class=\"line\">or command is the full name of a class with a defined main() method.</span><br><span class=\"line\"></span><br><span class=\"line\">Environment variables:</span><br><span class=\"line\">   PULSAR_LOG_CONF               Log4j configuration file (default /data/soft/pulsar/conf/log4j2.yaml)</span><br><span class=\"line\">   PULSAR_BROKER_CONF            Configuration file for broker (default: /data/soft/pulsar/conf/broker.conf)</span><br><span class=\"line\">   PULSAR_BOOKKEEPER_CONF        Configuration file for bookie (default: /data/soft/pulsar/conf/bookkeeper.conf)</span><br><span class=\"line\">   PULSAR_ZK_CONF                Configuration file for zookeeper (default: /data/soft/pulsar/conf/zookeeper.conf)</span><br><span class=\"line\">   PULSAR_CONFIGURATION_STORE_CONF         Configuration file for global configuration store (default: /data/soft/pulsar/conf/global_zookeeper.conf)</span><br><span class=\"line\">   PULSAR_DISCOVERY_CONF         Configuration file for discovery service (default: /data/soft/pulsar/conf/discovery.conf)</span><br><span class=\"line\">   PULSAR_WEBSOCKET_CONF         Configuration file for websocket proxy (default: /data/soft/pulsar/conf/websocket.conf)</span><br><span class=\"line\">   PULSAR_PROXY_CONF             Configuration file for Pulsar proxy (default: /data/soft/pulsar/conf/proxy.conf)</span><br><span class=\"line\">   PULSAR_WORKER_CONF            Configuration file for functions worker (default: /data/soft/pulsar/conf/functions_worker.yml)</span><br><span class=\"line\">   PULSAR_STANDALONE_CONF        Configuration file for standalone (default: /data/soft/pulsar/conf/standalone.conf)</span><br><span class=\"line\">   PULSAR_PRESTO_CONF            Configuration directory for Pulsar Presto (default: /data/soft/pulsar/conf/presto)</span><br><span class=\"line\">   PULSAR_EXTRA_OPTS             Extra options to be passed to the jvm</span><br><span class=\"line\">   PULSAR_EXTRA_CLASSPATH        Add extra paths to the pulsar classpath</span><br><span class=\"line\">   PULSAR_PID_DIR                Folder where the pulsar server PID file should be stored</span><br><span class=\"line\">   PULSAR_STOP_TIMEOUT           Wait time before forcefully kill the pulsar server instance, if the stop is not successful</span><br><span class=\"line\"></span><br><span class=\"line\">These variable can also be set in conf/pulsar_env.sh</span><br></pre></td></tr></table></figure>\n\n<p>使用standalone  <code>Run a broker server with local bookies and local zookeeper</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/pulsar standalone</span><br></pre></td></tr></table></figure>\n\n<p>报错了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000080000000, 2147483648, 0) failed; error=&apos;Cannot allocate memory&apos; (errno=12)</span><br><span class=\"line\">#</span><br><span class=\"line\"># There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class=\"line\"># Native memory allocation (mmap) failed to map 2147483648 bytes for committing reserved memory.</span><br><span class=\"line\"># An error report file with more information is saved as:</span><br><span class=\"line\"># /data/soft/pulsar/hs_err_pid10684.log</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>你说气人不气人，我的小鸡内存不足了。</p>\n</li>\n<li><p>下载内置连接器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://archive.apache.org/dist/pulsar/pulsar-2.2.0/apache-pulsar-io-connectors-2.2.0-bin.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>下载完成后在 pulsar 目录中，解压缩 io-connectors 软件包并复制连接器，如<code>connectors</code> pulsar 目录中所示： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvfz /path/to/apache-pulsar-io-connectors-2.2.0-bin.tar.gz</span><br><span class=\"line\">// you will find a directory named `apache-pulsar-io-connectors-2.2.0` in the pulsar directory</span><br><span class=\"line\">// then copy the connectors</span><br><span class=\"line\"></span><br><span class=\"line\">$ cd apache-pulsar-io-connectors-2.2.0/connectors connectors</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls connectors</span><br><span class=\"line\">pulsar-io-aerospike-2.2.0.nar</span><br><span class=\"line\">pulsar-io-cassandra-2.2.0.nar</span><br><span class=\"line\">pulsar-io-kafka-2.2.0.nar</span><br><span class=\"line\">pulsar-io-kinesis-2.2.0.nar</span><br><span class=\"line\">pulsar-io-rabbitmq-2.2.0.nar</span><br><span class=\"line\">pulsar-io-twitter-2.2.0.nar</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><ul>\n<li><p>BrokerKeeper ,是一个复制的日志存储系统，Pulsar 使用它来持久存储所有消息。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bookiePort</td>\n<td>bookie 服务器侦听的端口。</td>\n<td>3181</td>\n</tr>\n<tr>\n<td>allowLoopback</td>\n<td>Whether the bookie is allowed to use a loopback interface as its primary interface (i.e. the interface used to establish its identity). By default, loopback interfaces are not allowed as the primary interface. Using a loopback interface as the primary interface usually indicates a configuration error. For example, it’s fairly common in some VPS setups to not configure a hostname or to have the hostname resolve to <code>127.0.0.1</code>. If this is the case, then all bookies in the cluster will establish their identities as <code>127.0.0.1:3181</code> and only one will be able to join the cluster. For VPSs configured like this, you should explicitly set the listening interface.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>listeningInterface</td>\n<td>bookie 侦听的网络接口。如果没有设置，bookie 将监听所有接口。</td>\n<td>eth0</td>\n</tr>\n<tr>\n<td>journalDirectory</td>\n<td>The directory where Bookkeeper outputs its write-ahead log (WAL)</td>\n<td>data/bookkeeper/journal</td>\n</tr>\n<tr>\n<td>ledgerDirectories</td>\n<td>The directory where Bookkeeper outputs ledger snapshots. This could define multiple directories to store snapshots separated by comma, for example <code>ledgerDirectories=/tmp/bk1-data,/tmp/bk2-data</code>. Ideally, ledger dirs and the journal dir are each in a different device, which reduces the contention between random I/O and sequential write. It is possible to run with a single disk, but performance will be significantly lower.</td>\n<td>data/bookkeeper/ledgers</td>\n</tr>\n<tr>\n<td>ledgerManagerType</td>\n<td>The type of ledger manager used to manage how ledgers are stored, managed, and garbage collected. See <a href=\"http://bookkeeper.apache.org/docs/latest/getting-started/concepts\" target=\"_blank\" rel=\"noopener\">BookKeeper Internals</a> for more info</td>\n<td>hierarchical</td>\n</tr>\n<tr>\n<td>zkLedgersRootPath</td>\n<td>The root ZooKeeper path used to store ledger metadata. This parameter is used by the ZooKeeper-based ledger manager as a root znode to store all ledgers.</td>\n<td>/ledgers</td>\n</tr>\n<tr>\n<td>ledgerStorageClass</td>\n<td>Ledger storage implementation class</td>\n<td>org.apache.bookkeeper.bookie.storage.ldb.DbLedgerStorage</td>\n</tr>\n<tr>\n<td>entryLogFilePreallocationEnabled</td>\n<td>Enable or disable entry logger preallocation</td>\n<td></td>\n</tr>\n<tr>\n<td>logSizeLimit</td>\n<td>Max file size of the entry logger, in bytes. A new entry log file will be created when the old one reaches the file size limitation.</td>\n<td>2147483648</td>\n</tr>\n<tr>\n<td>minorCompactionThreshold</td>\n<td>Threshold of minor compaction. Entry log files whose remaining size percentage reaches below this threshold will be compacted in a minor compaction. If set to less than zero, the minor compaction is disabled.</td>\n<td>0.2</td>\n</tr>\n<tr>\n<td>minorCompactionInterval</td>\n<td>Time interval to run minor compaction, in seconds. If set to less than zero, the minor compaction is disabled.</td>\n<td>3600</td>\n</tr>\n<tr>\n<td>majorCompactionThreshold</td>\n<td>The threshold of major compaction. Entry log files whose remaining size percentage reaches below this threshold will be compacted in a major compaction. Those entry log files whose remaining size percentage is still higher than the threshold will never be compacted. If set to less than zero, the minor compaction is disabled.</td>\n<td>0.5</td>\n</tr>\n<tr>\n<td>majorCompactionInterval</td>\n<td>The time interval to run major compaction, in seconds. If set to less than zero, the major compaction is disabled.</td>\n<td>86400</td>\n</tr>\n<tr>\n<td>compactionMaxOutstandingRequests</td>\n<td>Sets the maximum number of entries that can be compacted without flushing. When compacting, the entries are written to the entrylog and the new offsets are cached in memory. Once the entrylog is flushed the index is updated with the new offsets. This parameter controls the number of entries added to the entrylog before a flush is forced. A higher value for this parameter means more memory will be used for offsets. Each offset consists of 3 longs. This parameter should not be modified unless you’re fully aware of the consequences.</td>\n<td>100000</td>\n</tr>\n<tr>\n<td>compactionRate</td>\n<td>The rate at which compaction will read entries, in adds per second.</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>isThrottleByBytes</td>\n<td>Throttle compaction by bytes or by entries.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>compactionRateByEntries</td>\n<td>The rate at which compaction will read entries, in adds per second.</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>compactionRateByBytes</td>\n<td>Set the rate at which compaction will readd entries. The unit is bytes added per second.</td>\n<td>1000000</td>\n</tr>\n<tr>\n<td>journalMaxSizeMB</td>\n<td>Max file size of journal file, in megabytes. A new journal file will be created when the old one reaches the file size limitation.</td>\n<td>2048</td>\n</tr>\n<tr>\n<td>journalMaxBackups</td>\n<td>The max number of old journal filse to keep. Keeping a number of old journal files would help data recovery in special cases.</td>\n<td>5</td>\n</tr>\n<tr>\n<td>journalPreAllocSizeMB</td>\n<td>How space to pre-allocate at a time in the journal.</td>\n<td>16</td>\n</tr>\n<tr>\n<td>journalWriteBufferSizeKB</td>\n<td>用于日志的写缓冲区。</td>\n<td>64</td>\n</tr>\n<tr>\n<td>journalRemoveFromPageCache</td>\n<td>Whether pages should be removed from the page cache after force write.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>journalAdaptiveGroupWrites</td>\n<td>Whether to group journal force writes, which optimizes group commit for higher throughput.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>journalMaxGroupWaitMSec</td>\n<td>The maximum latency to impose on a journal write to achieve grouping.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>journalAlignmentSize</td>\n<td>All the journal writes and commits should be aligned to given size</td>\n<td>4096</td>\n</tr>\n<tr>\n<td>journalBufferedWritesThreshold</td>\n<td>Maximum writes to buffer to achieve grouping</td>\n<td>524288</td>\n</tr>\n<tr>\n<td>journalFlushWhenQueueEmpty</td>\n<td>If we should flush the journal when journal queue is empty</td>\n<td>false</td>\n</tr>\n<tr>\n<td>numJournalCallbackThreads</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<ul>\n<li><p>pulsar_env.sh</p>\n<p>默认的启动pulsar broker的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># default settings for starting pulsar broker</span><br><span class=\"line\"></span><br><span class=\"line\"># Log4j configuration file</span><br><span class=\"line\"># PULSAR_LOG_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Logs location</span><br><span class=\"line\"># PULSAR_LOG_DIR=</span><br><span class=\"line\"></span><br><span class=\"line\"># Configuration file of settings used in broker server</span><br><span class=\"line\"># PULSAR_BROKER_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Configuration file of settings used in bookie server</span><br><span class=\"line\"># PULSAR_BOOKKEEPER_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Configuration file of settings used in zookeeper server</span><br><span class=\"line\"># PULSAR_ZK_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Configuration file of settings used in global zookeeper server</span><br><span class=\"line\"># PULSAR_GLOBAL_ZK_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Extra options to be passed to the jvm</span><br><span class=\"line\">PULSAR_MEM=&quot; -Xms1g -Xmx1g -XX:MaxDirectMemorySize=1g&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Garbage collection options GC参数的配置</span><br><span class=\"line\">PULSAR_GC=&quot; -XX:+UseG1GC -XX:MaxGCPauseMillis=10 -XX:+ParallelRefProcEnabled -XX:+UnlockExperimentalVMOptions -XX:+AggressiveOpts -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=32 -XX:ConcGCThreads=32 -XX:G1NewSizePercent=50 -XX:+DisableExplicitGC -XX:-ResizePLAB&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Extra options to be passed to the jvm</span><br><span class=\"line\">PULSAR_EXTRA_OPTS=&quot;$&#123;PULSAR_EXTRA_OPTS&#125; $&#123;PULSAR_MEM&#125; $&#123;PULSAR_GC&#125; -Dio.netty.leakDetectionLevel=disabled -Dio.netty.recycler.maxCapacity.default=1000 -Dio.netty.recycler.linkCapacity=1024&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Add extra paths to the bookkeeper classpath</span><br><span class=\"line\"># PULSAR_EXTRA_CLASSPATH=</span><br><span class=\"line\"></span><br><span class=\"line\">#Folder where the Bookie server PID file should be stored</span><br><span class=\"line\">#PULSAR_PID_DIR=</span><br><span class=\"line\"></span><br><span class=\"line\">#Wait time before forcefully kill the pulser server instance, if the stop is not successful</span><br><span class=\"line\">#PULSAR_STOP_TIMEOUT=</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>pulsar_tools_env.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env bash</span><br><span class=\"line\">#</span><br><span class=\"line\"># Licensed to the Apache Software Foundation (ASF) under one</span><br><span class=\"line\"># or more contributor license agreements.  See the NOTICE file</span><br><span class=\"line\"># distributed with this work for additional information</span><br><span class=\"line\"># regarding copyright ownership.  The ASF licenses this file</span><br><span class=\"line\"># to you under the Apache License, Version 2.0 (the</span><br><span class=\"line\"># &quot;License&quot;); you may not use this file except in compliance</span><br><span class=\"line\"># with the License.  You may obtain a copy of the License at</span><br><span class=\"line\">#</span><br><span class=\"line\">#   http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\">#</span><br><span class=\"line\"># Unless required by applicable law or agreed to in writing,</span><br><span class=\"line\"># software distributed under the License is distributed on an</span><br><span class=\"line\"># &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span><br><span class=\"line\"># KIND, either express or implied.  See the License for the</span><br><span class=\"line\"># specific language governing permissions and limitations</span><br><span class=\"line\"># under the License.</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\"># Set JAVA_HOME here to override the environment setting</span><br><span class=\"line\"># JAVA_HOME=</span><br><span class=\"line\"></span><br><span class=\"line\"># default settings for starting pulsar broker</span><br><span class=\"line\"></span><br><span class=\"line\"># Log4j configuration file</span><br><span class=\"line\"># PULSAR_LOG_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Logs location</span><br><span class=\"line\"># PULSAR_LOG_DIR=</span><br><span class=\"line\"></span><br><span class=\"line\"># Configuration file of settings used in broker server</span><br><span class=\"line\"># PULSAR_BROKER_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Configuration file of settings used in bookie server</span><br><span class=\"line\"># PULSAR_BOOKKEEPER_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Configuration file of settings used in zookeeper server</span><br><span class=\"line\"># PULSAR_ZK_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Configuration file of settings used in global zookeeper server</span><br><span class=\"line\"># PULSAR_GLOBAL_ZK_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Extra options to be passed to the jvm</span><br><span class=\"line\">PULSAR_MEM=$&#123;PULSAR_MEM:-&quot;-Xmx256m -XX:MaxDirectMemorySize=256m&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># Garbage collection options</span><br><span class=\"line\">PULSAR_GC=&quot; -client &quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Extra options to be passed to the jvm</span><br><span class=\"line\">PULSAR_EXTRA_OPTS=&quot;$&#123;PULSAR_EXTRA_OPTS&#125; $&#123;PULSAR_MEM&#125; $&#123;PULSAR_GC&#125; -Dio.netty.leakDetectionLevel=disabled&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Add extra paths to the bookkeeper classpath</span><br><span class=\"line\"># PULSAR_EXTRA_CLASSPATH=</span><br><span class=\"line\"></span><br><span class=\"line\">#Folder where the Bookie server PID file should be stored</span><br><span class=\"line\">#PULSAR_PID_DIR=</span><br><span class=\"line\"></span><br><span class=\"line\">#Wait time before forcefully kill the pulser server instance, if the stop is not successful</span><br><span class=\"line\">#PULSAR_STOP_TIMEOUT=</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>broker.conf 定义broker的一些配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#</span><br><span class=\"line\"># Licensed to the Apache Software Foundation (ASF) under one</span><br><span class=\"line\"># or more contributor license agreements.  See the NOTICE file</span><br><span class=\"line\"># distributed with this work for additional information</span><br><span class=\"line\"># regarding copyright ownership.  The ASF licenses this file</span><br><span class=\"line\"># to you under the Apache License, Version 2.0 (the</span><br><span class=\"line\"># &quot;License&quot;); you may not use this file except in compliance</span><br><span class=\"line\"># with the License.  You may obtain a copy of the License at</span><br><span class=\"line\">#</span><br><span class=\"line\">#   http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\">#</span><br><span class=\"line\"># Unless required by applicable law or agreed to in writing,</span><br><span class=\"line\"># software distributed under the License is distributed on an</span><br><span class=\"line\"># &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span><br><span class=\"line\"># KIND, either express or implied.  See the License for the</span><br><span class=\"line\"># specific language governing permissions and limitations</span><br><span class=\"line\"># under the License.</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\">### --- General broker settings --- ###</span><br><span class=\"line\"></span><br><span class=\"line\"># Zookeeper quorum connection string</span><br><span class=\"line\">zookeeperServers=172.17.83.72:2181</span><br><span class=\"line\"></span><br><span class=\"line\"># Global Zookeeper quorum connection string</span><br><span class=\"line\">globalZookeeperServers=172.17.83.72:2181</span><br><span class=\"line\"></span><br><span class=\"line\"># Broker data port</span><br><span class=\"line\">brokerServicePort=6650</span><br><span class=\"line\"></span><br><span class=\"line\"># Broker data port for TLS</span><br><span class=\"line\">brokerServicePortTls=6651</span><br><span class=\"line\"></span><br><span class=\"line\"># Port to use to server HTTP request</span><br><span class=\"line\">webServicePort=8080</span><br><span class=\"line\"></span><br><span class=\"line\"># Port to use to server HTTPS request</span><br><span class=\"line\">webServicePortTls=8443</span><br><span class=\"line\"></span><br><span class=\"line\"># Hostname or IP address the service binds on, default is 0.0.0.0.</span><br><span class=\"line\">bindAddress=0.0.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"># Hostname or IP address the service advertises to the outside world. If not set, the value of InetAddress.getLocalHost().getHostName() is used.</span><br><span class=\"line\">advertisedAddress=172.17.83.72</span><br><span class=\"line\"></span><br><span class=\"line\"># Name of the cluster to which this broker belongs to</span><br><span class=\"line\">clusterName=pulsar-cluster-1</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable cluster&apos;s failure-domain which can distribute brokers into logical region</span><br><span class=\"line\">failureDomainsEnabled=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Zookeeper session timeout in milliseconds</span><br><span class=\"line\">zooKeeperSessionTimeoutMillis=30000</span><br><span class=\"line\"></span><br><span class=\"line\"># Time to wait for broker graceful shutdown. After this time elapses, the process will be killed</span><br><span class=\"line\">##定义优雅关机超时时间</span><br><span class=\"line\">brokerShutdownTimeoutMs=3000</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable backlog quota check. Enforces action on topic when the quota is reached</span><br><span class=\"line\">backlogQuotaCheckEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># How often to check for topics that have reached the quota</span><br><span class=\"line\">backlogQuotaCheckIntervalInSeconds=60</span><br><span class=\"line\"></span><br><span class=\"line\"># Default per-topic backlog quota limit</span><br><span class=\"line\">backlogQuotaDefaultLimitGB=10</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable the deletion of inactive topics</span><br><span class=\"line\">brokerDeleteInactiveTopicsEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># How often to check for inactive topics</span><br><span class=\"line\">brokerDeleteInactiveTopicsFrequencySeconds=60</span><br><span class=\"line\"></span><br><span class=\"line\"># How frequently to proactively check and purge expired messages</span><br><span class=\"line\">messageExpiryCheckIntervalInMinutes=5</span><br><span class=\"line\"></span><br><span class=\"line\"># How long to delay rewinding cursor and dispatching messages when active consumer is changed</span><br><span class=\"line\">activeConsumerFailoverDelayTimeMillis=1000</span><br><span class=\"line\"></span><br><span class=\"line\"># Set the default behavior for message deduplication in the broker</span><br><span class=\"line\"># This can be overridden per-namespace. If enabled, broker will reject</span><br><span class=\"line\"># messages that were already stored in the topic</span><br><span class=\"line\">brokerDeduplicationEnabled=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Maximum number of producer information that it&apos;s going to be</span><br><span class=\"line\"># persisted for deduplication purposes</span><br><span class=\"line\">brokerDeduplicationMaxNumberOfProducers=10000</span><br><span class=\"line\"></span><br><span class=\"line\"># Number of entries after which a dedup info snapshot is taken.</span><br><span class=\"line\"># A bigger interval will lead to less snapshots being taken though it would</span><br><span class=\"line\"># increase the topic recovery time, when the entries published after the</span><br><span class=\"line\"># snapshot need to be replayed</span><br><span class=\"line\">brokerDeduplicationEntriesInterval=1000</span><br><span class=\"line\"></span><br><span class=\"line\"># Time of inactivity after which the broker will discard the deduplication information</span><br><span class=\"line\"># relative to a disconnected producer. Default is 6 hours.</span><br><span class=\"line\">brokerDeduplicationProducerInactivityTimeoutMinutes=360</span><br><span class=\"line\"></span><br><span class=\"line\"># When a namespace is created without specifying the number of bundle, this</span><br><span class=\"line\"># value will be used as the default</span><br><span class=\"line\">defaultNumberOfNamespaceBundles=3</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable check for minimum allowed client library version</span><br><span class=\"line\">clientLibraryVersionCheckEnabled=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Path for the file used to determine the rotation status for the broker when responding</span><br><span class=\"line\"># to service discovery health checks</span><br><span class=\"line\">statusFilePath=</span><br><span class=\"line\"></span><br><span class=\"line\"># If true, (and ModularLoadManagerImpl is being used), the load manager will attempt to</span><br><span class=\"line\"># use only brokers running the latest software version (to minimize impact to bundles)</span><br><span class=\"line\">preferLaterVersions=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of unacknowledged messages allowed to receive messages by a consumer on a shared subscription. Broker will stop sending</span><br><span class=\"line\"># messages to consumer once, this limit reaches until consumer starts acknowledging messages back.</span><br><span class=\"line\"># Using a value of 0, is disabling unackeMessage limit check and consumer can receive messages without any restriction</span><br><span class=\"line\">maxUnackedMessagesPerConsumer=50000</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of unacknowledged messages allowed per shared subscription. Broker will stop dispatching messages to</span><br><span class=\"line\"># all consumers of the subscription once this limit reaches until consumer starts acknowledging messages back and</span><br><span class=\"line\"># unack count reaches to limit/2. Using a value of 0, is disabling unackedMessage-limit</span><br><span class=\"line\"># check and dispatcher can dispatch messages without any restriction</span><br><span class=\"line\">maxUnackedMessagesPerSubscription=200000</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of unacknowledged messages allowed per broker. Once this limit reaches, broker will stop dispatching</span><br><span class=\"line\"># messages to all shared subscription which has higher number of unack messages until subscriptions start</span><br><span class=\"line\"># acknowledging messages back and unack count reaches to limit/2. Using a value of 0, is disabling</span><br><span class=\"line\"># unackedMessage-limit check and broker doesn&apos;t block dispatchers</span><br><span class=\"line\">maxUnackedMessagesPerBroker=0</span><br><span class=\"line\"></span><br><span class=\"line\"># Once broker reaches maxUnackedMessagesPerBroker limit, it blocks subscriptions which has higher unacked messages</span><br><span class=\"line\"># than this percentage limit and subscription will not receive any new messages until that subscription acks back</span><br><span class=\"line\"># limit/2 messages</span><br><span class=\"line\">maxUnackedMessagesPerSubscriptionOnBrokerBlocked=0.16</span><br><span class=\"line\"></span><br><span class=\"line\"># Default messages per second dispatch throttling-limit for every topic. Using a value of 0, is disabling default</span><br><span class=\"line\"># message dispatch-throttling</span><br><span class=\"line\">dispatchThrottlingRatePerTopicInMsg=0</span><br><span class=\"line\"></span><br><span class=\"line\"># Default bytes per second dispatch throttling-limit for every topic. Using a value of 0, is disabling</span><br><span class=\"line\"># default message-byte dispatch-throttling</span><br><span class=\"line\">dispatchThrottlingRatePerTopicInByte=0</span><br><span class=\"line\"></span><br><span class=\"line\"># Default dispatch-throttling is disabled for consumers which already caught-up with published messages and</span><br><span class=\"line\"># don&apos;t have backlog. This enables dispatch-throttling for non-backlog consumers as well.</span><br><span class=\"line\">dispatchThrottlingOnNonBacklogConsumerEnabled=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of concurrent lookup request broker allows to throttle heavy incoming lookup traffic</span><br><span class=\"line\">maxConcurrentLookupRequest=10000</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of concurrent topic loading request broker allows to control number of zk-operations</span><br><span class=\"line\">maxConcurrentTopicLoadRequest=5000</span><br><span class=\"line\"></span><br><span class=\"line\"># Max concurrent non-persistent message can be processed per connection</span><br><span class=\"line\">maxConcurrentNonPersistentMessagePerConnection=1000</span><br><span class=\"line\"></span><br><span class=\"line\"># Number of worker threads to serve non-persistent topic</span><br><span class=\"line\">numWorkerThreadsForNonPersistentTopic=8</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable broker to load persistent topics</span><br><span class=\"line\">enablePersistentTopics=true</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable broker to load non-persistent topics</span><br><span class=\"line\">enableNonPersistentTopics=true</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable to run bookie along with broker</span><br><span class=\"line\">enableRunBookieTogether=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable to run bookie autorecovery along with broker</span><br><span class=\"line\">enableRunBookieAutoRecoveryTogether=false</span><br><span class=\"line\"></span><br><span class=\"line\">### --- Authentication --- ###</span><br><span class=\"line\"># Role names that are treated as &quot;proxy roles&quot;. If the broker sees a request with</span><br><span class=\"line\">#role as proxyRoles - it will demand to see a valid original principal.</span><br><span class=\"line\">proxyRoles=</span><br><span class=\"line\"></span><br><span class=\"line\"># If this flag is set then the broker authenticates the original Auth data</span><br><span class=\"line\"># else it just accepts the originalPrincipal and authorizes it (if required).  </span><br><span class=\"line\">authenticateOriginalAuthData=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable TLS</span><br><span class=\"line\">tlsEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># Path for the TLS certificate file</span><br><span class=\"line\">tlsCertificateFilePath=/search/data/pulsar/cert/broker/broker.cert.pem</span><br><span class=\"line\"></span><br><span class=\"line\"># Path for the TLS private key file</span><br><span class=\"line\">tlsKeyFilePath=/search/data/pulsar/cert/broker/broker.key-pk8.pem</span><br><span class=\"line\"></span><br><span class=\"line\"># Path for the trusted TLS certificate file</span><br><span class=\"line\">tlsTrustCertsFilePath=/search/data/pulsar/cert/ca/certs/ca.cert.pem</span><br><span class=\"line\"></span><br><span class=\"line\"># Accept untrusted TLS certificate from client</span><br><span class=\"line\">tlsAllowInsecureConnection=false</span><br><span class=\"line\"></span><br><span class=\"line\">### --- Authentication --- ###</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable authentication</span><br><span class=\"line\">authenticationEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># Autentication provider name list, which is comma separated list of class names</span><br><span class=\"line\">authenticationProviders=org.apache.pulsar.broker.authentication.AuthenticationProviderTls</span><br><span class=\"line\"></span><br><span class=\"line\"># Enforce authorization</span><br><span class=\"line\">authorizationEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># Authorization provider fully qualified class-name</span><br><span class=\"line\">authorizationProvider=org.apache.pulsar.broker.authorization.PulsarAuthorizationProvider</span><br><span class=\"line\"></span><br><span class=\"line\"># Allow wildcard matching in authorization</span><br><span class=\"line\"># (wildcard matching only applicable if wildcard-char:</span><br><span class=\"line\"># * presents at first or last position eg: *.pulsar.service, pulsar.service.*)</span><br><span class=\"line\">authorizationAllowWildcardsMatching=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Role names that are treated as &quot;super-user&quot;, meaning they will be able to do all admin</span><br><span class=\"line\"># operations and publish/consume from all topics</span><br><span class=\"line\">superUserRoles=admin</span><br><span class=\"line\"></span><br><span class=\"line\"># Authentication settings of the broker itself. Used when the broker connects to other brokers,</span><br><span class=\"line\"># either in same or other clusters</span><br><span class=\"line\">brokerClientAuthenticationPlugin=</span><br><span class=\"line\">brokerClientAuthenticationParameters=</span><br><span class=\"line\"></span><br><span class=\"line\"># Supported Athenz provider domain names(comma separated) for authentication</span><br><span class=\"line\">athenzDomainNames=</span><br><span class=\"line\"></span><br><span class=\"line\"># When this parameter is not empty, unauthenticated users perform as anonymousUserRole</span><br><span class=\"line\">anonymousUserRole=</span><br><span class=\"line\"></span><br><span class=\"line\">### --- BookKeeper Client --- ###</span><br><span class=\"line\"></span><br><span class=\"line\"># Authentication plugin to use when connecting to bookies</span><br><span class=\"line\">bookkeeperClientAuthenticationPlugin=</span><br><span class=\"line\"></span><br><span class=\"line\"># BookKeeper auth plugin implementatation specifics parameters name and values</span><br><span class=\"line\">bookkeeperClientAuthenticationParametersName=</span><br><span class=\"line\">bookkeeperClientAuthenticationParameters=</span><br><span class=\"line\"></span><br><span class=\"line\"># Timeout for BK add / read operations</span><br><span class=\"line\">bookkeeperClientTimeoutInSeconds=30</span><br><span class=\"line\"></span><br><span class=\"line\"># Speculative reads are initiated if a read request doesn&apos;t complete within a certain time</span><br><span class=\"line\"># Using a value of 0, is disabling the speculative reads</span><br><span class=\"line\">bookkeeperClientSpeculativeReadTimeoutInMillis=0</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable bookies health check. Bookies that have more than the configured number of failure within</span><br><span class=\"line\"># the interval will be quarantined for some time. During this period, new ledgers won&apos;t be created</span><br><span class=\"line\"># on these bookies</span><br><span class=\"line\">bookkeeperClientHealthCheckEnabled=true</span><br><span class=\"line\">bookkeeperClientHealthCheckIntervalSeconds=60</span><br><span class=\"line\">bookkeeperClientHealthCheckErrorThresholdPerInterval=5</span><br><span class=\"line\">bookkeeperClientHealthCheckQuarantineTimeInSeconds=1800</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable rack-aware bookie selection policy. BK will chose bookies from different racks when</span><br><span class=\"line\"># forming a new bookie ensemble</span><br><span class=\"line\">bookkeeperClientRackawarePolicyEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable bookie isolation by specifying a list of bookie groups to choose from. Any bookie</span><br><span class=\"line\"># outside the specified groups will not be used by the broker</span><br><span class=\"line\">bookkeeperClientIsolationGroups=</span><br><span class=\"line\"></span><br><span class=\"line\">### --- Managed Ledger --- ###</span><br><span class=\"line\"></span><br><span class=\"line\"># Number of bookies to use when creating a ledger</span><br><span class=\"line\">managedLedgerDefaultEnsembleSize=1</span><br><span class=\"line\"></span><br><span class=\"line\"># Number of copies to store for each message</span><br><span class=\"line\">managedLedgerDefaultWriteQuorum=1</span><br><span class=\"line\"></span><br><span class=\"line\"># Number of guaranteed copies (acks to wait before write is complete)</span><br><span class=\"line\">managedLedgerDefaultAckQuorum=1</span><br><span class=\"line\"></span><br><span class=\"line\"># Amount of memory to use for caching data payload in managed ledger. This memory</span><br><span class=\"line\"># is allocated from JVM direct memory and it&apos;s shared across all the topics</span><br><span class=\"line\"># running  in the same broker</span><br><span class=\"line\">managedLedgerCacheSizeMB=1024</span><br><span class=\"line\"></span><br><span class=\"line\"># Threshold to which bring down the cache level when eviction is triggered</span><br><span class=\"line\">managedLedgerCacheEvictionWatermark=0.9</span><br><span class=\"line\"></span><br><span class=\"line\"># Rate limit the amount of writes per second generated by consumer acking the messages</span><br><span class=\"line\">managedLedgerDefaultMarkDeleteRateLimit=1.0</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of entries to append to a ledger before triggering a rollover</span><br><span class=\"line\"># A ledger rollover is triggered on these conditions</span><br><span class=\"line\">#  * Either the max rollover time has been reached</span><br><span class=\"line\">#  * or max entries have been written to the ledged and at least min-time</span><br><span class=\"line\">#    has passed</span><br><span class=\"line\">managedLedgerMaxEntriesPerLedger=50000</span><br><span class=\"line\"></span><br><span class=\"line\"># Minimum time between ledger rollover for a topic</span><br><span class=\"line\">managedLedgerMinLedgerRolloverTimeMinutes=10</span><br><span class=\"line\"></span><br><span class=\"line\"># Maximum time before forcing a ledger rollover for a topic</span><br><span class=\"line\">managedLedgerMaxLedgerRolloverTimeMinutes=240</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of entries to append to a cursor ledger</span><br><span class=\"line\">managedLedgerCursorMaxEntriesPerLedger=50000</span><br><span class=\"line\"></span><br><span class=\"line\"># Max time before triggering a rollover on a cursor ledger</span><br><span class=\"line\">managedLedgerCursorRolloverTimeInSeconds=14400</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of &quot;acknowledgment holes&quot; that are going to be persistently stored.</span><br><span class=\"line\"># When acknowledging out of order, a consumer will leave holes that are supposed</span><br><span class=\"line\"># to be quickly filled by acking all the messages. The information of which</span><br><span class=\"line\"># messages are acknowledged is persisted by compressing in &quot;ranges&quot; of messages</span><br><span class=\"line\"># that were acknowledged. After the max number of ranges is reached, the information</span><br><span class=\"line\"># will only be tracked in memory and messages will be redelivered in case of</span><br><span class=\"line\"># crashes.</span><br><span class=\"line\">managedLedgerMaxUnackedRangesToPersist=10000</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of &quot;acknowledgment holes&quot; that can be stored in Zookeeper. If number of unack message range is higher</span><br><span class=\"line\"># than this limit then broker will persist unacked ranges into bookkeeper to avoid additional data overhead into</span><br><span class=\"line\"># zookeeper.</span><br><span class=\"line\">managedLedgerMaxUnackedRangesToPersistInZooKeeper=1000</span><br><span class=\"line\"></span><br><span class=\"line\"># Skip reading non-recoverable/unreadable data-ledger under managed-ledger&apos;s list. It helps when data-ledgers gets</span><br><span class=\"line\"># corrupted at bookkeeper and managed-cursor is stuck at that ledger.</span><br><span class=\"line\">autoSkipNonRecoverableData=false</span><br><span class=\"line\"></span><br><span class=\"line\">### --- Load balancer --- ###</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable load balancer</span><br><span class=\"line\">loadBalancerEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># Percentage of change to trigger load report update</span><br><span class=\"line\">loadBalancerReportUpdateThresholdPercentage=10</span><br><span class=\"line\"></span><br><span class=\"line\"># maximum interval to update load report</span><br><span class=\"line\">loadBalancerReportUpdateMaxIntervalMinutes=15</span><br><span class=\"line\"></span><br><span class=\"line\"># Frequency of report to collect</span><br><span class=\"line\">loadBalancerHostUsageCheckIntervalMinutes=1</span><br><span class=\"line\"></span><br><span class=\"line\"># Load shedding interval. Broker periodically checks whether some traffic should be offload from</span><br><span class=\"line\"># some over-loaded broker to other under-loaded brokers</span><br><span class=\"line\">loadBalancerSheddingIntervalMinutes=5</span><br><span class=\"line\"></span><br><span class=\"line\"># Prevent the same topics to be shed and moved to other broker more that once within this timeframe</span><br><span class=\"line\">loadBalancerSheddingGracePeriodMinutes=30</span><br><span class=\"line\"></span><br><span class=\"line\"># Usage threshold to allocate max number of topics to broker</span><br><span class=\"line\">loadBalancerBrokerMaxTopics=50000</span><br><span class=\"line\"></span><br><span class=\"line\"># Interval to flush dynamic resource quota to ZooKeeper</span><br><span class=\"line\">loadBalancerResourceQuotaUpdateIntervalMinutes=15</span><br><span class=\"line\"></span><br><span class=\"line\"># enable/disable namespace bundle auto split</span><br><span class=\"line\">loadBalancerAutoBundleSplitEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># enable/disable automatic unloading of split bundles</span><br><span class=\"line\">loadBalancerAutoUnloadSplitBundlesEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># maximum topics in a bundle, otherwise bundle split will be triggered</span><br><span class=\"line\">loadBalancerNamespaceBundleMaxTopics=1000</span><br><span class=\"line\"></span><br><span class=\"line\"># maximum sessions (producers + consumers) in a bundle, otherwise bundle split will be triggered</span><br><span class=\"line\">loadBalancerNamespaceBundleMaxSessions=1000</span><br><span class=\"line\"></span><br><span class=\"line\"># maximum msgRate (in + out) in a bundle, otherwise bundle split will be triggered</span><br><span class=\"line\">loadBalancerNamespaceBundleMaxMsgRate=30000</span><br><span class=\"line\"></span><br><span class=\"line\"># maximum bandwidth (in + out) in a bundle, otherwise bundle split will be triggered</span><br><span class=\"line\">loadBalancerNamespaceBundleMaxBandwidthMbytes=100</span><br><span class=\"line\"></span><br><span class=\"line\"># maximum number of bundles in a namespace</span><br><span class=\"line\">loadBalancerNamespaceMaximumBundles=128</span><br><span class=\"line\"></span><br><span class=\"line\"># Override the auto-detection of the network interfaces max speed. </span><br><span class=\"line\"># This option is useful in some environments (eg: EC2 VMs) where the max speed</span><br><span class=\"line\"># reported by Linux is not reflecting the real bandwidth available to the broker.</span><br><span class=\"line\"># Since the network usage is employed by the load manager to decide when a broker</span><br><span class=\"line\"># is overloaded, it is important to make sure the info is correct or override it </span><br><span class=\"line\"># with the right value here. The configured value can be a double (eg: 0.8) and that</span><br><span class=\"line\"># can be used to trigger load-shedding even before hitting on NIC limits.</span><br><span class=\"line\">loadBalancerOverrideBrokerNicSpeedGbps=</span><br><span class=\"line\"></span><br><span class=\"line\"># Name of load manager to use</span><br><span class=\"line\">loadManagerClassName=org.apache.pulsar.broker.loadbalance.impl.ModularLoadManagerImpl</span><br><span class=\"line\"></span><br><span class=\"line\">### --- Replication --- ###</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable replication metrics</span><br><span class=\"line\">replicationMetricsEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of connections to open for each broker in a remote cluster</span><br><span class=\"line\"># More connections host-to-host lead to better throughput over high-latency</span><br><span class=\"line\"># links.</span><br><span class=\"line\">replicationConnectionsPerBroker=16</span><br><span class=\"line\"></span><br><span class=\"line\"># Replicator producer queue size</span><br><span class=\"line\">replicationProducerQueueSize=1000</span><br><span class=\"line\"></span><br><span class=\"line\"># Replicator prefix used for replicator producer name and cursor name</span><br><span class=\"line\">replicatorPrefix=pulsar.repl</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable TLS when talking with other clusters to replicate messages</span><br><span class=\"line\">replicationTlsEnabled=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Default message retention time</span><br><span class=\"line\">defaultRetentionTimeInMinutes=0</span><br><span class=\"line\"></span><br><span class=\"line\"># Default retention size</span><br><span class=\"line\">defaultRetentionSizeInMB=0</span><br><span class=\"line\"></span><br><span class=\"line\"># How often to check whether the connections are still alive</span><br><span class=\"line\">keepAliveIntervalSeconds=30</span><br><span class=\"line\"></span><br><span class=\"line\"># How often broker checks for inactive topics to be deleted (topics with no subscriptions and no one connected)</span><br><span class=\"line\">brokerServicePurgeInactiveFrequencyInSeconds=60</span><br><span class=\"line\"></span><br><span class=\"line\">### --- WebSocket --- ###</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable the WebSocket API service in broker</span><br><span class=\"line\">webSocketServiceEnabled=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Number of IO threads in Pulsar Client used in WebSocket proxy</span><br><span class=\"line\">webSocketNumIoThreads=8</span><br><span class=\"line\"></span><br><span class=\"line\"># Number of connections per Broker in Pulsar Client used in WebSocket proxy</span><br><span class=\"line\">webSocketConnectionsPerBroker=8</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### --- Metrics --- ###</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable topic level metrics</span><br><span class=\"line\">exposeTopicLevelMetricsInPrometheus=true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>client.conf 定义客户端的一些配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Configuration for pulsar-client and pulsar-admin CLI tools</span><br><span class=\"line\"></span><br><span class=\"line\"># URL for Pulsar REST API (for admin operations)</span><br><span class=\"line\"># For TLS:</span><br><span class=\"line\"># webServiceUrl=https://localhost:8443/</span><br><span class=\"line\">webServiceUrl=http://localhost:8080/</span><br><span class=\"line\"></span><br><span class=\"line\"># URL for Pulsar Binary Protocol (for produce and consume operations)</span><br><span class=\"line\"># For TLS:</span><br><span class=\"line\"># brokerServiceUrl=pulsar+ssl://localhost:6651/</span><br><span class=\"line\">brokerServiceUrl=pulsar://localhost:6650/</span><br><span class=\"line\"></span><br><span class=\"line\"># Authentication plugin to authenticate with servers</span><br><span class=\"line\"># e.g. for TLS</span><br><span class=\"line\"># authPlugin=org.apache.pulsar.client.impl.auth.AuthenticationTls</span><br><span class=\"line\">authPlugin=</span><br><span class=\"line\"></span><br><span class=\"line\"># Parameters passed to authentication plugin.</span><br><span class=\"line\"># A comma separated list of key:value pairs.</span><br><span class=\"line\"># Keys depend on the configured authPlugin.</span><br><span class=\"line\"># e.g. for TLS</span><br><span class=\"line\"># authParams=tlsCertFile:/path/to/client-cert.pem,tlsKeyFile:/path/to/client-key.pem</span><br><span class=\"line\">authParams=</span><br><span class=\"line\"></span><br><span class=\"line\"># Allow TLS connections to servers whose certificate cannot be</span><br><span class=\"line\"># be verified to have been signed by a trusted certificate</span><br><span class=\"line\"># authority.</span><br><span class=\"line\">tlsAllowInsecureConnection=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Whether server hostname must match the common name of the certificate</span><br><span class=\"line\"># the server is using.</span><br><span class=\"line\">tlsEnableHostnameVerification=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Path for the trusted TLS certificate file.</span><br><span class=\"line\"># This cert is used to verify that any cert presented by a server</span><br><span class=\"line\"># is signed by a certificate authority. If this verification</span><br><span class=\"line\"># fails, then the cert is untrusted and the connection is dropped.</span><br><span class=\"line\">tlsTrustCertsFilePath=</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Pulsar的安装与配置</p>","more":"<p></p>\n<h3 id=\"环境概述\"><a href=\"#环境概述\" class=\"headerlink\" title=\"环境概述\"></a>环境概述</h3><ul>\n<li>Linux环境Ubuntu16.04</li>\n<li>java 1.8</li>\n<li>zookeeper 3.4.13</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li><p>下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.apache.org/dyn/mirrors/mirrors.cgi?action=download&amp;filename=pulsar/pulsar-2.2.0/apache-pulsar-2.2.0-bin.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf  apache-pulsar-2.2.0-bin.tar.gz -C pulsar</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>目录介绍</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x  8 root root   4096 Dec  2 15:01 ./</span><br><span class=\"line\">drwxr-xr-x 15 root root   4096 Dec  2 15:33 ../</span><br><span class=\"line\">drwxr-xr-x  3  501 staff  4096 Oct 13 06:01 bin/</span><br><span class=\"line\">drwxr-xr-x  4  501 staff  4096 Dec  2 22:35 conf/</span><br><span class=\"line\">drwxr-xr-x  3 root root   4096 Dec  2 15:01 examples/</span><br><span class=\"line\">drwxr-xr-x  3 root root   4096 Dec  2 15:01 instances/</span><br><span class=\"line\">drwxr-xr-x  3 root root  20480 Dec  2 15:01 lib/</span><br><span class=\"line\">-rw-r--r--  1  501 staff 28876 Oct 13 06:01 LICENSE</span><br><span class=\"line\">drwxr-xr-x  2  501 staff  4096 Oct 13 06:01 licenses/</span><br><span class=\"line\">-rw-r--r--  1  501 staff  5857 Oct 13 06:01 NOTICE</span><br><span class=\"line\">-rw-r--r--  1  501 staff  1269 Oct 13 06:01 README</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>bin：Pulsar 的命令行工具，例如 pulsar 和 pulsar-admin </li>\n<li>conf: Pulsar 的配置文件，包括 broker 配置、zookeeper 配置等等 </li>\n<li>examples: Pulsar function 的示例，有java的jar 和yaml配置文件</li>\n<li>instances：为Pulsar function 所创建的一些组件</li>\n<li>lib ： Pulsar依赖的jar</li>\n<li>LICENSE：许可证文件</li>\n<li>licenses：一些依赖的许可证文件的目录</li>\n</ul>\n<p>一旦你开始运行 Pulsar，下面的这些目录将会被创建：</p>\n<ul>\n<li>data ：ZooKeeper 和 BookKeeper 使用的数据存储目录 </li>\n<li>instances ：为 Pulsar Function 创建的 Artifact </li>\n<li>logs :安装时创建的 log  </li>\n</ul>\n</li>\n<li><p>单机模式启动</p>\n<p>运行<code>pulsar help</code> 查看帮助命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: pulsar &lt;command&gt;</span><br><span class=\"line\">where command is one of:</span><br><span class=\"line\"></span><br><span class=\"line\">    broker              Run a broker server</span><br><span class=\"line\">    bookie              Run a bookie server</span><br><span class=\"line\">    zookeeper           Run a zookeeper server</span><br><span class=\"line\">    configuration-store Run a configuration-store server</span><br><span class=\"line\">    discovery           Run a discovery server</span><br><span class=\"line\">    proxy               Run a pulsar proxy</span><br><span class=\"line\">    websocket           Run a web socket proxy server</span><br><span class=\"line\">    functions-worker    Run a functions worker server</span><br><span class=\"line\">    sql-worker          Run a sql worker server</span><br><span class=\"line\">    sql                 Run sql CLI</span><br><span class=\"line\">    standalone          Run a broker server with local bookies and local zookeeper</span><br><span class=\"line\"></span><br><span class=\"line\">    initialize-cluster-metadata     One-time metadata initialization</span><br><span class=\"line\">    compact-topic       Run compaction against a topic</span><br><span class=\"line\">    zookeeper-shell     Open a ZK shell client</span><br><span class=\"line\"></span><br><span class=\"line\">    help                This help message</span><br><span class=\"line\"></span><br><span class=\"line\">or command is the full name of a class with a defined main() method.</span><br><span class=\"line\"></span><br><span class=\"line\">Environment variables:</span><br><span class=\"line\">   PULSAR_LOG_CONF               Log4j configuration file (default /data/soft/pulsar/conf/log4j2.yaml)</span><br><span class=\"line\">   PULSAR_BROKER_CONF            Configuration file for broker (default: /data/soft/pulsar/conf/broker.conf)</span><br><span class=\"line\">   PULSAR_BOOKKEEPER_CONF        Configuration file for bookie (default: /data/soft/pulsar/conf/bookkeeper.conf)</span><br><span class=\"line\">   PULSAR_ZK_CONF                Configuration file for zookeeper (default: /data/soft/pulsar/conf/zookeeper.conf)</span><br><span class=\"line\">   PULSAR_CONFIGURATION_STORE_CONF         Configuration file for global configuration store (default: /data/soft/pulsar/conf/global_zookeeper.conf)</span><br><span class=\"line\">   PULSAR_DISCOVERY_CONF         Configuration file for discovery service (default: /data/soft/pulsar/conf/discovery.conf)</span><br><span class=\"line\">   PULSAR_WEBSOCKET_CONF         Configuration file for websocket proxy (default: /data/soft/pulsar/conf/websocket.conf)</span><br><span class=\"line\">   PULSAR_PROXY_CONF             Configuration file for Pulsar proxy (default: /data/soft/pulsar/conf/proxy.conf)</span><br><span class=\"line\">   PULSAR_WORKER_CONF            Configuration file for functions worker (default: /data/soft/pulsar/conf/functions_worker.yml)</span><br><span class=\"line\">   PULSAR_STANDALONE_CONF        Configuration file for standalone (default: /data/soft/pulsar/conf/standalone.conf)</span><br><span class=\"line\">   PULSAR_PRESTO_CONF            Configuration directory for Pulsar Presto (default: /data/soft/pulsar/conf/presto)</span><br><span class=\"line\">   PULSAR_EXTRA_OPTS             Extra options to be passed to the jvm</span><br><span class=\"line\">   PULSAR_EXTRA_CLASSPATH        Add extra paths to the pulsar classpath</span><br><span class=\"line\">   PULSAR_PID_DIR                Folder where the pulsar server PID file should be stored</span><br><span class=\"line\">   PULSAR_STOP_TIMEOUT           Wait time before forcefully kill the pulsar server instance, if the stop is not successful</span><br><span class=\"line\"></span><br><span class=\"line\">These variable can also be set in conf/pulsar_env.sh</span><br></pre></td></tr></table></figure>\n\n<p>使用standalone  <code>Run a broker server with local bookies and local zookeeper</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/pulsar standalone</span><br></pre></td></tr></table></figure>\n\n<p>报错了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000080000000, 2147483648, 0) failed; error=&apos;Cannot allocate memory&apos; (errno=12)</span><br><span class=\"line\">#</span><br><span class=\"line\"># There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class=\"line\"># Native memory allocation (mmap) failed to map 2147483648 bytes for committing reserved memory.</span><br><span class=\"line\"># An error report file with more information is saved as:</span><br><span class=\"line\"># /data/soft/pulsar/hs_err_pid10684.log</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>你说气人不气人，我的小鸡内存不足了。</p>\n</li>\n<li><p>下载内置连接器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://archive.apache.org/dist/pulsar/pulsar-2.2.0/apache-pulsar-io-connectors-2.2.0-bin.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>下载完成后在 pulsar 目录中，解压缩 io-connectors 软件包并复制连接器，如<code>connectors</code> pulsar 目录中所示： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvfz /path/to/apache-pulsar-io-connectors-2.2.0-bin.tar.gz</span><br><span class=\"line\">// you will find a directory named `apache-pulsar-io-connectors-2.2.0` in the pulsar directory</span><br><span class=\"line\">// then copy the connectors</span><br><span class=\"line\"></span><br><span class=\"line\">$ cd apache-pulsar-io-connectors-2.2.0/connectors connectors</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls connectors</span><br><span class=\"line\">pulsar-io-aerospike-2.2.0.nar</span><br><span class=\"line\">pulsar-io-cassandra-2.2.0.nar</span><br><span class=\"line\">pulsar-io-kafka-2.2.0.nar</span><br><span class=\"line\">pulsar-io-kinesis-2.2.0.nar</span><br><span class=\"line\">pulsar-io-rabbitmq-2.2.0.nar</span><br><span class=\"line\">pulsar-io-twitter-2.2.0.nar</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><ul>\n<li><p>BrokerKeeper ,是一个复制的日志存储系统，Pulsar 使用它来持久存储所有消息。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bookiePort</td>\n<td>bookie 服务器侦听的端口。</td>\n<td>3181</td>\n</tr>\n<tr>\n<td>allowLoopback</td>\n<td>Whether the bookie is allowed to use a loopback interface as its primary interface (i.e. the interface used to establish its identity). By default, loopback interfaces are not allowed as the primary interface. Using a loopback interface as the primary interface usually indicates a configuration error. For example, it’s fairly common in some VPS setups to not configure a hostname or to have the hostname resolve to <code>127.0.0.1</code>. If this is the case, then all bookies in the cluster will establish their identities as <code>127.0.0.1:3181</code> and only one will be able to join the cluster. For VPSs configured like this, you should explicitly set the listening interface.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>listeningInterface</td>\n<td>bookie 侦听的网络接口。如果没有设置，bookie 将监听所有接口。</td>\n<td>eth0</td>\n</tr>\n<tr>\n<td>journalDirectory</td>\n<td>The directory where Bookkeeper outputs its write-ahead log (WAL)</td>\n<td>data/bookkeeper/journal</td>\n</tr>\n<tr>\n<td>ledgerDirectories</td>\n<td>The directory where Bookkeeper outputs ledger snapshots. This could define multiple directories to store snapshots separated by comma, for example <code>ledgerDirectories=/tmp/bk1-data,/tmp/bk2-data</code>. Ideally, ledger dirs and the journal dir are each in a different device, which reduces the contention between random I/O and sequential write. It is possible to run with a single disk, but performance will be significantly lower.</td>\n<td>data/bookkeeper/ledgers</td>\n</tr>\n<tr>\n<td>ledgerManagerType</td>\n<td>The type of ledger manager used to manage how ledgers are stored, managed, and garbage collected. See <a href=\"http://bookkeeper.apache.org/docs/latest/getting-started/concepts\" target=\"_blank\" rel=\"noopener\">BookKeeper Internals</a> for more info</td>\n<td>hierarchical</td>\n</tr>\n<tr>\n<td>zkLedgersRootPath</td>\n<td>The root ZooKeeper path used to store ledger metadata. This parameter is used by the ZooKeeper-based ledger manager as a root znode to store all ledgers.</td>\n<td>/ledgers</td>\n</tr>\n<tr>\n<td>ledgerStorageClass</td>\n<td>Ledger storage implementation class</td>\n<td>org.apache.bookkeeper.bookie.storage.ldb.DbLedgerStorage</td>\n</tr>\n<tr>\n<td>entryLogFilePreallocationEnabled</td>\n<td>Enable or disable entry logger preallocation</td>\n<td></td>\n</tr>\n<tr>\n<td>logSizeLimit</td>\n<td>Max file size of the entry logger, in bytes. A new entry log file will be created when the old one reaches the file size limitation.</td>\n<td>2147483648</td>\n</tr>\n<tr>\n<td>minorCompactionThreshold</td>\n<td>Threshold of minor compaction. Entry log files whose remaining size percentage reaches below this threshold will be compacted in a minor compaction. If set to less than zero, the minor compaction is disabled.</td>\n<td>0.2</td>\n</tr>\n<tr>\n<td>minorCompactionInterval</td>\n<td>Time interval to run minor compaction, in seconds. If set to less than zero, the minor compaction is disabled.</td>\n<td>3600</td>\n</tr>\n<tr>\n<td>majorCompactionThreshold</td>\n<td>The threshold of major compaction. Entry log files whose remaining size percentage reaches below this threshold will be compacted in a major compaction. Those entry log files whose remaining size percentage is still higher than the threshold will never be compacted. If set to less than zero, the minor compaction is disabled.</td>\n<td>0.5</td>\n</tr>\n<tr>\n<td>majorCompactionInterval</td>\n<td>The time interval to run major compaction, in seconds. If set to less than zero, the major compaction is disabled.</td>\n<td>86400</td>\n</tr>\n<tr>\n<td>compactionMaxOutstandingRequests</td>\n<td>Sets the maximum number of entries that can be compacted without flushing. When compacting, the entries are written to the entrylog and the new offsets are cached in memory. Once the entrylog is flushed the index is updated with the new offsets. This parameter controls the number of entries added to the entrylog before a flush is forced. A higher value for this parameter means more memory will be used for offsets. Each offset consists of 3 longs. This parameter should not be modified unless you’re fully aware of the consequences.</td>\n<td>100000</td>\n</tr>\n<tr>\n<td>compactionRate</td>\n<td>The rate at which compaction will read entries, in adds per second.</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>isThrottleByBytes</td>\n<td>Throttle compaction by bytes or by entries.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>compactionRateByEntries</td>\n<td>The rate at which compaction will read entries, in adds per second.</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>compactionRateByBytes</td>\n<td>Set the rate at which compaction will readd entries. The unit is bytes added per second.</td>\n<td>1000000</td>\n</tr>\n<tr>\n<td>journalMaxSizeMB</td>\n<td>Max file size of journal file, in megabytes. A new journal file will be created when the old one reaches the file size limitation.</td>\n<td>2048</td>\n</tr>\n<tr>\n<td>journalMaxBackups</td>\n<td>The max number of old journal filse to keep. Keeping a number of old journal files would help data recovery in special cases.</td>\n<td>5</td>\n</tr>\n<tr>\n<td>journalPreAllocSizeMB</td>\n<td>How space to pre-allocate at a time in the journal.</td>\n<td>16</td>\n</tr>\n<tr>\n<td>journalWriteBufferSizeKB</td>\n<td>用于日志的写缓冲区。</td>\n<td>64</td>\n</tr>\n<tr>\n<td>journalRemoveFromPageCache</td>\n<td>Whether pages should be removed from the page cache after force write.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>journalAdaptiveGroupWrites</td>\n<td>Whether to group journal force writes, which optimizes group commit for higher throughput.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>journalMaxGroupWaitMSec</td>\n<td>The maximum latency to impose on a journal write to achieve grouping.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>journalAlignmentSize</td>\n<td>All the journal writes and commits should be aligned to given size</td>\n<td>4096</td>\n</tr>\n<tr>\n<td>journalBufferedWritesThreshold</td>\n<td>Maximum writes to buffer to achieve grouping</td>\n<td>524288</td>\n</tr>\n<tr>\n<td>journalFlushWhenQueueEmpty</td>\n<td>If we should flush the journal when journal queue is empty</td>\n<td>false</td>\n</tr>\n<tr>\n<td>numJournalCallbackThreads</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<ul>\n<li><p>pulsar_env.sh</p>\n<p>默认的启动pulsar broker的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># default settings for starting pulsar broker</span><br><span class=\"line\"></span><br><span class=\"line\"># Log4j configuration file</span><br><span class=\"line\"># PULSAR_LOG_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Logs location</span><br><span class=\"line\"># PULSAR_LOG_DIR=</span><br><span class=\"line\"></span><br><span class=\"line\"># Configuration file of settings used in broker server</span><br><span class=\"line\"># PULSAR_BROKER_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Configuration file of settings used in bookie server</span><br><span class=\"line\"># PULSAR_BOOKKEEPER_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Configuration file of settings used in zookeeper server</span><br><span class=\"line\"># PULSAR_ZK_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Configuration file of settings used in global zookeeper server</span><br><span class=\"line\"># PULSAR_GLOBAL_ZK_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Extra options to be passed to the jvm</span><br><span class=\"line\">PULSAR_MEM=&quot; -Xms1g -Xmx1g -XX:MaxDirectMemorySize=1g&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Garbage collection options GC参数的配置</span><br><span class=\"line\">PULSAR_GC=&quot; -XX:+UseG1GC -XX:MaxGCPauseMillis=10 -XX:+ParallelRefProcEnabled -XX:+UnlockExperimentalVMOptions -XX:+AggressiveOpts -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=32 -XX:ConcGCThreads=32 -XX:G1NewSizePercent=50 -XX:+DisableExplicitGC -XX:-ResizePLAB&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Extra options to be passed to the jvm</span><br><span class=\"line\">PULSAR_EXTRA_OPTS=&quot;$&#123;PULSAR_EXTRA_OPTS&#125; $&#123;PULSAR_MEM&#125; $&#123;PULSAR_GC&#125; -Dio.netty.leakDetectionLevel=disabled -Dio.netty.recycler.maxCapacity.default=1000 -Dio.netty.recycler.linkCapacity=1024&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Add extra paths to the bookkeeper classpath</span><br><span class=\"line\"># PULSAR_EXTRA_CLASSPATH=</span><br><span class=\"line\"></span><br><span class=\"line\">#Folder where the Bookie server PID file should be stored</span><br><span class=\"line\">#PULSAR_PID_DIR=</span><br><span class=\"line\"></span><br><span class=\"line\">#Wait time before forcefully kill the pulser server instance, if the stop is not successful</span><br><span class=\"line\">#PULSAR_STOP_TIMEOUT=</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>pulsar_tools_env.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env bash</span><br><span class=\"line\">#</span><br><span class=\"line\"># Licensed to the Apache Software Foundation (ASF) under one</span><br><span class=\"line\"># or more contributor license agreements.  See the NOTICE file</span><br><span class=\"line\"># distributed with this work for additional information</span><br><span class=\"line\"># regarding copyright ownership.  The ASF licenses this file</span><br><span class=\"line\"># to you under the Apache License, Version 2.0 (the</span><br><span class=\"line\"># &quot;License&quot;); you may not use this file except in compliance</span><br><span class=\"line\"># with the License.  You may obtain a copy of the License at</span><br><span class=\"line\">#</span><br><span class=\"line\">#   http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\">#</span><br><span class=\"line\"># Unless required by applicable law or agreed to in writing,</span><br><span class=\"line\"># software distributed under the License is distributed on an</span><br><span class=\"line\"># &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span><br><span class=\"line\"># KIND, either express or implied.  See the License for the</span><br><span class=\"line\"># specific language governing permissions and limitations</span><br><span class=\"line\"># under the License.</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\"># Set JAVA_HOME here to override the environment setting</span><br><span class=\"line\"># JAVA_HOME=</span><br><span class=\"line\"></span><br><span class=\"line\"># default settings for starting pulsar broker</span><br><span class=\"line\"></span><br><span class=\"line\"># Log4j configuration file</span><br><span class=\"line\"># PULSAR_LOG_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Logs location</span><br><span class=\"line\"># PULSAR_LOG_DIR=</span><br><span class=\"line\"></span><br><span class=\"line\"># Configuration file of settings used in broker server</span><br><span class=\"line\"># PULSAR_BROKER_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Configuration file of settings used in bookie server</span><br><span class=\"line\"># PULSAR_BOOKKEEPER_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Configuration file of settings used in zookeeper server</span><br><span class=\"line\"># PULSAR_ZK_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Configuration file of settings used in global zookeeper server</span><br><span class=\"line\"># PULSAR_GLOBAL_ZK_CONF=</span><br><span class=\"line\"></span><br><span class=\"line\"># Extra options to be passed to the jvm</span><br><span class=\"line\">PULSAR_MEM=$&#123;PULSAR_MEM:-&quot;-Xmx256m -XX:MaxDirectMemorySize=256m&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># Garbage collection options</span><br><span class=\"line\">PULSAR_GC=&quot; -client &quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Extra options to be passed to the jvm</span><br><span class=\"line\">PULSAR_EXTRA_OPTS=&quot;$&#123;PULSAR_EXTRA_OPTS&#125; $&#123;PULSAR_MEM&#125; $&#123;PULSAR_GC&#125; -Dio.netty.leakDetectionLevel=disabled&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Add extra paths to the bookkeeper classpath</span><br><span class=\"line\"># PULSAR_EXTRA_CLASSPATH=</span><br><span class=\"line\"></span><br><span class=\"line\">#Folder where the Bookie server PID file should be stored</span><br><span class=\"line\">#PULSAR_PID_DIR=</span><br><span class=\"line\"></span><br><span class=\"line\">#Wait time before forcefully kill the pulser server instance, if the stop is not successful</span><br><span class=\"line\">#PULSAR_STOP_TIMEOUT=</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>broker.conf 定义broker的一些配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#</span><br><span class=\"line\"># Licensed to the Apache Software Foundation (ASF) under one</span><br><span class=\"line\"># or more contributor license agreements.  See the NOTICE file</span><br><span class=\"line\"># distributed with this work for additional information</span><br><span class=\"line\"># regarding copyright ownership.  The ASF licenses this file</span><br><span class=\"line\"># to you under the Apache License, Version 2.0 (the</span><br><span class=\"line\"># &quot;License&quot;); you may not use this file except in compliance</span><br><span class=\"line\"># with the License.  You may obtain a copy of the License at</span><br><span class=\"line\">#</span><br><span class=\"line\">#   http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\">#</span><br><span class=\"line\"># Unless required by applicable law or agreed to in writing,</span><br><span class=\"line\"># software distributed under the License is distributed on an</span><br><span class=\"line\"># &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span><br><span class=\"line\"># KIND, either express or implied.  See the License for the</span><br><span class=\"line\"># specific language governing permissions and limitations</span><br><span class=\"line\"># under the License.</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\">### --- General broker settings --- ###</span><br><span class=\"line\"></span><br><span class=\"line\"># Zookeeper quorum connection string</span><br><span class=\"line\">zookeeperServers=172.17.83.72:2181</span><br><span class=\"line\"></span><br><span class=\"line\"># Global Zookeeper quorum connection string</span><br><span class=\"line\">globalZookeeperServers=172.17.83.72:2181</span><br><span class=\"line\"></span><br><span class=\"line\"># Broker data port</span><br><span class=\"line\">brokerServicePort=6650</span><br><span class=\"line\"></span><br><span class=\"line\"># Broker data port for TLS</span><br><span class=\"line\">brokerServicePortTls=6651</span><br><span class=\"line\"></span><br><span class=\"line\"># Port to use to server HTTP request</span><br><span class=\"line\">webServicePort=8080</span><br><span class=\"line\"></span><br><span class=\"line\"># Port to use to server HTTPS request</span><br><span class=\"line\">webServicePortTls=8443</span><br><span class=\"line\"></span><br><span class=\"line\"># Hostname or IP address the service binds on, default is 0.0.0.0.</span><br><span class=\"line\">bindAddress=0.0.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"># Hostname or IP address the service advertises to the outside world. If not set, the value of InetAddress.getLocalHost().getHostName() is used.</span><br><span class=\"line\">advertisedAddress=172.17.83.72</span><br><span class=\"line\"></span><br><span class=\"line\"># Name of the cluster to which this broker belongs to</span><br><span class=\"line\">clusterName=pulsar-cluster-1</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable cluster&apos;s failure-domain which can distribute brokers into logical region</span><br><span class=\"line\">failureDomainsEnabled=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Zookeeper session timeout in milliseconds</span><br><span class=\"line\">zooKeeperSessionTimeoutMillis=30000</span><br><span class=\"line\"></span><br><span class=\"line\"># Time to wait for broker graceful shutdown. After this time elapses, the process will be killed</span><br><span class=\"line\">##定义优雅关机超时时间</span><br><span class=\"line\">brokerShutdownTimeoutMs=3000</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable backlog quota check. Enforces action on topic when the quota is reached</span><br><span class=\"line\">backlogQuotaCheckEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># How often to check for topics that have reached the quota</span><br><span class=\"line\">backlogQuotaCheckIntervalInSeconds=60</span><br><span class=\"line\"></span><br><span class=\"line\"># Default per-topic backlog quota limit</span><br><span class=\"line\">backlogQuotaDefaultLimitGB=10</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable the deletion of inactive topics</span><br><span class=\"line\">brokerDeleteInactiveTopicsEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># How often to check for inactive topics</span><br><span class=\"line\">brokerDeleteInactiveTopicsFrequencySeconds=60</span><br><span class=\"line\"></span><br><span class=\"line\"># How frequently to proactively check and purge expired messages</span><br><span class=\"line\">messageExpiryCheckIntervalInMinutes=5</span><br><span class=\"line\"></span><br><span class=\"line\"># How long to delay rewinding cursor and dispatching messages when active consumer is changed</span><br><span class=\"line\">activeConsumerFailoverDelayTimeMillis=1000</span><br><span class=\"line\"></span><br><span class=\"line\"># Set the default behavior for message deduplication in the broker</span><br><span class=\"line\"># This can be overridden per-namespace. If enabled, broker will reject</span><br><span class=\"line\"># messages that were already stored in the topic</span><br><span class=\"line\">brokerDeduplicationEnabled=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Maximum number of producer information that it&apos;s going to be</span><br><span class=\"line\"># persisted for deduplication purposes</span><br><span class=\"line\">brokerDeduplicationMaxNumberOfProducers=10000</span><br><span class=\"line\"></span><br><span class=\"line\"># Number of entries after which a dedup info snapshot is taken.</span><br><span class=\"line\"># A bigger interval will lead to less snapshots being taken though it would</span><br><span class=\"line\"># increase the topic recovery time, when the entries published after the</span><br><span class=\"line\"># snapshot need to be replayed</span><br><span class=\"line\">brokerDeduplicationEntriesInterval=1000</span><br><span class=\"line\"></span><br><span class=\"line\"># Time of inactivity after which the broker will discard the deduplication information</span><br><span class=\"line\"># relative to a disconnected producer. Default is 6 hours.</span><br><span class=\"line\">brokerDeduplicationProducerInactivityTimeoutMinutes=360</span><br><span class=\"line\"></span><br><span class=\"line\"># When a namespace is created without specifying the number of bundle, this</span><br><span class=\"line\"># value will be used as the default</span><br><span class=\"line\">defaultNumberOfNamespaceBundles=3</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable check for minimum allowed client library version</span><br><span class=\"line\">clientLibraryVersionCheckEnabled=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Path for the file used to determine the rotation status for the broker when responding</span><br><span class=\"line\"># to service discovery health checks</span><br><span class=\"line\">statusFilePath=</span><br><span class=\"line\"></span><br><span class=\"line\"># If true, (and ModularLoadManagerImpl is being used), the load manager will attempt to</span><br><span class=\"line\"># use only brokers running the latest software version (to minimize impact to bundles)</span><br><span class=\"line\">preferLaterVersions=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of unacknowledged messages allowed to receive messages by a consumer on a shared subscription. Broker will stop sending</span><br><span class=\"line\"># messages to consumer once, this limit reaches until consumer starts acknowledging messages back.</span><br><span class=\"line\"># Using a value of 0, is disabling unackeMessage limit check and consumer can receive messages without any restriction</span><br><span class=\"line\">maxUnackedMessagesPerConsumer=50000</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of unacknowledged messages allowed per shared subscription. Broker will stop dispatching messages to</span><br><span class=\"line\"># all consumers of the subscription once this limit reaches until consumer starts acknowledging messages back and</span><br><span class=\"line\"># unack count reaches to limit/2. Using a value of 0, is disabling unackedMessage-limit</span><br><span class=\"line\"># check and dispatcher can dispatch messages without any restriction</span><br><span class=\"line\">maxUnackedMessagesPerSubscription=200000</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of unacknowledged messages allowed per broker. Once this limit reaches, broker will stop dispatching</span><br><span class=\"line\"># messages to all shared subscription which has higher number of unack messages until subscriptions start</span><br><span class=\"line\"># acknowledging messages back and unack count reaches to limit/2. Using a value of 0, is disabling</span><br><span class=\"line\"># unackedMessage-limit check and broker doesn&apos;t block dispatchers</span><br><span class=\"line\">maxUnackedMessagesPerBroker=0</span><br><span class=\"line\"></span><br><span class=\"line\"># Once broker reaches maxUnackedMessagesPerBroker limit, it blocks subscriptions which has higher unacked messages</span><br><span class=\"line\"># than this percentage limit and subscription will not receive any new messages until that subscription acks back</span><br><span class=\"line\"># limit/2 messages</span><br><span class=\"line\">maxUnackedMessagesPerSubscriptionOnBrokerBlocked=0.16</span><br><span class=\"line\"></span><br><span class=\"line\"># Default messages per second dispatch throttling-limit for every topic. Using a value of 0, is disabling default</span><br><span class=\"line\"># message dispatch-throttling</span><br><span class=\"line\">dispatchThrottlingRatePerTopicInMsg=0</span><br><span class=\"line\"></span><br><span class=\"line\"># Default bytes per second dispatch throttling-limit for every topic. Using a value of 0, is disabling</span><br><span class=\"line\"># default message-byte dispatch-throttling</span><br><span class=\"line\">dispatchThrottlingRatePerTopicInByte=0</span><br><span class=\"line\"></span><br><span class=\"line\"># Default dispatch-throttling is disabled for consumers which already caught-up with published messages and</span><br><span class=\"line\"># don&apos;t have backlog. This enables dispatch-throttling for non-backlog consumers as well.</span><br><span class=\"line\">dispatchThrottlingOnNonBacklogConsumerEnabled=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of concurrent lookup request broker allows to throttle heavy incoming lookup traffic</span><br><span class=\"line\">maxConcurrentLookupRequest=10000</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of concurrent topic loading request broker allows to control number of zk-operations</span><br><span class=\"line\">maxConcurrentTopicLoadRequest=5000</span><br><span class=\"line\"></span><br><span class=\"line\"># Max concurrent non-persistent message can be processed per connection</span><br><span class=\"line\">maxConcurrentNonPersistentMessagePerConnection=1000</span><br><span class=\"line\"></span><br><span class=\"line\"># Number of worker threads to serve non-persistent topic</span><br><span class=\"line\">numWorkerThreadsForNonPersistentTopic=8</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable broker to load persistent topics</span><br><span class=\"line\">enablePersistentTopics=true</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable broker to load non-persistent topics</span><br><span class=\"line\">enableNonPersistentTopics=true</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable to run bookie along with broker</span><br><span class=\"line\">enableRunBookieTogether=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable to run bookie autorecovery along with broker</span><br><span class=\"line\">enableRunBookieAutoRecoveryTogether=false</span><br><span class=\"line\"></span><br><span class=\"line\">### --- Authentication --- ###</span><br><span class=\"line\"># Role names that are treated as &quot;proxy roles&quot;. If the broker sees a request with</span><br><span class=\"line\">#role as proxyRoles - it will demand to see a valid original principal.</span><br><span class=\"line\">proxyRoles=</span><br><span class=\"line\"></span><br><span class=\"line\"># If this flag is set then the broker authenticates the original Auth data</span><br><span class=\"line\"># else it just accepts the originalPrincipal and authorizes it (if required).  </span><br><span class=\"line\">authenticateOriginalAuthData=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable TLS</span><br><span class=\"line\">tlsEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># Path for the TLS certificate file</span><br><span class=\"line\">tlsCertificateFilePath=/search/data/pulsar/cert/broker/broker.cert.pem</span><br><span class=\"line\"></span><br><span class=\"line\"># Path for the TLS private key file</span><br><span class=\"line\">tlsKeyFilePath=/search/data/pulsar/cert/broker/broker.key-pk8.pem</span><br><span class=\"line\"></span><br><span class=\"line\"># Path for the trusted TLS certificate file</span><br><span class=\"line\">tlsTrustCertsFilePath=/search/data/pulsar/cert/ca/certs/ca.cert.pem</span><br><span class=\"line\"></span><br><span class=\"line\"># Accept untrusted TLS certificate from client</span><br><span class=\"line\">tlsAllowInsecureConnection=false</span><br><span class=\"line\"></span><br><span class=\"line\">### --- Authentication --- ###</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable authentication</span><br><span class=\"line\">authenticationEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># Autentication provider name list, which is comma separated list of class names</span><br><span class=\"line\">authenticationProviders=org.apache.pulsar.broker.authentication.AuthenticationProviderTls</span><br><span class=\"line\"></span><br><span class=\"line\"># Enforce authorization</span><br><span class=\"line\">authorizationEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># Authorization provider fully qualified class-name</span><br><span class=\"line\">authorizationProvider=org.apache.pulsar.broker.authorization.PulsarAuthorizationProvider</span><br><span class=\"line\"></span><br><span class=\"line\"># Allow wildcard matching in authorization</span><br><span class=\"line\"># (wildcard matching only applicable if wildcard-char:</span><br><span class=\"line\"># * presents at first or last position eg: *.pulsar.service, pulsar.service.*)</span><br><span class=\"line\">authorizationAllowWildcardsMatching=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Role names that are treated as &quot;super-user&quot;, meaning they will be able to do all admin</span><br><span class=\"line\"># operations and publish/consume from all topics</span><br><span class=\"line\">superUserRoles=admin</span><br><span class=\"line\"></span><br><span class=\"line\"># Authentication settings of the broker itself. Used when the broker connects to other brokers,</span><br><span class=\"line\"># either in same or other clusters</span><br><span class=\"line\">brokerClientAuthenticationPlugin=</span><br><span class=\"line\">brokerClientAuthenticationParameters=</span><br><span class=\"line\"></span><br><span class=\"line\"># Supported Athenz provider domain names(comma separated) for authentication</span><br><span class=\"line\">athenzDomainNames=</span><br><span class=\"line\"></span><br><span class=\"line\"># When this parameter is not empty, unauthenticated users perform as anonymousUserRole</span><br><span class=\"line\">anonymousUserRole=</span><br><span class=\"line\"></span><br><span class=\"line\">### --- BookKeeper Client --- ###</span><br><span class=\"line\"></span><br><span class=\"line\"># Authentication plugin to use when connecting to bookies</span><br><span class=\"line\">bookkeeperClientAuthenticationPlugin=</span><br><span class=\"line\"></span><br><span class=\"line\"># BookKeeper auth plugin implementatation specifics parameters name and values</span><br><span class=\"line\">bookkeeperClientAuthenticationParametersName=</span><br><span class=\"line\">bookkeeperClientAuthenticationParameters=</span><br><span class=\"line\"></span><br><span class=\"line\"># Timeout for BK add / read operations</span><br><span class=\"line\">bookkeeperClientTimeoutInSeconds=30</span><br><span class=\"line\"></span><br><span class=\"line\"># Speculative reads are initiated if a read request doesn&apos;t complete within a certain time</span><br><span class=\"line\"># Using a value of 0, is disabling the speculative reads</span><br><span class=\"line\">bookkeeperClientSpeculativeReadTimeoutInMillis=0</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable bookies health check. Bookies that have more than the configured number of failure within</span><br><span class=\"line\"># the interval will be quarantined for some time. During this period, new ledgers won&apos;t be created</span><br><span class=\"line\"># on these bookies</span><br><span class=\"line\">bookkeeperClientHealthCheckEnabled=true</span><br><span class=\"line\">bookkeeperClientHealthCheckIntervalSeconds=60</span><br><span class=\"line\">bookkeeperClientHealthCheckErrorThresholdPerInterval=5</span><br><span class=\"line\">bookkeeperClientHealthCheckQuarantineTimeInSeconds=1800</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable rack-aware bookie selection policy. BK will chose bookies from different racks when</span><br><span class=\"line\"># forming a new bookie ensemble</span><br><span class=\"line\">bookkeeperClientRackawarePolicyEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable bookie isolation by specifying a list of bookie groups to choose from. Any bookie</span><br><span class=\"line\"># outside the specified groups will not be used by the broker</span><br><span class=\"line\">bookkeeperClientIsolationGroups=</span><br><span class=\"line\"></span><br><span class=\"line\">### --- Managed Ledger --- ###</span><br><span class=\"line\"></span><br><span class=\"line\"># Number of bookies to use when creating a ledger</span><br><span class=\"line\">managedLedgerDefaultEnsembleSize=1</span><br><span class=\"line\"></span><br><span class=\"line\"># Number of copies to store for each message</span><br><span class=\"line\">managedLedgerDefaultWriteQuorum=1</span><br><span class=\"line\"></span><br><span class=\"line\"># Number of guaranteed copies (acks to wait before write is complete)</span><br><span class=\"line\">managedLedgerDefaultAckQuorum=1</span><br><span class=\"line\"></span><br><span class=\"line\"># Amount of memory to use for caching data payload in managed ledger. This memory</span><br><span class=\"line\"># is allocated from JVM direct memory and it&apos;s shared across all the topics</span><br><span class=\"line\"># running  in the same broker</span><br><span class=\"line\">managedLedgerCacheSizeMB=1024</span><br><span class=\"line\"></span><br><span class=\"line\"># Threshold to which bring down the cache level when eviction is triggered</span><br><span class=\"line\">managedLedgerCacheEvictionWatermark=0.9</span><br><span class=\"line\"></span><br><span class=\"line\"># Rate limit the amount of writes per second generated by consumer acking the messages</span><br><span class=\"line\">managedLedgerDefaultMarkDeleteRateLimit=1.0</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of entries to append to a ledger before triggering a rollover</span><br><span class=\"line\"># A ledger rollover is triggered on these conditions</span><br><span class=\"line\">#  * Either the max rollover time has been reached</span><br><span class=\"line\">#  * or max entries have been written to the ledged and at least min-time</span><br><span class=\"line\">#    has passed</span><br><span class=\"line\">managedLedgerMaxEntriesPerLedger=50000</span><br><span class=\"line\"></span><br><span class=\"line\"># Minimum time between ledger rollover for a topic</span><br><span class=\"line\">managedLedgerMinLedgerRolloverTimeMinutes=10</span><br><span class=\"line\"></span><br><span class=\"line\"># Maximum time before forcing a ledger rollover for a topic</span><br><span class=\"line\">managedLedgerMaxLedgerRolloverTimeMinutes=240</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of entries to append to a cursor ledger</span><br><span class=\"line\">managedLedgerCursorMaxEntriesPerLedger=50000</span><br><span class=\"line\"></span><br><span class=\"line\"># Max time before triggering a rollover on a cursor ledger</span><br><span class=\"line\">managedLedgerCursorRolloverTimeInSeconds=14400</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of &quot;acknowledgment holes&quot; that are going to be persistently stored.</span><br><span class=\"line\"># When acknowledging out of order, a consumer will leave holes that are supposed</span><br><span class=\"line\"># to be quickly filled by acking all the messages. The information of which</span><br><span class=\"line\"># messages are acknowledged is persisted by compressing in &quot;ranges&quot; of messages</span><br><span class=\"line\"># that were acknowledged. After the max number of ranges is reached, the information</span><br><span class=\"line\"># will only be tracked in memory and messages will be redelivered in case of</span><br><span class=\"line\"># crashes.</span><br><span class=\"line\">managedLedgerMaxUnackedRangesToPersist=10000</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of &quot;acknowledgment holes&quot; that can be stored in Zookeeper. If number of unack message range is higher</span><br><span class=\"line\"># than this limit then broker will persist unacked ranges into bookkeeper to avoid additional data overhead into</span><br><span class=\"line\"># zookeeper.</span><br><span class=\"line\">managedLedgerMaxUnackedRangesToPersistInZooKeeper=1000</span><br><span class=\"line\"></span><br><span class=\"line\"># Skip reading non-recoverable/unreadable data-ledger under managed-ledger&apos;s list. It helps when data-ledgers gets</span><br><span class=\"line\"># corrupted at bookkeeper and managed-cursor is stuck at that ledger.</span><br><span class=\"line\">autoSkipNonRecoverableData=false</span><br><span class=\"line\"></span><br><span class=\"line\">### --- Load balancer --- ###</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable load balancer</span><br><span class=\"line\">loadBalancerEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># Percentage of change to trigger load report update</span><br><span class=\"line\">loadBalancerReportUpdateThresholdPercentage=10</span><br><span class=\"line\"></span><br><span class=\"line\"># maximum interval to update load report</span><br><span class=\"line\">loadBalancerReportUpdateMaxIntervalMinutes=15</span><br><span class=\"line\"></span><br><span class=\"line\"># Frequency of report to collect</span><br><span class=\"line\">loadBalancerHostUsageCheckIntervalMinutes=1</span><br><span class=\"line\"></span><br><span class=\"line\"># Load shedding interval. Broker periodically checks whether some traffic should be offload from</span><br><span class=\"line\"># some over-loaded broker to other under-loaded brokers</span><br><span class=\"line\">loadBalancerSheddingIntervalMinutes=5</span><br><span class=\"line\"></span><br><span class=\"line\"># Prevent the same topics to be shed and moved to other broker more that once within this timeframe</span><br><span class=\"line\">loadBalancerSheddingGracePeriodMinutes=30</span><br><span class=\"line\"></span><br><span class=\"line\"># Usage threshold to allocate max number of topics to broker</span><br><span class=\"line\">loadBalancerBrokerMaxTopics=50000</span><br><span class=\"line\"></span><br><span class=\"line\"># Interval to flush dynamic resource quota to ZooKeeper</span><br><span class=\"line\">loadBalancerResourceQuotaUpdateIntervalMinutes=15</span><br><span class=\"line\"></span><br><span class=\"line\"># enable/disable namespace bundle auto split</span><br><span class=\"line\">loadBalancerAutoBundleSplitEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># enable/disable automatic unloading of split bundles</span><br><span class=\"line\">loadBalancerAutoUnloadSplitBundlesEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># maximum topics in a bundle, otherwise bundle split will be triggered</span><br><span class=\"line\">loadBalancerNamespaceBundleMaxTopics=1000</span><br><span class=\"line\"></span><br><span class=\"line\"># maximum sessions (producers + consumers) in a bundle, otherwise bundle split will be triggered</span><br><span class=\"line\">loadBalancerNamespaceBundleMaxSessions=1000</span><br><span class=\"line\"></span><br><span class=\"line\"># maximum msgRate (in + out) in a bundle, otherwise bundle split will be triggered</span><br><span class=\"line\">loadBalancerNamespaceBundleMaxMsgRate=30000</span><br><span class=\"line\"></span><br><span class=\"line\"># maximum bandwidth (in + out) in a bundle, otherwise bundle split will be triggered</span><br><span class=\"line\">loadBalancerNamespaceBundleMaxBandwidthMbytes=100</span><br><span class=\"line\"></span><br><span class=\"line\"># maximum number of bundles in a namespace</span><br><span class=\"line\">loadBalancerNamespaceMaximumBundles=128</span><br><span class=\"line\"></span><br><span class=\"line\"># Override the auto-detection of the network interfaces max speed. </span><br><span class=\"line\"># This option is useful in some environments (eg: EC2 VMs) where the max speed</span><br><span class=\"line\"># reported by Linux is not reflecting the real bandwidth available to the broker.</span><br><span class=\"line\"># Since the network usage is employed by the load manager to decide when a broker</span><br><span class=\"line\"># is overloaded, it is important to make sure the info is correct or override it </span><br><span class=\"line\"># with the right value here. The configured value can be a double (eg: 0.8) and that</span><br><span class=\"line\"># can be used to trigger load-shedding even before hitting on NIC limits.</span><br><span class=\"line\">loadBalancerOverrideBrokerNicSpeedGbps=</span><br><span class=\"line\"></span><br><span class=\"line\"># Name of load manager to use</span><br><span class=\"line\">loadManagerClassName=org.apache.pulsar.broker.loadbalance.impl.ModularLoadManagerImpl</span><br><span class=\"line\"></span><br><span class=\"line\">### --- Replication --- ###</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable replication metrics</span><br><span class=\"line\">replicationMetricsEnabled=true</span><br><span class=\"line\"></span><br><span class=\"line\"># Max number of connections to open for each broker in a remote cluster</span><br><span class=\"line\"># More connections host-to-host lead to better throughput over high-latency</span><br><span class=\"line\"># links.</span><br><span class=\"line\">replicationConnectionsPerBroker=16</span><br><span class=\"line\"></span><br><span class=\"line\"># Replicator producer queue size</span><br><span class=\"line\">replicationProducerQueueSize=1000</span><br><span class=\"line\"></span><br><span class=\"line\"># Replicator prefix used for replicator producer name and cursor name</span><br><span class=\"line\">replicatorPrefix=pulsar.repl</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable TLS when talking with other clusters to replicate messages</span><br><span class=\"line\">replicationTlsEnabled=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Default message retention time</span><br><span class=\"line\">defaultRetentionTimeInMinutes=0</span><br><span class=\"line\"></span><br><span class=\"line\"># Default retention size</span><br><span class=\"line\">defaultRetentionSizeInMB=0</span><br><span class=\"line\"></span><br><span class=\"line\"># How often to check whether the connections are still alive</span><br><span class=\"line\">keepAliveIntervalSeconds=30</span><br><span class=\"line\"></span><br><span class=\"line\"># How often broker checks for inactive topics to be deleted (topics with no subscriptions and no one connected)</span><br><span class=\"line\">brokerServicePurgeInactiveFrequencyInSeconds=60</span><br><span class=\"line\"></span><br><span class=\"line\">### --- WebSocket --- ###</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable the WebSocket API service in broker</span><br><span class=\"line\">webSocketServiceEnabled=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Number of IO threads in Pulsar Client used in WebSocket proxy</span><br><span class=\"line\">webSocketNumIoThreads=8</span><br><span class=\"line\"></span><br><span class=\"line\"># Number of connections per Broker in Pulsar Client used in WebSocket proxy</span><br><span class=\"line\">webSocketConnectionsPerBroker=8</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### --- Metrics --- ###</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable topic level metrics</span><br><span class=\"line\">exposeTopicLevelMetricsInPrometheus=true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>client.conf 定义客户端的一些配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Configuration for pulsar-client and pulsar-admin CLI tools</span><br><span class=\"line\"></span><br><span class=\"line\"># URL for Pulsar REST API (for admin operations)</span><br><span class=\"line\"># For TLS:</span><br><span class=\"line\"># webServiceUrl=https://localhost:8443/</span><br><span class=\"line\">webServiceUrl=http://localhost:8080/</span><br><span class=\"line\"></span><br><span class=\"line\"># URL for Pulsar Binary Protocol (for produce and consume operations)</span><br><span class=\"line\"># For TLS:</span><br><span class=\"line\"># brokerServiceUrl=pulsar+ssl://localhost:6651/</span><br><span class=\"line\">brokerServiceUrl=pulsar://localhost:6650/</span><br><span class=\"line\"></span><br><span class=\"line\"># Authentication plugin to authenticate with servers</span><br><span class=\"line\"># e.g. for TLS</span><br><span class=\"line\"># authPlugin=org.apache.pulsar.client.impl.auth.AuthenticationTls</span><br><span class=\"line\">authPlugin=</span><br><span class=\"line\"></span><br><span class=\"line\"># Parameters passed to authentication plugin.</span><br><span class=\"line\"># A comma separated list of key:value pairs.</span><br><span class=\"line\"># Keys depend on the configured authPlugin.</span><br><span class=\"line\"># e.g. for TLS</span><br><span class=\"line\"># authParams=tlsCertFile:/path/to/client-cert.pem,tlsKeyFile:/path/to/client-key.pem</span><br><span class=\"line\">authParams=</span><br><span class=\"line\"></span><br><span class=\"line\"># Allow TLS connections to servers whose certificate cannot be</span><br><span class=\"line\"># be verified to have been signed by a trusted certificate</span><br><span class=\"line\"># authority.</span><br><span class=\"line\">tlsAllowInsecureConnection=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Whether server hostname must match the common name of the certificate</span><br><span class=\"line\"># the server is using.</span><br><span class=\"line\">tlsEnableHostnameVerification=false</span><br><span class=\"line\"></span><br><span class=\"line\"># Path for the trusted TLS certificate file.</span><br><span class=\"line\"># This cert is used to verify that any cert presented by a server</span><br><span class=\"line\"># is signed by a certificate authority. If this verification</span><br><span class=\"line\"># fails, then the cert is untrusted and the connection is dropped.</span><br><span class=\"line\">tlsTrustCertsFilePath=</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n</li>\n</ul>"},{"title":"Pulsar简介","date":"2018-12-02T07:23:57.000Z","_content":"\n下一世代的MQ-Pulsar简述<!--more-->\n\n### 概述\n\nPulsar 最初由 yahoo 开发，是一个多租户、高可用，服务间的消息系统。现在由 Apache Software Foundation 管理。\n\n Pulsar 的主要特性如下；\n\n     Pular 通过跨集群的消息无缝 geo-replication，让 Pular 实例原生支持多集群\n* 很低的发布和端到端延迟\n* 无缝的可扩展性，乃至上百万个 topic\n* 简洁的 client API，支持 Java、Python、C++\n* 多种 topic 的订阅模式（独占、共享、灾备）\n* 使用 Apache BookKeeper，确保传递的消息被持久存储\n* serverless 轻量级计算框架 Pulsar Function，提供流原生数据处理。\n* serverless connector 框架 Pulsar IO。它构建于 Pulsar Function 之上，使得从 Apache Pular 移入和移出数据更为简单\n* 分层存储把过期的数据从热活存储区转移到冷 / 长期存储区（比如 S3 和 GCS）\n\n### 消息概念\n\nPulsar基于 pub-sub（即发布-订阅模式），在此模式中，生产者将消息发布到主题，然后消费者可以订阅这些主题，处理传入的消息，并在处理完成时发送确认。\n\n创建订阅后，即使消费者断开链接，Pulsar也会保留所有消息，仅当消费者确认已经成功处理后，才会丢弃保留的消息。\n\n#### 消息\n\n消息是Pulsar的基础单元，他们是producer向topic发布的内容，consumer从topic消费的内容，（并且会在消息处理时进行确认）\n\n| 组成               | 用途                                                         |\n| ------------------ | ------------------------------------------------------------ |\n| value/data payload | 消息携带的数据，所有 pulsar 的消息携带原始 bytes，但是消息数据也需要遵循数据 shcema |\n| Key                | 可以选择使用Key标记消息，这对于[topic压缩](http://pulsar.apache.org/docs/en/concepts-topic-compaction)等操作非常有用 |\n| properties         | 可选 用户自定义的key/value的属性map                          |\n| Producer Name      | 发布消息的Producer的名称（如果用户没有定义Producer的名称，那么会被自动赋予默认名称） |\n| Sequence ID        | 在topic中，每个Pulsar消息属于一个有序的序列，消息的sequence Id是该消息在整个序列中次序或者说叫坐标 |\n| Publish time       | 消息发布的时间戳(由Producer自动生成)                         |\n| Event time         | 这个时间戳是可选的，为了记录当消息发生某个事件时候的事件，例如处理消息时，如果没有明确设置该项，则消息的事件事件为0 |\n\n#### 生产者\n\nProducer是关联到Topic，并把消息发布到Pulsar broker进行处理的程序\n\n##### 发送模式\n\nPulsar的producer可以同步或者异步的发送消息\n\n| 模式     | 描述                                                         |\n| -------- | ------------------------------------------------------------ |\n| 同步发送 | 发布者在发布消息后等待代理的broker的确认，如果没有收到确认，那么发布者会认为发送操作失败 |\n| 异步发送 | Producer将会把消息访入blocking队列并立即返回，然后客户端类库将在后台把消息发送给代理，如果队列满了（队列最大大小可以配置），那么根据发布者传入的参数与配置，可能在调用Api时被阻止或者立即失败 |\n\n##### 压缩\n\n为了节省带宽，在传输过程中，producer发布的消息可以被压缩，目前pulsar支持两种压缩类型\n\n- [LZ4](https://github.com/lz4/lz4)\n- [ZLIB](https://zlib.net/)\n\n##### 批处理\n\n如果启用了批处理，那么发布者将在单个请求中累积并发送一批消息，批处理的大小取决于配置的最大消息数与最大发布延迟。（Kafka中也有）\n\n#### 消费者\n\n消费者是通过订阅关联的topic，然后接收消息并处理的程序\n\n##### 接收模式\n\n可以同步或者异步的从pulsar的broker中接收消息\n\n| 模式     | 描述                                                         |\n| -------- | ------------------------------------------------------------ |\n| 同步接收 | 同步接收将会阻塞，直到消息可用                               |\n| 异步接收 | 异步接收后会立即返回future值 --- [`CompletableFuture`](http://www.baeldung.com/java-completablefuture) ，一旦新消息可用，立即完成。 |\n\n##### 确认\n\n消费者成功处理了消息，需要发送确认给broker，以便让broker丢弃这条消息（否则broker将一直存储该消息）\n\n可以逐条或累积的确认消息，当累积一起确认时候，消费者只需要确认收到的最后一条消息，所有之前（包括该消息），都不会再发送给消费者\n\n累积确认不能与[共享订阅模式](http://pulsar.apache.org/docs/en/concepts-messaging/#subscription-modes)一起使用，因为共享模式涉及多个消费者可以访问相同的订阅。\n\n##### 监听\n\n客户端类库提供了对consumer的监听实现，例如Java客户端类库中提供了MessageListener  ，在该接口中，一旦接收到新的消息，received方法将被调用\n\n#### Topic\n\n和其他的消息队列一样，Pulsar的topic也是生产者到消费者之间传播消息的通道，Topic的命名是具有明确定义结构的url\n\n```\n{persistent|non-persistent}://tenant/namespace/topic\n```\n\n| Topic名称组成                  | 描述                                                         |\n| ------------------------------ | ------------------------------------------------------------ |\n| `persistent`/ `non-persistent` | 定义topic的类型，pulsar支持非持久和持久的topic， （默认是持久类型，如果你没有指明类型，topic 将会是持久类型）。持久 topic 的所有消息都会保存在硬盘上 （这意味着多块硬盘，除非是单机模式的 broker），反之，非持久 topic 的数据不会存储到硬盘上 |\n| tenant                         | 实例中 topic 的租户。tenant 是 Pulsar 多租户的基本要素。可以被跨集群的传播。 |\n| namespace                      | topic 的管理单元，相关 topic 组的管理机制。大多数的 topic 配置在 namespace 层面生效。 每个 tenant 可以有多个 namespace |\n| topic                          | topic名称的最后组成部分，没有什么特殊的含义                  |\n\n**不需要显式的创建 topic **\n\n**你并不需要显式的创建 topic。如果客户端尝试从一个还不存在的 topic 写或者接受消息，pulsar 将会按在 topic 名称提供的 namnespace 下自动创建 topic。**\n\n#### 命名空间（NameSpace）\n\n命名空间是租户中的逻辑命名法。租户可以通过[管理 API](http://pulsar.apache.org/docs/en/admin-api-namespaces#create) 创建多个名称空间。例如，具有不同应用程序的租户可以为每个应用程序创建单独的命名空间。命名空间允许应用程序创建和管理主题层次结构。主题`my-tenant/app1`是应用程序命名空间`app1`的`my-tenant`。您可以在命名空间下创建任意数量的Topic。\n\n#### 订阅模式\n\n订阅是一种命名配置规则，用于确定如何把消息传递给消费者\n\nPulsar支持三种可用的订阅模式：exclusive（独占），shared（共享），failover （故障转移）\n\n![](Pulsar简介\\pulsar-subscription-modes.png)\n\n##### Exclusive\n\n在exclusive模式下，只允许一个consumer绑定到订阅上，如果多于一个消费者订阅该主题的话，消费者将会收到错误，上图中只有ConsumerA能接收到消息\n\n**Exclusive为默认的订阅模式**\n\n##### Shared\n\n在Share或round robin模式下，多个消费者可以订阅同一个topic，消息通过round robin轮询机制分发给不同的消费者，并且每个消息仅且只会分发给一个消费者，当消费者断开链接时候，发送给他的并且违背确认的所有消息将会被重新安排分发给其他剩余存活的小消费者\n\n**共享模式的局限性**\n\n```\n使用共享模式时需要注意：\n* 共享模式下不能保证消息排序\n* 在共享模式下不能使用累积确认\n```\n\n\n\n![](Pulsar简介\\pulsar-shared-subscriptions.png)\n\n##### 故障转移\n\nFailover 模式中，多个 consumer 可以绑定到同一个 subscription。consumer 将会按字典顺序排序，第一个 consumer 被初始化为唯一接受消息的消费者。这个 consumer 被称为 master consumer。\n\n当 master consumer 断开时，所有的消息（未被确认和后续进入的）将会被分发给队列中的下一个 consumer。\n\n第一个图中，Consumer-C-1 是 master consumer，当 Consumer-C-1 断开连接时，由于 Consumer-C-2 在队列中下一个位置，那么它将会开始接收消息。\n\n![](Pulsar简介\\pulsar-failover-subscriptions.png)\n\n#### 多主题订阅\n\n当消费者订阅 Pulsar 主题时，默认情况下它订阅一个特定主题 。\n\n从 Pulsar 版本 1.23.0 开始，Pulsar 消费者可以同时订阅多个主题。您可以通过两种方式定义主题列表： \n\n* 通过基础的正则表达式（regex），例如 persistent://public/default/finance-.*\n* 通过明确定义的 topic 列表\\\n\n**通过正则订阅多主题时，所有的主题必须在同一个命名空间（namespace)**\n\n订阅多个主题时，Pulsar 客户端将自动调用 Pulsar API 以发现与正则表达式模式 / 列表匹配的主题，然后订阅所有这些主题。如果当前不存在任何主题，则一旦创建主题，消费者将自动订阅它们。\n\n**不能保证顺序性**\n\n**当消费者订阅多个主题时，Pulsar 在单个主题上提供的所有顺序保证都不成立。如果您在使用 Pulsar 时涉及任何严格的顺序要求，我们强烈建议您不要使用此功能**\n\n以下是 Java 的一些多主题订阅示例：\n\n```\nimport java.util.regex.Pattern;\n\nimport org.apache.pulsar.client.api.Consumer;\nimport org.apache.pulsar.client.api.PulsarClient;\n\nPulsarClient pulsarClient = // Instantiate Pulsar client object\n\n// Subscribe to all topics in a namespace\nPattern allTopicsInNamespace = Pattern.compile(\"persistent://public/default/.*\");\nConsumer allTopicsConsumer = pulsarClient.subscribe(allTopicsInNamespace, \"subscription-1\");\n\n// Subscribe to a subsets of topics in a namespace, based on regex\nPattern someTopicsInNamespace = Pattern.compile(\"persistent://public/default/foo.*\");\nConsumer someTopicsConsumer = pulsarClient.subscribe(someTopicsInNamespace, \"subscription-1\");\n```\n\n##### 分区Topic\n\n通常一个 topic 仅被一个 broker 服务，这限制了 topic 最大吞吐量。分区 topic 是特殊的 topic 类型，他可以被多个 broker 处理，这让 topic 有更高的吞吐量。\n\n 其实在背后，分区的 topic 通过 N 个内部 topic 实现，N 是分区的数量。当向分区的 topic 发送消息，每条消息被路由到其中一个 broker。Pulsar 自动处理跨 broker 的分区分布。\n\n\n\n![](Pulsar简介\\partitioning.png)\n\n在这里，主题 **Topic1** 有五个分区（**P0** 到 **P4**），分为三个代理。因为分区比broker多，所以两个broker处理两个分区，而第三个只处理一个（同样，Pulsar 自动处理这个分区的分配）。\n\n该主题的消息将广播给两个消费者。该[路由模式](http://pulsar.apache.org/docs/en/concepts-messaging/#routing-modes)决定了两者的broker来处理每个分区，而[订阅模式](http://pulsar.apache.org/docs/en/concepts-messaging/#subscription-modes)确定哪些消息去哪个消费者。\n\n在大多数情况下，可以单独决定路由和订阅模式。通常，吞吐量问题应指导分区 / 路由决策，而订阅决策应由应用程序语义指导。\n\n在订阅模式如何工作方面，分区主题和普通主题之间没有区别，因为分区仅确定生产者发布消息和消费者处理和确认消息之间发生的情况。\n\n需要通过 [admin API](http://pulsar.apache.org/docs/en/admin-api-overview) 显式创建分区主题。创建主题时可以指定分区数。\n\n#### 路由模式\n\n当发布消息到分区 topic，你必须要指定路由模式。路由模式决定了每条消息被发布到的分区（其实是内部主题）。\n\n 默认情况下有三种路由模式：\n\n \n\n| 模式                     | 描述                                                         | 顺序保证           |\n| ------------------------ | ------------------------------------------------------------ | ------------------ |\n| Key hash                 | 如果 message 指定了 key，producer 将会把 key hash，然后把他分配给指定分区 | 同一个 key 下有序  |\n| single default partition | 如果没有 key，每个生产者的消息将会被路由分发给专用的分区。初始时候随机选择 | 同一个生产者下有序 |\n| round robin 分发         | 如果没有 key，所有的消息通过 round-robin 方式被路由到不同的分区，以达到最大的生产能力 | 无序               |\n\n#### 非持久Topic\n\n默认的，Pulsar 保存所有没有确认的消息到多个 BookKeeper 的 bookies 中（存储节点）。持久 topic 的消息数据可以在 broker 重启或者订阅者出问题的情况下存活下来。 \n\nPulsar 也提供了非持久 topic。非持久 topic 的消息不会被保存在硬盘上，只存活于内存中。当使用非持久 topic 分发时，杀掉 Pulsar 的 broker 或者关闭订阅者，意味着客户端可能会遭遇消息丢失。 \n\n 非持久 topic 有如下格式的名称（注意名字中的 non-persistent）：\n\n```\nnon-persistent://tenant/namespace/topic\n```\n\n非持久 topic 中，broker 会立即发布消息给所有连接的订阅者，而不会在 BookKeeper 中存储。如果有一个订阅者断开连接，broker 将无法重发这些瞬时消息。订阅者将永远也不能收到这些消息了。去掉持久化存储的步骤，在某些情况下，使得非持久 topic 的消息比持久 topic 稍微变快。但是同时，Pulsar 的一些核心优势也丧失掉了 \n\n**非持久 topic，消息数据仅存活在内存。如果 broker 挂掉或者其他情况不能从内存取出，你的消息数据就可能会丢失。只有真的觉得你的使用场景符合，并且你可以忍受时，才可去使用非持久 topic。**\n\n默认非持久 topic 在 broker 上是开启的，你可以通过 broker 的配置关闭。你可以通过使用 pulsar-admin-topics 接口管理非持久 topic。\n\n##### 性能\n\n非持久性消息传递通常比持久消息传递更快，因为broker不会持久保存消息，并且只要将消息传递给所有连接的订阅者，就立即将确认ACK消息发送回生产者。因此，非持久 topic 让 producer 有更低的发布延迟。 \n\n ##### 客户端api\n\nproducer 和 consumer 以连接持久 topic 同样的方式连接到非持久 topic。重要的区别是 topic 的名称必须以 non-persistent 开头。三种订阅模式 --exclusive，shared，failover 对于非持久 topic 都是支持的。 \n\n非持久 topic 的 java consumer \n\n```\nPulsarClient client = PulsarClient.create(\"pulsar://localhost:6650\");\nString npTopic = \"non-persistent://public/default/my-topic\";\nString subscriptionName = \"my-subscription-name\";\n\nConsumer consumer = client.subscribe(npTopic, subscriptionName);\n```\n\n以下是同一个非持久主题的 Java Producer示例：\n\n```\nProducer producer = client.createProducer(npTopic);\n```\n\n#### 消息存留和过期\n\nPulsar Broker的默认设置如下：\n\n- 立即删除所有已经被 cunsumer 确认过的的消息\n- 以消息 backlog 的形式，持久保存所有的未被确认消息\n\n但是，Pulsar 有两个功能，可以覆盖此默认行为：\n\n* 通过对消息的保存，让你可以保存concumer确认过的消息\n\n* 消息过期机制，可以让你为尚未确认的消息设置消息存活时间（TTL）\n\n  **消息保留与消息的TTL在Namespace级别中进行管理请参阅[消息保留和到期](http://pulsar.apache.org/docs/en/cookbooks-retention-expiry)**\n\n  下图说明了这两种概念：\n\n   ![](Pulsar简介\\20181008112559290.png)\n\n  ​\t通过消息保留（如顶部所示），应用于命名空间中所有主题的保留策略表明，即使已经确认了某些消息，也会将这些消息持久地存储在 Pulsar 中。已删除保留策略未涵盖的已确认消息。如果没有保留策略，将删除*所有*已确认的消息。\n\n  ​\t随着消息到期，如下所示，一些消息被删除，即使它们尚未被确认，因为它们已根据应用于命名空间的 TTL 过期（例如，因为已应用了 5 分钟的 TTL 并且消息尚未确认，但已有 10 分钟）。\n\n#### 消息去重\n\n当消息被 Pulsar 持久化多于一次的时候，会发生数据重复。消息去重是 Pulsar 可选的特性，阻止不必要的消息重复，每条消息仅处理一次。\n\n下图展示了开启和关闭消息去重的场景\n\n![](Pulsar简介\\message-deduplication.png)\n\n在顶部显示的方案中禁用了消息重复数据删除。这里，生产者发布关于主题的消息 1; 消息到达 Pulsar的Broker并持久化到 BookKeeper。然后，生产者再次发送消息 1（在这种情况下由于一些重试逻辑），并且消息由broker接收并再次存储在 BookKeeper 中，这意味着发生了重复。\n\n在底部的第二个场景中，生产者发布消息 1，该消息由broker接收并持久化，如第一个场景中那样。但是，当生产者再次尝试发布消息时，broker知道它已经接收消息 1，因此不会保留消息。\n\n##### 生产者的幂等性\n\n**消息去重的另外一种方法是确保每条消息仅被生产一次。这种方法通常被叫做生产者幂等**。这种方式的缺点是，把消息去重的工作推给了应用去做。在 Pulsar 中，这是被 broker 处理的，这意味着你不需要修改你的客户端代码，你只需要做一些管理上的变化（参考 [Managing message deduplication](http://pulsar.apache.org/docs/en/cookbooks-deduplication)） \n\n##### 去重与实际一次语义\n\n消息去重，使 Pulsar 成为与流处理引擎（SPE）或者其他寻求 “实际一次” 处理语义的系统连接的完美消息系统。消息系统若不提供自动消息去重，则需要 SPE 或者其他系统保证去重。这意味着严格的消息顺序来自于让程序承担额外的去重工作。使用 Pulsar，严格的顺序保证不会带来任何应用层面的消耗。\n\n**更深入的信息可以参考 [this post](https://streaml.io/blog/pulsar-effectively-once/) 及 [Streamlio blog](https://streaml.io/blog)**\n\n[]: http://pulsar.apache.org/docs/en/concepts-messaging/\t\"pulsar官方wiki\"\n[]: https://blog.csdn.net/liyiming2017/article/details/82966031\t\"稀有气体CSDN博客\"\n\n","source":"_posts/Pulsar简介.md","raw":"---\ntitle: Pulsar简介\ndate: 2018-12-02 15:23:57\ntags: [Pulsar]\ncategories: [Pulsar]\n---\n\n下一世代的MQ-Pulsar简述<!--more-->\n\n### 概述\n\nPulsar 最初由 yahoo 开发，是一个多租户、高可用，服务间的消息系统。现在由 Apache Software Foundation 管理。\n\n Pulsar 的主要特性如下；\n\n     Pular 通过跨集群的消息无缝 geo-replication，让 Pular 实例原生支持多集群\n* 很低的发布和端到端延迟\n* 无缝的可扩展性，乃至上百万个 topic\n* 简洁的 client API，支持 Java、Python、C++\n* 多种 topic 的订阅模式（独占、共享、灾备）\n* 使用 Apache BookKeeper，确保传递的消息被持久存储\n* serverless 轻量级计算框架 Pulsar Function，提供流原生数据处理。\n* serverless connector 框架 Pulsar IO。它构建于 Pulsar Function 之上，使得从 Apache Pular 移入和移出数据更为简单\n* 分层存储把过期的数据从热活存储区转移到冷 / 长期存储区（比如 S3 和 GCS）\n\n### 消息概念\n\nPulsar基于 pub-sub（即发布-订阅模式），在此模式中，生产者将消息发布到主题，然后消费者可以订阅这些主题，处理传入的消息，并在处理完成时发送确认。\n\n创建订阅后，即使消费者断开链接，Pulsar也会保留所有消息，仅当消费者确认已经成功处理后，才会丢弃保留的消息。\n\n#### 消息\n\n消息是Pulsar的基础单元，他们是producer向topic发布的内容，consumer从topic消费的内容，（并且会在消息处理时进行确认）\n\n| 组成               | 用途                                                         |\n| ------------------ | ------------------------------------------------------------ |\n| value/data payload | 消息携带的数据，所有 pulsar 的消息携带原始 bytes，但是消息数据也需要遵循数据 shcema |\n| Key                | 可以选择使用Key标记消息，这对于[topic压缩](http://pulsar.apache.org/docs/en/concepts-topic-compaction)等操作非常有用 |\n| properties         | 可选 用户自定义的key/value的属性map                          |\n| Producer Name      | 发布消息的Producer的名称（如果用户没有定义Producer的名称，那么会被自动赋予默认名称） |\n| Sequence ID        | 在topic中，每个Pulsar消息属于一个有序的序列，消息的sequence Id是该消息在整个序列中次序或者说叫坐标 |\n| Publish time       | 消息发布的时间戳(由Producer自动生成)                         |\n| Event time         | 这个时间戳是可选的，为了记录当消息发生某个事件时候的事件，例如处理消息时，如果没有明确设置该项，则消息的事件事件为0 |\n\n#### 生产者\n\nProducer是关联到Topic，并把消息发布到Pulsar broker进行处理的程序\n\n##### 发送模式\n\nPulsar的producer可以同步或者异步的发送消息\n\n| 模式     | 描述                                                         |\n| -------- | ------------------------------------------------------------ |\n| 同步发送 | 发布者在发布消息后等待代理的broker的确认，如果没有收到确认，那么发布者会认为发送操作失败 |\n| 异步发送 | Producer将会把消息访入blocking队列并立即返回，然后客户端类库将在后台把消息发送给代理，如果队列满了（队列最大大小可以配置），那么根据发布者传入的参数与配置，可能在调用Api时被阻止或者立即失败 |\n\n##### 压缩\n\n为了节省带宽，在传输过程中，producer发布的消息可以被压缩，目前pulsar支持两种压缩类型\n\n- [LZ4](https://github.com/lz4/lz4)\n- [ZLIB](https://zlib.net/)\n\n##### 批处理\n\n如果启用了批处理，那么发布者将在单个请求中累积并发送一批消息，批处理的大小取决于配置的最大消息数与最大发布延迟。（Kafka中也有）\n\n#### 消费者\n\n消费者是通过订阅关联的topic，然后接收消息并处理的程序\n\n##### 接收模式\n\n可以同步或者异步的从pulsar的broker中接收消息\n\n| 模式     | 描述                                                         |\n| -------- | ------------------------------------------------------------ |\n| 同步接收 | 同步接收将会阻塞，直到消息可用                               |\n| 异步接收 | 异步接收后会立即返回future值 --- [`CompletableFuture`](http://www.baeldung.com/java-completablefuture) ，一旦新消息可用，立即完成。 |\n\n##### 确认\n\n消费者成功处理了消息，需要发送确认给broker，以便让broker丢弃这条消息（否则broker将一直存储该消息）\n\n可以逐条或累积的确认消息，当累积一起确认时候，消费者只需要确认收到的最后一条消息，所有之前（包括该消息），都不会再发送给消费者\n\n累积确认不能与[共享订阅模式](http://pulsar.apache.org/docs/en/concepts-messaging/#subscription-modes)一起使用，因为共享模式涉及多个消费者可以访问相同的订阅。\n\n##### 监听\n\n客户端类库提供了对consumer的监听实现，例如Java客户端类库中提供了MessageListener  ，在该接口中，一旦接收到新的消息，received方法将被调用\n\n#### Topic\n\n和其他的消息队列一样，Pulsar的topic也是生产者到消费者之间传播消息的通道，Topic的命名是具有明确定义结构的url\n\n```\n{persistent|non-persistent}://tenant/namespace/topic\n```\n\n| Topic名称组成                  | 描述                                                         |\n| ------------------------------ | ------------------------------------------------------------ |\n| `persistent`/ `non-persistent` | 定义topic的类型，pulsar支持非持久和持久的topic， （默认是持久类型，如果你没有指明类型，topic 将会是持久类型）。持久 topic 的所有消息都会保存在硬盘上 （这意味着多块硬盘，除非是单机模式的 broker），反之，非持久 topic 的数据不会存储到硬盘上 |\n| tenant                         | 实例中 topic 的租户。tenant 是 Pulsar 多租户的基本要素。可以被跨集群的传播。 |\n| namespace                      | topic 的管理单元，相关 topic 组的管理机制。大多数的 topic 配置在 namespace 层面生效。 每个 tenant 可以有多个 namespace |\n| topic                          | topic名称的最后组成部分，没有什么特殊的含义                  |\n\n**不需要显式的创建 topic **\n\n**你并不需要显式的创建 topic。如果客户端尝试从一个还不存在的 topic 写或者接受消息，pulsar 将会按在 topic 名称提供的 namnespace 下自动创建 topic。**\n\n#### 命名空间（NameSpace）\n\n命名空间是租户中的逻辑命名法。租户可以通过[管理 API](http://pulsar.apache.org/docs/en/admin-api-namespaces#create) 创建多个名称空间。例如，具有不同应用程序的租户可以为每个应用程序创建单独的命名空间。命名空间允许应用程序创建和管理主题层次结构。主题`my-tenant/app1`是应用程序命名空间`app1`的`my-tenant`。您可以在命名空间下创建任意数量的Topic。\n\n#### 订阅模式\n\n订阅是一种命名配置规则，用于确定如何把消息传递给消费者\n\nPulsar支持三种可用的订阅模式：exclusive（独占），shared（共享），failover （故障转移）\n\n![](Pulsar简介\\pulsar-subscription-modes.png)\n\n##### Exclusive\n\n在exclusive模式下，只允许一个consumer绑定到订阅上，如果多于一个消费者订阅该主题的话，消费者将会收到错误，上图中只有ConsumerA能接收到消息\n\n**Exclusive为默认的订阅模式**\n\n##### Shared\n\n在Share或round robin模式下，多个消费者可以订阅同一个topic，消息通过round robin轮询机制分发给不同的消费者，并且每个消息仅且只会分发给一个消费者，当消费者断开链接时候，发送给他的并且违背确认的所有消息将会被重新安排分发给其他剩余存活的小消费者\n\n**共享模式的局限性**\n\n```\n使用共享模式时需要注意：\n* 共享模式下不能保证消息排序\n* 在共享模式下不能使用累积确认\n```\n\n\n\n![](Pulsar简介\\pulsar-shared-subscriptions.png)\n\n##### 故障转移\n\nFailover 模式中，多个 consumer 可以绑定到同一个 subscription。consumer 将会按字典顺序排序，第一个 consumer 被初始化为唯一接受消息的消费者。这个 consumer 被称为 master consumer。\n\n当 master consumer 断开时，所有的消息（未被确认和后续进入的）将会被分发给队列中的下一个 consumer。\n\n第一个图中，Consumer-C-1 是 master consumer，当 Consumer-C-1 断开连接时，由于 Consumer-C-2 在队列中下一个位置，那么它将会开始接收消息。\n\n![](Pulsar简介\\pulsar-failover-subscriptions.png)\n\n#### 多主题订阅\n\n当消费者订阅 Pulsar 主题时，默认情况下它订阅一个特定主题 。\n\n从 Pulsar 版本 1.23.0 开始，Pulsar 消费者可以同时订阅多个主题。您可以通过两种方式定义主题列表： \n\n* 通过基础的正则表达式（regex），例如 persistent://public/default/finance-.*\n* 通过明确定义的 topic 列表\\\n\n**通过正则订阅多主题时，所有的主题必须在同一个命名空间（namespace)**\n\n订阅多个主题时，Pulsar 客户端将自动调用 Pulsar API 以发现与正则表达式模式 / 列表匹配的主题，然后订阅所有这些主题。如果当前不存在任何主题，则一旦创建主题，消费者将自动订阅它们。\n\n**不能保证顺序性**\n\n**当消费者订阅多个主题时，Pulsar 在单个主题上提供的所有顺序保证都不成立。如果您在使用 Pulsar 时涉及任何严格的顺序要求，我们强烈建议您不要使用此功能**\n\n以下是 Java 的一些多主题订阅示例：\n\n```\nimport java.util.regex.Pattern;\n\nimport org.apache.pulsar.client.api.Consumer;\nimport org.apache.pulsar.client.api.PulsarClient;\n\nPulsarClient pulsarClient = // Instantiate Pulsar client object\n\n// Subscribe to all topics in a namespace\nPattern allTopicsInNamespace = Pattern.compile(\"persistent://public/default/.*\");\nConsumer allTopicsConsumer = pulsarClient.subscribe(allTopicsInNamespace, \"subscription-1\");\n\n// Subscribe to a subsets of topics in a namespace, based on regex\nPattern someTopicsInNamespace = Pattern.compile(\"persistent://public/default/foo.*\");\nConsumer someTopicsConsumer = pulsarClient.subscribe(someTopicsInNamespace, \"subscription-1\");\n```\n\n##### 分区Topic\n\n通常一个 topic 仅被一个 broker 服务，这限制了 topic 最大吞吐量。分区 topic 是特殊的 topic 类型，他可以被多个 broker 处理，这让 topic 有更高的吞吐量。\n\n 其实在背后，分区的 topic 通过 N 个内部 topic 实现，N 是分区的数量。当向分区的 topic 发送消息，每条消息被路由到其中一个 broker。Pulsar 自动处理跨 broker 的分区分布。\n\n\n\n![](Pulsar简介\\partitioning.png)\n\n在这里，主题 **Topic1** 有五个分区（**P0** 到 **P4**），分为三个代理。因为分区比broker多，所以两个broker处理两个分区，而第三个只处理一个（同样，Pulsar 自动处理这个分区的分配）。\n\n该主题的消息将广播给两个消费者。该[路由模式](http://pulsar.apache.org/docs/en/concepts-messaging/#routing-modes)决定了两者的broker来处理每个分区，而[订阅模式](http://pulsar.apache.org/docs/en/concepts-messaging/#subscription-modes)确定哪些消息去哪个消费者。\n\n在大多数情况下，可以单独决定路由和订阅模式。通常，吞吐量问题应指导分区 / 路由决策，而订阅决策应由应用程序语义指导。\n\n在订阅模式如何工作方面，分区主题和普通主题之间没有区别，因为分区仅确定生产者发布消息和消费者处理和确认消息之间发生的情况。\n\n需要通过 [admin API](http://pulsar.apache.org/docs/en/admin-api-overview) 显式创建分区主题。创建主题时可以指定分区数。\n\n#### 路由模式\n\n当发布消息到分区 topic，你必须要指定路由模式。路由模式决定了每条消息被发布到的分区（其实是内部主题）。\n\n 默认情况下有三种路由模式：\n\n \n\n| 模式                     | 描述                                                         | 顺序保证           |\n| ------------------------ | ------------------------------------------------------------ | ------------------ |\n| Key hash                 | 如果 message 指定了 key，producer 将会把 key hash，然后把他分配给指定分区 | 同一个 key 下有序  |\n| single default partition | 如果没有 key，每个生产者的消息将会被路由分发给专用的分区。初始时候随机选择 | 同一个生产者下有序 |\n| round robin 分发         | 如果没有 key，所有的消息通过 round-robin 方式被路由到不同的分区，以达到最大的生产能力 | 无序               |\n\n#### 非持久Topic\n\n默认的，Pulsar 保存所有没有确认的消息到多个 BookKeeper 的 bookies 中（存储节点）。持久 topic 的消息数据可以在 broker 重启或者订阅者出问题的情况下存活下来。 \n\nPulsar 也提供了非持久 topic。非持久 topic 的消息不会被保存在硬盘上，只存活于内存中。当使用非持久 topic 分发时，杀掉 Pulsar 的 broker 或者关闭订阅者，意味着客户端可能会遭遇消息丢失。 \n\n 非持久 topic 有如下格式的名称（注意名字中的 non-persistent）：\n\n```\nnon-persistent://tenant/namespace/topic\n```\n\n非持久 topic 中，broker 会立即发布消息给所有连接的订阅者，而不会在 BookKeeper 中存储。如果有一个订阅者断开连接，broker 将无法重发这些瞬时消息。订阅者将永远也不能收到这些消息了。去掉持久化存储的步骤，在某些情况下，使得非持久 topic 的消息比持久 topic 稍微变快。但是同时，Pulsar 的一些核心优势也丧失掉了 \n\n**非持久 topic，消息数据仅存活在内存。如果 broker 挂掉或者其他情况不能从内存取出，你的消息数据就可能会丢失。只有真的觉得你的使用场景符合，并且你可以忍受时，才可去使用非持久 topic。**\n\n默认非持久 topic 在 broker 上是开启的，你可以通过 broker 的配置关闭。你可以通过使用 pulsar-admin-topics 接口管理非持久 topic。\n\n##### 性能\n\n非持久性消息传递通常比持久消息传递更快，因为broker不会持久保存消息，并且只要将消息传递给所有连接的订阅者，就立即将确认ACK消息发送回生产者。因此，非持久 topic 让 producer 有更低的发布延迟。 \n\n ##### 客户端api\n\nproducer 和 consumer 以连接持久 topic 同样的方式连接到非持久 topic。重要的区别是 topic 的名称必须以 non-persistent 开头。三种订阅模式 --exclusive，shared，failover 对于非持久 topic 都是支持的。 \n\n非持久 topic 的 java consumer \n\n```\nPulsarClient client = PulsarClient.create(\"pulsar://localhost:6650\");\nString npTopic = \"non-persistent://public/default/my-topic\";\nString subscriptionName = \"my-subscription-name\";\n\nConsumer consumer = client.subscribe(npTopic, subscriptionName);\n```\n\n以下是同一个非持久主题的 Java Producer示例：\n\n```\nProducer producer = client.createProducer(npTopic);\n```\n\n#### 消息存留和过期\n\nPulsar Broker的默认设置如下：\n\n- 立即删除所有已经被 cunsumer 确认过的的消息\n- 以消息 backlog 的形式，持久保存所有的未被确认消息\n\n但是，Pulsar 有两个功能，可以覆盖此默认行为：\n\n* 通过对消息的保存，让你可以保存concumer确认过的消息\n\n* 消息过期机制，可以让你为尚未确认的消息设置消息存活时间（TTL）\n\n  **消息保留与消息的TTL在Namespace级别中进行管理请参阅[消息保留和到期](http://pulsar.apache.org/docs/en/cookbooks-retention-expiry)**\n\n  下图说明了这两种概念：\n\n   ![](Pulsar简介\\20181008112559290.png)\n\n  ​\t通过消息保留（如顶部所示），应用于命名空间中所有主题的保留策略表明，即使已经确认了某些消息，也会将这些消息持久地存储在 Pulsar 中。已删除保留策略未涵盖的已确认消息。如果没有保留策略，将删除*所有*已确认的消息。\n\n  ​\t随着消息到期，如下所示，一些消息被删除，即使它们尚未被确认，因为它们已根据应用于命名空间的 TTL 过期（例如，因为已应用了 5 分钟的 TTL 并且消息尚未确认，但已有 10 分钟）。\n\n#### 消息去重\n\n当消息被 Pulsar 持久化多于一次的时候，会发生数据重复。消息去重是 Pulsar 可选的特性，阻止不必要的消息重复，每条消息仅处理一次。\n\n下图展示了开启和关闭消息去重的场景\n\n![](Pulsar简介\\message-deduplication.png)\n\n在顶部显示的方案中禁用了消息重复数据删除。这里，生产者发布关于主题的消息 1; 消息到达 Pulsar的Broker并持久化到 BookKeeper。然后，生产者再次发送消息 1（在这种情况下由于一些重试逻辑），并且消息由broker接收并再次存储在 BookKeeper 中，这意味着发生了重复。\n\n在底部的第二个场景中，生产者发布消息 1，该消息由broker接收并持久化，如第一个场景中那样。但是，当生产者再次尝试发布消息时，broker知道它已经接收消息 1，因此不会保留消息。\n\n##### 生产者的幂等性\n\n**消息去重的另外一种方法是确保每条消息仅被生产一次。这种方法通常被叫做生产者幂等**。这种方式的缺点是，把消息去重的工作推给了应用去做。在 Pulsar 中，这是被 broker 处理的，这意味着你不需要修改你的客户端代码，你只需要做一些管理上的变化（参考 [Managing message deduplication](http://pulsar.apache.org/docs/en/cookbooks-deduplication)） \n\n##### 去重与实际一次语义\n\n消息去重，使 Pulsar 成为与流处理引擎（SPE）或者其他寻求 “实际一次” 处理语义的系统连接的完美消息系统。消息系统若不提供自动消息去重，则需要 SPE 或者其他系统保证去重。这意味着严格的消息顺序来自于让程序承担额外的去重工作。使用 Pulsar，严格的顺序保证不会带来任何应用层面的消耗。\n\n**更深入的信息可以参考 [this post](https://streaml.io/blog/pulsar-effectively-once/) 及 [Streamlio blog](https://streaml.io/blog)**\n\n[]: http://pulsar.apache.org/docs/en/concepts-messaging/\t\"pulsar官方wiki\"\n[]: https://blog.csdn.net/liyiming2017/article/details/82966031\t\"稀有气体CSDN博客\"\n\n","slug":"Pulsar简介","published":1,"updated":"2022-09-03T07:30:55.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz848001btwfascst43vl","content":"<p>下一世代的MQ-Pulsar简述<a id=\"more\"></a></p>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Pulsar 最初由 yahoo 开发，是一个多租户、高可用，服务间的消息系统。现在由 Apache Software Foundation 管理。</p>\n<p> Pulsar 的主要特性如下；</p>\n<pre><code>Pular 通过跨集群的消息无缝 geo-replication，让 Pular 实例原生支持多集群</code></pre><ul>\n<li>很低的发布和端到端延迟</li>\n<li>无缝的可扩展性，乃至上百万个 topic</li>\n<li>简洁的 client API，支持 Java、Python、C++</li>\n<li>多种 topic 的订阅模式（独占、共享、灾备）</li>\n<li>使用 Apache BookKeeper，确保传递的消息被持久存储</li>\n<li>serverless 轻量级计算框架 Pulsar Function，提供流原生数据处理。</li>\n<li>serverless connector 框架 Pulsar IO。它构建于 Pulsar Function 之上，使得从 Apache Pular 移入和移出数据更为简单</li>\n<li>分层存储把过期的数据从热活存储区转移到冷 / 长期存储区（比如 S3 和 GCS）</li>\n</ul>\n<h3 id=\"消息概念\"><a href=\"#消息概念\" class=\"headerlink\" title=\"消息概念\"></a>消息概念</h3><p>Pulsar基于 pub-sub（即发布-订阅模式），在此模式中，生产者将消息发布到主题，然后消费者可以订阅这些主题，处理传入的消息，并在处理完成时发送确认。</p>\n<p>创建订阅后，即使消费者断开链接，Pulsar也会保留所有消息，仅当消费者确认已经成功处理后，才会丢弃保留的消息。</p>\n<h4 id=\"消息\"><a href=\"#消息\" class=\"headerlink\" title=\"消息\"></a>消息</h4><p>消息是Pulsar的基础单元，他们是producer向topic发布的内容，consumer从topic消费的内容，（并且会在消息处理时进行确认）</p>\n<table>\n<thead>\n<tr>\n<th>组成</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>value/data payload</td>\n<td>消息携带的数据，所有 pulsar 的消息携带原始 bytes，但是消息数据也需要遵循数据 shcema</td>\n</tr>\n<tr>\n<td>Key</td>\n<td>可以选择使用Key标记消息，这对于<a href=\"http://pulsar.apache.org/docs/en/concepts-topic-compaction\" target=\"_blank\" rel=\"noopener\">topic压缩</a>等操作非常有用</td>\n</tr>\n<tr>\n<td>properties</td>\n<td>可选 用户自定义的key/value的属性map</td>\n</tr>\n<tr>\n<td>Producer Name</td>\n<td>发布消息的Producer的名称（如果用户没有定义Producer的名称，那么会被自动赋予默认名称）</td>\n</tr>\n<tr>\n<td>Sequence ID</td>\n<td>在topic中，每个Pulsar消息属于一个有序的序列，消息的sequence Id是该消息在整个序列中次序或者说叫坐标</td>\n</tr>\n<tr>\n<td>Publish time</td>\n<td>消息发布的时间戳(由Producer自动生成)</td>\n</tr>\n<tr>\n<td>Event time</td>\n<td>这个时间戳是可选的，为了记录当消息发生某个事件时候的事件，例如处理消息时，如果没有明确设置该项，则消息的事件事件为0</td>\n</tr>\n</tbody></table>\n<h4 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h4><p>Producer是关联到Topic，并把消息发布到Pulsar broker进行处理的程序</p>\n<h5 id=\"发送模式\"><a href=\"#发送模式\" class=\"headerlink\" title=\"发送模式\"></a>发送模式</h5><p>Pulsar的producer可以同步或者异步的发送消息</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>同步发送</td>\n<td>发布者在发布消息后等待代理的broker的确认，如果没有收到确认，那么发布者会认为发送操作失败</td>\n</tr>\n<tr>\n<td>异步发送</td>\n<td>Producer将会把消息访入blocking队列并立即返回，然后客户端类库将在后台把消息发送给代理，如果队列满了（队列最大大小可以配置），那么根据发布者传入的参数与配置，可能在调用Api时被阻止或者立即失败</td>\n</tr>\n</tbody></table>\n<h5 id=\"压缩\"><a href=\"#压缩\" class=\"headerlink\" title=\"压缩\"></a>压缩</h5><p>为了节省带宽，在传输过程中，producer发布的消息可以被压缩，目前pulsar支持两种压缩类型</p>\n<ul>\n<li><a href=\"https://github.com/lz4/lz4\" target=\"_blank\" rel=\"noopener\">LZ4</a></li>\n<li><a href=\"https://zlib.net/\" target=\"_blank\" rel=\"noopener\">ZLIB</a></li>\n</ul>\n<h5 id=\"批处理\"><a href=\"#批处理\" class=\"headerlink\" title=\"批处理\"></a>批处理</h5><p>如果启用了批处理，那么发布者将在单个请求中累积并发送一批消息，批处理的大小取决于配置的最大消息数与最大发布延迟。（Kafka中也有）</p>\n<h4 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h4><p>消费者是通过订阅关联的topic，然后接收消息并处理的程序</p>\n<h5 id=\"接收模式\"><a href=\"#接收模式\" class=\"headerlink\" title=\"接收模式\"></a>接收模式</h5><p>可以同步或者异步的从pulsar的broker中接收消息</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>同步接收</td>\n<td>同步接收将会阻塞，直到消息可用</td>\n</tr>\n<tr>\n<td>异步接收</td>\n<td>异步接收后会立即返回future值 — <a href=\"http://www.baeldung.com/java-completablefuture\" target=\"_blank\" rel=\"noopener\"><code>CompletableFuture</code></a> ，一旦新消息可用，立即完成。</td>\n</tr>\n</tbody></table>\n<h5 id=\"确认\"><a href=\"#确认\" class=\"headerlink\" title=\"确认\"></a>确认</h5><p>消费者成功处理了消息，需要发送确认给broker，以便让broker丢弃这条消息（否则broker将一直存储该消息）</p>\n<p>可以逐条或累积的确认消息，当累积一起确认时候，消费者只需要确认收到的最后一条消息，所有之前（包括该消息），都不会再发送给消费者</p>\n<p>累积确认不能与<a href=\"http://pulsar.apache.org/docs/en/concepts-messaging/#subscription-modes\" target=\"_blank\" rel=\"noopener\">共享订阅模式</a>一起使用，因为共享模式涉及多个消费者可以访问相同的订阅。</p>\n<h5 id=\"监听\"><a href=\"#监听\" class=\"headerlink\" title=\"监听\"></a>监听</h5><p>客户端类库提供了对consumer的监听实现，例如Java客户端类库中提供了MessageListener  ，在该接口中，一旦接收到新的消息，received方法将被调用</p>\n<h4 id=\"Topic\"><a href=\"#Topic\" class=\"headerlink\" title=\"Topic\"></a>Topic</h4><p>和其他的消息队列一样，Pulsar的topic也是生产者到消费者之间传播消息的通道，Topic的命名是具有明确定义结构的url</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;persistent|non-persistent&#125;://tenant/namespace/topic</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>Topic名称组成</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>persistent</code>/ <code>non-persistent</code></td>\n<td>定义topic的类型，pulsar支持非持久和持久的topic， （默认是持久类型，如果你没有指明类型，topic 将会是持久类型）。持久 topic 的所有消息都会保存在硬盘上 （这意味着多块硬盘，除非是单机模式的 broker），反之，非持久 topic 的数据不会存储到硬盘上</td>\n</tr>\n<tr>\n<td>tenant</td>\n<td>实例中 topic 的租户。tenant 是 Pulsar 多租户的基本要素。可以被跨集群的传播。</td>\n</tr>\n<tr>\n<td>namespace</td>\n<td>topic 的管理单元，相关 topic 组的管理机制。大多数的 topic 配置在 namespace 层面生效。 每个 tenant 可以有多个 namespace</td>\n</tr>\n<tr>\n<td>topic</td>\n<td>topic名称的最后组成部分，没有什么特殊的含义</td>\n</tr>\n</tbody></table>\n<p>*<em>不需要显式的创建 topic *</em></p>\n<p><strong>你并不需要显式的创建 topic。如果客户端尝试从一个还不存在的 topic 写或者接受消息，pulsar 将会按在 topic 名称提供的 namnespace 下自动创建 topic。</strong></p>\n<h4 id=\"命名空间（NameSpace）\"><a href=\"#命名空间（NameSpace）\" class=\"headerlink\" title=\"命名空间（NameSpace）\"></a>命名空间（NameSpace）</h4><p>命名空间是租户中的逻辑命名法。租户可以通过<a href=\"http://pulsar.apache.org/docs/en/admin-api-namespaces#create\" target=\"_blank\" rel=\"noopener\">管理 API</a> 创建多个名称空间。例如，具有不同应用程序的租户可以为每个应用程序创建单独的命名空间。命名空间允许应用程序创建和管理主题层次结构。主题<code>my-tenant/app1</code>是应用程序命名空间<code>app1</code>的<code>my-tenant</code>。您可以在命名空间下创建任意数量的Topic。</p>\n<h4 id=\"订阅模式\"><a href=\"#订阅模式\" class=\"headerlink\" title=\"订阅模式\"></a>订阅模式</h4><p>订阅是一种命名配置规则，用于确定如何把消息传递给消费者</p>\n<p>Pulsar支持三种可用的订阅模式：exclusive（独占），shared（共享），failover （故障转移）</p>\n<p><img src=\"/2018/12/02/Pulsar简介/Pulsar%E7%AE%80%E4%BB%8B%5Cpulsar-subscription-modes.png\" alt></p>\n<h5 id=\"Exclusive\"><a href=\"#Exclusive\" class=\"headerlink\" title=\"Exclusive\"></a>Exclusive</h5><p>在exclusive模式下，只允许一个consumer绑定到订阅上，如果多于一个消费者订阅该主题的话，消费者将会收到错误，上图中只有ConsumerA能接收到消息</p>\n<p><strong>Exclusive为默认的订阅模式</strong></p>\n<h5 id=\"Shared\"><a href=\"#Shared\" class=\"headerlink\" title=\"Shared\"></a>Shared</h5><p>在Share或round robin模式下，多个消费者可以订阅同一个topic，消息通过round robin轮询机制分发给不同的消费者，并且每个消息仅且只会分发给一个消费者，当消费者断开链接时候，发送给他的并且违背确认的所有消息将会被重新安排分发给其他剩余存活的小消费者</p>\n<p><strong>共享模式的局限性</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用共享模式时需要注意：</span><br><span class=\"line\">* 共享模式下不能保证消息排序</span><br><span class=\"line\">* 在共享模式下不能使用累积确认</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2018/12/02/Pulsar简介/Pulsar%E7%AE%80%E4%BB%8B%5Cpulsar-shared-subscriptions.png\" alt></p>\n<h5 id=\"故障转移\"><a href=\"#故障转移\" class=\"headerlink\" title=\"故障转移\"></a>故障转移</h5><p>Failover 模式中，多个 consumer 可以绑定到同一个 subscription。consumer 将会按字典顺序排序，第一个 consumer 被初始化为唯一接受消息的消费者。这个 consumer 被称为 master consumer。</p>\n<p>当 master consumer 断开时，所有的消息（未被确认和后续进入的）将会被分发给队列中的下一个 consumer。</p>\n<p>第一个图中，Consumer-C-1 是 master consumer，当 Consumer-C-1 断开连接时，由于 Consumer-C-2 在队列中下一个位置，那么它将会开始接收消息。</p>\n<p><img src=\"/2018/12/02/Pulsar简介/Pulsar%E7%AE%80%E4%BB%8B%5Cpulsar-failover-subscriptions.png\" alt></p>\n<h4 id=\"多主题订阅\"><a href=\"#多主题订阅\" class=\"headerlink\" title=\"多主题订阅\"></a>多主题订阅</h4><p>当消费者订阅 Pulsar 主题时，默认情况下它订阅一个特定主题 。</p>\n<p>从 Pulsar 版本 1.23.0 开始，Pulsar 消费者可以同时订阅多个主题。您可以通过两种方式定义主题列表： </p>\n<ul>\n<li>通过基础的正则表达式（regex），例如 persistent://public/default/finance-.*</li>\n<li>通过明确定义的 topic 列表\\</li>\n</ul>\n<p><strong>通过正则订阅多主题时，所有的主题必须在同一个命名空间（namespace)</strong></p>\n<p>订阅多个主题时，Pulsar 客户端将自动调用 Pulsar API 以发现与正则表达式模式 / 列表匹配的主题，然后订阅所有这些主题。如果当前不存在任何主题，则一旦创建主题，消费者将自动订阅它们。</p>\n<p><strong>不能保证顺序性</strong></p>\n<p><strong>当消费者订阅多个主题时，Pulsar 在单个主题上提供的所有顺序保证都不成立。如果您在使用 Pulsar 时涉及任何严格的顺序要求，我们强烈建议您不要使用此功能</strong></p>\n<p>以下是 Java 的一些多主题订阅示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.regex.Pattern;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.pulsar.client.api.Consumer;</span><br><span class=\"line\">import org.apache.pulsar.client.api.PulsarClient;</span><br><span class=\"line\"></span><br><span class=\"line\">PulsarClient pulsarClient = // Instantiate Pulsar client object</span><br><span class=\"line\"></span><br><span class=\"line\">// Subscribe to all topics in a namespace</span><br><span class=\"line\">Pattern allTopicsInNamespace = Pattern.compile(&quot;persistent://public/default/.*&quot;);</span><br><span class=\"line\">Consumer allTopicsConsumer = pulsarClient.subscribe(allTopicsInNamespace, &quot;subscription-1&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// Subscribe to a subsets of topics in a namespace, based on regex</span><br><span class=\"line\">Pattern someTopicsInNamespace = Pattern.compile(&quot;persistent://public/default/foo.*&quot;);</span><br><span class=\"line\">Consumer someTopicsConsumer = pulsarClient.subscribe(someTopicsInNamespace, &quot;subscription-1&quot;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"分区Topic\"><a href=\"#分区Topic\" class=\"headerlink\" title=\"分区Topic\"></a>分区Topic</h5><p>通常一个 topic 仅被一个 broker 服务，这限制了 topic 最大吞吐量。分区 topic 是特殊的 topic 类型，他可以被多个 broker 处理，这让 topic 有更高的吞吐量。</p>\n<p> 其实在背后，分区的 topic 通过 N 个内部 topic 实现，N 是分区的数量。当向分区的 topic 发送消息，每条消息被路由到其中一个 broker。Pulsar 自动处理跨 broker 的分区分布。</p>\n<p><img src=\"/2018/12/02/Pulsar简介/Pulsar%E7%AE%80%E4%BB%8B%5Cpartitioning.png\" alt></p>\n<p>在这里，主题 <strong>Topic1</strong> 有五个分区（<strong>P0</strong> 到 <strong>P4</strong>），分为三个代理。因为分区比broker多，所以两个broker处理两个分区，而第三个只处理一个（同样，Pulsar 自动处理这个分区的分配）。</p>\n<p>该主题的消息将广播给两个消费者。该<a href=\"http://pulsar.apache.org/docs/en/concepts-messaging/#routing-modes\" target=\"_blank\" rel=\"noopener\">路由模式</a>决定了两者的broker来处理每个分区，而<a href=\"http://pulsar.apache.org/docs/en/concepts-messaging/#subscription-modes\" target=\"_blank\" rel=\"noopener\">订阅模式</a>确定哪些消息去哪个消费者。</p>\n<p>在大多数情况下，可以单独决定路由和订阅模式。通常，吞吐量问题应指导分区 / 路由决策，而订阅决策应由应用程序语义指导。</p>\n<p>在订阅模式如何工作方面，分区主题和普通主题之间没有区别，因为分区仅确定生产者发布消息和消费者处理和确认消息之间发生的情况。</p>\n<p>需要通过 <a href=\"http://pulsar.apache.org/docs/en/admin-api-overview\" target=\"_blank\" rel=\"noopener\">admin API</a> 显式创建分区主题。创建主题时可以指定分区数。</p>\n<h4 id=\"路由模式\"><a href=\"#路由模式\" class=\"headerlink\" title=\"路由模式\"></a>路由模式</h4><p>当发布消息到分区 topic，你必须要指定路由模式。路由模式决定了每条消息被发布到的分区（其实是内部主题）。</p>\n<p> 默认情况下有三种路由模式：</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>描述</th>\n<th>顺序保证</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Key hash</td>\n<td>如果 message 指定了 key，producer 将会把 key hash，然后把他分配给指定分区</td>\n<td>同一个 key 下有序</td>\n</tr>\n<tr>\n<td>single default partition</td>\n<td>如果没有 key，每个生产者的消息将会被路由分发给专用的分区。初始时候随机选择</td>\n<td>同一个生产者下有序</td>\n</tr>\n<tr>\n<td>round robin 分发</td>\n<td>如果没有 key，所有的消息通过 round-robin 方式被路由到不同的分区，以达到最大的生产能力</td>\n<td>无序</td>\n</tr>\n</tbody></table>\n<h4 id=\"非持久Topic\"><a href=\"#非持久Topic\" class=\"headerlink\" title=\"非持久Topic\"></a>非持久Topic</h4><p>默认的，Pulsar 保存所有没有确认的消息到多个 BookKeeper 的 bookies 中（存储节点）。持久 topic 的消息数据可以在 broker 重启或者订阅者出问题的情况下存活下来。 </p>\n<p>Pulsar 也提供了非持久 topic。非持久 topic 的消息不会被保存在硬盘上，只存活于内存中。当使用非持久 topic 分发时，杀掉 Pulsar 的 broker 或者关闭订阅者，意味着客户端可能会遭遇消息丢失。 </p>\n<p> 非持久 topic 有如下格式的名称（注意名字中的 non-persistent）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">non-persistent://tenant/namespace/topic</span><br></pre></td></tr></table></figure>\n\n<p>非持久 topic 中，broker 会立即发布消息给所有连接的订阅者，而不会在 BookKeeper 中存储。如果有一个订阅者断开连接，broker 将无法重发这些瞬时消息。订阅者将永远也不能收到这些消息了。去掉持久化存储的步骤，在某些情况下，使得非持久 topic 的消息比持久 topic 稍微变快。但是同时，Pulsar 的一些核心优势也丧失掉了 </p>\n<p><strong>非持久 topic，消息数据仅存活在内存。如果 broker 挂掉或者其他情况不能从内存取出，你的消息数据就可能会丢失。只有真的觉得你的使用场景符合，并且你可以忍受时，才可去使用非持久 topic。</strong></p>\n<p>默认非持久 topic 在 broker 上是开启的，你可以通过 broker 的配置关闭。你可以通过使用 pulsar-admin-topics 接口管理非持久 topic。</p>\n<h5 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h5><p>非持久性消息传递通常比持久消息传递更快，因为broker不会持久保存消息，并且只要将消息传递给所有连接的订阅者，就立即将确认ACK消息发送回生产者。因此，非持久 topic 让 producer 有更低的发布延迟。 </p>\n<h5 id=\"客户端api\"><a href=\"#客户端api\" class=\"headerlink\" title=\"客户端api\"></a>客户端api</h5><p>producer 和 consumer 以连接持久 topic 同样的方式连接到非持久 topic。重要的区别是 topic 的名称必须以 non-persistent 开头。三种订阅模式 –exclusive，shared，failover 对于非持久 topic 都是支持的。 </p>\n<p>非持久 topic 的 java consumer </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PulsarClient client = PulsarClient.create(&quot;pulsar://localhost:6650&quot;);</span><br><span class=\"line\">String npTopic = &quot;non-persistent://public/default/my-topic&quot;;</span><br><span class=\"line\">String subscriptionName = &quot;my-subscription-name&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">Consumer consumer = client.subscribe(npTopic, subscriptionName);</span><br></pre></td></tr></table></figure>\n\n<p>以下是同一个非持久主题的 Java Producer示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Producer producer = client.createProducer(npTopic);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"消息存留和过期\"><a href=\"#消息存留和过期\" class=\"headerlink\" title=\"消息存留和过期\"></a>消息存留和过期</h4><p>Pulsar Broker的默认设置如下：</p>\n<ul>\n<li>立即删除所有已经被 cunsumer 确认过的的消息</li>\n<li>以消息 backlog 的形式，持久保存所有的未被确认消息</li>\n</ul>\n<p>但是，Pulsar 有两个功能，可以覆盖此默认行为：</p>\n<ul>\n<li><p>通过对消息的保存，让你可以保存concumer确认过的消息</p>\n</li>\n<li><p>消息过期机制，可以让你为尚未确认的消息设置消息存活时间（TTL）</p>\n<p><strong>消息保留与消息的TTL在Namespace级别中进行管理请参阅<a href=\"http://pulsar.apache.org/docs/en/cookbooks-retention-expiry\" target=\"_blank\" rel=\"noopener\">消息保留和到期</a></strong></p>\n<p>下图说明了这两种概念：</p>\n<p> <img src=\"/2018/12/02/Pulsar简介/Pulsar%E7%AE%80%E4%BB%8B%5C20181008112559290.png\" alt></p>\n<p>​    通过消息保留（如顶部所示），应用于命名空间中所有主题的保留策略表明，即使已经确认了某些消息，也会将这些消息持久地存储在 Pulsar 中。已删除保留策略未涵盖的已确认消息。如果没有保留策略，将删除<em>所有</em>已确认的消息。</p>\n<p>​    随着消息到期，如下所示，一些消息被删除，即使它们尚未被确认，因为它们已根据应用于命名空间的 TTL 过期（例如，因为已应用了 5 分钟的 TTL 并且消息尚未确认，但已有 10 分钟）。</p>\n</li>\n</ul>\n<h4 id=\"消息去重\"><a href=\"#消息去重\" class=\"headerlink\" title=\"消息去重\"></a>消息去重</h4><p>当消息被 Pulsar 持久化多于一次的时候，会发生数据重复。消息去重是 Pulsar 可选的特性，阻止不必要的消息重复，每条消息仅处理一次。</p>\n<p>下图展示了开启和关闭消息去重的场景</p>\n<p><img src=\"/2018/12/02/Pulsar简介/Pulsar%E7%AE%80%E4%BB%8B%5Cmessage-deduplication.png\" alt></p>\n<p>在顶部显示的方案中禁用了消息重复数据删除。这里，生产者发布关于主题的消息 1; 消息到达 Pulsar的Broker并持久化到 BookKeeper。然后，生产者再次发送消息 1（在这种情况下由于一些重试逻辑），并且消息由broker接收并再次存储在 BookKeeper 中，这意味着发生了重复。</p>\n<p>在底部的第二个场景中，生产者发布消息 1，该消息由broker接收并持久化，如第一个场景中那样。但是，当生产者再次尝试发布消息时，broker知道它已经接收消息 1，因此不会保留消息。</p>\n<h5 id=\"生产者的幂等性\"><a href=\"#生产者的幂等性\" class=\"headerlink\" title=\"生产者的幂等性\"></a>生产者的幂等性</h5><p><strong>消息去重的另外一种方法是确保每条消息仅被生产一次。这种方法通常被叫做生产者幂等</strong>。这种方式的缺点是，把消息去重的工作推给了应用去做。在 Pulsar 中，这是被 broker 处理的，这意味着你不需要修改你的客户端代码，你只需要做一些管理上的变化（参考 <a href=\"http://pulsar.apache.org/docs/en/cookbooks-deduplication\" target=\"_blank\" rel=\"noopener\">Managing message deduplication</a>） </p>\n<h5 id=\"去重与实际一次语义\"><a href=\"#去重与实际一次语义\" class=\"headerlink\" title=\"去重与实际一次语义\"></a>去重与实际一次语义</h5><p>消息去重，使 Pulsar 成为与流处理引擎（SPE）或者其他寻求 “实际一次” 处理语义的系统连接的完美消息系统。消息系统若不提供自动消息去重，则需要 SPE 或者其他系统保证去重。这意味着严格的消息顺序来自于让程序承担额外的去重工作。使用 Pulsar，严格的顺序保证不会带来任何应用层面的消耗。</p>\n<p><strong>更深入的信息可以参考 <a href=\"https://streaml.io/blog/pulsar-effectively-once/\" target=\"_blank\" rel=\"noopener\">this post</a> 及 <a href=\"https://streaml.io/blog\" target=\"_blank\" rel=\"noopener\">Streamlio blog</a></strong></p>\n<p>[]: <a href=\"http://pulsar.apache.org/docs/en/concepts-messaging/\" target=\"_blank\" rel=\"noopener\">http://pulsar.apache.org/docs/en/concepts-messaging/</a>    “pulsar官方wiki”<br>[]: <a href=\"https://blog.csdn.net/liyiming2017/article/details/82966031\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/liyiming2017/article/details/82966031</a>    “稀有气体CSDN博客”</p>\n","site":{"data":{}},"excerpt":"<p>下一世代的MQ-Pulsar简述</p>","more":"<p></p>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Pulsar 最初由 yahoo 开发，是一个多租户、高可用，服务间的消息系统。现在由 Apache Software Foundation 管理。</p>\n<p> Pulsar 的主要特性如下；</p>\n<pre><code>Pular 通过跨集群的消息无缝 geo-replication，让 Pular 实例原生支持多集群</code></pre><ul>\n<li>很低的发布和端到端延迟</li>\n<li>无缝的可扩展性，乃至上百万个 topic</li>\n<li>简洁的 client API，支持 Java、Python、C++</li>\n<li>多种 topic 的订阅模式（独占、共享、灾备）</li>\n<li>使用 Apache BookKeeper，确保传递的消息被持久存储</li>\n<li>serverless 轻量级计算框架 Pulsar Function，提供流原生数据处理。</li>\n<li>serverless connector 框架 Pulsar IO。它构建于 Pulsar Function 之上，使得从 Apache Pular 移入和移出数据更为简单</li>\n<li>分层存储把过期的数据从热活存储区转移到冷 / 长期存储区（比如 S3 和 GCS）</li>\n</ul>\n<h3 id=\"消息概念\"><a href=\"#消息概念\" class=\"headerlink\" title=\"消息概念\"></a>消息概念</h3><p>Pulsar基于 pub-sub（即发布-订阅模式），在此模式中，生产者将消息发布到主题，然后消费者可以订阅这些主题，处理传入的消息，并在处理完成时发送确认。</p>\n<p>创建订阅后，即使消费者断开链接，Pulsar也会保留所有消息，仅当消费者确认已经成功处理后，才会丢弃保留的消息。</p>\n<h4 id=\"消息\"><a href=\"#消息\" class=\"headerlink\" title=\"消息\"></a>消息</h4><p>消息是Pulsar的基础单元，他们是producer向topic发布的内容，consumer从topic消费的内容，（并且会在消息处理时进行确认）</p>\n<table>\n<thead>\n<tr>\n<th>组成</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>value/data payload</td>\n<td>消息携带的数据，所有 pulsar 的消息携带原始 bytes，但是消息数据也需要遵循数据 shcema</td>\n</tr>\n<tr>\n<td>Key</td>\n<td>可以选择使用Key标记消息，这对于<a href=\"http://pulsar.apache.org/docs/en/concepts-topic-compaction\" target=\"_blank\" rel=\"noopener\">topic压缩</a>等操作非常有用</td>\n</tr>\n<tr>\n<td>properties</td>\n<td>可选 用户自定义的key/value的属性map</td>\n</tr>\n<tr>\n<td>Producer Name</td>\n<td>发布消息的Producer的名称（如果用户没有定义Producer的名称，那么会被自动赋予默认名称）</td>\n</tr>\n<tr>\n<td>Sequence ID</td>\n<td>在topic中，每个Pulsar消息属于一个有序的序列，消息的sequence Id是该消息在整个序列中次序或者说叫坐标</td>\n</tr>\n<tr>\n<td>Publish time</td>\n<td>消息发布的时间戳(由Producer自动生成)</td>\n</tr>\n<tr>\n<td>Event time</td>\n<td>这个时间戳是可选的，为了记录当消息发生某个事件时候的事件，例如处理消息时，如果没有明确设置该项，则消息的事件事件为0</td>\n</tr>\n</tbody></table>\n<h4 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h4><p>Producer是关联到Topic，并把消息发布到Pulsar broker进行处理的程序</p>\n<h5 id=\"发送模式\"><a href=\"#发送模式\" class=\"headerlink\" title=\"发送模式\"></a>发送模式</h5><p>Pulsar的producer可以同步或者异步的发送消息</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>同步发送</td>\n<td>发布者在发布消息后等待代理的broker的确认，如果没有收到确认，那么发布者会认为发送操作失败</td>\n</tr>\n<tr>\n<td>异步发送</td>\n<td>Producer将会把消息访入blocking队列并立即返回，然后客户端类库将在后台把消息发送给代理，如果队列满了（队列最大大小可以配置），那么根据发布者传入的参数与配置，可能在调用Api时被阻止或者立即失败</td>\n</tr>\n</tbody></table>\n<h5 id=\"压缩\"><a href=\"#压缩\" class=\"headerlink\" title=\"压缩\"></a>压缩</h5><p>为了节省带宽，在传输过程中，producer发布的消息可以被压缩，目前pulsar支持两种压缩类型</p>\n<ul>\n<li><a href=\"https://github.com/lz4/lz4\" target=\"_blank\" rel=\"noopener\">LZ4</a></li>\n<li><a href=\"https://zlib.net/\" target=\"_blank\" rel=\"noopener\">ZLIB</a></li>\n</ul>\n<h5 id=\"批处理\"><a href=\"#批处理\" class=\"headerlink\" title=\"批处理\"></a>批处理</h5><p>如果启用了批处理，那么发布者将在单个请求中累积并发送一批消息，批处理的大小取决于配置的最大消息数与最大发布延迟。（Kafka中也有）</p>\n<h4 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h4><p>消费者是通过订阅关联的topic，然后接收消息并处理的程序</p>\n<h5 id=\"接收模式\"><a href=\"#接收模式\" class=\"headerlink\" title=\"接收模式\"></a>接收模式</h5><p>可以同步或者异步的从pulsar的broker中接收消息</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>同步接收</td>\n<td>同步接收将会阻塞，直到消息可用</td>\n</tr>\n<tr>\n<td>异步接收</td>\n<td>异步接收后会立即返回future值 — <a href=\"http://www.baeldung.com/java-completablefuture\" target=\"_blank\" rel=\"noopener\"><code>CompletableFuture</code></a> ，一旦新消息可用，立即完成。</td>\n</tr>\n</tbody></table>\n<h5 id=\"确认\"><a href=\"#确认\" class=\"headerlink\" title=\"确认\"></a>确认</h5><p>消费者成功处理了消息，需要发送确认给broker，以便让broker丢弃这条消息（否则broker将一直存储该消息）</p>\n<p>可以逐条或累积的确认消息，当累积一起确认时候，消费者只需要确认收到的最后一条消息，所有之前（包括该消息），都不会再发送给消费者</p>\n<p>累积确认不能与<a href=\"http://pulsar.apache.org/docs/en/concepts-messaging/#subscription-modes\" target=\"_blank\" rel=\"noopener\">共享订阅模式</a>一起使用，因为共享模式涉及多个消费者可以访问相同的订阅。</p>\n<h5 id=\"监听\"><a href=\"#监听\" class=\"headerlink\" title=\"监听\"></a>监听</h5><p>客户端类库提供了对consumer的监听实现，例如Java客户端类库中提供了MessageListener  ，在该接口中，一旦接收到新的消息，received方法将被调用</p>\n<h4 id=\"Topic\"><a href=\"#Topic\" class=\"headerlink\" title=\"Topic\"></a>Topic</h4><p>和其他的消息队列一样，Pulsar的topic也是生产者到消费者之间传播消息的通道，Topic的命名是具有明确定义结构的url</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;persistent|non-persistent&#125;://tenant/namespace/topic</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>Topic名称组成</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>persistent</code>/ <code>non-persistent</code></td>\n<td>定义topic的类型，pulsar支持非持久和持久的topic， （默认是持久类型，如果你没有指明类型，topic 将会是持久类型）。持久 topic 的所有消息都会保存在硬盘上 （这意味着多块硬盘，除非是单机模式的 broker），反之，非持久 topic 的数据不会存储到硬盘上</td>\n</tr>\n<tr>\n<td>tenant</td>\n<td>实例中 topic 的租户。tenant 是 Pulsar 多租户的基本要素。可以被跨集群的传播。</td>\n</tr>\n<tr>\n<td>namespace</td>\n<td>topic 的管理单元，相关 topic 组的管理机制。大多数的 topic 配置在 namespace 层面生效。 每个 tenant 可以有多个 namespace</td>\n</tr>\n<tr>\n<td>topic</td>\n<td>topic名称的最后组成部分，没有什么特殊的含义</td>\n</tr>\n</tbody></table>\n<p>*<em>不需要显式的创建 topic *</em></p>\n<p><strong>你并不需要显式的创建 topic。如果客户端尝试从一个还不存在的 topic 写或者接受消息，pulsar 将会按在 topic 名称提供的 namnespace 下自动创建 topic。</strong></p>\n<h4 id=\"命名空间（NameSpace）\"><a href=\"#命名空间（NameSpace）\" class=\"headerlink\" title=\"命名空间（NameSpace）\"></a>命名空间（NameSpace）</h4><p>命名空间是租户中的逻辑命名法。租户可以通过<a href=\"http://pulsar.apache.org/docs/en/admin-api-namespaces#create\" target=\"_blank\" rel=\"noopener\">管理 API</a> 创建多个名称空间。例如，具有不同应用程序的租户可以为每个应用程序创建单独的命名空间。命名空间允许应用程序创建和管理主题层次结构。主题<code>my-tenant/app1</code>是应用程序命名空间<code>app1</code>的<code>my-tenant</code>。您可以在命名空间下创建任意数量的Topic。</p>\n<h4 id=\"订阅模式\"><a href=\"#订阅模式\" class=\"headerlink\" title=\"订阅模式\"></a>订阅模式</h4><p>订阅是一种命名配置规则，用于确定如何把消息传递给消费者</p>\n<p>Pulsar支持三种可用的订阅模式：exclusive（独占），shared（共享），failover （故障转移）</p>\n<p><img src=\"/2018/12/02/Pulsar简介/Pulsar%E7%AE%80%E4%BB%8B%5Cpulsar-subscription-modes.png\" alt></p>\n<h5 id=\"Exclusive\"><a href=\"#Exclusive\" class=\"headerlink\" title=\"Exclusive\"></a>Exclusive</h5><p>在exclusive模式下，只允许一个consumer绑定到订阅上，如果多于一个消费者订阅该主题的话，消费者将会收到错误，上图中只有ConsumerA能接收到消息</p>\n<p><strong>Exclusive为默认的订阅模式</strong></p>\n<h5 id=\"Shared\"><a href=\"#Shared\" class=\"headerlink\" title=\"Shared\"></a>Shared</h5><p>在Share或round robin模式下，多个消费者可以订阅同一个topic，消息通过round robin轮询机制分发给不同的消费者，并且每个消息仅且只会分发给一个消费者，当消费者断开链接时候，发送给他的并且违背确认的所有消息将会被重新安排分发给其他剩余存活的小消费者</p>\n<p><strong>共享模式的局限性</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用共享模式时需要注意：</span><br><span class=\"line\">* 共享模式下不能保证消息排序</span><br><span class=\"line\">* 在共享模式下不能使用累积确认</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2018/12/02/Pulsar简介/Pulsar%E7%AE%80%E4%BB%8B%5Cpulsar-shared-subscriptions.png\" alt></p>\n<h5 id=\"故障转移\"><a href=\"#故障转移\" class=\"headerlink\" title=\"故障转移\"></a>故障转移</h5><p>Failover 模式中，多个 consumer 可以绑定到同一个 subscription。consumer 将会按字典顺序排序，第一个 consumer 被初始化为唯一接受消息的消费者。这个 consumer 被称为 master consumer。</p>\n<p>当 master consumer 断开时，所有的消息（未被确认和后续进入的）将会被分发给队列中的下一个 consumer。</p>\n<p>第一个图中，Consumer-C-1 是 master consumer，当 Consumer-C-1 断开连接时，由于 Consumer-C-2 在队列中下一个位置，那么它将会开始接收消息。</p>\n<p><img src=\"/2018/12/02/Pulsar简介/Pulsar%E7%AE%80%E4%BB%8B%5Cpulsar-failover-subscriptions.png\" alt></p>\n<h4 id=\"多主题订阅\"><a href=\"#多主题订阅\" class=\"headerlink\" title=\"多主题订阅\"></a>多主题订阅</h4><p>当消费者订阅 Pulsar 主题时，默认情况下它订阅一个特定主题 。</p>\n<p>从 Pulsar 版本 1.23.0 开始，Pulsar 消费者可以同时订阅多个主题。您可以通过两种方式定义主题列表： </p>\n<ul>\n<li>通过基础的正则表达式（regex），例如 persistent://public/default/finance-.*</li>\n<li>通过明确定义的 topic 列表\\</li>\n</ul>\n<p><strong>通过正则订阅多主题时，所有的主题必须在同一个命名空间（namespace)</strong></p>\n<p>订阅多个主题时，Pulsar 客户端将自动调用 Pulsar API 以发现与正则表达式模式 / 列表匹配的主题，然后订阅所有这些主题。如果当前不存在任何主题，则一旦创建主题，消费者将自动订阅它们。</p>\n<p><strong>不能保证顺序性</strong></p>\n<p><strong>当消费者订阅多个主题时，Pulsar 在单个主题上提供的所有顺序保证都不成立。如果您在使用 Pulsar 时涉及任何严格的顺序要求，我们强烈建议您不要使用此功能</strong></p>\n<p>以下是 Java 的一些多主题订阅示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.regex.Pattern;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.pulsar.client.api.Consumer;</span><br><span class=\"line\">import org.apache.pulsar.client.api.PulsarClient;</span><br><span class=\"line\"></span><br><span class=\"line\">PulsarClient pulsarClient = // Instantiate Pulsar client object</span><br><span class=\"line\"></span><br><span class=\"line\">// Subscribe to all topics in a namespace</span><br><span class=\"line\">Pattern allTopicsInNamespace = Pattern.compile(&quot;persistent://public/default/.*&quot;);</span><br><span class=\"line\">Consumer allTopicsConsumer = pulsarClient.subscribe(allTopicsInNamespace, &quot;subscription-1&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// Subscribe to a subsets of topics in a namespace, based on regex</span><br><span class=\"line\">Pattern someTopicsInNamespace = Pattern.compile(&quot;persistent://public/default/foo.*&quot;);</span><br><span class=\"line\">Consumer someTopicsConsumer = pulsarClient.subscribe(someTopicsInNamespace, &quot;subscription-1&quot;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"分区Topic\"><a href=\"#分区Topic\" class=\"headerlink\" title=\"分区Topic\"></a>分区Topic</h5><p>通常一个 topic 仅被一个 broker 服务，这限制了 topic 最大吞吐量。分区 topic 是特殊的 topic 类型，他可以被多个 broker 处理，这让 topic 有更高的吞吐量。</p>\n<p> 其实在背后，分区的 topic 通过 N 个内部 topic 实现，N 是分区的数量。当向分区的 topic 发送消息，每条消息被路由到其中一个 broker。Pulsar 自动处理跨 broker 的分区分布。</p>\n<p><img src=\"/2018/12/02/Pulsar简介/Pulsar%E7%AE%80%E4%BB%8B%5Cpartitioning.png\" alt></p>\n<p>在这里，主题 <strong>Topic1</strong> 有五个分区（<strong>P0</strong> 到 <strong>P4</strong>），分为三个代理。因为分区比broker多，所以两个broker处理两个分区，而第三个只处理一个（同样，Pulsar 自动处理这个分区的分配）。</p>\n<p>该主题的消息将广播给两个消费者。该<a href=\"http://pulsar.apache.org/docs/en/concepts-messaging/#routing-modes\" target=\"_blank\" rel=\"noopener\">路由模式</a>决定了两者的broker来处理每个分区，而<a href=\"http://pulsar.apache.org/docs/en/concepts-messaging/#subscription-modes\" target=\"_blank\" rel=\"noopener\">订阅模式</a>确定哪些消息去哪个消费者。</p>\n<p>在大多数情况下，可以单独决定路由和订阅模式。通常，吞吐量问题应指导分区 / 路由决策，而订阅决策应由应用程序语义指导。</p>\n<p>在订阅模式如何工作方面，分区主题和普通主题之间没有区别，因为分区仅确定生产者发布消息和消费者处理和确认消息之间发生的情况。</p>\n<p>需要通过 <a href=\"http://pulsar.apache.org/docs/en/admin-api-overview\" target=\"_blank\" rel=\"noopener\">admin API</a> 显式创建分区主题。创建主题时可以指定分区数。</p>\n<h4 id=\"路由模式\"><a href=\"#路由模式\" class=\"headerlink\" title=\"路由模式\"></a>路由模式</h4><p>当发布消息到分区 topic，你必须要指定路由模式。路由模式决定了每条消息被发布到的分区（其实是内部主题）。</p>\n<p> 默认情况下有三种路由模式：</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>描述</th>\n<th>顺序保证</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Key hash</td>\n<td>如果 message 指定了 key，producer 将会把 key hash，然后把他分配给指定分区</td>\n<td>同一个 key 下有序</td>\n</tr>\n<tr>\n<td>single default partition</td>\n<td>如果没有 key，每个生产者的消息将会被路由分发给专用的分区。初始时候随机选择</td>\n<td>同一个生产者下有序</td>\n</tr>\n<tr>\n<td>round robin 分发</td>\n<td>如果没有 key，所有的消息通过 round-robin 方式被路由到不同的分区，以达到最大的生产能力</td>\n<td>无序</td>\n</tr>\n</tbody></table>\n<h4 id=\"非持久Topic\"><a href=\"#非持久Topic\" class=\"headerlink\" title=\"非持久Topic\"></a>非持久Topic</h4><p>默认的，Pulsar 保存所有没有确认的消息到多个 BookKeeper 的 bookies 中（存储节点）。持久 topic 的消息数据可以在 broker 重启或者订阅者出问题的情况下存活下来。 </p>\n<p>Pulsar 也提供了非持久 topic。非持久 topic 的消息不会被保存在硬盘上，只存活于内存中。当使用非持久 topic 分发时，杀掉 Pulsar 的 broker 或者关闭订阅者，意味着客户端可能会遭遇消息丢失。 </p>\n<p> 非持久 topic 有如下格式的名称（注意名字中的 non-persistent）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">non-persistent://tenant/namespace/topic</span><br></pre></td></tr></table></figure>\n\n<p>非持久 topic 中，broker 会立即发布消息给所有连接的订阅者，而不会在 BookKeeper 中存储。如果有一个订阅者断开连接，broker 将无法重发这些瞬时消息。订阅者将永远也不能收到这些消息了。去掉持久化存储的步骤，在某些情况下，使得非持久 topic 的消息比持久 topic 稍微变快。但是同时，Pulsar 的一些核心优势也丧失掉了 </p>\n<p><strong>非持久 topic，消息数据仅存活在内存。如果 broker 挂掉或者其他情况不能从内存取出，你的消息数据就可能会丢失。只有真的觉得你的使用场景符合，并且你可以忍受时，才可去使用非持久 topic。</strong></p>\n<p>默认非持久 topic 在 broker 上是开启的，你可以通过 broker 的配置关闭。你可以通过使用 pulsar-admin-topics 接口管理非持久 topic。</p>\n<h5 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h5><p>非持久性消息传递通常比持久消息传递更快，因为broker不会持久保存消息，并且只要将消息传递给所有连接的订阅者，就立即将确认ACK消息发送回生产者。因此，非持久 topic 让 producer 有更低的发布延迟。 </p>\n<h5 id=\"客户端api\"><a href=\"#客户端api\" class=\"headerlink\" title=\"客户端api\"></a>客户端api</h5><p>producer 和 consumer 以连接持久 topic 同样的方式连接到非持久 topic。重要的区别是 topic 的名称必须以 non-persistent 开头。三种订阅模式 –exclusive，shared，failover 对于非持久 topic 都是支持的。 </p>\n<p>非持久 topic 的 java consumer </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PulsarClient client = PulsarClient.create(&quot;pulsar://localhost:6650&quot;);</span><br><span class=\"line\">String npTopic = &quot;non-persistent://public/default/my-topic&quot;;</span><br><span class=\"line\">String subscriptionName = &quot;my-subscription-name&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">Consumer consumer = client.subscribe(npTopic, subscriptionName);</span><br></pre></td></tr></table></figure>\n\n<p>以下是同一个非持久主题的 Java Producer示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Producer producer = client.createProducer(npTopic);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"消息存留和过期\"><a href=\"#消息存留和过期\" class=\"headerlink\" title=\"消息存留和过期\"></a>消息存留和过期</h4><p>Pulsar Broker的默认设置如下：</p>\n<ul>\n<li>立即删除所有已经被 cunsumer 确认过的的消息</li>\n<li>以消息 backlog 的形式，持久保存所有的未被确认消息</li>\n</ul>\n<p>但是，Pulsar 有两个功能，可以覆盖此默认行为：</p>\n<ul>\n<li><p>通过对消息的保存，让你可以保存concumer确认过的消息</p>\n</li>\n<li><p>消息过期机制，可以让你为尚未确认的消息设置消息存活时间（TTL）</p>\n<p><strong>消息保留与消息的TTL在Namespace级别中进行管理请参阅<a href=\"http://pulsar.apache.org/docs/en/cookbooks-retention-expiry\" target=\"_blank\" rel=\"noopener\">消息保留和到期</a></strong></p>\n<p>下图说明了这两种概念：</p>\n<p> <img src=\"/2018/12/02/Pulsar简介/Pulsar%E7%AE%80%E4%BB%8B%5C20181008112559290.png\" alt></p>\n<p>​    通过消息保留（如顶部所示），应用于命名空间中所有主题的保留策略表明，即使已经确认了某些消息，也会将这些消息持久地存储在 Pulsar 中。已删除保留策略未涵盖的已确认消息。如果没有保留策略，将删除<em>所有</em>已确认的消息。</p>\n<p>​    随着消息到期，如下所示，一些消息被删除，即使它们尚未被确认，因为它们已根据应用于命名空间的 TTL 过期（例如，因为已应用了 5 分钟的 TTL 并且消息尚未确认，但已有 10 分钟）。</p>\n</li>\n</ul>\n<h4 id=\"消息去重\"><a href=\"#消息去重\" class=\"headerlink\" title=\"消息去重\"></a>消息去重</h4><p>当消息被 Pulsar 持久化多于一次的时候，会发生数据重复。消息去重是 Pulsar 可选的特性，阻止不必要的消息重复，每条消息仅处理一次。</p>\n<p>下图展示了开启和关闭消息去重的场景</p>\n<p><img src=\"/2018/12/02/Pulsar简介/Pulsar%E7%AE%80%E4%BB%8B%5Cmessage-deduplication.png\" alt></p>\n<p>在顶部显示的方案中禁用了消息重复数据删除。这里，生产者发布关于主题的消息 1; 消息到达 Pulsar的Broker并持久化到 BookKeeper。然后，生产者再次发送消息 1（在这种情况下由于一些重试逻辑），并且消息由broker接收并再次存储在 BookKeeper 中，这意味着发生了重复。</p>\n<p>在底部的第二个场景中，生产者发布消息 1，该消息由broker接收并持久化，如第一个场景中那样。但是，当生产者再次尝试发布消息时，broker知道它已经接收消息 1，因此不会保留消息。</p>\n<h5 id=\"生产者的幂等性\"><a href=\"#生产者的幂等性\" class=\"headerlink\" title=\"生产者的幂等性\"></a>生产者的幂等性</h5><p><strong>消息去重的另外一种方法是确保每条消息仅被生产一次。这种方法通常被叫做生产者幂等</strong>。这种方式的缺点是，把消息去重的工作推给了应用去做。在 Pulsar 中，这是被 broker 处理的，这意味着你不需要修改你的客户端代码，你只需要做一些管理上的变化（参考 <a href=\"http://pulsar.apache.org/docs/en/cookbooks-deduplication\" target=\"_blank\" rel=\"noopener\">Managing message deduplication</a>） </p>\n<h5 id=\"去重与实际一次语义\"><a href=\"#去重与实际一次语义\" class=\"headerlink\" title=\"去重与实际一次语义\"></a>去重与实际一次语义</h5><p>消息去重，使 Pulsar 成为与流处理引擎（SPE）或者其他寻求 “实际一次” 处理语义的系统连接的完美消息系统。消息系统若不提供自动消息去重，则需要 SPE 或者其他系统保证去重。这意味着严格的消息顺序来自于让程序承担额外的去重工作。使用 Pulsar，严格的顺序保证不会带来任何应用层面的消耗。</p>\n<p><strong>更深入的信息可以参考 <a href=\"https://streaml.io/blog/pulsar-effectively-once/\" target=\"_blank\" rel=\"noopener\">this post</a> 及 <a href=\"https://streaml.io/blog\" target=\"_blank\" rel=\"noopener\">Streamlio blog</a></strong></p>\n<p>[]: <a href=\"http://pulsar.apache.org/docs/en/concepts-messaging/\" target=\"_blank\" rel=\"noopener\">http://pulsar.apache.org/docs/en/concepts-messaging/</a>    “pulsar官方wiki”<br>[]: <a href=\"https://blog.csdn.net/liyiming2017/article/details/82966031\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/liyiming2017/article/details/82966031</a>    “稀有气体CSDN博客”</p>"},{"title":"RabbitMq定时消息队列的实现","date":"2018-03-01T12:42:30.000Z","_content":"\nRabbitMq定时消息队列的实现<!--more-->\n\n> ​\t开发中用的rabbitmq,有一个场景需要进行延时消息投递,(应用环境比如某个消息多长时间后进行做某业务操作)但是rabbitmq没有类似的实现,activemq却是有的(基于ttl的死信队列),那么参考了网上了一些教程后,总结了下 .\n\n* 首先基础的xml配置如下\n\n  ```\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <beans xmlns=\"http://www.springframework.org/schema/beans\"\n  \txmlns:rabbit=\"http://www.springframework.org/schema/rabbit\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  \txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n         http://www.springframework.org/schema/beans/spring-beans.xsd\n         http://www.springframework.org/schema/rabbit\n         http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd\">\n  \t<rabbit:connection-factory id=\"connectionFactory\"\n  \t\tusername=\"userName\" password=\"password\" host=\"host\"\n  \t\tport=\"port\" />\n  \t<rabbit:template id=\"amqpTemplate\" connection-factory=\"connectionFactory\"\n  \t\texchange=\"exchangeName\" />\n  \t<rabbit:admin connection-factory=\"connectionFactory\" />\n  \t<rabbit:listener-container\n  \t\tconnection-factory=\"connectionFactory\" acknowledge=\"auto\" concurrency=\"2\" prefetch=\"2\">\n  \t</rabbit:listener-container>\n      <bean id=\"jsonMessageConverter\" class=\"org.springframework.amqp.support.converter.Jackson2JsonMessageConverter\" />\n  </beans> \n  ```\n\n* 项目使用的rabbitmq与spring-amp集成,定义延迟转发队列及延迟接收队列\n\n  ```\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <beans xmlns=\"http://www.springframework.org/schema/beans\"\n  \txmlns:rabbit=\"http://www.springframework.org/schema/rabbit\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  \txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n         http://www.springframework.org/schema/beans/spring-beans.xsd\n         http://www.springframework.org/schema/rabbit\n         http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd\">\n  \t<rabbit:connection-factory id=\"connectionFactory\"\n  \t\tusername=\"userName\" password=\"password\" host=\"host\"\n  \t\tport=\"port\" />\n  \t<rabbit:template id=\"amqpTemplate\" connection-factory=\"connectionFactory\"\n  \t\texchange=\"exchangeName\" /><rabbit:admin connection-factory=\"connectionFactory\" />\n                   <!--延迟队列定义 x-message-ttl 为延迟时间为毫秒 x-dead-letter-exchange 为转发到哪个exchange x-dead-letter-routing-key 为转发后哪个队列接收延迟消息即真正消费消息的queue的routkey-->\n  \t\t<rabbit:queue name=\"延迟队列名\" durable=\"true\" auto-delete=\"false\" exclusive=\"false\" > <rabbit:queue-arguments> <entry key=\"x-message-ttl\"> <value type=\"java.lang.Long\">60000</value></entry> <entry key=\"x-dead-letter-exchange\" value=\"转发到哪个路由\"/> <entry key=\"x-dead-letter-routing-key\" value=\"真正的消费routekey\"/> </rabbit:queue-arguments> </rabbit:queue>    \n  \t<rabbit:queue name=\"真正消费queue名\" durable=\"true\" auto-delete=\"false\" exclusive=\"false\" >\n  <!--进行队列与路由绑定-->\n  <rabbit:direct-exchange name=\"路由名称\" durable=\"true\" auto-delete=\"false\">\n          <rabbit:bindings>\n  \t\t\t<rabbit:binding queue=\"延迟队列名\" key=\"延迟队列routeKey\" ></rabbit:binding>\n  \t\t\t<rabbit:binding queue=\"真正消费队列名\" key=\"真正消费队列名routeKey\"></rabbit:binding>\n          </rabbit:bindings>\n      </rabbit:direct-exchange>\n  <rabbit:listener-container\n  \t\tconnection-factory=\"connectionFactory\" acknowledge=\"auto\" concurrency=\"2\" prefetch=\"2\">\n  \t\t<rabbit:listener queues=\"真正消费队列名routeKey\" ref=\"真正消费者类的首字母小写\"/>\n  </rabbit:listener-container>\n      <bean id=\"jsonMessageConverter\" class=\"org.springframework.amqp.support.converter.Jackson2JsonMessageConverter\" />\n  </beans>\n  ```\n\n* 这样就实现了一个延时转发队列,基本原理是利用ttl进行队列消息转发进行处理 \n\n* activemq就比较好解决这个问题,有个delayTime,那么就很简单的实现消息转发\n\n* 附rabbitmq的后台死信队列图示:\n\n   ![rabbitmq后台死信队列图示](RabbitMq定时消息队列的实现/1.jpg)![rabbitmq后台死信队列图示](RabbitMq定时消息队列的实现/2.jpg)\n\n  ![rabbitmq后台死信队列图示](RabbitMq定时消息队列的实现/3.jpg)\n\n  从上面可以模糊的看出delayQueryOrderQueue是一个延时队列,当到了时间之后,会转发到queryOrderQueue","source":"_posts/RabbitMq定时消息队列的实现.md","raw":"---\ntitle: RabbitMq定时消息队列的实现\ndate: 2018-03-01 20:42:30\ntags: [RabbitMq]\ncategories: [RabbitMq]\n---\n\nRabbitMq定时消息队列的实现<!--more-->\n\n> ​\t开发中用的rabbitmq,有一个场景需要进行延时消息投递,(应用环境比如某个消息多长时间后进行做某业务操作)但是rabbitmq没有类似的实现,activemq却是有的(基于ttl的死信队列),那么参考了网上了一些教程后,总结了下 .\n\n* 首先基础的xml配置如下\n\n  ```\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <beans xmlns=\"http://www.springframework.org/schema/beans\"\n  \txmlns:rabbit=\"http://www.springframework.org/schema/rabbit\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  \txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n         http://www.springframework.org/schema/beans/spring-beans.xsd\n         http://www.springframework.org/schema/rabbit\n         http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd\">\n  \t<rabbit:connection-factory id=\"connectionFactory\"\n  \t\tusername=\"userName\" password=\"password\" host=\"host\"\n  \t\tport=\"port\" />\n  \t<rabbit:template id=\"amqpTemplate\" connection-factory=\"connectionFactory\"\n  \t\texchange=\"exchangeName\" />\n  \t<rabbit:admin connection-factory=\"connectionFactory\" />\n  \t<rabbit:listener-container\n  \t\tconnection-factory=\"connectionFactory\" acknowledge=\"auto\" concurrency=\"2\" prefetch=\"2\">\n  \t</rabbit:listener-container>\n      <bean id=\"jsonMessageConverter\" class=\"org.springframework.amqp.support.converter.Jackson2JsonMessageConverter\" />\n  </beans> \n  ```\n\n* 项目使用的rabbitmq与spring-amp集成,定义延迟转发队列及延迟接收队列\n\n  ```\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <beans xmlns=\"http://www.springframework.org/schema/beans\"\n  \txmlns:rabbit=\"http://www.springframework.org/schema/rabbit\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  \txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n         http://www.springframework.org/schema/beans/spring-beans.xsd\n         http://www.springframework.org/schema/rabbit\n         http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd\">\n  \t<rabbit:connection-factory id=\"connectionFactory\"\n  \t\tusername=\"userName\" password=\"password\" host=\"host\"\n  \t\tport=\"port\" />\n  \t<rabbit:template id=\"amqpTemplate\" connection-factory=\"connectionFactory\"\n  \t\texchange=\"exchangeName\" /><rabbit:admin connection-factory=\"connectionFactory\" />\n                   <!--延迟队列定义 x-message-ttl 为延迟时间为毫秒 x-dead-letter-exchange 为转发到哪个exchange x-dead-letter-routing-key 为转发后哪个队列接收延迟消息即真正消费消息的queue的routkey-->\n  \t\t<rabbit:queue name=\"延迟队列名\" durable=\"true\" auto-delete=\"false\" exclusive=\"false\" > <rabbit:queue-arguments> <entry key=\"x-message-ttl\"> <value type=\"java.lang.Long\">60000</value></entry> <entry key=\"x-dead-letter-exchange\" value=\"转发到哪个路由\"/> <entry key=\"x-dead-letter-routing-key\" value=\"真正的消费routekey\"/> </rabbit:queue-arguments> </rabbit:queue>    \n  \t<rabbit:queue name=\"真正消费queue名\" durable=\"true\" auto-delete=\"false\" exclusive=\"false\" >\n  <!--进行队列与路由绑定-->\n  <rabbit:direct-exchange name=\"路由名称\" durable=\"true\" auto-delete=\"false\">\n          <rabbit:bindings>\n  \t\t\t<rabbit:binding queue=\"延迟队列名\" key=\"延迟队列routeKey\" ></rabbit:binding>\n  \t\t\t<rabbit:binding queue=\"真正消费队列名\" key=\"真正消费队列名routeKey\"></rabbit:binding>\n          </rabbit:bindings>\n      </rabbit:direct-exchange>\n  <rabbit:listener-container\n  \t\tconnection-factory=\"connectionFactory\" acknowledge=\"auto\" concurrency=\"2\" prefetch=\"2\">\n  \t\t<rabbit:listener queues=\"真正消费队列名routeKey\" ref=\"真正消费者类的首字母小写\"/>\n  </rabbit:listener-container>\n      <bean id=\"jsonMessageConverter\" class=\"org.springframework.amqp.support.converter.Jackson2JsonMessageConverter\" />\n  </beans>\n  ```\n\n* 这样就实现了一个延时转发队列,基本原理是利用ttl进行队列消息转发进行处理 \n\n* activemq就比较好解决这个问题,有个delayTime,那么就很简单的实现消息转发\n\n* 附rabbitmq的后台死信队列图示:\n\n   ![rabbitmq后台死信队列图示](RabbitMq定时消息队列的实现/1.jpg)![rabbitmq后台死信队列图示](RabbitMq定时消息队列的实现/2.jpg)\n\n  ![rabbitmq后台死信队列图示](RabbitMq定时消息队列的实现/3.jpg)\n\n  从上面可以模糊的看出delayQueryOrderQueue是一个延时队列,当到了时间之后,会转发到queryOrderQueue","slug":"RabbitMq定时消息队列的实现","published":1,"updated":"2022-09-03T07:30:55.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz84a001dtwfa9muqya3w","content":"<p>RabbitMq定时消息队列的实现<a id=\"more\"></a></p>\n<blockquote>\n<p>​    开发中用的rabbitmq,有一个场景需要进行延时消息投递,(应用环境比如某个消息多长时间后进行做某业务操作)但是rabbitmq没有类似的实现,activemq却是有的(基于ttl的死信队列),那么参考了网上了一些教程后,总结了下 .</p>\n</blockquote>\n<ul>\n<li><p>首先基础的xml配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">\txmlns:rabbit=&quot;http://www.springframework.org/schema/rabbit&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class=\"line\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">       http://www.springframework.org/schema/rabbit</span><br><span class=\"line\">       http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd&quot;&gt;</span><br><span class=\"line\">\t&lt;rabbit:connection-factory id=&quot;connectionFactory&quot;</span><br><span class=\"line\">\t\tusername=&quot;userName&quot; password=&quot;password&quot; host=&quot;host&quot;</span><br><span class=\"line\">\t\tport=&quot;port&quot; /&gt;</span><br><span class=\"line\">\t&lt;rabbit:template id=&quot;amqpTemplate&quot; connection-factory=&quot;connectionFactory&quot;</span><br><span class=\"line\">\t\texchange=&quot;exchangeName&quot; /&gt;</span><br><span class=\"line\">\t&lt;rabbit:admin connection-factory=&quot;connectionFactory&quot; /&gt;</span><br><span class=\"line\">\t&lt;rabbit:listener-container</span><br><span class=\"line\">\t\tconnection-factory=&quot;connectionFactory&quot; acknowledge=&quot;auto&quot; concurrency=&quot;2&quot; prefetch=&quot;2&quot;&gt;</span><br><span class=\"line\">\t&lt;/rabbit:listener-container&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;jsonMessageConverter&quot; class=&quot;org.springframework.amqp.support.converter.Jackson2JsonMessageConverter&quot; /&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>项目使用的rabbitmq与spring-amp集成,定义延迟转发队列及延迟接收队列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">\txmlns:rabbit=&quot;http://www.springframework.org/schema/rabbit&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class=\"line\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">       http://www.springframework.org/schema/rabbit</span><br><span class=\"line\">       http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd&quot;&gt;</span><br><span class=\"line\">\t&lt;rabbit:connection-factory id=&quot;connectionFactory&quot;</span><br><span class=\"line\">\t\tusername=&quot;userName&quot; password=&quot;password&quot; host=&quot;host&quot;</span><br><span class=\"line\">\t\tport=&quot;port&quot; /&gt;</span><br><span class=\"line\">\t&lt;rabbit:template id=&quot;amqpTemplate&quot; connection-factory=&quot;connectionFactory&quot;</span><br><span class=\"line\">\t\texchange=&quot;exchangeName&quot; /&gt;&lt;rabbit:admin connection-factory=&quot;connectionFactory&quot; /&gt;</span><br><span class=\"line\">                 &lt;!--延迟队列定义 x-message-ttl 为延迟时间为毫秒 x-dead-letter-exchange 为转发到哪个exchange x-dead-letter-routing-key 为转发后哪个队列接收延迟消息即真正消费消息的queue的routkey--&gt;</span><br><span class=\"line\">\t\t&lt;rabbit:queue name=&quot;延迟队列名&quot; durable=&quot;true&quot; auto-delete=&quot;false&quot; exclusive=&quot;false&quot; &gt; &lt;rabbit:queue-arguments&gt; &lt;entry key=&quot;x-message-ttl&quot;&gt; &lt;value type=&quot;java.lang.Long&quot;&gt;60000&lt;/value&gt;&lt;/entry&gt; &lt;entry key=&quot;x-dead-letter-exchange&quot; value=&quot;转发到哪个路由&quot;/&gt; &lt;entry key=&quot;x-dead-letter-routing-key&quot; value=&quot;真正的消费routekey&quot;/&gt; &lt;/rabbit:queue-arguments&gt; &lt;/rabbit:queue&gt;    </span><br><span class=\"line\">\t&lt;rabbit:queue name=&quot;真正消费queue名&quot; durable=&quot;true&quot; auto-delete=&quot;false&quot; exclusive=&quot;false&quot; &gt;</span><br><span class=\"line\">&lt;!--进行队列与路由绑定--&gt;</span><br><span class=\"line\">&lt;rabbit:direct-exchange name=&quot;路由名称&quot; durable=&quot;true&quot; auto-delete=&quot;false&quot;&gt;</span><br><span class=\"line\">        &lt;rabbit:bindings&gt;</span><br><span class=\"line\">\t\t\t&lt;rabbit:binding queue=&quot;延迟队列名&quot; key=&quot;延迟队列routeKey&quot; &gt;&lt;/rabbit:binding&gt;</span><br><span class=\"line\">\t\t\t&lt;rabbit:binding queue=&quot;真正消费队列名&quot; key=&quot;真正消费队列名routeKey&quot;&gt;&lt;/rabbit:binding&gt;</span><br><span class=\"line\">        &lt;/rabbit:bindings&gt;</span><br><span class=\"line\">    &lt;/rabbit:direct-exchange&gt;</span><br><span class=\"line\">&lt;rabbit:listener-container</span><br><span class=\"line\">\t\tconnection-factory=&quot;connectionFactory&quot; acknowledge=&quot;auto&quot; concurrency=&quot;2&quot; prefetch=&quot;2&quot;&gt;</span><br><span class=\"line\">\t\t&lt;rabbit:listener queues=&quot;真正消费队列名routeKey&quot; ref=&quot;真正消费者类的首字母小写&quot;/&gt;</span><br><span class=\"line\">&lt;/rabbit:listener-container&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;jsonMessageConverter&quot; class=&quot;org.springframework.amqp.support.converter.Jackson2JsonMessageConverter&quot; /&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这样就实现了一个延时转发队列,基本原理是利用ttl进行队列消息转发进行处理 </p>\n</li>\n<li><p>activemq就比较好解决这个问题,有个delayTime,那么就很简单的实现消息转发</p>\n</li>\n<li><p>附rabbitmq的后台死信队列图示:</p>\n<p> <img src=\"/2018/03/01/RabbitMq定时消息队列的实现/RabbitMq%E5%AE%9A%E6%97%B6%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0/1.jpg\" alt=\"rabbitmq后台死信队列图示\"><img src=\"/2018/03/01/RabbitMq定时消息队列的实现/RabbitMq%E5%AE%9A%E6%97%B6%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0/2.jpg\" alt=\"rabbitmq后台死信队列图示\"></p>\n<p><img src=\"/2018/03/01/RabbitMq定时消息队列的实现/RabbitMq%E5%AE%9A%E6%97%B6%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0/3.jpg\" alt=\"rabbitmq后台死信队列图示\"></p>\n<p>从上面可以模糊的看出delayQueryOrderQueue是一个延时队列,当到了时间之后,会转发到queryOrderQueue</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>RabbitMq定时消息队列的实现</p>","more":"<p></p>\n<blockquote>\n<p>​    开发中用的rabbitmq,有一个场景需要进行延时消息投递,(应用环境比如某个消息多长时间后进行做某业务操作)但是rabbitmq没有类似的实现,activemq却是有的(基于ttl的死信队列),那么参考了网上了一些教程后,总结了下 .</p>\n</blockquote>\n<ul>\n<li><p>首先基础的xml配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">\txmlns:rabbit=&quot;http://www.springframework.org/schema/rabbit&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class=\"line\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">       http://www.springframework.org/schema/rabbit</span><br><span class=\"line\">       http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd&quot;&gt;</span><br><span class=\"line\">\t&lt;rabbit:connection-factory id=&quot;connectionFactory&quot;</span><br><span class=\"line\">\t\tusername=&quot;userName&quot; password=&quot;password&quot; host=&quot;host&quot;</span><br><span class=\"line\">\t\tport=&quot;port&quot; /&gt;</span><br><span class=\"line\">\t&lt;rabbit:template id=&quot;amqpTemplate&quot; connection-factory=&quot;connectionFactory&quot;</span><br><span class=\"line\">\t\texchange=&quot;exchangeName&quot; /&gt;</span><br><span class=\"line\">\t&lt;rabbit:admin connection-factory=&quot;connectionFactory&quot; /&gt;</span><br><span class=\"line\">\t&lt;rabbit:listener-container</span><br><span class=\"line\">\t\tconnection-factory=&quot;connectionFactory&quot; acknowledge=&quot;auto&quot; concurrency=&quot;2&quot; prefetch=&quot;2&quot;&gt;</span><br><span class=\"line\">\t&lt;/rabbit:listener-container&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;jsonMessageConverter&quot; class=&quot;org.springframework.amqp.support.converter.Jackson2JsonMessageConverter&quot; /&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>项目使用的rabbitmq与spring-amp集成,定义延迟转发队列及延迟接收队列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">\txmlns:rabbit=&quot;http://www.springframework.org/schema/rabbit&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class=\"line\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">       http://www.springframework.org/schema/rabbit</span><br><span class=\"line\">       http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd&quot;&gt;</span><br><span class=\"line\">\t&lt;rabbit:connection-factory id=&quot;connectionFactory&quot;</span><br><span class=\"line\">\t\tusername=&quot;userName&quot; password=&quot;password&quot; host=&quot;host&quot;</span><br><span class=\"line\">\t\tport=&quot;port&quot; /&gt;</span><br><span class=\"line\">\t&lt;rabbit:template id=&quot;amqpTemplate&quot; connection-factory=&quot;connectionFactory&quot;</span><br><span class=\"line\">\t\texchange=&quot;exchangeName&quot; /&gt;&lt;rabbit:admin connection-factory=&quot;connectionFactory&quot; /&gt;</span><br><span class=\"line\">                 &lt;!--延迟队列定义 x-message-ttl 为延迟时间为毫秒 x-dead-letter-exchange 为转发到哪个exchange x-dead-letter-routing-key 为转发后哪个队列接收延迟消息即真正消费消息的queue的routkey--&gt;</span><br><span class=\"line\">\t\t&lt;rabbit:queue name=&quot;延迟队列名&quot; durable=&quot;true&quot; auto-delete=&quot;false&quot; exclusive=&quot;false&quot; &gt; &lt;rabbit:queue-arguments&gt; &lt;entry key=&quot;x-message-ttl&quot;&gt; &lt;value type=&quot;java.lang.Long&quot;&gt;60000&lt;/value&gt;&lt;/entry&gt; &lt;entry key=&quot;x-dead-letter-exchange&quot; value=&quot;转发到哪个路由&quot;/&gt; &lt;entry key=&quot;x-dead-letter-routing-key&quot; value=&quot;真正的消费routekey&quot;/&gt; &lt;/rabbit:queue-arguments&gt; &lt;/rabbit:queue&gt;    </span><br><span class=\"line\">\t&lt;rabbit:queue name=&quot;真正消费queue名&quot; durable=&quot;true&quot; auto-delete=&quot;false&quot; exclusive=&quot;false&quot; &gt;</span><br><span class=\"line\">&lt;!--进行队列与路由绑定--&gt;</span><br><span class=\"line\">&lt;rabbit:direct-exchange name=&quot;路由名称&quot; durable=&quot;true&quot; auto-delete=&quot;false&quot;&gt;</span><br><span class=\"line\">        &lt;rabbit:bindings&gt;</span><br><span class=\"line\">\t\t\t&lt;rabbit:binding queue=&quot;延迟队列名&quot; key=&quot;延迟队列routeKey&quot; &gt;&lt;/rabbit:binding&gt;</span><br><span class=\"line\">\t\t\t&lt;rabbit:binding queue=&quot;真正消费队列名&quot; key=&quot;真正消费队列名routeKey&quot;&gt;&lt;/rabbit:binding&gt;</span><br><span class=\"line\">        &lt;/rabbit:bindings&gt;</span><br><span class=\"line\">    &lt;/rabbit:direct-exchange&gt;</span><br><span class=\"line\">&lt;rabbit:listener-container</span><br><span class=\"line\">\t\tconnection-factory=&quot;connectionFactory&quot; acknowledge=&quot;auto&quot; concurrency=&quot;2&quot; prefetch=&quot;2&quot;&gt;</span><br><span class=\"line\">\t\t&lt;rabbit:listener queues=&quot;真正消费队列名routeKey&quot; ref=&quot;真正消费者类的首字母小写&quot;/&gt;</span><br><span class=\"line\">&lt;/rabbit:listener-container&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;jsonMessageConverter&quot; class=&quot;org.springframework.amqp.support.converter.Jackson2JsonMessageConverter&quot; /&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这样就实现了一个延时转发队列,基本原理是利用ttl进行队列消息转发进行处理 </p>\n</li>\n<li><p>activemq就比较好解决这个问题,有个delayTime,那么就很简单的实现消息转发</p>\n</li>\n<li><p>附rabbitmq的后台死信队列图示:</p>\n<p> <img src=\"/2018/03/01/RabbitMq定时消息队列的实现/RabbitMq%E5%AE%9A%E6%97%B6%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0/1.jpg\" alt=\"rabbitmq后台死信队列图示\"><img src=\"/2018/03/01/RabbitMq定时消息队列的实现/RabbitMq%E5%AE%9A%E6%97%B6%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0/2.jpg\" alt=\"rabbitmq后台死信队列图示\"></p>\n<p><img src=\"/2018/03/01/RabbitMq定时消息队列的实现/RabbitMq%E5%AE%9A%E6%97%B6%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0/3.jpg\" alt=\"rabbitmq后台死信队列图示\"></p>\n<p>从上面可以模糊的看出delayQueryOrderQueue是一个延时队列,当到了时间之后,会转发到queryOrderQueue</p>\n</li>\n</ul>"},{"title":"RabbitMq在Ubuntu中的安装配置","date":"2018-08-07T13:35:28.000Z","_content":"\nUbuntu下安装Rabbitmq<!--more-->\n\nwindows安装比较麻烦，那么就在linux环境下安装个，ubuntu版本为16.04\n\n#### 安装RabbitMq\n\n* 使用apt-get进行安装\n\n  ```\n  sudo apt-get update\n  sudo apt-get install rabbitmq-server\n  ```\n\n* 启动和停止服务\n\n  ```\n  service rabbitmq-server start\n  service rabbitmq-server stop\n  service rabbitmq-server status\n  ```\n\n* 查看当前用户列表\n\n  * 查看用户列表\n\n    ```\n    rabbitmqctl list_users\n    ```\n\n  * 添加用户\n\n    ```\n    rabbitmqctl add_user skyeye nopassword\n    ```\n\n  * 删除用户\n\n    ```\n    rabbitmqctl delete_user skyeye\n    ```\n\n  * 修改密码\n\n    ```\n    rabbitmqctl change_password skyeye changepassword\n    ```\n\n  * 设置用户权限\n\n    ```\n    rabbitmqctl  set_permissions  -p  VHostPath  userName\t  ConfP  WriteP  ReadP\n    如：rabbitmqctl set_permissions -p \"/\" skyeye \".*\" \".*\" \".*\"\n    ```\n\n  * 设置用户角色\n\n    ```\n    rabbitmqctl  set_user_tags  userName  RoleName\n    ```\n\n    \n\n#### 开启RabbitMq页面控制台\n\n* 进入安装目录\n\n  * 查找目录（我也不知道安装到哪里了）\n\n    ```\n    find / -name rabbitmq\n    /usr/share/rabbitmq\n    /usr/lib/ocf/resource.d/rabbitmq\n    /usr/lib/rabbitmq\n    /etc/rabbitmq\n    /var/lib/rabbitmq\n    /var/log/rabbitmq\n    ```\n\n  * 进入目录\n\n    ```\n    cd /usr/lib/rabbitmq\n    /usr/lib/rabbitmq\n    root@VM-0-17-ubuntu:/usr/lib/rabbitmq# \n    ```\n\n  * 查看已经安装的插件\n\n    ```\n    rabbitmq-plugins list\n     Configured: E = explicitly enabled; e = implicitly enabled\n     | Status:   * = running on rabbit@VM-0-17-ubuntu\n     |/\n    [  ] amqp_client                       3.5.7\n    [  ] cowboy                            0.5.0-rmq3.5.7-git4b93c2d\n    [  ] mochiweb                          2.7.0-rmq3.5.7-git680dba8\n    [  ] rabbitmq_amqp1_0                  3.5.7\n    [  ] rabbitmq_auth_backend_ldap        3.5.7\n    [  ] rabbitmq_auth_mechanism_ssl       3.5.7\n    [  ] rabbitmq_consistent_hash_exchange 3.5.7\n    [  ] rabbitmq_federation               3.5.7\n    [  ] rabbitmq_federation_management    3.5.7\n    [  ] rabbitmq_management               3.5.7\n    [  ] rabbitmq_management_agent         3.5.7\n    [  ] rabbitmq_management_visualiser    3.5.7\n    [  ] rabbitmq_mqtt                     3.5.7\n    [  ] rabbitmq_shovel                   3.5.7\n    [  ] rabbitmq_shovel_management        3.5.7\n    [  ] rabbitmq_stomp                    3.5.7\n    [  ] rabbitmq_test                     3.5.7\n    [  ] rabbitmq_tracing                  3.5.7\n    [  ] rabbitmq_web_dispatch             3.5.7\n    [  ] rabbitmq_web_stomp                3.5.7\n    [  ] rabbitmq_web_stomp_examples       3.5.7\n    [  ] sockjs                            0.3.4-rmq3.5.7-git3132eb9\n    [  ] webmachine                        1.10.3-rmq3.5.7-gite9359c7\n    ```\n\n  * 开启网页控制台\n\n    ```\n    rabbitmq-plugins enable rabbitmq_management\n    ```\n\n  * 重启 rabbitmq 服务\n\n    ```\n    service rabbitmq restart\n    ```\n\n  * 进入网页控制台\n\n    ```\n    http://x.x.x.x:15672/\n    ```\n\n  * 使用guest用户或skyeye用户无法登陆\n\n    解决办法：\n\n    ```\n    //执行设置权限命令\n    rabbitmqctl set_permissions -p / skyeye \".*\" \".*\" \".*\"\n    //执行设置角色命令\n    rabbitmqctl set_user_tags skyeye administrator\n    //设置完进行查看用户列表\n     rabbitmqctl list_users\n    ```\n\n    设置完发现skyeye用户可以登陆但是guest用户依旧无法登陆\n\n    进行google发现这么段话在大神的博客中：\n\n    ```\n    If rabbitmq.config doesn’t exist, it can be created manually. Set the RABBITMQ_CONFIG_FILEenvironment variable if you change the location. The Erlang runtime automatically appends the .config extension to the value of this variable\n    ```\n\n    意思大概是如果rabbitmq.config不存在，那么可以自己手动创建\n\n    ```\n    cd /etc/rabbitmq\n    ll\n    drwxr-xr-x  2 rabbitmq rabbitmq 4096 Aug  7 22:15 ./\n    drwxr-xr-x 95 root     root     4096 Aug  7 21:33 ../\n    -rw-r--r--  1 root     root       23 Aug  7 21:49 enabled_plugins\n    -rw-r--r--  1 rabbitmq rabbitmq  570 Aug  7 22:15 rabbitmq-env.conf\n    ```\n\n    显然这么rabbitmq-env.conf 不是我们要的\n\n    文档又说：有rabbitmq.config.example 这么个文件里面都是示例\n\n    ```\n    find / -name rabbitmq.config.example\n    ```\n\n    没找到\n\n    这里有说明了：\n\n    ```\n    Example rabbitmq.config File\n    RabbitMQ server source repository contains an example configuration file named rabbitmq.config.example. This example file contains an example of most of the configuration items you might want to set (with some very obscure ones omitted) along with documentation for those settings. All configuration items are commented out in the example, so you can uncomment what you need. Note that the example file is meant to be used as, well, example, and should not be treated as a general recommendation.\n    \n    In most distributions we place this example file in the same location as the real file should be placed (see above). However, for the Debian and RPM distributions policy forbids doing so; instead you can find it in /usr/share/doc/rabbitmq-server/ or /usr/share/doc/rabbitmq-server-3.6.10/ respectively.`\n    ```\n\n    ```\n    cd /usr/shar/doc/rabbitmq-server\n    ls\n    changelog.Debian.gz  copyright  rabbitmq.config.example.gz\n    gzip -d rabbitmq.config.example.gz\n    ```\n\n    这样示例就有了\n\n    \n\n    那么我们手动创建下\n\n    ```\n    cp rabbitmq.config.example  /usr/lib/rabbitmq/\n    cd /usr/lib/rabbitmq/\n    mv rabbitmq.config.example rabbitmq.config\n    将 [<<“guest”>>] 修改为 []\n    ```\n\n    ```\n    service rabbitmq-server stop\n    service rabbitmq-server start\n    ```\n\n    还是不行 查询了下stackOverflow\n\n    \n\n[]: https://stackoverflow.com/questions/23669780/rabbitmq-3-3-1-can-not-login-with-guest-guest\n\n​\t\t就这样吧。回头研究下","source":"_posts/RabbitMq在Ubuntu中的安装配置.md","raw":"---\ntitle: RabbitMq在Ubuntu中的安装配置\ndate: 2018-08-07 21:35:28\ntags: [RabbitMq]\ncategories: [RabbitMq]\n---\n\nUbuntu下安装Rabbitmq<!--more-->\n\nwindows安装比较麻烦，那么就在linux环境下安装个，ubuntu版本为16.04\n\n#### 安装RabbitMq\n\n* 使用apt-get进行安装\n\n  ```\n  sudo apt-get update\n  sudo apt-get install rabbitmq-server\n  ```\n\n* 启动和停止服务\n\n  ```\n  service rabbitmq-server start\n  service rabbitmq-server stop\n  service rabbitmq-server status\n  ```\n\n* 查看当前用户列表\n\n  * 查看用户列表\n\n    ```\n    rabbitmqctl list_users\n    ```\n\n  * 添加用户\n\n    ```\n    rabbitmqctl add_user skyeye nopassword\n    ```\n\n  * 删除用户\n\n    ```\n    rabbitmqctl delete_user skyeye\n    ```\n\n  * 修改密码\n\n    ```\n    rabbitmqctl change_password skyeye changepassword\n    ```\n\n  * 设置用户权限\n\n    ```\n    rabbitmqctl  set_permissions  -p  VHostPath  userName\t  ConfP  WriteP  ReadP\n    如：rabbitmqctl set_permissions -p \"/\" skyeye \".*\" \".*\" \".*\"\n    ```\n\n  * 设置用户角色\n\n    ```\n    rabbitmqctl  set_user_tags  userName  RoleName\n    ```\n\n    \n\n#### 开启RabbitMq页面控制台\n\n* 进入安装目录\n\n  * 查找目录（我也不知道安装到哪里了）\n\n    ```\n    find / -name rabbitmq\n    /usr/share/rabbitmq\n    /usr/lib/ocf/resource.d/rabbitmq\n    /usr/lib/rabbitmq\n    /etc/rabbitmq\n    /var/lib/rabbitmq\n    /var/log/rabbitmq\n    ```\n\n  * 进入目录\n\n    ```\n    cd /usr/lib/rabbitmq\n    /usr/lib/rabbitmq\n    root@VM-0-17-ubuntu:/usr/lib/rabbitmq# \n    ```\n\n  * 查看已经安装的插件\n\n    ```\n    rabbitmq-plugins list\n     Configured: E = explicitly enabled; e = implicitly enabled\n     | Status:   * = running on rabbit@VM-0-17-ubuntu\n     |/\n    [  ] amqp_client                       3.5.7\n    [  ] cowboy                            0.5.0-rmq3.5.7-git4b93c2d\n    [  ] mochiweb                          2.7.0-rmq3.5.7-git680dba8\n    [  ] rabbitmq_amqp1_0                  3.5.7\n    [  ] rabbitmq_auth_backend_ldap        3.5.7\n    [  ] rabbitmq_auth_mechanism_ssl       3.5.7\n    [  ] rabbitmq_consistent_hash_exchange 3.5.7\n    [  ] rabbitmq_federation               3.5.7\n    [  ] rabbitmq_federation_management    3.5.7\n    [  ] rabbitmq_management               3.5.7\n    [  ] rabbitmq_management_agent         3.5.7\n    [  ] rabbitmq_management_visualiser    3.5.7\n    [  ] rabbitmq_mqtt                     3.5.7\n    [  ] rabbitmq_shovel                   3.5.7\n    [  ] rabbitmq_shovel_management        3.5.7\n    [  ] rabbitmq_stomp                    3.5.7\n    [  ] rabbitmq_test                     3.5.7\n    [  ] rabbitmq_tracing                  3.5.7\n    [  ] rabbitmq_web_dispatch             3.5.7\n    [  ] rabbitmq_web_stomp                3.5.7\n    [  ] rabbitmq_web_stomp_examples       3.5.7\n    [  ] sockjs                            0.3.4-rmq3.5.7-git3132eb9\n    [  ] webmachine                        1.10.3-rmq3.5.7-gite9359c7\n    ```\n\n  * 开启网页控制台\n\n    ```\n    rabbitmq-plugins enable rabbitmq_management\n    ```\n\n  * 重启 rabbitmq 服务\n\n    ```\n    service rabbitmq restart\n    ```\n\n  * 进入网页控制台\n\n    ```\n    http://x.x.x.x:15672/\n    ```\n\n  * 使用guest用户或skyeye用户无法登陆\n\n    解决办法：\n\n    ```\n    //执行设置权限命令\n    rabbitmqctl set_permissions -p / skyeye \".*\" \".*\" \".*\"\n    //执行设置角色命令\n    rabbitmqctl set_user_tags skyeye administrator\n    //设置完进行查看用户列表\n     rabbitmqctl list_users\n    ```\n\n    设置完发现skyeye用户可以登陆但是guest用户依旧无法登陆\n\n    进行google发现这么段话在大神的博客中：\n\n    ```\n    If rabbitmq.config doesn’t exist, it can be created manually. Set the RABBITMQ_CONFIG_FILEenvironment variable if you change the location. The Erlang runtime automatically appends the .config extension to the value of this variable\n    ```\n\n    意思大概是如果rabbitmq.config不存在，那么可以自己手动创建\n\n    ```\n    cd /etc/rabbitmq\n    ll\n    drwxr-xr-x  2 rabbitmq rabbitmq 4096 Aug  7 22:15 ./\n    drwxr-xr-x 95 root     root     4096 Aug  7 21:33 ../\n    -rw-r--r--  1 root     root       23 Aug  7 21:49 enabled_plugins\n    -rw-r--r--  1 rabbitmq rabbitmq  570 Aug  7 22:15 rabbitmq-env.conf\n    ```\n\n    显然这么rabbitmq-env.conf 不是我们要的\n\n    文档又说：有rabbitmq.config.example 这么个文件里面都是示例\n\n    ```\n    find / -name rabbitmq.config.example\n    ```\n\n    没找到\n\n    这里有说明了：\n\n    ```\n    Example rabbitmq.config File\n    RabbitMQ server source repository contains an example configuration file named rabbitmq.config.example. This example file contains an example of most of the configuration items you might want to set (with some very obscure ones omitted) along with documentation for those settings. All configuration items are commented out in the example, so you can uncomment what you need. Note that the example file is meant to be used as, well, example, and should not be treated as a general recommendation.\n    \n    In most distributions we place this example file in the same location as the real file should be placed (see above). However, for the Debian and RPM distributions policy forbids doing so; instead you can find it in /usr/share/doc/rabbitmq-server/ or /usr/share/doc/rabbitmq-server-3.6.10/ respectively.`\n    ```\n\n    ```\n    cd /usr/shar/doc/rabbitmq-server\n    ls\n    changelog.Debian.gz  copyright  rabbitmq.config.example.gz\n    gzip -d rabbitmq.config.example.gz\n    ```\n\n    这样示例就有了\n\n    \n\n    那么我们手动创建下\n\n    ```\n    cp rabbitmq.config.example  /usr/lib/rabbitmq/\n    cd /usr/lib/rabbitmq/\n    mv rabbitmq.config.example rabbitmq.config\n    将 [<<“guest”>>] 修改为 []\n    ```\n\n    ```\n    service rabbitmq-server stop\n    service rabbitmq-server start\n    ```\n\n    还是不行 查询了下stackOverflow\n\n    \n\n[]: https://stackoverflow.com/questions/23669780/rabbitmq-3-3-1-can-not-login-with-guest-guest\n\n​\t\t就这样吧。回头研究下","slug":"RabbitMq在Ubuntu中的安装配置","published":1,"updated":"2022-09-03T07:30:55.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz84c001htwfay565cby0","content":"<p>Ubuntu下安装Rabbitmq<a id=\"more\"></a></p>\n<p>windows安装比较麻烦，那么就在linux环境下安装个，ubuntu版本为16.04</p>\n<h4 id=\"安装RabbitMq\"><a href=\"#安装RabbitMq\" class=\"headerlink\" title=\"安装RabbitMq\"></a>安装RabbitMq</h4><ul>\n<li><p>使用apt-get进行安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install rabbitmq-server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动和停止服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service rabbitmq-server start</span><br><span class=\"line\">service rabbitmq-server stop</span><br><span class=\"line\">service rabbitmq-server status</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看当前用户列表</p>\n<ul>\n<li><p>查看用户列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl list_users</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl add_user skyeye nopassword</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl delete_user skyeye</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl change_password skyeye changepassword</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置用户权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl  set_permissions  -p  VHostPath  userName\t  ConfP  WriteP  ReadP</span><br><span class=\"line\">如：rabbitmqctl set_permissions -p &quot;/&quot; skyeye &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置用户角色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl  set_user_tags  userName  RoleName</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"开启RabbitMq页面控制台\"><a href=\"#开启RabbitMq页面控制台\" class=\"headerlink\" title=\"开启RabbitMq页面控制台\"></a>开启RabbitMq页面控制台</h4><ul>\n<li><p>进入安装目录</p>\n<ul>\n<li><p>查找目录（我也不知道安装到哪里了）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name rabbitmq</span><br><span class=\"line\">/usr/share/rabbitmq</span><br><span class=\"line\">/usr/lib/ocf/resource.d/rabbitmq</span><br><span class=\"line\">/usr/lib/rabbitmq</span><br><span class=\"line\">/etc/rabbitmq</span><br><span class=\"line\">/var/lib/rabbitmq</span><br><span class=\"line\">/var/log/rabbitmq</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/lib/rabbitmq</span><br><span class=\"line\">/usr/lib/rabbitmq</span><br><span class=\"line\">root@VM-0-17-ubuntu:/usr/lib/rabbitmq#</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看已经安装的插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins list</span><br><span class=\"line\"> Configured: E = explicitly enabled; e = implicitly enabled</span><br><span class=\"line\"> | Status:   * = running on rabbit@VM-0-17-ubuntu</span><br><span class=\"line\"> |/</span><br><span class=\"line\">[  ] amqp_client                       3.5.7</span><br><span class=\"line\">[  ] cowboy                            0.5.0-rmq3.5.7-git4b93c2d</span><br><span class=\"line\">[  ] mochiweb                          2.7.0-rmq3.5.7-git680dba8</span><br><span class=\"line\">[  ] rabbitmq_amqp1_0                  3.5.7</span><br><span class=\"line\">[  ] rabbitmq_auth_backend_ldap        3.5.7</span><br><span class=\"line\">[  ] rabbitmq_auth_mechanism_ssl       3.5.7</span><br><span class=\"line\">[  ] rabbitmq_consistent_hash_exchange 3.5.7</span><br><span class=\"line\">[  ] rabbitmq_federation               3.5.7</span><br><span class=\"line\">[  ] rabbitmq_federation_management    3.5.7</span><br><span class=\"line\">[  ] rabbitmq_management               3.5.7</span><br><span class=\"line\">[  ] rabbitmq_management_agent         3.5.7</span><br><span class=\"line\">[  ] rabbitmq_management_visualiser    3.5.7</span><br><span class=\"line\">[  ] rabbitmq_mqtt                     3.5.7</span><br><span class=\"line\">[  ] rabbitmq_shovel                   3.5.7</span><br><span class=\"line\">[  ] rabbitmq_shovel_management        3.5.7</span><br><span class=\"line\">[  ] rabbitmq_stomp                    3.5.7</span><br><span class=\"line\">[  ] rabbitmq_test                     3.5.7</span><br><span class=\"line\">[  ] rabbitmq_tracing                  3.5.7</span><br><span class=\"line\">[  ] rabbitmq_web_dispatch             3.5.7</span><br><span class=\"line\">[  ] rabbitmq_web_stomp                3.5.7</span><br><span class=\"line\">[  ] rabbitmq_web_stomp_examples       3.5.7</span><br><span class=\"line\">[  ] sockjs                            0.3.4-rmq3.5.7-git3132eb9</span><br><span class=\"line\">[  ] webmachine                        1.10.3-rmq3.5.7-gite9359c7</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开启网页控制台</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启 rabbitmq 服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service rabbitmq restart</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入网页控制台</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://x.x.x.x:15672/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用guest用户或skyeye用户无法登陆</p>\n<p>解决办法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//执行设置权限命令</span><br><span class=\"line\">rabbitmqctl set_permissions -p / skyeye &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class=\"line\">//执行设置角色命令</span><br><span class=\"line\">rabbitmqctl set_user_tags skyeye administrator</span><br><span class=\"line\">//设置完进行查看用户列表</span><br><span class=\"line\"> rabbitmqctl list_users</span><br></pre></td></tr></table></figure>\n\n<p>设置完发现skyeye用户可以登陆但是guest用户依旧无法登陆</p>\n<p>进行google发现这么段话在大神的博客中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If rabbitmq.config doesn’t exist, it can be created manually. Set the RABBITMQ_CONFIG_FILEenvironment variable if you change the location. The Erlang runtime automatically appends the .config extension to the value of this variable</span><br></pre></td></tr></table></figure>\n\n<p>意思大概是如果rabbitmq.config不存在，那么可以自己手动创建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/rabbitmq</span><br><span class=\"line\">ll</span><br><span class=\"line\">drwxr-xr-x  2 rabbitmq rabbitmq 4096 Aug  7 22:15 ./</span><br><span class=\"line\">drwxr-xr-x 95 root     root     4096 Aug  7 21:33 ../</span><br><span class=\"line\">-rw-r--r--  1 root     root       23 Aug  7 21:49 enabled_plugins</span><br><span class=\"line\">-rw-r--r--  1 rabbitmq rabbitmq  570 Aug  7 22:15 rabbitmq-env.conf</span><br></pre></td></tr></table></figure>\n\n<p>显然这么rabbitmq-env.conf 不是我们要的</p>\n<p>文档又说：有rabbitmq.config.example 这么个文件里面都是示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name rabbitmq.config.example</span><br></pre></td></tr></table></figure>\n\n<p>没找到</p>\n<p>这里有说明了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example rabbitmq.config File</span><br><span class=\"line\">RabbitMQ server source repository contains an example configuration file named rabbitmq.config.example. This example file contains an example of most of the configuration items you might want to set (with some very obscure ones omitted) along with documentation for those settings. All configuration items are commented out in the example, so you can uncomment what you need. Note that the example file is meant to be used as, well, example, and should not be treated as a general recommendation.</span><br><span class=\"line\"></span><br><span class=\"line\">In most distributions we place this example file in the same location as the real file should be placed (see above). However, for the Debian and RPM distributions policy forbids doing so; instead you can find it in /usr/share/doc/rabbitmq-server/ or /usr/share/doc/rabbitmq-server-3.6.10/ respectively.`</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/shar/doc/rabbitmq-server</span><br><span class=\"line\">ls</span><br><span class=\"line\">changelog.Debian.gz  copyright  rabbitmq.config.example.gz</span><br><span class=\"line\">gzip -d rabbitmq.config.example.gz</span><br></pre></td></tr></table></figure>\n\n<p>这样示例就有了</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>那么我们手动创建下\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp rabbitmq.config.example  /usr/lib/rabbitmq/</span><br><span class=\"line\">cd /usr/lib/rabbitmq/</span><br><span class=\"line\">mv rabbitmq.config.example rabbitmq.config</span><br><span class=\"line\">将 [&lt;&lt;“guest”&gt;&gt;] 修改为 []</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service rabbitmq-server stop</span><br><span class=\"line\">service rabbitmq-server start</span><br></pre></td></tr></table></figure>\n\n还是不行 查询了下stackOverflow</code></pre><p>[]: <a href=\"https://stackoverflow.com/questions/23669780/rabbitmq-3-3-1-can-not-login-with-guest-guest\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/23669780/rabbitmq-3-3-1-can-not-login-with-guest-guest</a></p>\n<p>​        就这样吧。回头研究下</p>\n","site":{"data":{}},"excerpt":"<p>Ubuntu下安装Rabbitmq</p>","more":"<p></p>\n<p>windows安装比较麻烦，那么就在linux环境下安装个，ubuntu版本为16.04</p>\n<h4 id=\"安装RabbitMq\"><a href=\"#安装RabbitMq\" class=\"headerlink\" title=\"安装RabbitMq\"></a>安装RabbitMq</h4><ul>\n<li><p>使用apt-get进行安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install rabbitmq-server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动和停止服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service rabbitmq-server start</span><br><span class=\"line\">service rabbitmq-server stop</span><br><span class=\"line\">service rabbitmq-server status</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看当前用户列表</p>\n<ul>\n<li><p>查看用户列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl list_users</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl add_user skyeye nopassword</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl delete_user skyeye</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl change_password skyeye changepassword</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置用户权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl  set_permissions  -p  VHostPath  userName\t  ConfP  WriteP  ReadP</span><br><span class=\"line\">如：rabbitmqctl set_permissions -p &quot;/&quot; skyeye &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置用户角色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl  set_user_tags  userName  RoleName</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"开启RabbitMq页面控制台\"><a href=\"#开启RabbitMq页面控制台\" class=\"headerlink\" title=\"开启RabbitMq页面控制台\"></a>开启RabbitMq页面控制台</h4><ul>\n<li><p>进入安装目录</p>\n<ul>\n<li><p>查找目录（我也不知道安装到哪里了）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name rabbitmq</span><br><span class=\"line\">/usr/share/rabbitmq</span><br><span class=\"line\">/usr/lib/ocf/resource.d/rabbitmq</span><br><span class=\"line\">/usr/lib/rabbitmq</span><br><span class=\"line\">/etc/rabbitmq</span><br><span class=\"line\">/var/lib/rabbitmq</span><br><span class=\"line\">/var/log/rabbitmq</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/lib/rabbitmq</span><br><span class=\"line\">/usr/lib/rabbitmq</span><br><span class=\"line\">root@VM-0-17-ubuntu:/usr/lib/rabbitmq#</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看已经安装的插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins list</span><br><span class=\"line\"> Configured: E = explicitly enabled; e = implicitly enabled</span><br><span class=\"line\"> | Status:   * = running on rabbit@VM-0-17-ubuntu</span><br><span class=\"line\"> |/</span><br><span class=\"line\">[  ] amqp_client                       3.5.7</span><br><span class=\"line\">[  ] cowboy                            0.5.0-rmq3.5.7-git4b93c2d</span><br><span class=\"line\">[  ] mochiweb                          2.7.0-rmq3.5.7-git680dba8</span><br><span class=\"line\">[  ] rabbitmq_amqp1_0                  3.5.7</span><br><span class=\"line\">[  ] rabbitmq_auth_backend_ldap        3.5.7</span><br><span class=\"line\">[  ] rabbitmq_auth_mechanism_ssl       3.5.7</span><br><span class=\"line\">[  ] rabbitmq_consistent_hash_exchange 3.5.7</span><br><span class=\"line\">[  ] rabbitmq_federation               3.5.7</span><br><span class=\"line\">[  ] rabbitmq_federation_management    3.5.7</span><br><span class=\"line\">[  ] rabbitmq_management               3.5.7</span><br><span class=\"line\">[  ] rabbitmq_management_agent         3.5.7</span><br><span class=\"line\">[  ] rabbitmq_management_visualiser    3.5.7</span><br><span class=\"line\">[  ] rabbitmq_mqtt                     3.5.7</span><br><span class=\"line\">[  ] rabbitmq_shovel                   3.5.7</span><br><span class=\"line\">[  ] rabbitmq_shovel_management        3.5.7</span><br><span class=\"line\">[  ] rabbitmq_stomp                    3.5.7</span><br><span class=\"line\">[  ] rabbitmq_test                     3.5.7</span><br><span class=\"line\">[  ] rabbitmq_tracing                  3.5.7</span><br><span class=\"line\">[  ] rabbitmq_web_dispatch             3.5.7</span><br><span class=\"line\">[  ] rabbitmq_web_stomp                3.5.7</span><br><span class=\"line\">[  ] rabbitmq_web_stomp_examples       3.5.7</span><br><span class=\"line\">[  ] sockjs                            0.3.4-rmq3.5.7-git3132eb9</span><br><span class=\"line\">[  ] webmachine                        1.10.3-rmq3.5.7-gite9359c7</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开启网页控制台</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启 rabbitmq 服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service rabbitmq restart</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入网页控制台</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://x.x.x.x:15672/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用guest用户或skyeye用户无法登陆</p>\n<p>解决办法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//执行设置权限命令</span><br><span class=\"line\">rabbitmqctl set_permissions -p / skyeye &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class=\"line\">//执行设置角色命令</span><br><span class=\"line\">rabbitmqctl set_user_tags skyeye administrator</span><br><span class=\"line\">//设置完进行查看用户列表</span><br><span class=\"line\"> rabbitmqctl list_users</span><br></pre></td></tr></table></figure>\n\n<p>设置完发现skyeye用户可以登陆但是guest用户依旧无法登陆</p>\n<p>进行google发现这么段话在大神的博客中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If rabbitmq.config doesn’t exist, it can be created manually. Set the RABBITMQ_CONFIG_FILEenvironment variable if you change the location. The Erlang runtime automatically appends the .config extension to the value of this variable</span><br></pre></td></tr></table></figure>\n\n<p>意思大概是如果rabbitmq.config不存在，那么可以自己手动创建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/rabbitmq</span><br><span class=\"line\">ll</span><br><span class=\"line\">drwxr-xr-x  2 rabbitmq rabbitmq 4096 Aug  7 22:15 ./</span><br><span class=\"line\">drwxr-xr-x 95 root     root     4096 Aug  7 21:33 ../</span><br><span class=\"line\">-rw-r--r--  1 root     root       23 Aug  7 21:49 enabled_plugins</span><br><span class=\"line\">-rw-r--r--  1 rabbitmq rabbitmq  570 Aug  7 22:15 rabbitmq-env.conf</span><br></pre></td></tr></table></figure>\n\n<p>显然这么rabbitmq-env.conf 不是我们要的</p>\n<p>文档又说：有rabbitmq.config.example 这么个文件里面都是示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name rabbitmq.config.example</span><br></pre></td></tr></table></figure>\n\n<p>没找到</p>\n<p>这里有说明了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example rabbitmq.config File</span><br><span class=\"line\">RabbitMQ server source repository contains an example configuration file named rabbitmq.config.example. This example file contains an example of most of the configuration items you might want to set (with some very obscure ones omitted) along with documentation for those settings. All configuration items are commented out in the example, so you can uncomment what you need. Note that the example file is meant to be used as, well, example, and should not be treated as a general recommendation.</span><br><span class=\"line\"></span><br><span class=\"line\">In most distributions we place this example file in the same location as the real file should be placed (see above). However, for the Debian and RPM distributions policy forbids doing so; instead you can find it in /usr/share/doc/rabbitmq-server/ or /usr/share/doc/rabbitmq-server-3.6.10/ respectively.`</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/shar/doc/rabbitmq-server</span><br><span class=\"line\">ls</span><br><span class=\"line\">changelog.Debian.gz  copyright  rabbitmq.config.example.gz</span><br><span class=\"line\">gzip -d rabbitmq.config.example.gz</span><br></pre></td></tr></table></figure>\n\n<p>这样示例就有了</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>那么我们手动创建下\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp rabbitmq.config.example  /usr/lib/rabbitmq/</span><br><span class=\"line\">cd /usr/lib/rabbitmq/</span><br><span class=\"line\">mv rabbitmq.config.example rabbitmq.config</span><br><span class=\"line\">将 [&lt;&lt;“guest”&gt;&gt;] 修改为 []</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service rabbitmq-server stop</span><br><span class=\"line\">service rabbitmq-server start</span><br></pre></td></tr></table></figure>\n\n还是不行 查询了下stackOverflow</code></pre><p>[]: <a href=\"https://stackoverflow.com/questions/23669780/rabbitmq-3-3-1-can-not-login-with-guest-guest\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/23669780/rabbitmq-3-3-1-can-not-login-with-guest-guest</a></p>\n<p>​        就这样吧。回头研究下</p>"},{"title":"RabbitMq简述","date":"2018-08-09T12:13:10.000Z","_content":"\nRabbitMq的一些简单介绍<!--more-->\n\n#### RabbitMq的几个简单概念的介绍\n\n* Broker\n\n  消息队列服务器的实体。接收和分发消息的应用。\n\n* Exchange\n\n  简单的说就是路由器。当msg到达broker的时候，根据分发规则(消息策略),匹配相应的routing key,binding消息保存再exchange中，进行用于msg的分发路由。简单的说就是接收消息，转发消息到绑定的队列上，指定消息按什么规则，路由到哪个队列。  \n\n* Queue\n\n  消息队列，用于存储消息，相同属性的queue可以重复定义，每个msg可以重复放在一个或者多个队列中，每个队列的消息都是隔离的。\n\n* Binding\n\n  通过路由规则讲路由器和队列进行绑定起来，比如 一个exchangA可能有队列B,C,D，另一个exchangeE可能有队列G,H,J\n\n* RoutingKey \n\n  路由的指定key，exchange可以根据这个key进行消息投递路由\n\n* Producter \n\n  消息生产者\n\n* Consumer\n\n  消息消费者\n\n* Channel\n\n  消息通道，客户端与服务端的链接中可能有多个消息通道。每个Channel代表一个通话\n\n  这是Cache\n\n  ```\n  \tpublic static class Cache {\n  \n  \t\tprivate final Channel channel = new Channel();\n  \n  \t\tprivate final Connection connection = new Connection();\n  \n  \t\tpublic Channel getChannel() {\n  \t\t\treturn this.channel;\n  \t\t}\n  \n  \t\tpublic Connection getConnection() {\n  \t\t\treturn this.connection;\n  \t\t}\n  \n  \t\tpublic static class Channel {\n  \n  \t\t\t/**\n  \t\t\t * Number of channels to retain in the cache. When \"check-timeout\" > 0, max\n  \t\t\t * channels per connection.\n  \t\t\t */\n  \t\t\tprivate Integer size;\n  \n  \t\t\t/**\n  \t\t\t * Number of milliseconds to wait to obtain a channel if the cache size has\n  \t\t\t * been reached. If 0, always create a new channel.\n  \t\t\t */\n  \t\t\tprivate Long checkoutTimeout;\n  \n  \t\t\tpublic Integer getSize() {\n  \t\t\t\treturn this.size;\n  \t\t\t}\n  \n  \t\t\tpublic void setSize(Integer size) {\n  \t\t\t\tthis.size = size;\n  \t\t\t}\n  \n  \t\t\tpublic Long getCheckoutTimeout() {\n  \t\t\t\treturn this.checkoutTimeout;\n  \t\t\t}\n  \n  \t\t\tpublic void setCheckoutTimeout(Long checkoutTimeout) {\n  \t\t\t\tthis.checkoutTimeout = checkoutTimeout;\n  \t\t\t}\n  \n  \t\t}\n  ```\n\n  这是RabbitMq的connection\n\n  ```\n  public static class Connection {\n  \n  \t\t\t/**\n  \t\t\t * Connection factory cache mode.\n  \t\t\t */\n  \t\t\tprivate CacheMode mode = CacheMode.CHANNEL;\n  \n  \t\t\t/**\n  \t\t\t * Number of connections to cache. Only applies when mode is CONNECTION.\n  \t\t\t */\n  \t\t\tprivate Integer size;\n  \n  \t\t\tpublic CacheMode getMode() {\n  \t\t\t\treturn this.mode;\n  \t\t\t}\n  \n  \t\t\tpublic void setMode(CacheMode mode) {\n  \t\t\t\tthis.mode = mode;\n  \t\t\t}\n  \n  \t\t\tpublic Integer getSize() {\n  \t\t\t\treturn this.size;\n  \t\t\t}\n  \n  \t\t\tpublic void setSize(Integer size) {\n  \t\t\t\tthis.size = size;\n  \t\t\t}\n  \n  \t\t}\n  ```\n\n  具体的都在springboot中的RabbitProperties类中。\n\n#### 在Spring中的xml配置\n\n​\t这里使用xml进行展示 是因为比起springboot的代码配置方式，xml配置更加直观\n\n```\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:rabbit=\"http://www.springframework.org/schema/rabbit\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/rabbit\n       http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd\">\n        <!--链接工厂-->\n        <rabbit:connection-factory id=\"connectionFactory\"\n            username=\"userName\" password=\"password\" host=\"host\"\n            port=\"port\" />\n        <rabbit:template id=\"amqpTemplate\" connection-factory=\"connectionFactory\"\n            exchange=\"exchangeName\" /><rabbit:admin connection-factory=\"connectionFactory\" />\n\t\t\n<!--队列定义-->\n<rabbit:queue name=\"队列名\" durable=\"true\" auto-delete=\"false\" exclusive=\"false\" > \n<!--这里可以定义一些队列参数-->\n<!--\n<rabbit:queue-arguments> <entry key=\"x-message-ttl\"> <value type=\"java.lang.Long\">60000</value></entry><entry key=\"x-dead-letter-exchange\" value=\"转发到哪个路由\"/> <entry key=\"x-dead-letter-routing-key\" value=\"消费routekey\"/> </rabbit:queue-arguments>\n-->\n</rabbit:queue>\n\n<!--进行队列与路由分发器绑定-->\n<rabbit:direct-exchange name=\"路由名称\" durable=\"true\" auto-delete=\"false\">\n        <rabbit:bindings>\n\t\t\t<rabbit:binding queue=\"消费队列名\" key=\"消费队列名routeKey\"></rabbit:binding>\n        </rabbit:bindings>\n    </rabbit:direct-exchange>\n  <!--消费者配置-->\n<rabbit:listener-container\n\t\tconnection-factory=\"connectionFactory\" acknowledge=\"auto\" concurrency=\"2\" prefetch=\"2\">\n\t\t<rabbit:listener queues=\"消费队列名routeKey\" ref=\"消费者类的首字母小写\"/>\n</rabbit:listener-container>\n    <bean id=\"jsonMessageConverter\" class=\"org.springframework.amqp.support.converter.Jackson2JsonMessageConverter\" />\n</beans> \n```\n\n\n\n\n\n#### 图示\n\n![RabbitMq图示](RabbitMq简述/RabbitMq图解.png)\n\n","source":"_posts/RabbitMq简述.md","raw":"---\ntitle: RabbitMq简述\ndate: 2018-08-09 20:13:10\ntags: [RabbitMq]\ncategories: [RabbitMq]\n---\n\nRabbitMq的一些简单介绍<!--more-->\n\n#### RabbitMq的几个简单概念的介绍\n\n* Broker\n\n  消息队列服务器的实体。接收和分发消息的应用。\n\n* Exchange\n\n  简单的说就是路由器。当msg到达broker的时候，根据分发规则(消息策略),匹配相应的routing key,binding消息保存再exchange中，进行用于msg的分发路由。简单的说就是接收消息，转发消息到绑定的队列上，指定消息按什么规则，路由到哪个队列。  \n\n* Queue\n\n  消息队列，用于存储消息，相同属性的queue可以重复定义，每个msg可以重复放在一个或者多个队列中，每个队列的消息都是隔离的。\n\n* Binding\n\n  通过路由规则讲路由器和队列进行绑定起来，比如 一个exchangA可能有队列B,C,D，另一个exchangeE可能有队列G,H,J\n\n* RoutingKey \n\n  路由的指定key，exchange可以根据这个key进行消息投递路由\n\n* Producter \n\n  消息生产者\n\n* Consumer\n\n  消息消费者\n\n* Channel\n\n  消息通道，客户端与服务端的链接中可能有多个消息通道。每个Channel代表一个通话\n\n  这是Cache\n\n  ```\n  \tpublic static class Cache {\n  \n  \t\tprivate final Channel channel = new Channel();\n  \n  \t\tprivate final Connection connection = new Connection();\n  \n  \t\tpublic Channel getChannel() {\n  \t\t\treturn this.channel;\n  \t\t}\n  \n  \t\tpublic Connection getConnection() {\n  \t\t\treturn this.connection;\n  \t\t}\n  \n  \t\tpublic static class Channel {\n  \n  \t\t\t/**\n  \t\t\t * Number of channels to retain in the cache. When \"check-timeout\" > 0, max\n  \t\t\t * channels per connection.\n  \t\t\t */\n  \t\t\tprivate Integer size;\n  \n  \t\t\t/**\n  \t\t\t * Number of milliseconds to wait to obtain a channel if the cache size has\n  \t\t\t * been reached. If 0, always create a new channel.\n  \t\t\t */\n  \t\t\tprivate Long checkoutTimeout;\n  \n  \t\t\tpublic Integer getSize() {\n  \t\t\t\treturn this.size;\n  \t\t\t}\n  \n  \t\t\tpublic void setSize(Integer size) {\n  \t\t\t\tthis.size = size;\n  \t\t\t}\n  \n  \t\t\tpublic Long getCheckoutTimeout() {\n  \t\t\t\treturn this.checkoutTimeout;\n  \t\t\t}\n  \n  \t\t\tpublic void setCheckoutTimeout(Long checkoutTimeout) {\n  \t\t\t\tthis.checkoutTimeout = checkoutTimeout;\n  \t\t\t}\n  \n  \t\t}\n  ```\n\n  这是RabbitMq的connection\n\n  ```\n  public static class Connection {\n  \n  \t\t\t/**\n  \t\t\t * Connection factory cache mode.\n  \t\t\t */\n  \t\t\tprivate CacheMode mode = CacheMode.CHANNEL;\n  \n  \t\t\t/**\n  \t\t\t * Number of connections to cache. Only applies when mode is CONNECTION.\n  \t\t\t */\n  \t\t\tprivate Integer size;\n  \n  \t\t\tpublic CacheMode getMode() {\n  \t\t\t\treturn this.mode;\n  \t\t\t}\n  \n  \t\t\tpublic void setMode(CacheMode mode) {\n  \t\t\t\tthis.mode = mode;\n  \t\t\t}\n  \n  \t\t\tpublic Integer getSize() {\n  \t\t\t\treturn this.size;\n  \t\t\t}\n  \n  \t\t\tpublic void setSize(Integer size) {\n  \t\t\t\tthis.size = size;\n  \t\t\t}\n  \n  \t\t}\n  ```\n\n  具体的都在springboot中的RabbitProperties类中。\n\n#### 在Spring中的xml配置\n\n​\t这里使用xml进行展示 是因为比起springboot的代码配置方式，xml配置更加直观\n\n```\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:rabbit=\"http://www.springframework.org/schema/rabbit\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/rabbit\n       http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd\">\n        <!--链接工厂-->\n        <rabbit:connection-factory id=\"connectionFactory\"\n            username=\"userName\" password=\"password\" host=\"host\"\n            port=\"port\" />\n        <rabbit:template id=\"amqpTemplate\" connection-factory=\"connectionFactory\"\n            exchange=\"exchangeName\" /><rabbit:admin connection-factory=\"connectionFactory\" />\n\t\t\n<!--队列定义-->\n<rabbit:queue name=\"队列名\" durable=\"true\" auto-delete=\"false\" exclusive=\"false\" > \n<!--这里可以定义一些队列参数-->\n<!--\n<rabbit:queue-arguments> <entry key=\"x-message-ttl\"> <value type=\"java.lang.Long\">60000</value></entry><entry key=\"x-dead-letter-exchange\" value=\"转发到哪个路由\"/> <entry key=\"x-dead-letter-routing-key\" value=\"消费routekey\"/> </rabbit:queue-arguments>\n-->\n</rabbit:queue>\n\n<!--进行队列与路由分发器绑定-->\n<rabbit:direct-exchange name=\"路由名称\" durable=\"true\" auto-delete=\"false\">\n        <rabbit:bindings>\n\t\t\t<rabbit:binding queue=\"消费队列名\" key=\"消费队列名routeKey\"></rabbit:binding>\n        </rabbit:bindings>\n    </rabbit:direct-exchange>\n  <!--消费者配置-->\n<rabbit:listener-container\n\t\tconnection-factory=\"connectionFactory\" acknowledge=\"auto\" concurrency=\"2\" prefetch=\"2\">\n\t\t<rabbit:listener queues=\"消费队列名routeKey\" ref=\"消费者类的首字母小写\"/>\n</rabbit:listener-container>\n    <bean id=\"jsonMessageConverter\" class=\"org.springframework.amqp.support.converter.Jackson2JsonMessageConverter\" />\n</beans> \n```\n\n\n\n\n\n#### 图示\n\n![RabbitMq图示](RabbitMq简述/RabbitMq图解.png)\n\n","slug":"RabbitMq简述","published":1,"updated":"2022-09-03T07:30:55.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz84g001jtwfaxi19lomv","content":"<p>RabbitMq的一些简单介绍<a id=\"more\"></a></p>\n<h4 id=\"RabbitMq的几个简单概念的介绍\"><a href=\"#RabbitMq的几个简单概念的介绍\" class=\"headerlink\" title=\"RabbitMq的几个简单概念的介绍\"></a>RabbitMq的几个简单概念的介绍</h4><ul>\n<li><p>Broker</p>\n<p>消息队列服务器的实体。接收和分发消息的应用。</p>\n</li>\n<li><p>Exchange</p>\n<p>简单的说就是路由器。当msg到达broker的时候，根据分发规则(消息策略),匹配相应的routing key,binding消息保存再exchange中，进行用于msg的分发路由。简单的说就是接收消息，转发消息到绑定的队列上，指定消息按什么规则，路由到哪个队列。  </p>\n</li>\n<li><p>Queue</p>\n<p>消息队列，用于存储消息，相同属性的queue可以重复定义，每个msg可以重复放在一个或者多个队列中，每个队列的消息都是隔离的。</p>\n</li>\n<li><p>Binding</p>\n<p>通过路由规则讲路由器和队列进行绑定起来，比如 一个exchangA可能有队列B,C,D，另一个exchangeE可能有队列G,H,J</p>\n</li>\n<li><p>RoutingKey </p>\n<p>路由的指定key，exchange可以根据这个key进行消息投递路由</p>\n</li>\n<li><p>Producter </p>\n<p>消息生产者</p>\n</li>\n<li><p>Consumer</p>\n<p>消息消费者</p>\n</li>\n<li><p>Channel</p>\n<p>消息通道，客户端与服务端的链接中可能有多个消息通道。每个Channel代表一个通话</p>\n<p>这是Cache</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class Cache &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">\tprivate final Channel channel = new Channel();</span><br><span class=\"line\">  </span><br><span class=\"line\">\tprivate final Connection connection = new Connection();</span><br><span class=\"line\">  </span><br><span class=\"line\">\tpublic Channel getChannel() &#123;</span><br><span class=\"line\">\t\treturn this.channel;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\tpublic Connection getConnection() &#123;</span><br><span class=\"line\">\t\treturn this.connection;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\tpublic static class Channel &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\t/**</span><br><span class=\"line\">\t\t * Number of channels to retain in the cache. When &quot;check-timeout&quot; &gt; 0, max</span><br><span class=\"line\">\t\t * channels per connection.</span><br><span class=\"line\">\t\t */</span><br><span class=\"line\">\t\tprivate Integer size;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\t/**</span><br><span class=\"line\">\t\t * Number of milliseconds to wait to obtain a channel if the cache size has</span><br><span class=\"line\">\t\t * been reached. If 0, always create a new channel.</span><br><span class=\"line\">\t\t */</span><br><span class=\"line\">\t\tprivate Long checkoutTimeout;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\tpublic Integer getSize() &#123;</span><br><span class=\"line\">\t\t\treturn this.size;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\tpublic void setSize(Integer size) &#123;</span><br><span class=\"line\">\t\t\tthis.size = size;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\tpublic Long getCheckoutTimeout() &#123;</span><br><span class=\"line\">\t\t\treturn this.checkoutTimeout;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\tpublic void setCheckoutTimeout(Long checkoutTimeout) &#123;</span><br><span class=\"line\">\t\t\tthis.checkoutTimeout = checkoutTimeout;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是RabbitMq的connection</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class Connection &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t/**</span><br><span class=\"line\">\t\t\t * Connection factory cache mode.</span><br><span class=\"line\">\t\t\t */</span><br><span class=\"line\">\t\t\tprivate CacheMode mode = CacheMode.CHANNEL;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t/**</span><br><span class=\"line\">\t\t\t * Number of connections to cache. Only applies when mode is CONNECTION.</span><br><span class=\"line\">\t\t\t */</span><br><span class=\"line\">\t\t\tprivate Integer size;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic CacheMode getMode() &#123;</span><br><span class=\"line\">\t\t\t\treturn this.mode;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void setMode(CacheMode mode) &#123;</span><br><span class=\"line\">\t\t\t\tthis.mode = mode;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic Integer getSize() &#123;</span><br><span class=\"line\">\t\t\t\treturn this.size;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void setSize(Integer size) &#123;</span><br><span class=\"line\">\t\t\t\tthis.size = size;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体的都在springboot中的RabbitProperties类中。</p>\n</li>\n</ul>\n<h4 id=\"在Spring中的xml配置\"><a href=\"#在Spring中的xml配置\" class=\"headerlink\" title=\"在Spring中的xml配置\"></a>在Spring中的xml配置</h4><p>​    这里使用xml进行展示 是因为比起springboot的代码配置方式，xml配置更加直观</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">\txmlns:rabbit=&quot;http://www.springframework.org/schema/rabbit&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class=\"line\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">       http://www.springframework.org/schema/rabbit</span><br><span class=\"line\">       http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd&quot;&gt;</span><br><span class=\"line\">        &lt;!--链接工厂--&gt;</span><br><span class=\"line\">        &lt;rabbit:connection-factory id=&quot;connectionFactory&quot;</span><br><span class=\"line\">            username=&quot;userName&quot; password=&quot;password&quot; host=&quot;host&quot;</span><br><span class=\"line\">            port=&quot;port&quot; /&gt;</span><br><span class=\"line\">        &lt;rabbit:template id=&quot;amqpTemplate&quot; connection-factory=&quot;connectionFactory&quot;</span><br><span class=\"line\">            exchange=&quot;exchangeName&quot; /&gt;&lt;rabbit:admin connection-factory=&quot;connectionFactory&quot; /&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&lt;!--队列定义--&gt;</span><br><span class=\"line\">&lt;rabbit:queue name=&quot;队列名&quot; durable=&quot;true&quot; auto-delete=&quot;false&quot; exclusive=&quot;false&quot; &gt; </span><br><span class=\"line\">&lt;!--这里可以定义一些队列参数--&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">&lt;rabbit:queue-arguments&gt; &lt;entry key=&quot;x-message-ttl&quot;&gt; &lt;value type=&quot;java.lang.Long&quot;&gt;60000&lt;/value&gt;&lt;/entry&gt;&lt;entry key=&quot;x-dead-letter-exchange&quot; value=&quot;转发到哪个路由&quot;/&gt; &lt;entry key=&quot;x-dead-letter-routing-key&quot; value=&quot;消费routekey&quot;/&gt; &lt;/rabbit:queue-arguments&gt;</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;/rabbit:queue&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--进行队列与路由分发器绑定--&gt;</span><br><span class=\"line\">&lt;rabbit:direct-exchange name=&quot;路由名称&quot; durable=&quot;true&quot; auto-delete=&quot;false&quot;&gt;</span><br><span class=\"line\">        &lt;rabbit:bindings&gt;</span><br><span class=\"line\">\t\t\t&lt;rabbit:binding queue=&quot;消费队列名&quot; key=&quot;消费队列名routeKey&quot;&gt;&lt;/rabbit:binding&gt;</span><br><span class=\"line\">        &lt;/rabbit:bindings&gt;</span><br><span class=\"line\">    &lt;/rabbit:direct-exchange&gt;</span><br><span class=\"line\">  &lt;!--消费者配置--&gt;</span><br><span class=\"line\">&lt;rabbit:listener-container</span><br><span class=\"line\">\t\tconnection-factory=&quot;connectionFactory&quot; acknowledge=&quot;auto&quot; concurrency=&quot;2&quot; prefetch=&quot;2&quot;&gt;</span><br><span class=\"line\">\t\t&lt;rabbit:listener queues=&quot;消费队列名routeKey&quot; ref=&quot;消费者类的首字母小写&quot;/&gt;</span><br><span class=\"line\">&lt;/rabbit:listener-container&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;jsonMessageConverter&quot; class=&quot;org.springframework.amqp.support.converter.Jackson2JsonMessageConverter&quot; /&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"图示\"><a href=\"#图示\" class=\"headerlink\" title=\"图示\"></a>图示</h4><p><img src=\"/2018/08/09/RabbitMq简述/RabbitMq%E7%AE%80%E8%BF%B0/RabbitMq%E5%9B%BE%E8%A7%A3.png\" alt=\"RabbitMq图示\"></p>\n","site":{"data":{}},"excerpt":"<p>RabbitMq的一些简单介绍</p>","more":"<p></p>\n<h4 id=\"RabbitMq的几个简单概念的介绍\"><a href=\"#RabbitMq的几个简单概念的介绍\" class=\"headerlink\" title=\"RabbitMq的几个简单概念的介绍\"></a>RabbitMq的几个简单概念的介绍</h4><ul>\n<li><p>Broker</p>\n<p>消息队列服务器的实体。接收和分发消息的应用。</p>\n</li>\n<li><p>Exchange</p>\n<p>简单的说就是路由器。当msg到达broker的时候，根据分发规则(消息策略),匹配相应的routing key,binding消息保存再exchange中，进行用于msg的分发路由。简单的说就是接收消息，转发消息到绑定的队列上，指定消息按什么规则，路由到哪个队列。  </p>\n</li>\n<li><p>Queue</p>\n<p>消息队列，用于存储消息，相同属性的queue可以重复定义，每个msg可以重复放在一个或者多个队列中，每个队列的消息都是隔离的。</p>\n</li>\n<li><p>Binding</p>\n<p>通过路由规则讲路由器和队列进行绑定起来，比如 一个exchangA可能有队列B,C,D，另一个exchangeE可能有队列G,H,J</p>\n</li>\n<li><p>RoutingKey </p>\n<p>路由的指定key，exchange可以根据这个key进行消息投递路由</p>\n</li>\n<li><p>Producter </p>\n<p>消息生产者</p>\n</li>\n<li><p>Consumer</p>\n<p>消息消费者</p>\n</li>\n<li><p>Channel</p>\n<p>消息通道，客户端与服务端的链接中可能有多个消息通道。每个Channel代表一个通话</p>\n<p>这是Cache</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class Cache &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">\tprivate final Channel channel = new Channel();</span><br><span class=\"line\">  </span><br><span class=\"line\">\tprivate final Connection connection = new Connection();</span><br><span class=\"line\">  </span><br><span class=\"line\">\tpublic Channel getChannel() &#123;</span><br><span class=\"line\">\t\treturn this.channel;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\tpublic Connection getConnection() &#123;</span><br><span class=\"line\">\t\treturn this.connection;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\tpublic static class Channel &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\t/**</span><br><span class=\"line\">\t\t * Number of channels to retain in the cache. When &quot;check-timeout&quot; &gt; 0, max</span><br><span class=\"line\">\t\t * channels per connection.</span><br><span class=\"line\">\t\t */</span><br><span class=\"line\">\t\tprivate Integer size;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\t/**</span><br><span class=\"line\">\t\t * Number of milliseconds to wait to obtain a channel if the cache size has</span><br><span class=\"line\">\t\t * been reached. If 0, always create a new channel.</span><br><span class=\"line\">\t\t */</span><br><span class=\"line\">\t\tprivate Long checkoutTimeout;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\tpublic Integer getSize() &#123;</span><br><span class=\"line\">\t\t\treturn this.size;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\tpublic void setSize(Integer size) &#123;</span><br><span class=\"line\">\t\t\tthis.size = size;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\tpublic Long getCheckoutTimeout() &#123;</span><br><span class=\"line\">\t\t\treturn this.checkoutTimeout;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\tpublic void setCheckoutTimeout(Long checkoutTimeout) &#123;</span><br><span class=\"line\">\t\t\tthis.checkoutTimeout = checkoutTimeout;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是RabbitMq的connection</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class Connection &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t/**</span><br><span class=\"line\">\t\t\t * Connection factory cache mode.</span><br><span class=\"line\">\t\t\t */</span><br><span class=\"line\">\t\t\tprivate CacheMode mode = CacheMode.CHANNEL;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t/**</span><br><span class=\"line\">\t\t\t * Number of connections to cache. Only applies when mode is CONNECTION.</span><br><span class=\"line\">\t\t\t */</span><br><span class=\"line\">\t\t\tprivate Integer size;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic CacheMode getMode() &#123;</span><br><span class=\"line\">\t\t\t\treturn this.mode;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void setMode(CacheMode mode) &#123;</span><br><span class=\"line\">\t\t\t\tthis.mode = mode;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic Integer getSize() &#123;</span><br><span class=\"line\">\t\t\t\treturn this.size;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void setSize(Integer size) &#123;</span><br><span class=\"line\">\t\t\t\tthis.size = size;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体的都在springboot中的RabbitProperties类中。</p>\n</li>\n</ul>\n<h4 id=\"在Spring中的xml配置\"><a href=\"#在Spring中的xml配置\" class=\"headerlink\" title=\"在Spring中的xml配置\"></a>在Spring中的xml配置</h4><p>​    这里使用xml进行展示 是因为比起springboot的代码配置方式，xml配置更加直观</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">\txmlns:rabbit=&quot;http://www.springframework.org/schema/rabbit&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class=\"line\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">       http://www.springframework.org/schema/rabbit</span><br><span class=\"line\">       http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd&quot;&gt;</span><br><span class=\"line\">        &lt;!--链接工厂--&gt;</span><br><span class=\"line\">        &lt;rabbit:connection-factory id=&quot;connectionFactory&quot;</span><br><span class=\"line\">            username=&quot;userName&quot; password=&quot;password&quot; host=&quot;host&quot;</span><br><span class=\"line\">            port=&quot;port&quot; /&gt;</span><br><span class=\"line\">        &lt;rabbit:template id=&quot;amqpTemplate&quot; connection-factory=&quot;connectionFactory&quot;</span><br><span class=\"line\">            exchange=&quot;exchangeName&quot; /&gt;&lt;rabbit:admin connection-factory=&quot;connectionFactory&quot; /&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&lt;!--队列定义--&gt;</span><br><span class=\"line\">&lt;rabbit:queue name=&quot;队列名&quot; durable=&quot;true&quot; auto-delete=&quot;false&quot; exclusive=&quot;false&quot; &gt; </span><br><span class=\"line\">&lt;!--这里可以定义一些队列参数--&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">&lt;rabbit:queue-arguments&gt; &lt;entry key=&quot;x-message-ttl&quot;&gt; &lt;value type=&quot;java.lang.Long&quot;&gt;60000&lt;/value&gt;&lt;/entry&gt;&lt;entry key=&quot;x-dead-letter-exchange&quot; value=&quot;转发到哪个路由&quot;/&gt; &lt;entry key=&quot;x-dead-letter-routing-key&quot; value=&quot;消费routekey&quot;/&gt; &lt;/rabbit:queue-arguments&gt;</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;/rabbit:queue&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--进行队列与路由分发器绑定--&gt;</span><br><span class=\"line\">&lt;rabbit:direct-exchange name=&quot;路由名称&quot; durable=&quot;true&quot; auto-delete=&quot;false&quot;&gt;</span><br><span class=\"line\">        &lt;rabbit:bindings&gt;</span><br><span class=\"line\">\t\t\t&lt;rabbit:binding queue=&quot;消费队列名&quot; key=&quot;消费队列名routeKey&quot;&gt;&lt;/rabbit:binding&gt;</span><br><span class=\"line\">        &lt;/rabbit:bindings&gt;</span><br><span class=\"line\">    &lt;/rabbit:direct-exchange&gt;</span><br><span class=\"line\">  &lt;!--消费者配置--&gt;</span><br><span class=\"line\">&lt;rabbit:listener-container</span><br><span class=\"line\">\t\tconnection-factory=&quot;connectionFactory&quot; acknowledge=&quot;auto&quot; concurrency=&quot;2&quot; prefetch=&quot;2&quot;&gt;</span><br><span class=\"line\">\t\t&lt;rabbit:listener queues=&quot;消费队列名routeKey&quot; ref=&quot;消费者类的首字母小写&quot;/&gt;</span><br><span class=\"line\">&lt;/rabbit:listener-container&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;jsonMessageConverter&quot; class=&quot;org.springframework.amqp.support.converter.Jackson2JsonMessageConverter&quot; /&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"图示\"><a href=\"#图示\" class=\"headerlink\" title=\"图示\"></a>图示</h4><p><img src=\"/2018/08/09/RabbitMq简述/RabbitMq%E7%AE%80%E8%BF%B0/RabbitMq%E5%9B%BE%E8%A7%A3.png\" alt=\"RabbitMq图示\"></p>"},{"title":"Redis配置优化","date":"2017-12-04T14:48:42.000Z","_content":"","source":"_posts/Redis配置优化.md","raw":"---\ntitle: Redis配置优化\ndate: 2017-12-04 22:48:42\ntags:\n---\n","slug":"Redis配置优化","published":1,"updated":"2022-09-03T07:30:55.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz84j001mtwfa1b6mn31g","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Redis集群搭建","date":"2018-10-15T16:20:18.000Z","_content":"\nRedis集群搭建了解下<!--more--->\n\n今天在图灵群中，有人提到了redis集群的搭建，黑白老师说看郭大路吹牛，下班时候我在群里说：好今晚搞下给你看。\n\n其实这个东西很早时候就玩过了，用不用说了，基本上是现在标配了，集群也是很早就搭过了。但是后来基本上都是运维来做，所以后来很少自己动手去做了\n\n* 下载安装\n\n  我们下载最新版的redis4.0.11\n\n  ```\n  wget http://download.redis.io/releases/redis-4.0.11.tar.gz\n  tar -zxvf redis-4.0.11.tar.gz -c redis-4.0.11-build\n  ```\n\n  进行编译安装\n\n  ```\n  make prefix=/data/soft/redis-4.0.11 install\n  mv redis-4.0.11 redis-4.0.11-6379\n  ```\n\n* 进行配置\n\n  将``redis-4.0.11-build``目录下的redis.conf 复制一份到`` redis-4.0.11-6379/bin``目录下\n\n  进行配置\n\n  一些目录需要手动创建比如：dir log\n\n  ```\n  ...\n  protected-mode no\n  ...\n  bind 127.0.0.1\n  ...\n  #这一行为新加\n  masterauth nopassword\n  requirepass nopassword \n  ...\n  port 6379\n  ...\n  daemonize yes\n  ...\n  bind 127.0.0.1\n  ...\n  dir /data/soft/redis-4.0.11/data/\n  ...\n  pidfile /var/run/redis_6379.pid（pid 6379和port要对应）\n  ...\n  cluster-enabled yes\n  ...\n  cluster-config-file nodes6379.conf （6379和port要对应）\n  ...\n  cluster-node-timeout 15000\n  ...\n  appendonly yes\n  ```\n\n  修改完毕后进行复制出五个实例一共六个实例\n\n  ```\n  cp redis-4.0.11-6379/ redis-4.0.11-6380 -r \n  cp redis-4.0.11-6379/ redis-4.0.11-6381 -r \n  cp redis-4.0.11-6379/ redis-4.0.11-6382 -r \n  cp redis-4.0.11-6379/ redis-4.0.11-6383 -r \n  cp redis-4.0.11-6379/ redis-4.0.11-6384 -r \n  ```\n\n  修改上述复制的实例中的redis.conf\n\n  ```\n  ...\n  port 6379\n  ...\n  cluster-config-file nodes6379.conf （6379和port要对应）\n  ...\n  pidfile /var/run/redis_6379.pid（pid 6379和port要对应）\n  ```\n\n* 下载ruby\n\n  ```\n  apt-get install ruby -y\n  apt-get install rubygems -y\n  gem install redis\n  ```\n\n* 配置集群密码\n\n  ```\n  find / -name client.rb\n  /usr/lib/ruby/2.3.0/xmlrpc/client.rb\n  /var/lib/gems/2.3.0/gems/redis-4.0.2/lib/redis/client.rb\n  vim /var/lib/gems/2.3.0/gems/redis-4.0.2/lib/redis/client.rb\n  ```\n\n  ```\n  ...\n   DEFAULTS = {\n         :url => lambda { ENV[\"REDIS_URL\"] },\n         :scheme => \"redis\",\n         :host => \"127.0.0.1\",\n         :port => 6379,\n         :path => nil,\n         :timeout => 5.0,\n         :password => \"nopassword\",##注意这里密码设置和主节点设置实例密码设置一致 而且用引号括住\n         :db => 0,\n         :driver => nil,\n         :id => nil,\n         :tcp_keepalive => 0,\n         :reconnect_attempts => 1,\n         :inherit_socket => false\n        }\n  \n  ...\n  ```\n\n  如果不在每个实例中配置密码``masterauth nopassword``和``requirepass nopassword``,并且在client.rb中进行配置的话会报错：\n\n  ```\n  [ERR] Sorry, can't connect to node 127.0.0.1:6379\n  ```\n\n   这种情况的出现是由于 实例设置了密码 但是masterauth与client.rb没有设置密码。\n\n* 编写启动脚本\n\n  ```\n  cd /data/soft\n  vim startRedis6379.sh\n  ```\n\n  ```\n   /data/soft/redis-4.0.11-6379/bin/redis-server  /data/soft/redis-4.0.11-6379/bin/redis.conf\n  ```\n\n  ```\n  chmod 777 startRedis6379.sh\n  ```\n\n  ```\n  cp startRedis6379.sh startRedis6380.sh\n  cp startRedis6379.sh startRedis6381.sh\n  cp startRedis6379.sh startRedis6382.sh\n  cp startRedis6379.sh startRedis6383.sh\n  cp startRedis6379.sh startRedis6384.sh\n  ##记得修改sh脚本中的目录名称为各个实例的名称\n  ```\n\n* 开启防火墙，及安全组\n\n  不仅需要开启各个实例的端口，而且要开启集群的总线（port+10000），如果不开启的话在构建集群的时候会一直waiting join redis....\n\n* 启动\n\n  ```\n  sh startRedis6379.sh\n  sh startRedis6380.sh\n  sh startRedis6381.sh\n  sh startRedis6382.sh\n  sh startRedis6383.sh\n  sh startRedis6384.sh\n  ```\n\n* 进入源码目录创建集群\n\n  ```\n  cd /data/soft/redis-4.0.11-build\n  /data/soft/redis-4.0.11-build/src/redis-trib.rb create --replicas 1 127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384\n  ```\n\n* 然后就可以看到集群构建成功的日志了\n\n  ```\n  [OK] All nodes agree about slots configuration.\n  >>> Check for open slots...\n  >>> Check slots coverage...\n  [OK] All 16384 slots covered.\n  ```\n\n* 使用cli进行链接\n\n  ```\n  root@VM-0-17-ubuntu:/data/soft/redis-4.0.11-6379/bin# ./redis-cli -h 127.0.0.1 -p 6379 -c\n  127.0.0.1:6379> auth nopassword\n  OK\n  127.0.0.1:6379> cluster nodes\n  015e1ed80d9c7bc5aeaeec8a44052622f463c37c 127.0.0.1:6381@16381 master - 0 1539623481808 3 connected 10923-16383\n  1907a9da5d164b601179ec290a39e6d0e3d3d00f 127.0.0.1:6383@16383 slave 015e1ed80d9c7bc5aeaeec8a44052622f463c37c 0 1539623482811 5 connected\n  54a81120760e6fc80d29791dae723f6722c833a3 127.0.0.1:6379@16379 myself,master - 0 1539623479000 1 connected 0-5460\n  aaa56f4aa0c9256f36729e5c9cad26f5bde38e8a 127.0.0.1:6384@16384 slave 54a81120760e6fc80d29791dae723f6722c833a3 0 1539623482000 6 connected\n  43a6919c8409ae1df9b55bc2544d789ecf862365 127.0.0.1:6380@16380 master - 0 1539623480806 2 connected 5461-10922\n  1e32a678d297a326e1655905010120ca6105a589 127.0.0.1:6382@16382 slave 43a6919c8409ae1df9b55bc2544d789ecf862365 0 1539623481000 4 connected\n  127.0.0.1:6379> set 9 9\n  -> Redirected to slot [10106] located at 127.0.0.1:6380\n  (error) NOAUTH Authentication required.\n  127.0.0.1:6380> nopassword\n  (error) ERR unknown command `nopassword`, with args beginning with: \n  127.0.0.1:6380> auth nopassword\n  OK\n  127.0.0.1:6380> set 9 9\n  OK\n  127.0.0.1:6380> exit\n  \n  ```\n\n  在登陆6379获取这个key\n\n  ```\n  root@VM-0-17-ubuntu:/data/soft/redis-4.0.11-6379/bin# ./redis-cli -h 127.0.0.1 -p 6379 -c\n  127.0.0.1:6379> auth nopassword\n  OK\n  127.0.0.1:6379> get 9\n  -> Redirected to slot [10106] located at 127.0.0.1:6380\n  (error) NOAUTH Authentication required.\n  127.0.0.1:6380> auth nopassword\n  OK\n  127.0.0.1:6380> get 9\n  \"9\"\n  127.0.0.1:6380> \n  ```\n\n  查看集群信息\n\n  ```\n  127.0.0.1:6380> cluster info\n  cluster_state:ok\n  cluster_slots_assigned:16384\n  cluster_slots_ok:16384\n  cluster_slots_pfail:0\n  cluster_slots_fail:0\n  cluster_known_nodes:6\n  cluster_size:3\n  cluster_current_epoch:6\n  cluster_my_epoch:2\n  cluster_stats_messages_ping_sent:4003\n  cluster_stats_messages_pong_sent:3910\n  cluster_stats_messages_meet_sent:5\n  cluster_stats_messages_sent:7918\n  cluster_stats_messages_ping_received:3910\n  cluster_stats_messages_pong_received:4008\n  cluster_stats_messages_received:7918\n  ```\n\n  **这样集群就搭建成功了**\n\n* 当中遇到的问题\n\n  * bind 问题\n\n    每个实例bind 的ip 必须和redis-trib.rb 那个命令中的 实例 host:ip对应上\n\n  * 集群搭建至少6个实例\n\n  * 当在构建集群时候，如果碰到如下问题：\n\n    ```\n    [ERR] Node 127.0.0.1:6380 is not empty. Either the nodealready knows other nodes (check with CLUSTER NODES) or contains some key in database 0.\n    ```\n\n    那么这么办：\n\n    * 将该节点下的aof,rdb备份文件删除 ，我的在redis-4.0.11-6380/data目录下\n    * 将该节点的redis.conf中的cluster-config-file的文件nodes6380.conf删除掉，我的也在data目录下\n    * 如果还是报错，就登陆该节点cli，进行``flushdb``操作\n    * 完成上述任何一项，进行重启redis实例，重新构建集群\n\n  \n\n  **先写到这里了，具体的集群原理后面补充。**\n\n  ","source":"_posts/Redis集群搭建.md","raw":"---\ntitle: Redis集群搭建\ndate: 2018-10-16 00:20:18\ntags: [Nosql]\ncategories: [Nosql]\n---\n\nRedis集群搭建了解下<!--more--->\n\n今天在图灵群中，有人提到了redis集群的搭建，黑白老师说看郭大路吹牛，下班时候我在群里说：好今晚搞下给你看。\n\n其实这个东西很早时候就玩过了，用不用说了，基本上是现在标配了，集群也是很早就搭过了。但是后来基本上都是运维来做，所以后来很少自己动手去做了\n\n* 下载安装\n\n  我们下载最新版的redis4.0.11\n\n  ```\n  wget http://download.redis.io/releases/redis-4.0.11.tar.gz\n  tar -zxvf redis-4.0.11.tar.gz -c redis-4.0.11-build\n  ```\n\n  进行编译安装\n\n  ```\n  make prefix=/data/soft/redis-4.0.11 install\n  mv redis-4.0.11 redis-4.0.11-6379\n  ```\n\n* 进行配置\n\n  将``redis-4.0.11-build``目录下的redis.conf 复制一份到`` redis-4.0.11-6379/bin``目录下\n\n  进行配置\n\n  一些目录需要手动创建比如：dir log\n\n  ```\n  ...\n  protected-mode no\n  ...\n  bind 127.0.0.1\n  ...\n  #这一行为新加\n  masterauth nopassword\n  requirepass nopassword \n  ...\n  port 6379\n  ...\n  daemonize yes\n  ...\n  bind 127.0.0.1\n  ...\n  dir /data/soft/redis-4.0.11/data/\n  ...\n  pidfile /var/run/redis_6379.pid（pid 6379和port要对应）\n  ...\n  cluster-enabled yes\n  ...\n  cluster-config-file nodes6379.conf （6379和port要对应）\n  ...\n  cluster-node-timeout 15000\n  ...\n  appendonly yes\n  ```\n\n  修改完毕后进行复制出五个实例一共六个实例\n\n  ```\n  cp redis-4.0.11-6379/ redis-4.0.11-6380 -r \n  cp redis-4.0.11-6379/ redis-4.0.11-6381 -r \n  cp redis-4.0.11-6379/ redis-4.0.11-6382 -r \n  cp redis-4.0.11-6379/ redis-4.0.11-6383 -r \n  cp redis-4.0.11-6379/ redis-4.0.11-6384 -r \n  ```\n\n  修改上述复制的实例中的redis.conf\n\n  ```\n  ...\n  port 6379\n  ...\n  cluster-config-file nodes6379.conf （6379和port要对应）\n  ...\n  pidfile /var/run/redis_6379.pid（pid 6379和port要对应）\n  ```\n\n* 下载ruby\n\n  ```\n  apt-get install ruby -y\n  apt-get install rubygems -y\n  gem install redis\n  ```\n\n* 配置集群密码\n\n  ```\n  find / -name client.rb\n  /usr/lib/ruby/2.3.0/xmlrpc/client.rb\n  /var/lib/gems/2.3.0/gems/redis-4.0.2/lib/redis/client.rb\n  vim /var/lib/gems/2.3.0/gems/redis-4.0.2/lib/redis/client.rb\n  ```\n\n  ```\n  ...\n   DEFAULTS = {\n         :url => lambda { ENV[\"REDIS_URL\"] },\n         :scheme => \"redis\",\n         :host => \"127.0.0.1\",\n         :port => 6379,\n         :path => nil,\n         :timeout => 5.0,\n         :password => \"nopassword\",##注意这里密码设置和主节点设置实例密码设置一致 而且用引号括住\n         :db => 0,\n         :driver => nil,\n         :id => nil,\n         :tcp_keepalive => 0,\n         :reconnect_attempts => 1,\n         :inherit_socket => false\n        }\n  \n  ...\n  ```\n\n  如果不在每个实例中配置密码``masterauth nopassword``和``requirepass nopassword``,并且在client.rb中进行配置的话会报错：\n\n  ```\n  [ERR] Sorry, can't connect to node 127.0.0.1:6379\n  ```\n\n   这种情况的出现是由于 实例设置了密码 但是masterauth与client.rb没有设置密码。\n\n* 编写启动脚本\n\n  ```\n  cd /data/soft\n  vim startRedis6379.sh\n  ```\n\n  ```\n   /data/soft/redis-4.0.11-6379/bin/redis-server  /data/soft/redis-4.0.11-6379/bin/redis.conf\n  ```\n\n  ```\n  chmod 777 startRedis6379.sh\n  ```\n\n  ```\n  cp startRedis6379.sh startRedis6380.sh\n  cp startRedis6379.sh startRedis6381.sh\n  cp startRedis6379.sh startRedis6382.sh\n  cp startRedis6379.sh startRedis6383.sh\n  cp startRedis6379.sh startRedis6384.sh\n  ##记得修改sh脚本中的目录名称为各个实例的名称\n  ```\n\n* 开启防火墙，及安全组\n\n  不仅需要开启各个实例的端口，而且要开启集群的总线（port+10000），如果不开启的话在构建集群的时候会一直waiting join redis....\n\n* 启动\n\n  ```\n  sh startRedis6379.sh\n  sh startRedis6380.sh\n  sh startRedis6381.sh\n  sh startRedis6382.sh\n  sh startRedis6383.sh\n  sh startRedis6384.sh\n  ```\n\n* 进入源码目录创建集群\n\n  ```\n  cd /data/soft/redis-4.0.11-build\n  /data/soft/redis-4.0.11-build/src/redis-trib.rb create --replicas 1 127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384\n  ```\n\n* 然后就可以看到集群构建成功的日志了\n\n  ```\n  [OK] All nodes agree about slots configuration.\n  >>> Check for open slots...\n  >>> Check slots coverage...\n  [OK] All 16384 slots covered.\n  ```\n\n* 使用cli进行链接\n\n  ```\n  root@VM-0-17-ubuntu:/data/soft/redis-4.0.11-6379/bin# ./redis-cli -h 127.0.0.1 -p 6379 -c\n  127.0.0.1:6379> auth nopassword\n  OK\n  127.0.0.1:6379> cluster nodes\n  015e1ed80d9c7bc5aeaeec8a44052622f463c37c 127.0.0.1:6381@16381 master - 0 1539623481808 3 connected 10923-16383\n  1907a9da5d164b601179ec290a39e6d0e3d3d00f 127.0.0.1:6383@16383 slave 015e1ed80d9c7bc5aeaeec8a44052622f463c37c 0 1539623482811 5 connected\n  54a81120760e6fc80d29791dae723f6722c833a3 127.0.0.1:6379@16379 myself,master - 0 1539623479000 1 connected 0-5460\n  aaa56f4aa0c9256f36729e5c9cad26f5bde38e8a 127.0.0.1:6384@16384 slave 54a81120760e6fc80d29791dae723f6722c833a3 0 1539623482000 6 connected\n  43a6919c8409ae1df9b55bc2544d789ecf862365 127.0.0.1:6380@16380 master - 0 1539623480806 2 connected 5461-10922\n  1e32a678d297a326e1655905010120ca6105a589 127.0.0.1:6382@16382 slave 43a6919c8409ae1df9b55bc2544d789ecf862365 0 1539623481000 4 connected\n  127.0.0.1:6379> set 9 9\n  -> Redirected to slot [10106] located at 127.0.0.1:6380\n  (error) NOAUTH Authentication required.\n  127.0.0.1:6380> nopassword\n  (error) ERR unknown command `nopassword`, with args beginning with: \n  127.0.0.1:6380> auth nopassword\n  OK\n  127.0.0.1:6380> set 9 9\n  OK\n  127.0.0.1:6380> exit\n  \n  ```\n\n  在登陆6379获取这个key\n\n  ```\n  root@VM-0-17-ubuntu:/data/soft/redis-4.0.11-6379/bin# ./redis-cli -h 127.0.0.1 -p 6379 -c\n  127.0.0.1:6379> auth nopassword\n  OK\n  127.0.0.1:6379> get 9\n  -> Redirected to slot [10106] located at 127.0.0.1:6380\n  (error) NOAUTH Authentication required.\n  127.0.0.1:6380> auth nopassword\n  OK\n  127.0.0.1:6380> get 9\n  \"9\"\n  127.0.0.1:6380> \n  ```\n\n  查看集群信息\n\n  ```\n  127.0.0.1:6380> cluster info\n  cluster_state:ok\n  cluster_slots_assigned:16384\n  cluster_slots_ok:16384\n  cluster_slots_pfail:0\n  cluster_slots_fail:0\n  cluster_known_nodes:6\n  cluster_size:3\n  cluster_current_epoch:6\n  cluster_my_epoch:2\n  cluster_stats_messages_ping_sent:4003\n  cluster_stats_messages_pong_sent:3910\n  cluster_stats_messages_meet_sent:5\n  cluster_stats_messages_sent:7918\n  cluster_stats_messages_ping_received:3910\n  cluster_stats_messages_pong_received:4008\n  cluster_stats_messages_received:7918\n  ```\n\n  **这样集群就搭建成功了**\n\n* 当中遇到的问题\n\n  * bind 问题\n\n    每个实例bind 的ip 必须和redis-trib.rb 那个命令中的 实例 host:ip对应上\n\n  * 集群搭建至少6个实例\n\n  * 当在构建集群时候，如果碰到如下问题：\n\n    ```\n    [ERR] Node 127.0.0.1:6380 is not empty. Either the nodealready knows other nodes (check with CLUSTER NODES) or contains some key in database 0.\n    ```\n\n    那么这么办：\n\n    * 将该节点下的aof,rdb备份文件删除 ，我的在redis-4.0.11-6380/data目录下\n    * 将该节点的redis.conf中的cluster-config-file的文件nodes6380.conf删除掉，我的也在data目录下\n    * 如果还是报错，就登陆该节点cli，进行``flushdb``操作\n    * 完成上述任何一项，进行重启redis实例，重新构建集群\n\n  \n\n  **先写到这里了，具体的集群原理后面补充。**\n\n  ","slug":"Redis集群搭建","published":1,"updated":"2022-09-03T07:30:55.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz84l001ptwfaghxncs6l","content":"<p>Redis集群搭建了解下<a id=\"more\"></a></p>\n<p>今天在图灵群中，有人提到了redis集群的搭建，黑白老师说看郭大路吹牛，下班时候我在群里说：好今晚搞下给你看。</p>\n<p>其实这个东西很早时候就玩过了，用不用说了，基本上是现在标配了，集群也是很早就搭过了。但是后来基本上都是运维来做，所以后来很少自己动手去做了</p>\n<ul>\n<li><p>下载安装</p>\n<p>我们下载最新版的redis4.0.11</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-4.0.11.tar.gz</span><br><span class=\"line\">tar -zxvf redis-4.0.11.tar.gz -c redis-4.0.11-build</span><br></pre></td></tr></table></figure>\n\n<p>进行编译安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make prefix=/data/soft/redis-4.0.11 install</span><br><span class=\"line\">mv redis-4.0.11 redis-4.0.11-6379</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进行配置</p>\n<p>将<code>redis-4.0.11-build</code>目录下的redis.conf 复制一份到<code>redis-4.0.11-6379/bin</code>目录下</p>\n<p>进行配置</p>\n<p>一些目录需要手动创建比如：dir log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">protected-mode no</span><br><span class=\"line\">...</span><br><span class=\"line\">bind 127.0.0.1</span><br><span class=\"line\">...</span><br><span class=\"line\">#这一行为新加</span><br><span class=\"line\">masterauth nopassword</span><br><span class=\"line\">requirepass nopassword </span><br><span class=\"line\">...</span><br><span class=\"line\">port 6379</span><br><span class=\"line\">...</span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\">...</span><br><span class=\"line\">bind 127.0.0.1</span><br><span class=\"line\">...</span><br><span class=\"line\">dir /data/soft/redis-4.0.11/data/</span><br><span class=\"line\">...</span><br><span class=\"line\">pidfile /var/run/redis_6379.pid（pid 6379和port要对应）</span><br><span class=\"line\">...</span><br><span class=\"line\">cluster-enabled yes</span><br><span class=\"line\">...</span><br><span class=\"line\">cluster-config-file nodes6379.conf （6379和port要对应）</span><br><span class=\"line\">...</span><br><span class=\"line\">cluster-node-timeout 15000</span><br><span class=\"line\">...</span><br><span class=\"line\">appendonly yes</span><br></pre></td></tr></table></figure>\n\n<p>修改完毕后进行复制出五个实例一共六个实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp redis-4.0.11-6379/ redis-4.0.11-6380 -r </span><br><span class=\"line\">cp redis-4.0.11-6379/ redis-4.0.11-6381 -r </span><br><span class=\"line\">cp redis-4.0.11-6379/ redis-4.0.11-6382 -r </span><br><span class=\"line\">cp redis-4.0.11-6379/ redis-4.0.11-6383 -r </span><br><span class=\"line\">cp redis-4.0.11-6379/ redis-4.0.11-6384 -r</span><br></pre></td></tr></table></figure>\n\n<p>修改上述复制的实例中的redis.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">port 6379</span><br><span class=\"line\">...</span><br><span class=\"line\">cluster-config-file nodes6379.conf （6379和port要对应）</span><br><span class=\"line\">...</span><br><span class=\"line\">pidfile /var/run/redis_6379.pid（pid 6379和port要对应）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载ruby</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install ruby -y</span><br><span class=\"line\">apt-get install rubygems -y</span><br><span class=\"line\">gem install redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置集群密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name client.rb</span><br><span class=\"line\">/usr/lib/ruby/2.3.0/xmlrpc/client.rb</span><br><span class=\"line\">/var/lib/gems/2.3.0/gems/redis-4.0.2/lib/redis/client.rb</span><br><span class=\"line\">vim /var/lib/gems/2.3.0/gems/redis-4.0.2/lib/redis/client.rb</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"> DEFAULTS = &#123;</span><br><span class=\"line\">       :url =&gt; lambda &#123; ENV[&quot;REDIS_URL&quot;] &#125;,</span><br><span class=\"line\">       :scheme =&gt; &quot;redis&quot;,</span><br><span class=\"line\">       :host =&gt; &quot;127.0.0.1&quot;,</span><br><span class=\"line\">       :port =&gt; 6379,</span><br><span class=\"line\">       :path =&gt; nil,</span><br><span class=\"line\">       :timeout =&gt; 5.0,</span><br><span class=\"line\">       :password =&gt; &quot;nopassword&quot;,##注意这里密码设置和主节点设置实例密码设置一致 而且用引号括住</span><br><span class=\"line\">       :db =&gt; 0,</span><br><span class=\"line\">       :driver =&gt; nil,</span><br><span class=\"line\">       :id =&gt; nil,</span><br><span class=\"line\">       :tcp_keepalive =&gt; 0,</span><br><span class=\"line\">       :reconnect_attempts =&gt; 1,</span><br><span class=\"line\">       :inherit_socket =&gt; false</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>如果不在每个实例中配置密码<code>masterauth nopassword</code>和<code>requirepass nopassword</code>,并且在client.rb中进行配置的话会报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ERR] Sorry, can&apos;t connect to node 127.0.0.1:6379</span><br></pre></td></tr></table></figure>\n\n<p> 这种情况的出现是由于 实例设置了密码 但是masterauth与client.rb没有设置密码。</p>\n</li>\n<li><p>编写启动脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft</span><br><span class=\"line\">vim startRedis6379.sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/data/soft/redis-4.0.11-6379/bin/redis-server  /data/soft/redis-4.0.11-6379/bin/redis.conf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 777 startRedis6379.sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp startRedis6379.sh startRedis6380.sh</span><br><span class=\"line\">cp startRedis6379.sh startRedis6381.sh</span><br><span class=\"line\">cp startRedis6379.sh startRedis6382.sh</span><br><span class=\"line\">cp startRedis6379.sh startRedis6383.sh</span><br><span class=\"line\">cp startRedis6379.sh startRedis6384.sh</span><br><span class=\"line\">##记得修改sh脚本中的目录名称为各个实例的名称</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开启防火墙，及安全组</p>\n<p>不仅需要开启各个实例的端口，而且要开启集群的总线（port+10000），如果不开启的话在构建集群的时候会一直waiting join redis….</p>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh startRedis6379.sh</span><br><span class=\"line\">sh startRedis6380.sh</span><br><span class=\"line\">sh startRedis6381.sh</span><br><span class=\"line\">sh startRedis6382.sh</span><br><span class=\"line\">sh startRedis6383.sh</span><br><span class=\"line\">sh startRedis6384.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入源码目录创建集群</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/redis-4.0.11-build</span><br><span class=\"line\">/data/soft/redis-4.0.11-build/src/redis-trib.rb create --replicas 1 127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后就可以看到集群构建成功的日志了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[OK] All nodes agree about slots configuration.</span><br><span class=\"line\">&gt;&gt;&gt; Check for open slots...</span><br><span class=\"line\">&gt;&gt;&gt; Check slots coverage...</span><br><span class=\"line\">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用cli进行链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-0-17-ubuntu:/data/soft/redis-4.0.11-6379/bin# ./redis-cli -h 127.0.0.1 -p 6379 -c</span><br><span class=\"line\">127.0.0.1:6379&gt; auth nopassword</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; cluster nodes</span><br><span class=\"line\">015e1ed80d9c7bc5aeaeec8a44052622f463c37c 127.0.0.1:6381@16381 master - 0 1539623481808 3 connected 10923-16383</span><br><span class=\"line\">1907a9da5d164b601179ec290a39e6d0e3d3d00f 127.0.0.1:6383@16383 slave 015e1ed80d9c7bc5aeaeec8a44052622f463c37c 0 1539623482811 5 connected</span><br><span class=\"line\">54a81120760e6fc80d29791dae723f6722c833a3 127.0.0.1:6379@16379 myself,master - 0 1539623479000 1 connected 0-5460</span><br><span class=\"line\">aaa56f4aa0c9256f36729e5c9cad26f5bde38e8a 127.0.0.1:6384@16384 slave 54a81120760e6fc80d29791dae723f6722c833a3 0 1539623482000 6 connected</span><br><span class=\"line\">43a6919c8409ae1df9b55bc2544d789ecf862365 127.0.0.1:6380@16380 master - 0 1539623480806 2 connected 5461-10922</span><br><span class=\"line\">1e32a678d297a326e1655905010120ca6105a589 127.0.0.1:6382@16382 slave 43a6919c8409ae1df9b55bc2544d789ecf862365 0 1539623481000 4 connected</span><br><span class=\"line\">127.0.0.1:6379&gt; set 9 9</span><br><span class=\"line\">-&gt; Redirected to slot [10106] located at 127.0.0.1:6380</span><br><span class=\"line\">(error) NOAUTH Authentication required.</span><br><span class=\"line\">127.0.0.1:6380&gt; nopassword</span><br><span class=\"line\">(error) ERR unknown command `nopassword`, with args beginning with: </span><br><span class=\"line\">127.0.0.1:6380&gt; auth nopassword</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6380&gt; set 9 9</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6380&gt; exit</span><br></pre></td></tr></table></figure>\n\n<p>在登陆6379获取这个key</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-0-17-ubuntu:/data/soft/redis-4.0.11-6379/bin# ./redis-cli -h 127.0.0.1 -p 6379 -c</span><br><span class=\"line\">127.0.0.1:6379&gt; auth nopassword</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get 9</span><br><span class=\"line\">-&gt; Redirected to slot [10106] located at 127.0.0.1:6380</span><br><span class=\"line\">(error) NOAUTH Authentication required.</span><br><span class=\"line\">127.0.0.1:6380&gt; auth nopassword</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6380&gt; get 9</span><br><span class=\"line\">&quot;9&quot;</span><br><span class=\"line\">127.0.0.1:6380&gt;</span><br></pre></td></tr></table></figure>\n\n<p>查看集群信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6380&gt; cluster info</span><br><span class=\"line\">cluster_state:ok</span><br><span class=\"line\">cluster_slots_assigned:16384</span><br><span class=\"line\">cluster_slots_ok:16384</span><br><span class=\"line\">cluster_slots_pfail:0</span><br><span class=\"line\">cluster_slots_fail:0</span><br><span class=\"line\">cluster_known_nodes:6</span><br><span class=\"line\">cluster_size:3</span><br><span class=\"line\">cluster_current_epoch:6</span><br><span class=\"line\">cluster_my_epoch:2</span><br><span class=\"line\">cluster_stats_messages_ping_sent:4003</span><br><span class=\"line\">cluster_stats_messages_pong_sent:3910</span><br><span class=\"line\">cluster_stats_messages_meet_sent:5</span><br><span class=\"line\">cluster_stats_messages_sent:7918</span><br><span class=\"line\">cluster_stats_messages_ping_received:3910</span><br><span class=\"line\">cluster_stats_messages_pong_received:4008</span><br><span class=\"line\">cluster_stats_messages_received:7918</span><br></pre></td></tr></table></figure>\n\n<p><strong>这样集群就搭建成功了</strong></p>\n</li>\n<li><p>当中遇到的问题</p>\n<ul>\n<li><p>bind 问题</p>\n<p>每个实例bind 的ip 必须和redis-trib.rb 那个命令中的 实例 host:ip对应上</p>\n</li>\n<li><p>集群搭建至少6个实例</p>\n</li>\n<li><p>当在构建集群时候，如果碰到如下问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ERR] Node 127.0.0.1:6380 is not empty. Either the nodealready knows other nodes (check with CLUSTER NODES) or contains some key in database 0.</span><br></pre></td></tr></table></figure>\n\n<p>那么这么办：</p>\n<ul>\n<li>将该节点下的aof,rdb备份文件删除 ，我的在redis-4.0.11-6380/data目录下</li>\n<li>将该节点的redis.conf中的cluster-config-file的文件nodes6380.conf删除掉，我的也在data目录下</li>\n<li>如果还是报错，就登陆该节点cli，进行<code>flushdb</code>操作</li>\n<li>完成上述任何一项，进行重启redis实例，重新构建集群</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>  <strong>先写到这里了，具体的集群原理后面补充。</strong></p>\n","site":{"data":{}},"excerpt":"<p>Redis集群搭建了解下</p>","more":"<p></p>\n<p>今天在图灵群中，有人提到了redis集群的搭建，黑白老师说看郭大路吹牛，下班时候我在群里说：好今晚搞下给你看。</p>\n<p>其实这个东西很早时候就玩过了，用不用说了，基本上是现在标配了，集群也是很早就搭过了。但是后来基本上都是运维来做，所以后来很少自己动手去做了</p>\n<ul>\n<li><p>下载安装</p>\n<p>我们下载最新版的redis4.0.11</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-4.0.11.tar.gz</span><br><span class=\"line\">tar -zxvf redis-4.0.11.tar.gz -c redis-4.0.11-build</span><br></pre></td></tr></table></figure>\n\n<p>进行编译安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make prefix=/data/soft/redis-4.0.11 install</span><br><span class=\"line\">mv redis-4.0.11 redis-4.0.11-6379</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进行配置</p>\n<p>将<code>redis-4.0.11-build</code>目录下的redis.conf 复制一份到<code>redis-4.0.11-6379/bin</code>目录下</p>\n<p>进行配置</p>\n<p>一些目录需要手动创建比如：dir log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">protected-mode no</span><br><span class=\"line\">...</span><br><span class=\"line\">bind 127.0.0.1</span><br><span class=\"line\">...</span><br><span class=\"line\">#这一行为新加</span><br><span class=\"line\">masterauth nopassword</span><br><span class=\"line\">requirepass nopassword </span><br><span class=\"line\">...</span><br><span class=\"line\">port 6379</span><br><span class=\"line\">...</span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\">...</span><br><span class=\"line\">bind 127.0.0.1</span><br><span class=\"line\">...</span><br><span class=\"line\">dir /data/soft/redis-4.0.11/data/</span><br><span class=\"line\">...</span><br><span class=\"line\">pidfile /var/run/redis_6379.pid（pid 6379和port要对应）</span><br><span class=\"line\">...</span><br><span class=\"line\">cluster-enabled yes</span><br><span class=\"line\">...</span><br><span class=\"line\">cluster-config-file nodes6379.conf （6379和port要对应）</span><br><span class=\"line\">...</span><br><span class=\"line\">cluster-node-timeout 15000</span><br><span class=\"line\">...</span><br><span class=\"line\">appendonly yes</span><br></pre></td></tr></table></figure>\n\n<p>修改完毕后进行复制出五个实例一共六个实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp redis-4.0.11-6379/ redis-4.0.11-6380 -r </span><br><span class=\"line\">cp redis-4.0.11-6379/ redis-4.0.11-6381 -r </span><br><span class=\"line\">cp redis-4.0.11-6379/ redis-4.0.11-6382 -r </span><br><span class=\"line\">cp redis-4.0.11-6379/ redis-4.0.11-6383 -r </span><br><span class=\"line\">cp redis-4.0.11-6379/ redis-4.0.11-6384 -r</span><br></pre></td></tr></table></figure>\n\n<p>修改上述复制的实例中的redis.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">port 6379</span><br><span class=\"line\">...</span><br><span class=\"line\">cluster-config-file nodes6379.conf （6379和port要对应）</span><br><span class=\"line\">...</span><br><span class=\"line\">pidfile /var/run/redis_6379.pid（pid 6379和port要对应）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载ruby</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install ruby -y</span><br><span class=\"line\">apt-get install rubygems -y</span><br><span class=\"line\">gem install redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置集群密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name client.rb</span><br><span class=\"line\">/usr/lib/ruby/2.3.0/xmlrpc/client.rb</span><br><span class=\"line\">/var/lib/gems/2.3.0/gems/redis-4.0.2/lib/redis/client.rb</span><br><span class=\"line\">vim /var/lib/gems/2.3.0/gems/redis-4.0.2/lib/redis/client.rb</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"> DEFAULTS = &#123;</span><br><span class=\"line\">       :url =&gt; lambda &#123; ENV[&quot;REDIS_URL&quot;] &#125;,</span><br><span class=\"line\">       :scheme =&gt; &quot;redis&quot;,</span><br><span class=\"line\">       :host =&gt; &quot;127.0.0.1&quot;,</span><br><span class=\"line\">       :port =&gt; 6379,</span><br><span class=\"line\">       :path =&gt; nil,</span><br><span class=\"line\">       :timeout =&gt; 5.0,</span><br><span class=\"line\">       :password =&gt; &quot;nopassword&quot;,##注意这里密码设置和主节点设置实例密码设置一致 而且用引号括住</span><br><span class=\"line\">       :db =&gt; 0,</span><br><span class=\"line\">       :driver =&gt; nil,</span><br><span class=\"line\">       :id =&gt; nil,</span><br><span class=\"line\">       :tcp_keepalive =&gt; 0,</span><br><span class=\"line\">       :reconnect_attempts =&gt; 1,</span><br><span class=\"line\">       :inherit_socket =&gt; false</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>如果不在每个实例中配置密码<code>masterauth nopassword</code>和<code>requirepass nopassword</code>,并且在client.rb中进行配置的话会报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ERR] Sorry, can&apos;t connect to node 127.0.0.1:6379</span><br></pre></td></tr></table></figure>\n\n<p> 这种情况的出现是由于 实例设置了密码 但是masterauth与client.rb没有设置密码。</p>\n</li>\n<li><p>编写启动脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft</span><br><span class=\"line\">vim startRedis6379.sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/data/soft/redis-4.0.11-6379/bin/redis-server  /data/soft/redis-4.0.11-6379/bin/redis.conf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 777 startRedis6379.sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp startRedis6379.sh startRedis6380.sh</span><br><span class=\"line\">cp startRedis6379.sh startRedis6381.sh</span><br><span class=\"line\">cp startRedis6379.sh startRedis6382.sh</span><br><span class=\"line\">cp startRedis6379.sh startRedis6383.sh</span><br><span class=\"line\">cp startRedis6379.sh startRedis6384.sh</span><br><span class=\"line\">##记得修改sh脚本中的目录名称为各个实例的名称</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开启防火墙，及安全组</p>\n<p>不仅需要开启各个实例的端口，而且要开启集群的总线（port+10000），如果不开启的话在构建集群的时候会一直waiting join redis….</p>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh startRedis6379.sh</span><br><span class=\"line\">sh startRedis6380.sh</span><br><span class=\"line\">sh startRedis6381.sh</span><br><span class=\"line\">sh startRedis6382.sh</span><br><span class=\"line\">sh startRedis6383.sh</span><br><span class=\"line\">sh startRedis6384.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入源码目录创建集群</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/redis-4.0.11-build</span><br><span class=\"line\">/data/soft/redis-4.0.11-build/src/redis-trib.rb create --replicas 1 127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后就可以看到集群构建成功的日志了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[OK] All nodes agree about slots configuration.</span><br><span class=\"line\">&gt;&gt;&gt; Check for open slots...</span><br><span class=\"line\">&gt;&gt;&gt; Check slots coverage...</span><br><span class=\"line\">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用cli进行链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-0-17-ubuntu:/data/soft/redis-4.0.11-6379/bin# ./redis-cli -h 127.0.0.1 -p 6379 -c</span><br><span class=\"line\">127.0.0.1:6379&gt; auth nopassword</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; cluster nodes</span><br><span class=\"line\">015e1ed80d9c7bc5aeaeec8a44052622f463c37c 127.0.0.1:6381@16381 master - 0 1539623481808 3 connected 10923-16383</span><br><span class=\"line\">1907a9da5d164b601179ec290a39e6d0e3d3d00f 127.0.0.1:6383@16383 slave 015e1ed80d9c7bc5aeaeec8a44052622f463c37c 0 1539623482811 5 connected</span><br><span class=\"line\">54a81120760e6fc80d29791dae723f6722c833a3 127.0.0.1:6379@16379 myself,master - 0 1539623479000 1 connected 0-5460</span><br><span class=\"line\">aaa56f4aa0c9256f36729e5c9cad26f5bde38e8a 127.0.0.1:6384@16384 slave 54a81120760e6fc80d29791dae723f6722c833a3 0 1539623482000 6 connected</span><br><span class=\"line\">43a6919c8409ae1df9b55bc2544d789ecf862365 127.0.0.1:6380@16380 master - 0 1539623480806 2 connected 5461-10922</span><br><span class=\"line\">1e32a678d297a326e1655905010120ca6105a589 127.0.0.1:6382@16382 slave 43a6919c8409ae1df9b55bc2544d789ecf862365 0 1539623481000 4 connected</span><br><span class=\"line\">127.0.0.1:6379&gt; set 9 9</span><br><span class=\"line\">-&gt; Redirected to slot [10106] located at 127.0.0.1:6380</span><br><span class=\"line\">(error) NOAUTH Authentication required.</span><br><span class=\"line\">127.0.0.1:6380&gt; nopassword</span><br><span class=\"line\">(error) ERR unknown command `nopassword`, with args beginning with: </span><br><span class=\"line\">127.0.0.1:6380&gt; auth nopassword</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6380&gt; set 9 9</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6380&gt; exit</span><br></pre></td></tr></table></figure>\n\n<p>在登陆6379获取这个key</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-0-17-ubuntu:/data/soft/redis-4.0.11-6379/bin# ./redis-cli -h 127.0.0.1 -p 6379 -c</span><br><span class=\"line\">127.0.0.1:6379&gt; auth nopassword</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get 9</span><br><span class=\"line\">-&gt; Redirected to slot [10106] located at 127.0.0.1:6380</span><br><span class=\"line\">(error) NOAUTH Authentication required.</span><br><span class=\"line\">127.0.0.1:6380&gt; auth nopassword</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6380&gt; get 9</span><br><span class=\"line\">&quot;9&quot;</span><br><span class=\"line\">127.0.0.1:6380&gt;</span><br></pre></td></tr></table></figure>\n\n<p>查看集群信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6380&gt; cluster info</span><br><span class=\"line\">cluster_state:ok</span><br><span class=\"line\">cluster_slots_assigned:16384</span><br><span class=\"line\">cluster_slots_ok:16384</span><br><span class=\"line\">cluster_slots_pfail:0</span><br><span class=\"line\">cluster_slots_fail:0</span><br><span class=\"line\">cluster_known_nodes:6</span><br><span class=\"line\">cluster_size:3</span><br><span class=\"line\">cluster_current_epoch:6</span><br><span class=\"line\">cluster_my_epoch:2</span><br><span class=\"line\">cluster_stats_messages_ping_sent:4003</span><br><span class=\"line\">cluster_stats_messages_pong_sent:3910</span><br><span class=\"line\">cluster_stats_messages_meet_sent:5</span><br><span class=\"line\">cluster_stats_messages_sent:7918</span><br><span class=\"line\">cluster_stats_messages_ping_received:3910</span><br><span class=\"line\">cluster_stats_messages_pong_received:4008</span><br><span class=\"line\">cluster_stats_messages_received:7918</span><br></pre></td></tr></table></figure>\n\n<p><strong>这样集群就搭建成功了</strong></p>\n</li>\n<li><p>当中遇到的问题</p>\n<ul>\n<li><p>bind 问题</p>\n<p>每个实例bind 的ip 必须和redis-trib.rb 那个命令中的 实例 host:ip对应上</p>\n</li>\n<li><p>集群搭建至少6个实例</p>\n</li>\n<li><p>当在构建集群时候，如果碰到如下问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ERR] Node 127.0.0.1:6380 is not empty. Either the nodealready knows other nodes (check with CLUSTER NODES) or contains some key in database 0.</span><br></pre></td></tr></table></figure>\n\n<p>那么这么办：</p>\n<ul>\n<li>将该节点下的aof,rdb备份文件删除 ，我的在redis-4.0.11-6380/data目录下</li>\n<li>将该节点的redis.conf中的cluster-config-file的文件nodes6380.conf删除掉，我的也在data目录下</li>\n<li>如果还是报错，就登陆该节点cli，进行<code>flushdb</code>操作</li>\n<li>完成上述任何一项，进行重启redis实例，重新构建集群</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>  <strong>先写到这里了，具体的集群原理后面补充。</strong></p>"},{"title":"SSDB简单介绍与搭建","date":"2018-09-29T12:32:08.000Z","_content":"\nssdb了解下<!--more-->\n\n一个高性能的支持丰富数据结构的 NoSQL 数据库, 用于替代 Redis.与redis不同，基于硬盘存储，redis可以无缝迁移至ssdb\n\n### 搭建\n\n* 下载\n\n  ```\n  wget --no-check-certificate https://github.com/ideawu/ssdb/archive/master.zip\n  unzip master\n  cd ssdb-master\n  make\n  # optional, install ssdb in /usr/local/ssdb\n  sudo make install\n  ```\n\n  我们在make的时候会报错\n\n  ```\n  \n  ERROR! autoconf required! install autoconf first\n  \n  Makefile:4: build_config.mk: No such file or directory\n  make: *** No rule to make target 'build_config.mk'.  Stop.\n  ```\n\n  那么我们先下载安装autoconf，然后再make就行了\n\n  ```\n  apt-get install autoconf -y\n  ```\n\n* 安装\n\n  如果想把ssdb安装在别的目录 那么在ssdb的根目录下执行\n\n  ```\n  sudo make install PREFIX=/data/soft/ssdb\n  ```\n\n* 启动 & 为后台运行 -d 也可以后台运行\n\n  ```\n  cd /data/soft/ssdb\n  ./ssdb-server ssdb.conf &\n  ssdb-server 1.9.6\n  Copyright (c) 2012-2015 ssdb.io\n  ```\n\n  ```\n  ./ssdb-server ssdb.conf -d\n  ```\n\n  重启\n\n  ```\n  ./ssdb-server ssdb.conf -s -d restart \n  ```\n\n* 设置随机启动\n\n  先找到ssdb.sh\n\n  ```\n   find / -name ssdb.sh\n   /data/soft/ssdb-master/tools\n  ```\n\n  \n\n  根据官方文档，将ssdb.sh放置在./etc/init.d下\n\n  ```\n  cp /data/soft/ssdb-master/tools /etc/init.d\n  ```\n\n  修改ssdb.sh将以下改为你的ssdb.conf的位置\n\n  ```\n  configs=\"/data/soft/ssdb/ssdb.conf\"\n  ```\n\n  官方文档的说明,关于集群的设置\n\n  ```\n  Change /data/ssdb_data/test/ssdb.conf to the location of your SSDB config file. If you have more than one SSDB instances, put all config files in one line, separated by spaces:\n  # each config file for one instance\n  configs=/data/ssdb_data/test/ssdb.conf /data/ssdb_data/demo/ssdb.conf\n  ```\n\n  添加权限\n\n  ```\n  sudo chmod a+x /etc/init.d/ssdb\n  sudo update-rc.d ssdb defaults\n  ```\n\n* 配置修改\n\n  * 监听网络端口,在ssdb.conf中，注意**配置文件中的缩进使用tab**，我这里已经修改为0.0.0.0,端口修改为7379，0.0.0.0意思为所有的ip都可以进行访问\n\n    可以利用allow|denys 来控制ip的访问，如下面的注释里所讲\n\n    ```\n    server:\n              ip: 0.0.0.0\n              port: 7379\n              # bind to public ip\n              #ip: 0.0.0.0\n              # format: allow|deny: all|ip_prefix\n              # multiple allows or denys is supported\n              #deny: all\n              #allow: 127.0.0.1\n              #allow: 192.168\n              # auth password must be at least 32 characters\n              #auth: very-strong-password\n              #readonly: yes\n              # in ms, to log slowlog with WARN level\n              #slowlog_timeout: 5\n    \n    ```\n\n* Redis迁移到ssdb\n\n  在 `tools` 目录中的 `redis-import.php` PHP 脚本可以用来将 Redis 服务器上的数据, 拷贝到 SSDB 服务器上.\n\n  ```\n  php redis-import.php redis_host redis_port redis_db ssdb_host ssdb_port\n  ```\n\n  **请确保你的 PHP Redis 模块 <https://github.com/nicolasff/phpredis> 已经安装.**\n\n  TODO:先写到这里，明天写下代码客户端，这个东西可玩度很高，类似的产品还有360的pika...\n\n   \n\n[]: http://ssdb.io/docs/zh_cn/index.html\t\"ssdb-Wiki\"\n\n","source":"_posts/SSDB简单介绍与搭建.md","raw":"---\ntitle: SSDB简单介绍与搭建\ndate: 2018-09-29 20:32:08\ntags: [NoSql]\ncategories: [Nosql]\n---\n\nssdb了解下<!--more-->\n\n一个高性能的支持丰富数据结构的 NoSQL 数据库, 用于替代 Redis.与redis不同，基于硬盘存储，redis可以无缝迁移至ssdb\n\n### 搭建\n\n* 下载\n\n  ```\n  wget --no-check-certificate https://github.com/ideawu/ssdb/archive/master.zip\n  unzip master\n  cd ssdb-master\n  make\n  # optional, install ssdb in /usr/local/ssdb\n  sudo make install\n  ```\n\n  我们在make的时候会报错\n\n  ```\n  \n  ERROR! autoconf required! install autoconf first\n  \n  Makefile:4: build_config.mk: No such file or directory\n  make: *** No rule to make target 'build_config.mk'.  Stop.\n  ```\n\n  那么我们先下载安装autoconf，然后再make就行了\n\n  ```\n  apt-get install autoconf -y\n  ```\n\n* 安装\n\n  如果想把ssdb安装在别的目录 那么在ssdb的根目录下执行\n\n  ```\n  sudo make install PREFIX=/data/soft/ssdb\n  ```\n\n* 启动 & 为后台运行 -d 也可以后台运行\n\n  ```\n  cd /data/soft/ssdb\n  ./ssdb-server ssdb.conf &\n  ssdb-server 1.9.6\n  Copyright (c) 2012-2015 ssdb.io\n  ```\n\n  ```\n  ./ssdb-server ssdb.conf -d\n  ```\n\n  重启\n\n  ```\n  ./ssdb-server ssdb.conf -s -d restart \n  ```\n\n* 设置随机启动\n\n  先找到ssdb.sh\n\n  ```\n   find / -name ssdb.sh\n   /data/soft/ssdb-master/tools\n  ```\n\n  \n\n  根据官方文档，将ssdb.sh放置在./etc/init.d下\n\n  ```\n  cp /data/soft/ssdb-master/tools /etc/init.d\n  ```\n\n  修改ssdb.sh将以下改为你的ssdb.conf的位置\n\n  ```\n  configs=\"/data/soft/ssdb/ssdb.conf\"\n  ```\n\n  官方文档的说明,关于集群的设置\n\n  ```\n  Change /data/ssdb_data/test/ssdb.conf to the location of your SSDB config file. If you have more than one SSDB instances, put all config files in one line, separated by spaces:\n  # each config file for one instance\n  configs=/data/ssdb_data/test/ssdb.conf /data/ssdb_data/demo/ssdb.conf\n  ```\n\n  添加权限\n\n  ```\n  sudo chmod a+x /etc/init.d/ssdb\n  sudo update-rc.d ssdb defaults\n  ```\n\n* 配置修改\n\n  * 监听网络端口,在ssdb.conf中，注意**配置文件中的缩进使用tab**，我这里已经修改为0.0.0.0,端口修改为7379，0.0.0.0意思为所有的ip都可以进行访问\n\n    可以利用allow|denys 来控制ip的访问，如下面的注释里所讲\n\n    ```\n    server:\n              ip: 0.0.0.0\n              port: 7379\n              # bind to public ip\n              #ip: 0.0.0.0\n              # format: allow|deny: all|ip_prefix\n              # multiple allows or denys is supported\n              #deny: all\n              #allow: 127.0.0.1\n              #allow: 192.168\n              # auth password must be at least 32 characters\n              #auth: very-strong-password\n              #readonly: yes\n              # in ms, to log slowlog with WARN level\n              #slowlog_timeout: 5\n    \n    ```\n\n* Redis迁移到ssdb\n\n  在 `tools` 目录中的 `redis-import.php` PHP 脚本可以用来将 Redis 服务器上的数据, 拷贝到 SSDB 服务器上.\n\n  ```\n  php redis-import.php redis_host redis_port redis_db ssdb_host ssdb_port\n  ```\n\n  **请确保你的 PHP Redis 模块 <https://github.com/nicolasff/phpredis> 已经安装.**\n\n  TODO:先写到这里，明天写下代码客户端，这个东西可玩度很高，类似的产品还有360的pika...\n\n   \n\n[]: http://ssdb.io/docs/zh_cn/index.html\t\"ssdb-Wiki\"\n\n","slug":"SSDB简单介绍与搭建","published":1,"updated":"2022-09-03T07:30:55.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz84n001stwfa7em3ofvp","content":"<p>ssdb了解下<a id=\"more\"></a></p>\n<p>一个高性能的支持丰富数据结构的 NoSQL 数据库, 用于替代 Redis.与redis不同，基于硬盘存储，redis可以无缝迁移至ssdb</p>\n<h3 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h3><ul>\n<li><p>下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://github.com/ideawu/ssdb/archive/master.zip</span><br><span class=\"line\">unzip master</span><br><span class=\"line\">cd ssdb-master</span><br><span class=\"line\">make</span><br><span class=\"line\"># optional, install ssdb in /usr/local/ssdb</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>我们在make的时候会报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ERROR! autoconf required! install autoconf first</span><br><span class=\"line\"></span><br><span class=\"line\">Makefile:4: build_config.mk: No such file or directory</span><br><span class=\"line\">make: *** No rule to make target &apos;build_config.mk&apos;.  Stop.</span><br></pre></td></tr></table></figure>\n\n<p>那么我们先下载安装autoconf，然后再make就行了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install autoconf -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装</p>\n<p>如果想把ssdb安装在别的目录 那么在ssdb的根目录下执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make install PREFIX=/data/soft/ssdb</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动 &amp; 为后台运行 -d 也可以后台运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/ssdb</span><br><span class=\"line\">./ssdb-server ssdb.conf &amp;</span><br><span class=\"line\">ssdb-server 1.9.6</span><br><span class=\"line\">Copyright (c) 2012-2015 ssdb.io</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ssdb-server ssdb.conf -d</span><br></pre></td></tr></table></figure>\n\n<p>重启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ssdb-server ssdb.conf -s -d restart</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置随机启动</p>\n<p>先找到ssdb.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name ssdb.sh</span><br><span class=\"line\">/data/soft/ssdb-master/tools</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<p>  根据官方文档，将ssdb.sh放置在./etc/init.d下</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /data/soft/ssdb-master/tools /etc/init.d</span><br></pre></td></tr></table></figure>\n\n<p>  修改ssdb.sh将以下改为你的ssdb.conf的位置</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configs=&quot;/data/soft/ssdb/ssdb.conf&quot;</span><br></pre></td></tr></table></figure>\n\n<p>  官方文档的说明,关于集群的设置</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Change /data/ssdb_data/test/ssdb.conf to the location of your SSDB config file. If you have more than one SSDB instances, put all config files in one line, separated by spaces:</span><br><span class=\"line\"># each config file for one instance</span><br><span class=\"line\">configs=/data/ssdb_data/test/ssdb.conf /data/ssdb_data/demo/ssdb.conf</span><br></pre></td></tr></table></figure>\n\n<p>  添加权限</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod a+x /etc/init.d/ssdb</span><br><span class=\"line\">sudo update-rc.d ssdb defaults</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>配置修改</p>\n<ul>\n<li><p>监听网络端口,在ssdb.conf中，注意<strong>配置文件中的缩进使用tab</strong>，我这里已经修改为0.0.0.0,端口修改为7379，0.0.0.0意思为所有的ip都可以进行访问</p>\n<p>可以利用allow|denys 来控制ip的访问，如下面的注释里所讲</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">          ip: 0.0.0.0</span><br><span class=\"line\">          port: 7379</span><br><span class=\"line\">          # bind to public ip</span><br><span class=\"line\">          #ip: 0.0.0.0</span><br><span class=\"line\">          # format: allow|deny: all|ip_prefix</span><br><span class=\"line\">          # multiple allows or denys is supported</span><br><span class=\"line\">          #deny: all</span><br><span class=\"line\">          #allow: 127.0.0.1</span><br><span class=\"line\">          #allow: 192.168</span><br><span class=\"line\">          # auth password must be at least 32 characters</span><br><span class=\"line\">          #auth: very-strong-password</span><br><span class=\"line\">          #readonly: yes</span><br><span class=\"line\">          # in ms, to log slowlog with WARN level</span><br><span class=\"line\">          #slowlog_timeout: 5</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Redis迁移到ssdb</p>\n<p>在 <code>tools</code> 目录中的 <code>redis-import.php</code> PHP 脚本可以用来将 Redis 服务器上的数据, 拷贝到 SSDB 服务器上.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php redis-import.php redis_host redis_port redis_db ssdb_host ssdb_port</span><br></pre></td></tr></table></figure>\n\n<p><strong>请确保你的 PHP Redis 模块 <a href=\"https://github.com/nicolasff/phpredis\" target=\"_blank\" rel=\"noopener\">https://github.com/nicolasff/phpredis</a> 已经安装.</strong></p>\n<p>TODO:先写到这里，明天写下代码客户端，这个东西可玩度很高，类似的产品还有360的pika…</p>\n</li>\n</ul>\n<p>[]: <a href=\"http://ssdb.io/docs/zh_cn/index.html\" target=\"_blank\" rel=\"noopener\">http://ssdb.io/docs/zh_cn/index.html</a>    “ssdb-Wiki”</p>\n","site":{"data":{}},"excerpt":"<p>ssdb了解下</p>","more":"<p></p>\n<p>一个高性能的支持丰富数据结构的 NoSQL 数据库, 用于替代 Redis.与redis不同，基于硬盘存储，redis可以无缝迁移至ssdb</p>\n<h3 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h3><ul>\n<li><p>下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://github.com/ideawu/ssdb/archive/master.zip</span><br><span class=\"line\">unzip master</span><br><span class=\"line\">cd ssdb-master</span><br><span class=\"line\">make</span><br><span class=\"line\"># optional, install ssdb in /usr/local/ssdb</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>我们在make的时候会报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ERROR! autoconf required! install autoconf first</span><br><span class=\"line\"></span><br><span class=\"line\">Makefile:4: build_config.mk: No such file or directory</span><br><span class=\"line\">make: *** No rule to make target &apos;build_config.mk&apos;.  Stop.</span><br></pre></td></tr></table></figure>\n\n<p>那么我们先下载安装autoconf，然后再make就行了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install autoconf -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装</p>\n<p>如果想把ssdb安装在别的目录 那么在ssdb的根目录下执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make install PREFIX=/data/soft/ssdb</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动 &amp; 为后台运行 -d 也可以后台运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/ssdb</span><br><span class=\"line\">./ssdb-server ssdb.conf &amp;</span><br><span class=\"line\">ssdb-server 1.9.6</span><br><span class=\"line\">Copyright (c) 2012-2015 ssdb.io</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ssdb-server ssdb.conf -d</span><br></pre></td></tr></table></figure>\n\n<p>重启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ssdb-server ssdb.conf -s -d restart</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置随机启动</p>\n<p>先找到ssdb.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name ssdb.sh</span><br><span class=\"line\">/data/soft/ssdb-master/tools</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<p>  根据官方文档，将ssdb.sh放置在./etc/init.d下</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /data/soft/ssdb-master/tools /etc/init.d</span><br></pre></td></tr></table></figure>\n\n<p>  修改ssdb.sh将以下改为你的ssdb.conf的位置</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configs=&quot;/data/soft/ssdb/ssdb.conf&quot;</span><br></pre></td></tr></table></figure>\n\n<p>  官方文档的说明,关于集群的设置</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Change /data/ssdb_data/test/ssdb.conf to the location of your SSDB config file. If you have more than one SSDB instances, put all config files in one line, separated by spaces:</span><br><span class=\"line\"># each config file for one instance</span><br><span class=\"line\">configs=/data/ssdb_data/test/ssdb.conf /data/ssdb_data/demo/ssdb.conf</span><br></pre></td></tr></table></figure>\n\n<p>  添加权限</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod a+x /etc/init.d/ssdb</span><br><span class=\"line\">sudo update-rc.d ssdb defaults</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>配置修改</p>\n<ul>\n<li><p>监听网络端口,在ssdb.conf中，注意<strong>配置文件中的缩进使用tab</strong>，我这里已经修改为0.0.0.0,端口修改为7379，0.0.0.0意思为所有的ip都可以进行访问</p>\n<p>可以利用allow|denys 来控制ip的访问，如下面的注释里所讲</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">          ip: 0.0.0.0</span><br><span class=\"line\">          port: 7379</span><br><span class=\"line\">          # bind to public ip</span><br><span class=\"line\">          #ip: 0.0.0.0</span><br><span class=\"line\">          # format: allow|deny: all|ip_prefix</span><br><span class=\"line\">          # multiple allows or denys is supported</span><br><span class=\"line\">          #deny: all</span><br><span class=\"line\">          #allow: 127.0.0.1</span><br><span class=\"line\">          #allow: 192.168</span><br><span class=\"line\">          # auth password must be at least 32 characters</span><br><span class=\"line\">          #auth: very-strong-password</span><br><span class=\"line\">          #readonly: yes</span><br><span class=\"line\">          # in ms, to log slowlog with WARN level</span><br><span class=\"line\">          #slowlog_timeout: 5</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Redis迁移到ssdb</p>\n<p>在 <code>tools</code> 目录中的 <code>redis-import.php</code> PHP 脚本可以用来将 Redis 服务器上的数据, 拷贝到 SSDB 服务器上.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php redis-import.php redis_host redis_port redis_db ssdb_host ssdb_port</span><br></pre></td></tr></table></figure>\n\n<p><strong>请确保你的 PHP Redis 模块 <a href=\"https://github.com/nicolasff/phpredis\" target=\"_blank\" rel=\"noopener\">https://github.com/nicolasff/phpredis</a> 已经安装.</strong></p>\n<p>TODO:先写到这里，明天写下代码客户端，这个东西可玩度很高，类似的产品还有360的pika…</p>\n</li>\n</ul>\n<p>[]: <a href=\"http://ssdb.io/docs/zh_cn/index.html\" target=\"_blank\" rel=\"noopener\">http://ssdb.io/docs/zh_cn/index.html</a>    “ssdb-Wiki”</p>"},{"title":"Redis分布式锁构建","date":"2017-12-04T14:50:36.000Z","_content":"","source":"_posts/Redis分布式锁构建.md","raw":"---\ntitle: Redis分布式锁构建\ndate: 2017-12-04 22:50:36\ntags:\n---\n","slug":"Redis分布式锁构建","published":1,"updated":"2022-09-03T07:30:55.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz84r001utwfaxxdxgjmb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"SpringBoot开启https","date":"2018-09-16T03:57:30.000Z","_content":"\nSpringBoot2.x开启Https,了解下<!--more-->\n\n#### SSL证书生成\n\n * 使用java的自带的keytool生成ssl证书\n\n   ```\n   \n   keytool -genkeypair -alias skyeyes  -keyalg RSA -keysize 4096 -keypass nopassword -sigalg SHA384withRSA -dname \"cn=Wong,ou=skyeye,o=skyeye,l=Beijing,st=Beijing,c=CN\" -validity 3650  -keystore skyeye.jks -storetype JKS -storepass nopassword\n   ```\n\n   * -storetype 指定密钥仓库类型  \n\n   *  -keyalg 生证书的算法名称 \n\n   * -keysize 证书大小 \n\n   * -keystore 生成的证书文件的存储路径 \n\n   * -validity 证书的有效期\n\n   * -keypass nopassword 私钥的密码 最好与 storepass 一致。\n\n   * -sigalg SHA384withRSA此处”SHA384withRSA“为签名算法  用sha3\n\n   * -dname “cn=www.mydomain.com,ou=xxx,o=xxx,l=Beijing,st=Beijing,c=CN” 在此填写证书信息。”CN = 名字与姓氏 / 域名, OU = 组织单位名称, O = 组织名称, L = 城市或区域名称, ST = 州或省份名称, C = 单位的两字母国家代码” \n\n   * -storetype JKS 此处”JKS “为证书库类型。可用的证书库类型为：JKS、PKCS12 等。jdk9 以前，默认为 JKS。自 jdk9 开始，默认为 PKCS12\n\n   * -storepass nopassword此处”nopassword“为证书库密码 (私钥的密码)。最好与 keypass 一致 \n\n   * PS:   **上述命令，需要将 -dname 参数替换（尤其时域名要写对）、密码更改即可，其它可保持不变。** \n\n     使用everything搜索生成的www.spacexplore.com_keystore.jks 找到这个文件，\n\n* 项目中配置证书\n\n   * 将上述文件拷贝到项目的resources 底下,windows放在项目根目录下。\n\n   * 配置文件中加入ssl证书配置\n\n     ```\n     server.ssl.key-store= classpath:skyeye.jks\n     server.ssl.key-store-password=nopassword\n     server.ssl.keyStoreType=JKS\n     server.ssl.keyAlias:skyeyes\n     ```\n\n* 配置代码\n\n   **注意这里的HTTPS端口就是server.port的端口，两个要一致** \n\n   ```\n   @Configuration\n   public class TomcatConfig {\n   \tprivate Connector createHTTPConnector() {\n   \t\tConnector connector = new Connector(\"org.apache.coyote.http11.Http11NioProtocol\");\n   \t\t// 同时启用 http（8080）、https（8082）两个端口\n   \t\tconnector.setScheme(\"http\");\n   \t\tconnector.setSecure(false);\n   \t\t//设置http端口8080 \n   \t\tconnector.setPort(8080);\n   \t\t//设置https端口为8082\n   \t\tconnector.setRedirectPort(8082);\n   \t\treturn connector;\n   \t}\n   \n   \t/**\n   \t * 這是2.x的配置方法 1.x與2，x不一樣\n   \t * @Bean\n   \t * @return\n   \t */\n   \tpublic ServletWebServerFactory servletContainer() {\n   \t\tTomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory();\n   \t\ttomcat.addAdditionalTomcatConnectors(createHTTPConnector());\n   \t\treturn tomcat;\n   \t}\n   }\n   ```\n\n   \n\n* 启动报错了。。。\n\n   ```\n   Caused by: java.io.IOException: DerInputStream.getLength(): lengthTag=109, too big.\n   \tat sun.security.util.DerInputStream.getLength(DerInputStream.java:599) ~[?:1.8.0_171]\n   \tat sun.security.util.DerValue.init(DerValue.java:391) ~[?:1.8.0_171]\n   \tat sun.security.util.DerValue.<init>(DerValue.java:332) ~[?:1.8.0_171]\n   \tat sun.security.util.DerValue.<init>(DerValue.java:345) ~[?:1.8.0_171]\n   \tat sun.security.pkcs12.PKCS12KeyStore.engineLoad(PKCS12KeyStore.java:1938) ~[?:1.8.0_171]\n   \tat java.security.KeyStore.load(KeyStore.java:1445) ~[?:1.8.0_171]\n   \tat org.apache.tomcat.util.net.SSLUtilBase.getStore(SSLUtilBase.java:139) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   \tat org.apache.tomcat.util.net.SSLHostConfigCertificate.getCertificateKeystore(SSLHostConfigCertificate.java:204) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   \tat org.apache.tomcat.util.net.jsse.JSSEUtil.getKeyManagers(JSSEUtil.java:184) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   \tat org.apache.tomcat.util.net.AbstractJsseEndpoint.createSSLContext(AbstractJsseEndpoint.java:114) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   \tat org.apache.tomcat.util.net.AbstractJsseEndpoint.initialiseSsl(AbstractJsseEndpoint.java:87) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   \tat org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:225) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   \tat org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:1150) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   \tat org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:591) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   \tat org.apache.catalina.connector.Connector.startInternal(Connector.java:1018) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   \tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   ```\n\n   看起来像是读取文件导致的问题。\n\n   **解决办法:**\n\n   ```\n    <plugin>\n                   <groupId>org.apache.maven.plugins</groupId>\n                   <artifactId>maven-resources-plugin</artifactId>\n                   <configuration>\n                       <encoding>UTF-8</encoding>\n                       <!-- 过滤后缀为 pem、pfx 的证书文件 -->\n                       <nonFilteredFileExtensions>\n                           <nonFilteredFileExtension>pem</nonFilteredFileExtension>\n                           <nonFilteredFileExtension>pfx</nonFilteredFileExtension>\n                           <nonFilteredFileExtension>p12</nonFilteredFileExtension>\n                       </nonFilteredFileExtensions>\n                   </configuration>\n               </plugin>\n   ```\n\n   同时生成的密钥文件类型要与配置中的相同,(**如果需要进行密钥格式转换，那么就转换 这里就不写了**)，如密钥文件为.jks,那么配置这么写：(**如果server.ssl.key-store= skyeye.jks这么写就得将密钥文件放置在项目的根目录下，而这么写server.ssl.key-store=classpath: skyeye.jks,放到resources就可以了**)\n\n   ```\n   server.ssl.key-store=classpath:skyeye.jks\n   server.ssl.keyStoreType=JKS\n   ```\n\n* 进行测试访问\n\n   ![SpringBoot开启https](SpringBoot开启https/HTTPS1.png)\n\n* http与https共存时候，强制转换为https，做法就是开启过滤器强制转换为https\n\n   ```\n   /**\n    * 将http访问请求转为https的过滤器 http与https共存时\n    * \n    * @author andreby\n    *\n    */\n   @Configuration\n   @WebFilter(urlPatterns = \"/*\", filterName = \"http2HttpsFilter\")\n   public class Http2HttpsFilter extends OncePerRequestFilter {\n   \n   \t@Override\n   \tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n   \t\t\tthrows ServletException, IOException {\n   \t\tString requestURL = request.getRequestURL().toString();\n   \t\tString protocol = requestURL.split(\"://\")[0];\n   \t\tif (\"http\".equals(protocol)) {\n   \t\t\t// 将http请求uri替换为https,将http端口请求替换为https端口 8081端口被nexus占用 换8082\n   \t\t\trequestURL = requestURL.replace(\"http\", \"https\").replace(\"8080\", \"8082\");\n   \t\t\tresponse.sendRedirect(requestURL);\n   \t\t}\n   \t\tfilterChain.doFilter(request, response);\n   \t}\n   \n   }\n   \n   ```\n\n   \n\n* 不需要共存且需要将http转为https,去掉Http2HttpsFilter，并修改TomcatConfig类为如下。\n\n   ```\n   @Configuration\n   public class TomcatConfig {\n       @Bean\n   \tpublic Connector httpConnector() {\n   \t\tConnector connector = new Connector(\"org.apache.coyote.http11.Http11NioProtocol\");\n   \t\tconnector.setScheme(\"http\");\n   \t\tconnector.setSecure(false);\n   \t\t// 设置http8080端口 和 重定向到https的端口8082 8081端口被nexus占用 换8082\n   \t\t// 这个8080端口为http端口 如果这里设置了http端口那么server.port是不是就不用设置了？\n   \t\tconnector.setPort(8080);\n   \t\t// 这个8082端口为https端口 8081端口被nexus占用 换8082\n   \t\tconnector.setRedirectPort(8082);\n   \t\treturn connector;\n   \t}\n   \n   \t/**\n   \t * 這是2.x的配置方法 1.x與2，x不一樣\n   \t * \n   \t * @Bean\n   \t * @return\n   \t */\n   \t@Bean\n   \tpublic ServletWebServerFactory servletContainer() {\n   \t\t// http与https共存时候，需要强转http为https时候用注释代码\n   \t\t/*\n   \t\t * TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory();\n   \t\t * tomcat.addAdditionalTomcatConnectors(createHTTPConnector()); return tomcat;\n   \t\t */\n   \t\tTomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory() {\n   \t\t\t@Override\n   \t\t\tprotected void postProcessContext(Context context) {\n   \t\t\t\tSecurityConstraint constraint = new SecurityConstraint();\n   \t\t\t\tconstraint.setUserConstraint(\"CONFIDENTIAL\");\n   \t\t\t\tSecurityCollection collection = new SecurityCollection();\n   \t\t\t\tcollection.addPattern(\"/*\");\n   \t\t\t\tconstraint.addCollection(collection);\n   \t\t\t\tcontext.addConstraint(constraint);\n   \t\t\t}\n   \t\t};\n   \t\ttomcat.addAdditionalTomcatConnectors(httpConnector());\n   \t\treturn tomcat;\n   \n   \t}\n   }\n   ```\n\n   \n\n* 一些其他的配置\n\n   * 如果你有一个代理服务器，你需要设置`spring.devtools.remote.proxy.host`和`spring.devtools.remote.proxy.port`这两个属性。 （属于devtools这个东西）\n\n   * springboot2.0.5官档关于运维管理端ssl的说明\n\n     When configured to use a custom port, the management server can also be configured with its own SSL by using the various management.server.ssl.* properties. For example, doing so lets a management server be available over HTTP while the main application uses HTTPS, as shown in the following property settings:\n\n     ```\n     server.port=8443\n     server.ssl.enabled=true\n     server.ssl.key-store=classpath:store.jks\n     server.ssl.key-password=secret\n     management.server.port=8083\n     management.server.ssl.enabled=false\n     ```\n\n     Alternatively, both the main server and the management server can use SSL but with different key stores, as follows: \n\n     ```\n     server.port=8443\n     server.ssl.enabled=true\n     server.ssl.key-store=classpath:main.jks\n     server.ssl.key-password=secret\n     management.server.port=8083\n     management.server.ssl.enabled=true\n     management.server.ssl.key-store=classpath:management.jks\n     management.server.ssl.key-password=secret\n     ```\n\n     也就是可以配置多个证书。 这个 management.server.port 就是管理端的端口，其实是运维管理端口。配合actuator 这个类库来用。这样的话我们就可以将前台应用端口和后端运维管理隔离开，比如trace\n\n     直接可以 http://127.0.0.1:8083/trace   来获得trace信息。而管理端的https也是可以配置的。\n\n   * **SpringBoot2.0.5关于ssl的说明**\n\n     SSL can be configured declaratively by setting the various `server.ssl.*` properties, typically in `application.properties` or `application.yml`. The following example shows setting SSL properties in `application.properties`: \n\n     ```\n     server.port=8443\n     server.ssl.key-store=classpath:keystore.jks\n     server.ssl.key-store-password=secret\n     server.ssl.key-password=another-secret\n     ```\n\n     下面这个类是ssl的配置类注意看注释\n\n     ```\n     /*\n      * Copyright 2012-2017 the original author or authors.\n      *\n      * Licensed under the Apache License, Version 2.0 (the \"License\");\n      * you may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at\n      *\n      *      http://www.apache.org/licenses/LICENSE-2.0\n      *\n      * Unless required by applicable law or agreed to in writing, software\n      * distributed under the License is distributed on an \"AS IS\" BASIS,\n      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      * See the License for the specific language governing permissions and\n      * limitations under the License.\n      */\n     \n     package org.springframework.boot.web.server;\n     \n     /**\n      * Simple server-independent abstraction for SSL configuration.\n      *\n      * @author Andy Wilkinson\n      * @author Vladimir Tsanev\n      * @since 2.0.0\n      */\n     public class Ssl {\n     \n     \t/**\n     \t * Whether to enable SSL support.\n     \t */\n     \tprivate boolean enabled = true;\n     \n     \t/**\n     \t * Whether client authentication is wanted (\"want\") or needed (\"need\"). Requires a\n     \t * trust store.\n     \t */\n     \tprivate ClientAuth clientAuth;\n     \n     \t/**\n     \t * Supported SSL ciphers.\n     \t */\n     \tprivate String[] ciphers;\n     \n     \t/**\n     \t * Enabled SSL protocols.\n     \t */\n     \tprivate String[] enabledProtocols;\n     \n     \t/**\n     \t * Alias that identifies the key in the key store.\n     \t */\n     \tprivate String keyAlias;\n     \n     \t/**\n     \t * Password used to access the key in the key store.\n     \t */\n     \tprivate String keyPassword;\n     \n     \t/**\n     \t * Path to the key store that holds the SSL certificate (typically a jks file).\n     \t */\n     \tprivate String keyStore;\n     \n     \t/**\n     \t * Password used to access the key store.\n     \t */\n     \tprivate String keyStorePassword;\n     \n     \t/**\n     \t * Type of the key store.\n     \t */\n     \tprivate String keyStoreType;\n     \n     \t/**\n     \t * Provider for the key store.\n     \t */\n     \tprivate String keyStoreProvider;\n     \n     \t/**\n     \t * Trust store that holds SSL certificates.\n     \t */\n     \tprivate String trustStore;\n     \n     \t/**\n     \t * Password used to access the trust store.\n     \t */\n     \tprivate String trustStorePassword;\n     \n     \t/**\n     \t * Type of the trust store.\n     \t */\n     \tprivate String trustStoreType;\n     \n     \t/**\n     \t * Provider for the trust store.\n     \t */\n     \tprivate String trustStoreProvider;\n     \n     \t/**\n     \t * SSL protocol to use.\n     \t */\n     \tprivate String protocol = \"TLS\";\n     \n     \tpublic boolean isEnabled() {\n     \t\treturn this.enabled;\n     \t}\n     \n     \tpublic void setEnabled(boolean enabled) {\n     \t\tthis.enabled = enabled;\n     \t}\n     \n     \tpublic ClientAuth getClientAuth() {\n     \t\treturn this.clientAuth;\n     \t}\n     \n     \tpublic void setClientAuth(ClientAuth clientAuth) {\n     \t\tthis.clientAuth = clientAuth;\n     \t}\n     \n     \tpublic String[] getCiphers() {\n     \t\treturn this.ciphers;\n     \t}\n     \n     \tpublic void setCiphers(String[] ciphers) {\n     \t\tthis.ciphers = ciphers;\n     \t}\n     \n     \tpublic String getKeyAlias() {\n     \t\treturn this.keyAlias;\n     \t}\n     \n     \tpublic void setKeyAlias(String keyAlias) {\n     \t\tthis.keyAlias = keyAlias;\n     \t}\n     \n     \tpublic String getKeyPassword() {\n     \t\treturn this.keyPassword;\n     \t}\n     \n     \tpublic void setKeyPassword(String keyPassword) {\n     \t\tthis.keyPassword = keyPassword;\n     \t}\n     \n     \tpublic String getKeyStore() {\n     \t\treturn this.keyStore;\n     \t}\n     \n     \tpublic void setKeyStore(String keyStore) {\n     \t\tthis.keyStore = keyStore;\n     \t}\n     \n     \tpublic String getKeyStorePassword() {\n     \t\treturn this.keyStorePassword;\n     \t}\n     \n     \tpublic void setKeyStorePassword(String keyStorePassword) {\n     \t\tthis.keyStorePassword = keyStorePassword;\n     \t}\n     \n     \tpublic String getKeyStoreType() {\n     \t\treturn this.keyStoreType;\n     \t}\n     \n     \tpublic void setKeyStoreType(String keyStoreType) {\n     \t\tthis.keyStoreType = keyStoreType;\n     \t}\n     \n     \tpublic String getKeyStoreProvider() {\n     \t\treturn this.keyStoreProvider;\n     \t}\n     \n     \tpublic void setKeyStoreProvider(String keyStoreProvider) {\n     \t\tthis.keyStoreProvider = keyStoreProvider;\n     \t}\n     \n     \tpublic String[] getEnabledProtocols() {\n     \t\treturn this.enabledProtocols;\n     \t}\n     \n     \tpublic void setEnabledProtocols(String[] enabledProtocols) {\n     \t\tthis.enabledProtocols = enabledProtocols;\n     \t}\n     \n     \tpublic String getTrustStore() {\n     \t\treturn this.trustStore;\n     \t}\n     \n     \tpublic void setTrustStore(String trustStore) {\n     \t\tthis.trustStore = trustStore;\n     \t}\n     \n     \tpublic String getTrustStorePassword() {\n     \t\treturn this.trustStorePassword;\n     \t}\n     \n     \tpublic void setTrustStorePassword(String trustStorePassword) {\n     \t\tthis.trustStorePassword = trustStorePassword;\n     \t}\n     \n     \tpublic String getTrustStoreType() {\n     \t\treturn this.trustStoreType;\n     \t}\n     \n     \tpublic void setTrustStoreType(String trustStoreType) {\n     \t\tthis.trustStoreType = trustStoreType;\n     \t}\n     \n     \tpublic String getTrustStoreProvider() {\n     \t\treturn this.trustStoreProvider;\n     \t}\n     \n     \tpublic void setTrustStoreProvider(String trustStoreProvider) {\n     \t\tthis.trustStoreProvider = trustStoreProvider;\n     \t}\n     \n     \tpublic String getProtocol() {\n     \t\treturn this.protocol;\n     \t}\n     \n     \tpublic void setProtocol(String protocol) {\n     \t\tthis.protocol = protocol;\n     \t}\n     \n     \t/**\n     \t * Client authentication types.\n     \t */\n     \tpublic enum ClientAuth {\n     \n     \t\t/**\n     \t\t * Client authentication is wanted but not mandatory.\n     \t\t */\n     \t\tWANT,\n     \n     \t\t/**\n     \t\t * Client authentication is needed and mandatory.\n     \t\t */\n     \t\tNEED\n     \n     \t}\n     \n     }\n     ```\n\n     **Using configuration such as the preceding example means the application no longer supports a plain HTTP connector at port 8080. Spring Boot does not support the configuration of both an HTTP connector and an HTTPS connector through `application.properties`. If you want to have both, you need to configure one of them programmatically. We recommend using `application.properties` to configure HTTPS, as the HTTP connector is the easier of the two to configure programmatically. See the [`spring-boot-sample-tomcat-multi-connectors`](https://github.com/spring-projects/spring-boot/tree/v2.0.5.RELEASE/spring-boot-samples/spring-boot-sample-tomcat-multi-connectors) sample project for an example. **\n\n     这段话的意思是，如果用了上面的配置，那么就不支持内置tomcat的默认8080端口了，如果你两个都想保留，那么可以用代码的方式实现，同时我们保留了使用application.properties去配置https，下面请看tomcat配置多连接器的代码示例，嗯 ，代码示例我看了 ，就是最上面，我用的那种代码配置多连接器。\n\n   * **application.properties中的ssl配置详解**\n\n     ```\n     server.ssl.ciphers   #是否支持SSL ciphers.\n     server.ssl.client-auth   #设定client authentication是wanted 还是 needed.\n     server.ssl.enabled   #是否开启ssl，默认: true\n     server.ssl.key-alias   #设定key store中key的别名.\n     server.ssl.key-password   #访问key store中key的密码.\n     server.ssl.key-store   #设定持有SSL certificate的key store的路径，通常是一个.jks文件.\n     server.ssl.key-store-password   #设定访问key store的密码.\n     server.ssl.key-store-provider   #设定key store的提供者.\n     server.ssl.key-store-type   #设定key store的类型.\n     server.ssl.protocol   #使用的SSL协议，默认: TLS\n     server.ssl.trust-store   #持有SSL certificates的Trust store.\n     server.ssl.trust-store-password   #访问trust store的密码.\n     server.ssl.trust-store-provider   #设定trust store的提供者.\n     server.ssl.trust-store-type   #指定trust store的类型.\n     ```\n\n   * 开启http2\n\n     在application.properties中添加\n\n     ```\n     ##开启HTTP2\n     server.http2.enabled=true  \n     ```\n\n* **正常开发中，会在nginx端做ssl证书配置，这是后话了**","source":"_posts/SpringBoot开启https.md","raw":"---\ntitle: SpringBoot开启https\ndate: 2018-09-16 11:57:30\ntags: [Java]\ncategories: [SpringBoot]\n---\n\nSpringBoot2.x开启Https,了解下<!--more-->\n\n#### SSL证书生成\n\n * 使用java的自带的keytool生成ssl证书\n\n   ```\n   \n   keytool -genkeypair -alias skyeyes  -keyalg RSA -keysize 4096 -keypass nopassword -sigalg SHA384withRSA -dname \"cn=Wong,ou=skyeye,o=skyeye,l=Beijing,st=Beijing,c=CN\" -validity 3650  -keystore skyeye.jks -storetype JKS -storepass nopassword\n   ```\n\n   * -storetype 指定密钥仓库类型  \n\n   *  -keyalg 生证书的算法名称 \n\n   * -keysize 证书大小 \n\n   * -keystore 生成的证书文件的存储路径 \n\n   * -validity 证书的有效期\n\n   * -keypass nopassword 私钥的密码 最好与 storepass 一致。\n\n   * -sigalg SHA384withRSA此处”SHA384withRSA“为签名算法  用sha3\n\n   * -dname “cn=www.mydomain.com,ou=xxx,o=xxx,l=Beijing,st=Beijing,c=CN” 在此填写证书信息。”CN = 名字与姓氏 / 域名, OU = 组织单位名称, O = 组织名称, L = 城市或区域名称, ST = 州或省份名称, C = 单位的两字母国家代码” \n\n   * -storetype JKS 此处”JKS “为证书库类型。可用的证书库类型为：JKS、PKCS12 等。jdk9 以前，默认为 JKS。自 jdk9 开始，默认为 PKCS12\n\n   * -storepass nopassword此处”nopassword“为证书库密码 (私钥的密码)。最好与 keypass 一致 \n\n   * PS:   **上述命令，需要将 -dname 参数替换（尤其时域名要写对）、密码更改即可，其它可保持不变。** \n\n     使用everything搜索生成的www.spacexplore.com_keystore.jks 找到这个文件，\n\n* 项目中配置证书\n\n   * 将上述文件拷贝到项目的resources 底下,windows放在项目根目录下。\n\n   * 配置文件中加入ssl证书配置\n\n     ```\n     server.ssl.key-store= classpath:skyeye.jks\n     server.ssl.key-store-password=nopassword\n     server.ssl.keyStoreType=JKS\n     server.ssl.keyAlias:skyeyes\n     ```\n\n* 配置代码\n\n   **注意这里的HTTPS端口就是server.port的端口，两个要一致** \n\n   ```\n   @Configuration\n   public class TomcatConfig {\n   \tprivate Connector createHTTPConnector() {\n   \t\tConnector connector = new Connector(\"org.apache.coyote.http11.Http11NioProtocol\");\n   \t\t// 同时启用 http（8080）、https（8082）两个端口\n   \t\tconnector.setScheme(\"http\");\n   \t\tconnector.setSecure(false);\n   \t\t//设置http端口8080 \n   \t\tconnector.setPort(8080);\n   \t\t//设置https端口为8082\n   \t\tconnector.setRedirectPort(8082);\n   \t\treturn connector;\n   \t}\n   \n   \t/**\n   \t * 這是2.x的配置方法 1.x與2，x不一樣\n   \t * @Bean\n   \t * @return\n   \t */\n   \tpublic ServletWebServerFactory servletContainer() {\n   \t\tTomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory();\n   \t\ttomcat.addAdditionalTomcatConnectors(createHTTPConnector());\n   \t\treturn tomcat;\n   \t}\n   }\n   ```\n\n   \n\n* 启动报错了。。。\n\n   ```\n   Caused by: java.io.IOException: DerInputStream.getLength(): lengthTag=109, too big.\n   \tat sun.security.util.DerInputStream.getLength(DerInputStream.java:599) ~[?:1.8.0_171]\n   \tat sun.security.util.DerValue.init(DerValue.java:391) ~[?:1.8.0_171]\n   \tat sun.security.util.DerValue.<init>(DerValue.java:332) ~[?:1.8.0_171]\n   \tat sun.security.util.DerValue.<init>(DerValue.java:345) ~[?:1.8.0_171]\n   \tat sun.security.pkcs12.PKCS12KeyStore.engineLoad(PKCS12KeyStore.java:1938) ~[?:1.8.0_171]\n   \tat java.security.KeyStore.load(KeyStore.java:1445) ~[?:1.8.0_171]\n   \tat org.apache.tomcat.util.net.SSLUtilBase.getStore(SSLUtilBase.java:139) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   \tat org.apache.tomcat.util.net.SSLHostConfigCertificate.getCertificateKeystore(SSLHostConfigCertificate.java:204) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   \tat org.apache.tomcat.util.net.jsse.JSSEUtil.getKeyManagers(JSSEUtil.java:184) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   \tat org.apache.tomcat.util.net.AbstractJsseEndpoint.createSSLContext(AbstractJsseEndpoint.java:114) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   \tat org.apache.tomcat.util.net.AbstractJsseEndpoint.initialiseSsl(AbstractJsseEndpoint.java:87) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   \tat org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:225) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   \tat org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:1150) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   \tat org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:591) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   \tat org.apache.catalina.connector.Connector.startInternal(Connector.java:1018) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   \tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) ~[tomcat-embed-core-8.5.31.jar:8.5.31]\n   ```\n\n   看起来像是读取文件导致的问题。\n\n   **解决办法:**\n\n   ```\n    <plugin>\n                   <groupId>org.apache.maven.plugins</groupId>\n                   <artifactId>maven-resources-plugin</artifactId>\n                   <configuration>\n                       <encoding>UTF-8</encoding>\n                       <!-- 过滤后缀为 pem、pfx 的证书文件 -->\n                       <nonFilteredFileExtensions>\n                           <nonFilteredFileExtension>pem</nonFilteredFileExtension>\n                           <nonFilteredFileExtension>pfx</nonFilteredFileExtension>\n                           <nonFilteredFileExtension>p12</nonFilteredFileExtension>\n                       </nonFilteredFileExtensions>\n                   </configuration>\n               </plugin>\n   ```\n\n   同时生成的密钥文件类型要与配置中的相同,(**如果需要进行密钥格式转换，那么就转换 这里就不写了**)，如密钥文件为.jks,那么配置这么写：(**如果server.ssl.key-store= skyeye.jks这么写就得将密钥文件放置在项目的根目录下，而这么写server.ssl.key-store=classpath: skyeye.jks,放到resources就可以了**)\n\n   ```\n   server.ssl.key-store=classpath:skyeye.jks\n   server.ssl.keyStoreType=JKS\n   ```\n\n* 进行测试访问\n\n   ![SpringBoot开启https](SpringBoot开启https/HTTPS1.png)\n\n* http与https共存时候，强制转换为https，做法就是开启过滤器强制转换为https\n\n   ```\n   /**\n    * 将http访问请求转为https的过滤器 http与https共存时\n    * \n    * @author andreby\n    *\n    */\n   @Configuration\n   @WebFilter(urlPatterns = \"/*\", filterName = \"http2HttpsFilter\")\n   public class Http2HttpsFilter extends OncePerRequestFilter {\n   \n   \t@Override\n   \tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n   \t\t\tthrows ServletException, IOException {\n   \t\tString requestURL = request.getRequestURL().toString();\n   \t\tString protocol = requestURL.split(\"://\")[0];\n   \t\tif (\"http\".equals(protocol)) {\n   \t\t\t// 将http请求uri替换为https,将http端口请求替换为https端口 8081端口被nexus占用 换8082\n   \t\t\trequestURL = requestURL.replace(\"http\", \"https\").replace(\"8080\", \"8082\");\n   \t\t\tresponse.sendRedirect(requestURL);\n   \t\t}\n   \t\tfilterChain.doFilter(request, response);\n   \t}\n   \n   }\n   \n   ```\n\n   \n\n* 不需要共存且需要将http转为https,去掉Http2HttpsFilter，并修改TomcatConfig类为如下。\n\n   ```\n   @Configuration\n   public class TomcatConfig {\n       @Bean\n   \tpublic Connector httpConnector() {\n   \t\tConnector connector = new Connector(\"org.apache.coyote.http11.Http11NioProtocol\");\n   \t\tconnector.setScheme(\"http\");\n   \t\tconnector.setSecure(false);\n   \t\t// 设置http8080端口 和 重定向到https的端口8082 8081端口被nexus占用 换8082\n   \t\t// 这个8080端口为http端口 如果这里设置了http端口那么server.port是不是就不用设置了？\n   \t\tconnector.setPort(8080);\n   \t\t// 这个8082端口为https端口 8081端口被nexus占用 换8082\n   \t\tconnector.setRedirectPort(8082);\n   \t\treturn connector;\n   \t}\n   \n   \t/**\n   \t * 這是2.x的配置方法 1.x與2，x不一樣\n   \t * \n   \t * @Bean\n   \t * @return\n   \t */\n   \t@Bean\n   \tpublic ServletWebServerFactory servletContainer() {\n   \t\t// http与https共存时候，需要强转http为https时候用注释代码\n   \t\t/*\n   \t\t * TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory();\n   \t\t * tomcat.addAdditionalTomcatConnectors(createHTTPConnector()); return tomcat;\n   \t\t */\n   \t\tTomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory() {\n   \t\t\t@Override\n   \t\t\tprotected void postProcessContext(Context context) {\n   \t\t\t\tSecurityConstraint constraint = new SecurityConstraint();\n   \t\t\t\tconstraint.setUserConstraint(\"CONFIDENTIAL\");\n   \t\t\t\tSecurityCollection collection = new SecurityCollection();\n   \t\t\t\tcollection.addPattern(\"/*\");\n   \t\t\t\tconstraint.addCollection(collection);\n   \t\t\t\tcontext.addConstraint(constraint);\n   \t\t\t}\n   \t\t};\n   \t\ttomcat.addAdditionalTomcatConnectors(httpConnector());\n   \t\treturn tomcat;\n   \n   \t}\n   }\n   ```\n\n   \n\n* 一些其他的配置\n\n   * 如果你有一个代理服务器，你需要设置`spring.devtools.remote.proxy.host`和`spring.devtools.remote.proxy.port`这两个属性。 （属于devtools这个东西）\n\n   * springboot2.0.5官档关于运维管理端ssl的说明\n\n     When configured to use a custom port, the management server can also be configured with its own SSL by using the various management.server.ssl.* properties. For example, doing so lets a management server be available over HTTP while the main application uses HTTPS, as shown in the following property settings:\n\n     ```\n     server.port=8443\n     server.ssl.enabled=true\n     server.ssl.key-store=classpath:store.jks\n     server.ssl.key-password=secret\n     management.server.port=8083\n     management.server.ssl.enabled=false\n     ```\n\n     Alternatively, both the main server and the management server can use SSL but with different key stores, as follows: \n\n     ```\n     server.port=8443\n     server.ssl.enabled=true\n     server.ssl.key-store=classpath:main.jks\n     server.ssl.key-password=secret\n     management.server.port=8083\n     management.server.ssl.enabled=true\n     management.server.ssl.key-store=classpath:management.jks\n     management.server.ssl.key-password=secret\n     ```\n\n     也就是可以配置多个证书。 这个 management.server.port 就是管理端的端口，其实是运维管理端口。配合actuator 这个类库来用。这样的话我们就可以将前台应用端口和后端运维管理隔离开，比如trace\n\n     直接可以 http://127.0.0.1:8083/trace   来获得trace信息。而管理端的https也是可以配置的。\n\n   * **SpringBoot2.0.5关于ssl的说明**\n\n     SSL can be configured declaratively by setting the various `server.ssl.*` properties, typically in `application.properties` or `application.yml`. The following example shows setting SSL properties in `application.properties`: \n\n     ```\n     server.port=8443\n     server.ssl.key-store=classpath:keystore.jks\n     server.ssl.key-store-password=secret\n     server.ssl.key-password=another-secret\n     ```\n\n     下面这个类是ssl的配置类注意看注释\n\n     ```\n     /*\n      * Copyright 2012-2017 the original author or authors.\n      *\n      * Licensed under the Apache License, Version 2.0 (the \"License\");\n      * you may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at\n      *\n      *      http://www.apache.org/licenses/LICENSE-2.0\n      *\n      * Unless required by applicable law or agreed to in writing, software\n      * distributed under the License is distributed on an \"AS IS\" BASIS,\n      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      * See the License for the specific language governing permissions and\n      * limitations under the License.\n      */\n     \n     package org.springframework.boot.web.server;\n     \n     /**\n      * Simple server-independent abstraction for SSL configuration.\n      *\n      * @author Andy Wilkinson\n      * @author Vladimir Tsanev\n      * @since 2.0.0\n      */\n     public class Ssl {\n     \n     \t/**\n     \t * Whether to enable SSL support.\n     \t */\n     \tprivate boolean enabled = true;\n     \n     \t/**\n     \t * Whether client authentication is wanted (\"want\") or needed (\"need\"). Requires a\n     \t * trust store.\n     \t */\n     \tprivate ClientAuth clientAuth;\n     \n     \t/**\n     \t * Supported SSL ciphers.\n     \t */\n     \tprivate String[] ciphers;\n     \n     \t/**\n     \t * Enabled SSL protocols.\n     \t */\n     \tprivate String[] enabledProtocols;\n     \n     \t/**\n     \t * Alias that identifies the key in the key store.\n     \t */\n     \tprivate String keyAlias;\n     \n     \t/**\n     \t * Password used to access the key in the key store.\n     \t */\n     \tprivate String keyPassword;\n     \n     \t/**\n     \t * Path to the key store that holds the SSL certificate (typically a jks file).\n     \t */\n     \tprivate String keyStore;\n     \n     \t/**\n     \t * Password used to access the key store.\n     \t */\n     \tprivate String keyStorePassword;\n     \n     \t/**\n     \t * Type of the key store.\n     \t */\n     \tprivate String keyStoreType;\n     \n     \t/**\n     \t * Provider for the key store.\n     \t */\n     \tprivate String keyStoreProvider;\n     \n     \t/**\n     \t * Trust store that holds SSL certificates.\n     \t */\n     \tprivate String trustStore;\n     \n     \t/**\n     \t * Password used to access the trust store.\n     \t */\n     \tprivate String trustStorePassword;\n     \n     \t/**\n     \t * Type of the trust store.\n     \t */\n     \tprivate String trustStoreType;\n     \n     \t/**\n     \t * Provider for the trust store.\n     \t */\n     \tprivate String trustStoreProvider;\n     \n     \t/**\n     \t * SSL protocol to use.\n     \t */\n     \tprivate String protocol = \"TLS\";\n     \n     \tpublic boolean isEnabled() {\n     \t\treturn this.enabled;\n     \t}\n     \n     \tpublic void setEnabled(boolean enabled) {\n     \t\tthis.enabled = enabled;\n     \t}\n     \n     \tpublic ClientAuth getClientAuth() {\n     \t\treturn this.clientAuth;\n     \t}\n     \n     \tpublic void setClientAuth(ClientAuth clientAuth) {\n     \t\tthis.clientAuth = clientAuth;\n     \t}\n     \n     \tpublic String[] getCiphers() {\n     \t\treturn this.ciphers;\n     \t}\n     \n     \tpublic void setCiphers(String[] ciphers) {\n     \t\tthis.ciphers = ciphers;\n     \t}\n     \n     \tpublic String getKeyAlias() {\n     \t\treturn this.keyAlias;\n     \t}\n     \n     \tpublic void setKeyAlias(String keyAlias) {\n     \t\tthis.keyAlias = keyAlias;\n     \t}\n     \n     \tpublic String getKeyPassword() {\n     \t\treturn this.keyPassword;\n     \t}\n     \n     \tpublic void setKeyPassword(String keyPassword) {\n     \t\tthis.keyPassword = keyPassword;\n     \t}\n     \n     \tpublic String getKeyStore() {\n     \t\treturn this.keyStore;\n     \t}\n     \n     \tpublic void setKeyStore(String keyStore) {\n     \t\tthis.keyStore = keyStore;\n     \t}\n     \n     \tpublic String getKeyStorePassword() {\n     \t\treturn this.keyStorePassword;\n     \t}\n     \n     \tpublic void setKeyStorePassword(String keyStorePassword) {\n     \t\tthis.keyStorePassword = keyStorePassword;\n     \t}\n     \n     \tpublic String getKeyStoreType() {\n     \t\treturn this.keyStoreType;\n     \t}\n     \n     \tpublic void setKeyStoreType(String keyStoreType) {\n     \t\tthis.keyStoreType = keyStoreType;\n     \t}\n     \n     \tpublic String getKeyStoreProvider() {\n     \t\treturn this.keyStoreProvider;\n     \t}\n     \n     \tpublic void setKeyStoreProvider(String keyStoreProvider) {\n     \t\tthis.keyStoreProvider = keyStoreProvider;\n     \t}\n     \n     \tpublic String[] getEnabledProtocols() {\n     \t\treturn this.enabledProtocols;\n     \t}\n     \n     \tpublic void setEnabledProtocols(String[] enabledProtocols) {\n     \t\tthis.enabledProtocols = enabledProtocols;\n     \t}\n     \n     \tpublic String getTrustStore() {\n     \t\treturn this.trustStore;\n     \t}\n     \n     \tpublic void setTrustStore(String trustStore) {\n     \t\tthis.trustStore = trustStore;\n     \t}\n     \n     \tpublic String getTrustStorePassword() {\n     \t\treturn this.trustStorePassword;\n     \t}\n     \n     \tpublic void setTrustStorePassword(String trustStorePassword) {\n     \t\tthis.trustStorePassword = trustStorePassword;\n     \t}\n     \n     \tpublic String getTrustStoreType() {\n     \t\treturn this.trustStoreType;\n     \t}\n     \n     \tpublic void setTrustStoreType(String trustStoreType) {\n     \t\tthis.trustStoreType = trustStoreType;\n     \t}\n     \n     \tpublic String getTrustStoreProvider() {\n     \t\treturn this.trustStoreProvider;\n     \t}\n     \n     \tpublic void setTrustStoreProvider(String trustStoreProvider) {\n     \t\tthis.trustStoreProvider = trustStoreProvider;\n     \t}\n     \n     \tpublic String getProtocol() {\n     \t\treturn this.protocol;\n     \t}\n     \n     \tpublic void setProtocol(String protocol) {\n     \t\tthis.protocol = protocol;\n     \t}\n     \n     \t/**\n     \t * Client authentication types.\n     \t */\n     \tpublic enum ClientAuth {\n     \n     \t\t/**\n     \t\t * Client authentication is wanted but not mandatory.\n     \t\t */\n     \t\tWANT,\n     \n     \t\t/**\n     \t\t * Client authentication is needed and mandatory.\n     \t\t */\n     \t\tNEED\n     \n     \t}\n     \n     }\n     ```\n\n     **Using configuration such as the preceding example means the application no longer supports a plain HTTP connector at port 8080. Spring Boot does not support the configuration of both an HTTP connector and an HTTPS connector through `application.properties`. If you want to have both, you need to configure one of them programmatically. We recommend using `application.properties` to configure HTTPS, as the HTTP connector is the easier of the two to configure programmatically. See the [`spring-boot-sample-tomcat-multi-connectors`](https://github.com/spring-projects/spring-boot/tree/v2.0.5.RELEASE/spring-boot-samples/spring-boot-sample-tomcat-multi-connectors) sample project for an example. **\n\n     这段话的意思是，如果用了上面的配置，那么就不支持内置tomcat的默认8080端口了，如果你两个都想保留，那么可以用代码的方式实现，同时我们保留了使用application.properties去配置https，下面请看tomcat配置多连接器的代码示例，嗯 ，代码示例我看了 ，就是最上面，我用的那种代码配置多连接器。\n\n   * **application.properties中的ssl配置详解**\n\n     ```\n     server.ssl.ciphers   #是否支持SSL ciphers.\n     server.ssl.client-auth   #设定client authentication是wanted 还是 needed.\n     server.ssl.enabled   #是否开启ssl，默认: true\n     server.ssl.key-alias   #设定key store中key的别名.\n     server.ssl.key-password   #访问key store中key的密码.\n     server.ssl.key-store   #设定持有SSL certificate的key store的路径，通常是一个.jks文件.\n     server.ssl.key-store-password   #设定访问key store的密码.\n     server.ssl.key-store-provider   #设定key store的提供者.\n     server.ssl.key-store-type   #设定key store的类型.\n     server.ssl.protocol   #使用的SSL协议，默认: TLS\n     server.ssl.trust-store   #持有SSL certificates的Trust store.\n     server.ssl.trust-store-password   #访问trust store的密码.\n     server.ssl.trust-store-provider   #设定trust store的提供者.\n     server.ssl.trust-store-type   #指定trust store的类型.\n     ```\n\n   * 开启http2\n\n     在application.properties中添加\n\n     ```\n     ##开启HTTP2\n     server.http2.enabled=true  \n     ```\n\n* **正常开发中，会在nginx端做ssl证书配置，这是后话了**","slug":"SpringBoot开启https","published":1,"updated":"2022-09-03T07:30:55.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz84v001xtwfa9bgpte97","content":"<p>SpringBoot2.x开启Https,了解下<a id=\"more\"></a></p>\n<h4 id=\"SSL证书生成\"><a href=\"#SSL证书生成\" class=\"headerlink\" title=\"SSL证书生成\"></a>SSL证书生成</h4><ul>\n<li><p>使用java的自带的keytool生成ssl证书</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">keytool -genkeypair -alias skyeyes  -keyalg RSA -keysize 4096 -keypass nopassword -sigalg SHA384withRSA -dname &quot;cn=Wong,ou=skyeye,o=skyeye,l=Beijing,st=Beijing,c=CN&quot; -validity 3650  -keystore skyeye.jks -storetype JKS -storepass nopassword</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>-storetype 指定密钥仓库类型  </p>\n</li>\n<li><p>-keyalg 生证书的算法名称 </p>\n</li>\n<li><p>-keysize 证书大小 </p>\n</li>\n<li><p>-keystore 生成的证书文件的存储路径 </p>\n</li>\n<li><p>-validity 证书的有效期</p>\n</li>\n<li><p>-keypass nopassword 私钥的密码 最好与 storepass 一致。</p>\n</li>\n<li><p>-sigalg SHA384withRSA此处”SHA384withRSA“为签名算法  用sha3</p>\n</li>\n<li><p>-dname “cn=<a href=\"http://www.mydomain.com,ou=xxx,o=xxx,l=Beijing,st=Beijing,c=CN”\" target=\"_blank\" rel=\"noopener\">www.mydomain.com,ou=xxx,o=xxx,l=Beijing,st=Beijing,c=CN”</a> 在此填写证书信息。”CN = 名字与姓氏 / 域名, OU = 组织单位名称, O = 组织名称, L = 城市或区域名称, ST = 州或省份名称, C = 单位的两字母国家代码” </p>\n</li>\n<li><p>-storetype JKS 此处”JKS “为证书库类型。可用的证书库类型为：JKS、PKCS12 等。jdk9 以前，默认为 JKS。自 jdk9 开始，默认为 PKCS12</p>\n</li>\n<li><p>-storepass nopassword此处”nopassword“为证书库密码 (私钥的密码)。最好与 keypass 一致 </p>\n</li>\n<li><p>PS:   <strong>上述命令，需要将 -dname 参数替换（尤其时域名要写对）、密码更改即可，其它可保持不变。</strong> </p>\n<p>使用everything搜索生成的<a href=\"http://www.spacexplore.com_keystore.jks\" target=\"_blank\" rel=\"noopener\">www.spacexplore.com_keystore.jks</a> 找到这个文件，</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>项目中配置证书</p>\n<ul>\n<li><p>将上述文件拷贝到项目的resources 底下,windows放在项目根目录下。</p>\n</li>\n<li><p>配置文件中加入ssl证书配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.ssl.key-store= classpath:skyeye.jks</span><br><span class=\"line\">server.ssl.key-store-password=nopassword</span><br><span class=\"line\">server.ssl.keyStoreType=JKS</span><br><span class=\"line\">server.ssl.keyAlias:skyeyes</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>配置代码</p>\n<p> <strong>注意这里的HTTPS端口就是server.port的端口，两个要一致</strong> </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class TomcatConfig &#123;</span><br><span class=\"line\">\tprivate Connector createHTTPConnector() &#123;</span><br><span class=\"line\">\t\tConnector connector = new Connector(&quot;org.apache.coyote.http11.Http11NioProtocol&quot;);</span><br><span class=\"line\">\t\t// 同时启用 http（8080）、https（8082）两个端口</span><br><span class=\"line\">\t\tconnector.setScheme(&quot;http&quot;);</span><br><span class=\"line\">\t\tconnector.setSecure(false);</span><br><span class=\"line\">\t\t//设置http端口8080 </span><br><span class=\"line\">\t\tconnector.setPort(8080);</span><br><span class=\"line\">\t\t//设置https端口为8082</span><br><span class=\"line\">\t\tconnector.setRedirectPort(8082);</span><br><span class=\"line\">\t\treturn connector;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 這是2.x的配置方法 1.x與2，x不一樣</span><br><span class=\"line\">\t * @Bean</span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic ServletWebServerFactory servletContainer() &#123;</span><br><span class=\"line\">\t\tTomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory();</span><br><span class=\"line\">\t\ttomcat.addAdditionalTomcatConnectors(createHTTPConnector());</span><br><span class=\"line\">\t\treturn tomcat;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>启动报错了。。。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: java.io.IOException: DerInputStream.getLength(): lengthTag=109, too big.</span><br><span class=\"line\">\tat sun.security.util.DerInputStream.getLength(DerInputStream.java:599) ~[?:1.8.0_171]</span><br><span class=\"line\">\tat sun.security.util.DerValue.init(DerValue.java:391) ~[?:1.8.0_171]</span><br><span class=\"line\">\tat sun.security.util.DerValue.&lt;init&gt;(DerValue.java:332) ~[?:1.8.0_171]</span><br><span class=\"line\">\tat sun.security.util.DerValue.&lt;init&gt;(DerValue.java:345) ~[?:1.8.0_171]</span><br><span class=\"line\">\tat sun.security.pkcs12.PKCS12KeyStore.engineLoad(PKCS12KeyStore.java:1938) ~[?:1.8.0_171]</span><br><span class=\"line\">\tat java.security.KeyStore.load(KeyStore.java:1445) ~[?:1.8.0_171]</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.SSLUtilBase.getStore(SSLUtilBase.java:139) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.SSLHostConfigCertificate.getCertificateKeystore(SSLHostConfigCertificate.java:204) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.jsse.JSSEUtil.getKeyManagers(JSSEUtil.java:184) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.AbstractJsseEndpoint.createSSLContext(AbstractJsseEndpoint.java:114) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.AbstractJsseEndpoint.initialiseSsl(AbstractJsseEndpoint.java:87) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:225) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:1150) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br><span class=\"line\">\tat org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:591) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br><span class=\"line\">\tat org.apache.catalina.connector.Connector.startInternal(Connector.java:1018) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br><span class=\"line\">\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br></pre></td></tr></table></figure>\n\n<p> 看起来像是读取文件导致的问题。</p>\n<p> <strong>解决办法:</strong></p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">               &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">               &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">               &lt;configuration&gt;</span><br><span class=\"line\">                   &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class=\"line\">                   &lt;!-- 过滤后缀为 pem、pfx 的证书文件 --&gt;</span><br><span class=\"line\">                   &lt;nonFilteredFileExtensions&gt;</span><br><span class=\"line\">                       &lt;nonFilteredFileExtension&gt;pem&lt;/nonFilteredFileExtension&gt;</span><br><span class=\"line\">                       &lt;nonFilteredFileExtension&gt;pfx&lt;/nonFilteredFileExtension&gt;</span><br><span class=\"line\">                       &lt;nonFilteredFileExtension&gt;p12&lt;/nonFilteredFileExtension&gt;</span><br><span class=\"line\">                   &lt;/nonFilteredFileExtensions&gt;</span><br><span class=\"line\">               &lt;/configuration&gt;</span><br><span class=\"line\">           &lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n\n<p> 同时生成的密钥文件类型要与配置中的相同,(<strong>如果需要进行密钥格式转换，那么就转换 这里就不写了</strong>)，如密钥文件为.jks,那么配置这么写：(<strong>如果server.ssl.key-store= skyeye.jks这么写就得将密钥文件放置在项目的根目录下，而这么写server.ssl.key-store=classpath: skyeye.jks,放到resources就可以了</strong>)</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.ssl.key-store=classpath:skyeye.jks</span><br><span class=\"line\">server.ssl.keyStoreType=JKS</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进行测试访问</p>\n<p> <img src=\"SpringBoot%E5%BC%80%E5%90%AFhttps/HTTPS1.png\" alt=\"SpringBoot开启https\"></p>\n</li>\n<li><p>http与https共存时候，强制转换为https，做法就是开启过滤器强制转换为https</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 将http访问请求转为https的过滤器 http与https共存时</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @author andreby</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@WebFilter(urlPatterns = &quot;/*&quot;, filterName = &quot;http2HttpsFilter&quot;)</span><br><span class=\"line\">public class Http2HttpsFilter extends OncePerRequestFilter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span><br><span class=\"line\">\t\t\tthrows ServletException, IOException &#123;</span><br><span class=\"line\">\t\tString requestURL = request.getRequestURL().toString();</span><br><span class=\"line\">\t\tString protocol = requestURL.split(&quot;://&quot;)[0];</span><br><span class=\"line\">\t\tif (&quot;http&quot;.equals(protocol)) &#123;</span><br><span class=\"line\">\t\t\t// 将http请求uri替换为https,将http端口请求替换为https端口 8081端口被nexus占用 换8082</span><br><span class=\"line\">\t\t\trequestURL = requestURL.replace(&quot;http&quot;, &quot;https&quot;).replace(&quot;8080&quot;, &quot;8082&quot;);</span><br><span class=\"line\">\t\t\tresponse.sendRedirect(requestURL);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfilterChain.doFilter(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>不需要共存且需要将http转为https,去掉Http2HttpsFilter，并修改TomcatConfig类为如下。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class TomcatConfig &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">\tpublic Connector httpConnector() &#123;</span><br><span class=\"line\">\t\tConnector connector = new Connector(&quot;org.apache.coyote.http11.Http11NioProtocol&quot;);</span><br><span class=\"line\">\t\tconnector.setScheme(&quot;http&quot;);</span><br><span class=\"line\">\t\tconnector.setSecure(false);</span><br><span class=\"line\">\t\t// 设置http8080端口 和 重定向到https的端口8082 8081端口被nexus占用 换8082</span><br><span class=\"line\">\t\t// 这个8080端口为http端口 如果这里设置了http端口那么server.port是不是就不用设置了？</span><br><span class=\"line\">\t\tconnector.setPort(8080);</span><br><span class=\"line\">\t\t// 这个8082端口为https端口 8081端口被nexus占用 换8082</span><br><span class=\"line\">\t\tconnector.setRedirectPort(8082);</span><br><span class=\"line\">\t\treturn connector;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 這是2.x的配置方法 1.x與2，x不一樣</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @Bean</span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic ServletWebServerFactory servletContainer() &#123;</span><br><span class=\"line\">\t\t// http与https共存时候，需要强转http为https时候用注释代码</span><br><span class=\"line\">\t\t/*</span><br><span class=\"line\">\t\t * TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory();</span><br><span class=\"line\">\t\t * tomcat.addAdditionalTomcatConnectors(createHTTPConnector()); return tomcat;</span><br><span class=\"line\">\t\t */</span><br><span class=\"line\">\t\tTomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory() &#123;</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tprotected void postProcessContext(Context context) &#123;</span><br><span class=\"line\">\t\t\t\tSecurityConstraint constraint = new SecurityConstraint();</span><br><span class=\"line\">\t\t\t\tconstraint.setUserConstraint(&quot;CONFIDENTIAL&quot;);</span><br><span class=\"line\">\t\t\t\tSecurityCollection collection = new SecurityCollection();</span><br><span class=\"line\">\t\t\t\tcollection.addPattern(&quot;/*&quot;);</span><br><span class=\"line\">\t\t\t\tconstraint.addCollection(collection);</span><br><span class=\"line\">\t\t\t\tcontext.addConstraint(constraint);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\ttomcat.addAdditionalTomcatConnectors(httpConnector());</span><br><span class=\"line\">\t\treturn tomcat;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>一些其他的配置</p>\n<ul>\n<li><p>如果你有一个代理服务器，你需要设置<code>spring.devtools.remote.proxy.host</code>和<code>spring.devtools.remote.proxy.port</code>这两个属性。 （属于devtools这个东西）</p>\n</li>\n<li><p>springboot2.0.5官档关于运维管理端ssl的说明</p>\n<p>When configured to use a custom port, the management server can also be configured with its own SSL by using the various management.server.ssl.* properties. For example, doing so lets a management server be available over HTTP while the main application uses HTTPS, as shown in the following property settings:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=8443</span><br><span class=\"line\">server.ssl.enabled=true</span><br><span class=\"line\">server.ssl.key-store=classpath:store.jks</span><br><span class=\"line\">server.ssl.key-password=secret</span><br><span class=\"line\">management.server.port=8083</span><br><span class=\"line\">management.server.ssl.enabled=false</span><br></pre></td></tr></table></figure>\n\n<p>Alternatively, both the main server and the management server can use SSL but with different key stores, as follows: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=8443</span><br><span class=\"line\">server.ssl.enabled=true</span><br><span class=\"line\">server.ssl.key-store=classpath:main.jks</span><br><span class=\"line\">server.ssl.key-password=secret</span><br><span class=\"line\">management.server.port=8083</span><br><span class=\"line\">management.server.ssl.enabled=true</span><br><span class=\"line\">management.server.ssl.key-store=classpath:management.jks</span><br><span class=\"line\">management.server.ssl.key-password=secret</span><br></pre></td></tr></table></figure>\n\n<p>也就是可以配置多个证书。 这个 management.server.port 就是管理端的端口，其实是运维管理端口。配合actuator 这个类库来用。这样的话我们就可以将前台应用端口和后端运维管理隔离开，比如trace</p>\n<p>直接可以 <a href=\"http://127.0.0.1:8083/trace\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8083/trace</a>   来获得trace信息。而管理端的https也是可以配置的。</p>\n</li>\n<li><p><strong>SpringBoot2.0.5关于ssl的说明</strong></p>\n<p>SSL can be configured declaratively by setting the various <code>server.ssl.*</code> properties, typically in <code>application.properties</code> or <code>application.yml</code>. The following example shows setting SSL properties in <code>application.properties</code>: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=8443</span><br><span class=\"line\">server.ssl.key-store=classpath:keystore.jks</span><br><span class=\"line\">server.ssl.key-store-password=secret</span><br><span class=\"line\">server.ssl.key-password=another-secret</span><br></pre></td></tr></table></figure>\n\n<p>下面这个类是ssl的配置类注意看注释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * Copyright 2012-2017 the original author or authors.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class=\"line\"> * you may not use this file except in compliance with the License.</span><br><span class=\"line\"> * You may obtain a copy of the License at</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *      http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * Unless required by applicable law or agreed to in writing, software</span><br><span class=\"line\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class=\"line\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"line\"> * See the License for the specific language governing permissions and</span><br><span class=\"line\"> * limitations under the License.</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">package org.springframework.boot.web.server;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Simple server-independent abstraction for SSL configuration.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Andy Wilkinson</span><br><span class=\"line\"> * @author Vladimir Tsanev</span><br><span class=\"line\"> * @since 2.0.0</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Ssl &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Whether to enable SSL support.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate boolean enabled = true;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Whether client authentication is wanted (&quot;want&quot;) or needed (&quot;need&quot;). Requires a</span><br><span class=\"line\">\t * trust store.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate ClientAuth clientAuth;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Supported SSL ciphers.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String[] ciphers;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Enabled SSL protocols.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String[] enabledProtocols;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Alias that identifies the key in the key store.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String keyAlias;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Password used to access the key in the key store.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String keyPassword;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Path to the key store that holds the SSL certificate (typically a jks file).</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String keyStore;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Password used to access the key store.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String keyStorePassword;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Type of the key store.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String keyStoreType;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Provider for the key store.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String keyStoreProvider;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Trust store that holds SSL certificates.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String trustStore;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Password used to access the trust store.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String trustStorePassword;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Type of the trust store.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String trustStoreType;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Provider for the trust store.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String trustStoreProvider;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * SSL protocol to use.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String protocol = &quot;TLS&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic boolean isEnabled() &#123;</span><br><span class=\"line\">\t\treturn this.enabled;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setEnabled(boolean enabled) &#123;</span><br><span class=\"line\">\t\tthis.enabled = enabled;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic ClientAuth getClientAuth() &#123;</span><br><span class=\"line\">\t\treturn this.clientAuth;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setClientAuth(ClientAuth clientAuth) &#123;</span><br><span class=\"line\">\t\tthis.clientAuth = clientAuth;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String[] getCiphers() &#123;</span><br><span class=\"line\">\t\treturn this.ciphers;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setCiphers(String[] ciphers) &#123;</span><br><span class=\"line\">\t\tthis.ciphers = ciphers;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getKeyAlias() &#123;</span><br><span class=\"line\">\t\treturn this.keyAlias;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setKeyAlias(String keyAlias) &#123;</span><br><span class=\"line\">\t\tthis.keyAlias = keyAlias;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getKeyPassword() &#123;</span><br><span class=\"line\">\t\treturn this.keyPassword;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setKeyPassword(String keyPassword) &#123;</span><br><span class=\"line\">\t\tthis.keyPassword = keyPassword;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getKeyStore() &#123;</span><br><span class=\"line\">\t\treturn this.keyStore;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setKeyStore(String keyStore) &#123;</span><br><span class=\"line\">\t\tthis.keyStore = keyStore;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getKeyStorePassword() &#123;</span><br><span class=\"line\">\t\treturn this.keyStorePassword;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setKeyStorePassword(String keyStorePassword) &#123;</span><br><span class=\"line\">\t\tthis.keyStorePassword = keyStorePassword;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getKeyStoreType() &#123;</span><br><span class=\"line\">\t\treturn this.keyStoreType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setKeyStoreType(String keyStoreType) &#123;</span><br><span class=\"line\">\t\tthis.keyStoreType = keyStoreType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getKeyStoreProvider() &#123;</span><br><span class=\"line\">\t\treturn this.keyStoreProvider;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setKeyStoreProvider(String keyStoreProvider) &#123;</span><br><span class=\"line\">\t\tthis.keyStoreProvider = keyStoreProvider;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String[] getEnabledProtocols() &#123;</span><br><span class=\"line\">\t\treturn this.enabledProtocols;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setEnabledProtocols(String[] enabledProtocols) &#123;</span><br><span class=\"line\">\t\tthis.enabledProtocols = enabledProtocols;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getTrustStore() &#123;</span><br><span class=\"line\">\t\treturn this.trustStore;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setTrustStore(String trustStore) &#123;</span><br><span class=\"line\">\t\tthis.trustStore = trustStore;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getTrustStorePassword() &#123;</span><br><span class=\"line\">\t\treturn this.trustStorePassword;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setTrustStorePassword(String trustStorePassword) &#123;</span><br><span class=\"line\">\t\tthis.trustStorePassword = trustStorePassword;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getTrustStoreType() &#123;</span><br><span class=\"line\">\t\treturn this.trustStoreType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setTrustStoreType(String trustStoreType) &#123;</span><br><span class=\"line\">\t\tthis.trustStoreType = trustStoreType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getTrustStoreProvider() &#123;</span><br><span class=\"line\">\t\treturn this.trustStoreProvider;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setTrustStoreProvider(String trustStoreProvider) &#123;</span><br><span class=\"line\">\t\tthis.trustStoreProvider = trustStoreProvider;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getProtocol() &#123;</span><br><span class=\"line\">\t\treturn this.protocol;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setProtocol(String protocol) &#123;</span><br><span class=\"line\">\t\tthis.protocol = protocol;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Client authentication types.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic enum ClientAuth &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t/**</span><br><span class=\"line\">\t\t * Client authentication is wanted but not mandatory.</span><br><span class=\"line\">\t\t */</span><br><span class=\"line\">\t\tWANT,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t/**</span><br><span class=\"line\">\t\t * Client authentication is needed and mandatory.</span><br><span class=\"line\">\t\t */</span><br><span class=\"line\">\t\tNEED</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>*<em>Using configuration such as the preceding example means the application no longer supports a plain HTTP connector at port 8080. Spring Boot does not support the configuration of both an HTTP connector and an HTTPS connector through <code>application.properties</code>. If you want to have both, you need to configure one of them programmatically. We recommend using <code>application.properties</code> to configure HTTPS, as the HTTP connector is the easier of the two to configure programmatically. See the <a href=\"https://github.com/spring-projects/spring-boot/tree/v2.0.5.RELEASE/spring-boot-samples/spring-boot-sample-tomcat-multi-connectors\" target=\"_blank\" rel=\"noopener\"><code>spring-boot-sample-tomcat-multi-connectors</code></a> sample project for an example. *</em></p>\n<p>这段话的意思是，如果用了上面的配置，那么就不支持内置tomcat的默认8080端口了，如果你两个都想保留，那么可以用代码的方式实现，同时我们保留了使用application.properties去配置https，下面请看tomcat配置多连接器的代码示例，嗯 ，代码示例我看了 ，就是最上面，我用的那种代码配置多连接器。</p>\n</li>\n<li><p><strong>application.properties中的ssl配置详解</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.ssl.ciphers   #是否支持SSL ciphers.</span><br><span class=\"line\">server.ssl.client-auth   #设定client authentication是wanted 还是 needed.</span><br><span class=\"line\">server.ssl.enabled   #是否开启ssl，默认: true</span><br><span class=\"line\">server.ssl.key-alias   #设定key store中key的别名.</span><br><span class=\"line\">server.ssl.key-password   #访问key store中key的密码.</span><br><span class=\"line\">server.ssl.key-store   #设定持有SSL certificate的key store的路径，通常是一个.jks文件.</span><br><span class=\"line\">server.ssl.key-store-password   #设定访问key store的密码.</span><br><span class=\"line\">server.ssl.key-store-provider   #设定key store的提供者.</span><br><span class=\"line\">server.ssl.key-store-type   #设定key store的类型.</span><br><span class=\"line\">server.ssl.protocol   #使用的SSL协议，默认: TLS</span><br><span class=\"line\">server.ssl.trust-store   #持有SSL certificates的Trust store.</span><br><span class=\"line\">server.ssl.trust-store-password   #访问trust store的密码.</span><br><span class=\"line\">server.ssl.trust-store-provider   #设定trust store的提供者.</span><br><span class=\"line\">server.ssl.trust-store-type   #指定trust store的类型.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开启http2</p>\n<p>在application.properties中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##开启HTTP2</span><br><span class=\"line\">server.http2.enabled=true</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong>正常开发中，会在nginx端做ssl证书配置，这是后话了</strong></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>SpringBoot2.x开启Https,了解下</p>","more":"<p></p>\n<h4 id=\"SSL证书生成\"><a href=\"#SSL证书生成\" class=\"headerlink\" title=\"SSL证书生成\"></a>SSL证书生成</h4><ul>\n<li><p>使用java的自带的keytool生成ssl证书</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">keytool -genkeypair -alias skyeyes  -keyalg RSA -keysize 4096 -keypass nopassword -sigalg SHA384withRSA -dname &quot;cn=Wong,ou=skyeye,o=skyeye,l=Beijing,st=Beijing,c=CN&quot; -validity 3650  -keystore skyeye.jks -storetype JKS -storepass nopassword</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>-storetype 指定密钥仓库类型  </p>\n</li>\n<li><p>-keyalg 生证书的算法名称 </p>\n</li>\n<li><p>-keysize 证书大小 </p>\n</li>\n<li><p>-keystore 生成的证书文件的存储路径 </p>\n</li>\n<li><p>-validity 证书的有效期</p>\n</li>\n<li><p>-keypass nopassword 私钥的密码 最好与 storepass 一致。</p>\n</li>\n<li><p>-sigalg SHA384withRSA此处”SHA384withRSA“为签名算法  用sha3</p>\n</li>\n<li><p>-dname “cn=<a href=\"http://www.mydomain.com,ou=xxx,o=xxx,l=Beijing,st=Beijing,c=CN”\" target=\"_blank\" rel=\"noopener\">www.mydomain.com,ou=xxx,o=xxx,l=Beijing,st=Beijing,c=CN”</a> 在此填写证书信息。”CN = 名字与姓氏 / 域名, OU = 组织单位名称, O = 组织名称, L = 城市或区域名称, ST = 州或省份名称, C = 单位的两字母国家代码” </p>\n</li>\n<li><p>-storetype JKS 此处”JKS “为证书库类型。可用的证书库类型为：JKS、PKCS12 等。jdk9 以前，默认为 JKS。自 jdk9 开始，默认为 PKCS12</p>\n</li>\n<li><p>-storepass nopassword此处”nopassword“为证书库密码 (私钥的密码)。最好与 keypass 一致 </p>\n</li>\n<li><p>PS:   <strong>上述命令，需要将 -dname 参数替换（尤其时域名要写对）、密码更改即可，其它可保持不变。</strong> </p>\n<p>使用everything搜索生成的<a href=\"http://www.spacexplore.com_keystore.jks\" target=\"_blank\" rel=\"noopener\">www.spacexplore.com_keystore.jks</a> 找到这个文件，</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>项目中配置证书</p>\n<ul>\n<li><p>将上述文件拷贝到项目的resources 底下,windows放在项目根目录下。</p>\n</li>\n<li><p>配置文件中加入ssl证书配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.ssl.key-store= classpath:skyeye.jks</span><br><span class=\"line\">server.ssl.key-store-password=nopassword</span><br><span class=\"line\">server.ssl.keyStoreType=JKS</span><br><span class=\"line\">server.ssl.keyAlias:skyeyes</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>配置代码</p>\n<p> <strong>注意这里的HTTPS端口就是server.port的端口，两个要一致</strong> </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class TomcatConfig &#123;</span><br><span class=\"line\">\tprivate Connector createHTTPConnector() &#123;</span><br><span class=\"line\">\t\tConnector connector = new Connector(&quot;org.apache.coyote.http11.Http11NioProtocol&quot;);</span><br><span class=\"line\">\t\t// 同时启用 http（8080）、https（8082）两个端口</span><br><span class=\"line\">\t\tconnector.setScheme(&quot;http&quot;);</span><br><span class=\"line\">\t\tconnector.setSecure(false);</span><br><span class=\"line\">\t\t//设置http端口8080 </span><br><span class=\"line\">\t\tconnector.setPort(8080);</span><br><span class=\"line\">\t\t//设置https端口为8082</span><br><span class=\"line\">\t\tconnector.setRedirectPort(8082);</span><br><span class=\"line\">\t\treturn connector;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 這是2.x的配置方法 1.x與2，x不一樣</span><br><span class=\"line\">\t * @Bean</span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic ServletWebServerFactory servletContainer() &#123;</span><br><span class=\"line\">\t\tTomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory();</span><br><span class=\"line\">\t\ttomcat.addAdditionalTomcatConnectors(createHTTPConnector());</span><br><span class=\"line\">\t\treturn tomcat;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>启动报错了。。。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: java.io.IOException: DerInputStream.getLength(): lengthTag=109, too big.</span><br><span class=\"line\">\tat sun.security.util.DerInputStream.getLength(DerInputStream.java:599) ~[?:1.8.0_171]</span><br><span class=\"line\">\tat sun.security.util.DerValue.init(DerValue.java:391) ~[?:1.8.0_171]</span><br><span class=\"line\">\tat sun.security.util.DerValue.&lt;init&gt;(DerValue.java:332) ~[?:1.8.0_171]</span><br><span class=\"line\">\tat sun.security.util.DerValue.&lt;init&gt;(DerValue.java:345) ~[?:1.8.0_171]</span><br><span class=\"line\">\tat sun.security.pkcs12.PKCS12KeyStore.engineLoad(PKCS12KeyStore.java:1938) ~[?:1.8.0_171]</span><br><span class=\"line\">\tat java.security.KeyStore.load(KeyStore.java:1445) ~[?:1.8.0_171]</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.SSLUtilBase.getStore(SSLUtilBase.java:139) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.SSLHostConfigCertificate.getCertificateKeystore(SSLHostConfigCertificate.java:204) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.jsse.JSSEUtil.getKeyManagers(JSSEUtil.java:184) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.AbstractJsseEndpoint.createSSLContext(AbstractJsseEndpoint.java:114) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.AbstractJsseEndpoint.initialiseSsl(AbstractJsseEndpoint.java:87) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:225) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:1150) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br><span class=\"line\">\tat org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:591) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br><span class=\"line\">\tat org.apache.catalina.connector.Connector.startInternal(Connector.java:1018) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br><span class=\"line\">\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) ~[tomcat-embed-core-8.5.31.jar:8.5.31]</span><br></pre></td></tr></table></figure>\n\n<p> 看起来像是读取文件导致的问题。</p>\n<p> <strong>解决办法:</strong></p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">               &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">               &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">               &lt;configuration&gt;</span><br><span class=\"line\">                   &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class=\"line\">                   &lt;!-- 过滤后缀为 pem、pfx 的证书文件 --&gt;</span><br><span class=\"line\">                   &lt;nonFilteredFileExtensions&gt;</span><br><span class=\"line\">                       &lt;nonFilteredFileExtension&gt;pem&lt;/nonFilteredFileExtension&gt;</span><br><span class=\"line\">                       &lt;nonFilteredFileExtension&gt;pfx&lt;/nonFilteredFileExtension&gt;</span><br><span class=\"line\">                       &lt;nonFilteredFileExtension&gt;p12&lt;/nonFilteredFileExtension&gt;</span><br><span class=\"line\">                   &lt;/nonFilteredFileExtensions&gt;</span><br><span class=\"line\">               &lt;/configuration&gt;</span><br><span class=\"line\">           &lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n\n<p> 同时生成的密钥文件类型要与配置中的相同,(<strong>如果需要进行密钥格式转换，那么就转换 这里就不写了</strong>)，如密钥文件为.jks,那么配置这么写：(<strong>如果server.ssl.key-store= skyeye.jks这么写就得将密钥文件放置在项目的根目录下，而这么写server.ssl.key-store=classpath: skyeye.jks,放到resources就可以了</strong>)</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.ssl.key-store=classpath:skyeye.jks</span><br><span class=\"line\">server.ssl.keyStoreType=JKS</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进行测试访问</p>\n<p> <img src=\"SpringBoot%E5%BC%80%E5%90%AFhttps/HTTPS1.png\" alt=\"SpringBoot开启https\"></p>\n</li>\n<li><p>http与https共存时候，强制转换为https，做法就是开启过滤器强制转换为https</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 将http访问请求转为https的过滤器 http与https共存时</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @author andreby</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@WebFilter(urlPatterns = &quot;/*&quot;, filterName = &quot;http2HttpsFilter&quot;)</span><br><span class=\"line\">public class Http2HttpsFilter extends OncePerRequestFilter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span><br><span class=\"line\">\t\t\tthrows ServletException, IOException &#123;</span><br><span class=\"line\">\t\tString requestURL = request.getRequestURL().toString();</span><br><span class=\"line\">\t\tString protocol = requestURL.split(&quot;://&quot;)[0];</span><br><span class=\"line\">\t\tif (&quot;http&quot;.equals(protocol)) &#123;</span><br><span class=\"line\">\t\t\t// 将http请求uri替换为https,将http端口请求替换为https端口 8081端口被nexus占用 换8082</span><br><span class=\"line\">\t\t\trequestURL = requestURL.replace(&quot;http&quot;, &quot;https&quot;).replace(&quot;8080&quot;, &quot;8082&quot;);</span><br><span class=\"line\">\t\t\tresponse.sendRedirect(requestURL);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfilterChain.doFilter(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>不需要共存且需要将http转为https,去掉Http2HttpsFilter，并修改TomcatConfig类为如下。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class TomcatConfig &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">\tpublic Connector httpConnector() &#123;</span><br><span class=\"line\">\t\tConnector connector = new Connector(&quot;org.apache.coyote.http11.Http11NioProtocol&quot;);</span><br><span class=\"line\">\t\tconnector.setScheme(&quot;http&quot;);</span><br><span class=\"line\">\t\tconnector.setSecure(false);</span><br><span class=\"line\">\t\t// 设置http8080端口 和 重定向到https的端口8082 8081端口被nexus占用 换8082</span><br><span class=\"line\">\t\t// 这个8080端口为http端口 如果这里设置了http端口那么server.port是不是就不用设置了？</span><br><span class=\"line\">\t\tconnector.setPort(8080);</span><br><span class=\"line\">\t\t// 这个8082端口为https端口 8081端口被nexus占用 换8082</span><br><span class=\"line\">\t\tconnector.setRedirectPort(8082);</span><br><span class=\"line\">\t\treturn connector;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 這是2.x的配置方法 1.x與2，x不一樣</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @Bean</span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic ServletWebServerFactory servletContainer() &#123;</span><br><span class=\"line\">\t\t// http与https共存时候，需要强转http为https时候用注释代码</span><br><span class=\"line\">\t\t/*</span><br><span class=\"line\">\t\t * TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory();</span><br><span class=\"line\">\t\t * tomcat.addAdditionalTomcatConnectors(createHTTPConnector()); return tomcat;</span><br><span class=\"line\">\t\t */</span><br><span class=\"line\">\t\tTomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory() &#123;</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tprotected void postProcessContext(Context context) &#123;</span><br><span class=\"line\">\t\t\t\tSecurityConstraint constraint = new SecurityConstraint();</span><br><span class=\"line\">\t\t\t\tconstraint.setUserConstraint(&quot;CONFIDENTIAL&quot;);</span><br><span class=\"line\">\t\t\t\tSecurityCollection collection = new SecurityCollection();</span><br><span class=\"line\">\t\t\t\tcollection.addPattern(&quot;/*&quot;);</span><br><span class=\"line\">\t\t\t\tconstraint.addCollection(collection);</span><br><span class=\"line\">\t\t\t\tcontext.addConstraint(constraint);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\ttomcat.addAdditionalTomcatConnectors(httpConnector());</span><br><span class=\"line\">\t\treturn tomcat;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>一些其他的配置</p>\n<ul>\n<li><p>如果你有一个代理服务器，你需要设置<code>spring.devtools.remote.proxy.host</code>和<code>spring.devtools.remote.proxy.port</code>这两个属性。 （属于devtools这个东西）</p>\n</li>\n<li><p>springboot2.0.5官档关于运维管理端ssl的说明</p>\n<p>When configured to use a custom port, the management server can also be configured with its own SSL by using the various management.server.ssl.* properties. For example, doing so lets a management server be available over HTTP while the main application uses HTTPS, as shown in the following property settings:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=8443</span><br><span class=\"line\">server.ssl.enabled=true</span><br><span class=\"line\">server.ssl.key-store=classpath:store.jks</span><br><span class=\"line\">server.ssl.key-password=secret</span><br><span class=\"line\">management.server.port=8083</span><br><span class=\"line\">management.server.ssl.enabled=false</span><br></pre></td></tr></table></figure>\n\n<p>Alternatively, both the main server and the management server can use SSL but with different key stores, as follows: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=8443</span><br><span class=\"line\">server.ssl.enabled=true</span><br><span class=\"line\">server.ssl.key-store=classpath:main.jks</span><br><span class=\"line\">server.ssl.key-password=secret</span><br><span class=\"line\">management.server.port=8083</span><br><span class=\"line\">management.server.ssl.enabled=true</span><br><span class=\"line\">management.server.ssl.key-store=classpath:management.jks</span><br><span class=\"line\">management.server.ssl.key-password=secret</span><br></pre></td></tr></table></figure>\n\n<p>也就是可以配置多个证书。 这个 management.server.port 就是管理端的端口，其实是运维管理端口。配合actuator 这个类库来用。这样的话我们就可以将前台应用端口和后端运维管理隔离开，比如trace</p>\n<p>直接可以 <a href=\"http://127.0.0.1:8083/trace\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8083/trace</a>   来获得trace信息。而管理端的https也是可以配置的。</p>\n</li>\n<li><p><strong>SpringBoot2.0.5关于ssl的说明</strong></p>\n<p>SSL can be configured declaratively by setting the various <code>server.ssl.*</code> properties, typically in <code>application.properties</code> or <code>application.yml</code>. The following example shows setting SSL properties in <code>application.properties</code>: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=8443</span><br><span class=\"line\">server.ssl.key-store=classpath:keystore.jks</span><br><span class=\"line\">server.ssl.key-store-password=secret</span><br><span class=\"line\">server.ssl.key-password=another-secret</span><br></pre></td></tr></table></figure>\n\n<p>下面这个类是ssl的配置类注意看注释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * Copyright 2012-2017 the original author or authors.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class=\"line\"> * you may not use this file except in compliance with the License.</span><br><span class=\"line\"> * You may obtain a copy of the License at</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *      http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * Unless required by applicable law or agreed to in writing, software</span><br><span class=\"line\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class=\"line\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"line\"> * See the License for the specific language governing permissions and</span><br><span class=\"line\"> * limitations under the License.</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">package org.springframework.boot.web.server;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Simple server-independent abstraction for SSL configuration.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Andy Wilkinson</span><br><span class=\"line\"> * @author Vladimir Tsanev</span><br><span class=\"line\"> * @since 2.0.0</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Ssl &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Whether to enable SSL support.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate boolean enabled = true;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Whether client authentication is wanted (&quot;want&quot;) or needed (&quot;need&quot;). Requires a</span><br><span class=\"line\">\t * trust store.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate ClientAuth clientAuth;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Supported SSL ciphers.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String[] ciphers;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Enabled SSL protocols.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String[] enabledProtocols;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Alias that identifies the key in the key store.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String keyAlias;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Password used to access the key in the key store.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String keyPassword;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Path to the key store that holds the SSL certificate (typically a jks file).</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String keyStore;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Password used to access the key store.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String keyStorePassword;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Type of the key store.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String keyStoreType;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Provider for the key store.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String keyStoreProvider;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Trust store that holds SSL certificates.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String trustStore;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Password used to access the trust store.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String trustStorePassword;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Type of the trust store.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String trustStoreType;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Provider for the trust store.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String trustStoreProvider;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * SSL protocol to use.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String protocol = &quot;TLS&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic boolean isEnabled() &#123;</span><br><span class=\"line\">\t\treturn this.enabled;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setEnabled(boolean enabled) &#123;</span><br><span class=\"line\">\t\tthis.enabled = enabled;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic ClientAuth getClientAuth() &#123;</span><br><span class=\"line\">\t\treturn this.clientAuth;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setClientAuth(ClientAuth clientAuth) &#123;</span><br><span class=\"line\">\t\tthis.clientAuth = clientAuth;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String[] getCiphers() &#123;</span><br><span class=\"line\">\t\treturn this.ciphers;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setCiphers(String[] ciphers) &#123;</span><br><span class=\"line\">\t\tthis.ciphers = ciphers;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getKeyAlias() &#123;</span><br><span class=\"line\">\t\treturn this.keyAlias;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setKeyAlias(String keyAlias) &#123;</span><br><span class=\"line\">\t\tthis.keyAlias = keyAlias;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getKeyPassword() &#123;</span><br><span class=\"line\">\t\treturn this.keyPassword;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setKeyPassword(String keyPassword) &#123;</span><br><span class=\"line\">\t\tthis.keyPassword = keyPassword;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getKeyStore() &#123;</span><br><span class=\"line\">\t\treturn this.keyStore;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setKeyStore(String keyStore) &#123;</span><br><span class=\"line\">\t\tthis.keyStore = keyStore;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getKeyStorePassword() &#123;</span><br><span class=\"line\">\t\treturn this.keyStorePassword;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setKeyStorePassword(String keyStorePassword) &#123;</span><br><span class=\"line\">\t\tthis.keyStorePassword = keyStorePassword;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getKeyStoreType() &#123;</span><br><span class=\"line\">\t\treturn this.keyStoreType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setKeyStoreType(String keyStoreType) &#123;</span><br><span class=\"line\">\t\tthis.keyStoreType = keyStoreType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getKeyStoreProvider() &#123;</span><br><span class=\"line\">\t\treturn this.keyStoreProvider;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setKeyStoreProvider(String keyStoreProvider) &#123;</span><br><span class=\"line\">\t\tthis.keyStoreProvider = keyStoreProvider;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String[] getEnabledProtocols() &#123;</span><br><span class=\"line\">\t\treturn this.enabledProtocols;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setEnabledProtocols(String[] enabledProtocols) &#123;</span><br><span class=\"line\">\t\tthis.enabledProtocols = enabledProtocols;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getTrustStore() &#123;</span><br><span class=\"line\">\t\treturn this.trustStore;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setTrustStore(String trustStore) &#123;</span><br><span class=\"line\">\t\tthis.trustStore = trustStore;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getTrustStorePassword() &#123;</span><br><span class=\"line\">\t\treturn this.trustStorePassword;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setTrustStorePassword(String trustStorePassword) &#123;</span><br><span class=\"line\">\t\tthis.trustStorePassword = trustStorePassword;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getTrustStoreType() &#123;</span><br><span class=\"line\">\t\treturn this.trustStoreType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setTrustStoreType(String trustStoreType) &#123;</span><br><span class=\"line\">\t\tthis.trustStoreType = trustStoreType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getTrustStoreProvider() &#123;</span><br><span class=\"line\">\t\treturn this.trustStoreProvider;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setTrustStoreProvider(String trustStoreProvider) &#123;</span><br><span class=\"line\">\t\tthis.trustStoreProvider = trustStoreProvider;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getProtocol() &#123;</span><br><span class=\"line\">\t\treturn this.protocol;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setProtocol(String protocol) &#123;</span><br><span class=\"line\">\t\tthis.protocol = protocol;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Client authentication types.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic enum ClientAuth &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t/**</span><br><span class=\"line\">\t\t * Client authentication is wanted but not mandatory.</span><br><span class=\"line\">\t\t */</span><br><span class=\"line\">\t\tWANT,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t/**</span><br><span class=\"line\">\t\t * Client authentication is needed and mandatory.</span><br><span class=\"line\">\t\t */</span><br><span class=\"line\">\t\tNEED</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>*<em>Using configuration such as the preceding example means the application no longer supports a plain HTTP connector at port 8080. Spring Boot does not support the configuration of both an HTTP connector and an HTTPS connector through <code>application.properties</code>. If you want to have both, you need to configure one of them programmatically. We recommend using <code>application.properties</code> to configure HTTPS, as the HTTP connector is the easier of the two to configure programmatically. See the <a href=\"https://github.com/spring-projects/spring-boot/tree/v2.0.5.RELEASE/spring-boot-samples/spring-boot-sample-tomcat-multi-connectors\" target=\"_blank\" rel=\"noopener\"><code>spring-boot-sample-tomcat-multi-connectors</code></a> sample project for an example. *</em></p>\n<p>这段话的意思是，如果用了上面的配置，那么就不支持内置tomcat的默认8080端口了，如果你两个都想保留，那么可以用代码的方式实现，同时我们保留了使用application.properties去配置https，下面请看tomcat配置多连接器的代码示例，嗯 ，代码示例我看了 ，就是最上面，我用的那种代码配置多连接器。</p>\n</li>\n<li><p><strong>application.properties中的ssl配置详解</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.ssl.ciphers   #是否支持SSL ciphers.</span><br><span class=\"line\">server.ssl.client-auth   #设定client authentication是wanted 还是 needed.</span><br><span class=\"line\">server.ssl.enabled   #是否开启ssl，默认: true</span><br><span class=\"line\">server.ssl.key-alias   #设定key store中key的别名.</span><br><span class=\"line\">server.ssl.key-password   #访问key store中key的密码.</span><br><span class=\"line\">server.ssl.key-store   #设定持有SSL certificate的key store的路径，通常是一个.jks文件.</span><br><span class=\"line\">server.ssl.key-store-password   #设定访问key store的密码.</span><br><span class=\"line\">server.ssl.key-store-provider   #设定key store的提供者.</span><br><span class=\"line\">server.ssl.key-store-type   #设定key store的类型.</span><br><span class=\"line\">server.ssl.protocol   #使用的SSL协议，默认: TLS</span><br><span class=\"line\">server.ssl.trust-store   #持有SSL certificates的Trust store.</span><br><span class=\"line\">server.ssl.trust-store-password   #访问trust store的密码.</span><br><span class=\"line\">server.ssl.trust-store-provider   #设定trust store的提供者.</span><br><span class=\"line\">server.ssl.trust-store-type   #指定trust store的类型.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开启http2</p>\n<p>在application.properties中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##开启HTTP2</span><br><span class=\"line\">server.http2.enabled=true</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong>正常开发中，会在nginx端做ssl证书配置，这是后话了</strong></p>\n</li>\n</ul>"},{"title":"Scala","date":"2020-01-22T10:09:08.000Z","_content":"\n以前看scala的一些笔记<!---more--->\n\n\n\n\n\n* scala命名规范\n\n  * 有意义简明\n\n  * 驼峰式\n\n* 运算符\n\n  * 算数运算符\n\n    * 除以\n\n      ```scala\n      var i=10/3\n      //此处i的值为3.0 因为默认数值类型为int 所以除法获得的结果只能保留整数\n      ```\n\n      \n\n    * 取模=a-a/b*b\n\n      ```scala\n       var j=10%3\n       \n       j=-10%3(-10-(-3)*3=-10+9)\n       \n      ```\n\n      \n\n      ```scala\n         ...\n         //还有97天放假 还有多少个星期\n          var a = 97 / 7;\n          val b = 97 % 7;\n          println(\"当前剩余\" + a + \"个星期零\" + b + \"天\");\n          if (b > 0) {\n            a = a + 1\n            println(a)\n          } else {\n            println(a)\n          }\n          //定义变量保存华氏温度 5/9*（华氏温度-100） 请求华氏温度对应的摄氏温度 测试温度为232.5\n          val sheshi= huaShi(232.5);\n          println(sheshi)\n        }\n      \n        def huaShi(huashi: Double): String = {\n          (5.0 / 9 * (huashi - 100.00)).formatted(\"%.2f\")\n        }\n      ```\n\n      \n\n  * 赋值运算符\n\n    scala中没有++和-- 用+= -= 代替\n\n  * 比较运算符 （关系运算符）\n\n    同java，><=!=,比较的时候左右类型要保持一致\n\n  * 逻辑运算符\n\n    返回boolean\n\n  * 位运算符\n\n    同java\n\n    scala 不支持三目运算符\n\n    运算符优先级别\n\n    （）[] 级别最高\n\n    * 单目运算\n\n    * 算术运算\n\n    * 移位运算\n\n    * 比较运算\n\n    * 位运算\n\n    * 关系\n    * 赋值\n\n* 键盘输入语句\n\n* 循环守卫\n\n  ```scala\n  for(i<-1 to 3 if i!=2){\n  println(i)\n  }\n  ```\n\n* for循环 util 左包右不包\n\n  ```scala\n  for (i<-1  util 3){\n  \tprintln(i)\n  }\n  ```\n\n  \n\n* 循环引入变量\n\n  ```scala\n  for (i<- 1 to 3 ; j=4-i){\n  \tprintln(j)\n  }\n  \n  ```\n\n* 多重循环\n\n  scala的多重循环 相当于嵌套for循环\n\n  ```scala\n  for(i<-1 to3 ; j<-3 to 10){\n         println(i)\n   \n         println(j)\n  }\n  ```\n\n  \n\n* 循环返回值 使用yeild\n\n  将 1-3遍历 将循环得到的i放到vector中 作为变量result  yield 表示将哪些逻辑作为返回  yield后可以接代码块\n\n  ```scala\n  var result= for(i<-1 to 3) yield i\n  println(result)\n  \n  var res=for (i<-3 to 10) yield  i+1\n  println(res)\n  ```\n\n  \n\n* for循环 步长 \n\n  以下代码 1到10 每隔步长打印\n\n  同样可以用循环守卫实现\n\n  ```scala\n  for (i <- Range(1,10,2)){\n  println(i)\n  }\n  ```\n\n* while循环没有返回值 返回的是（）即Unit\n\n* break continue 不支持 在 `util.control.Breaks._` 使用 break() ,breakable(op:=>Unit)\n\n* 高阶函数传入代码块时候 小括号会换成大括号 \n\n* 使用if-else 或循环守卫实现continue\n\n* 函数式编程\n\n  * 函数定义声明\n\n    scala中函数和方法几乎等同 \n\n    函数的形参列表和返回值列表数据类型可以是值类型或引用类型\n\n    返回值加return 函数就不能自动推断返回类型 \n\n    如果没有声明函数返回类型 即使加了return 也没有返回值\n\n    如果不确定返回值 可用用Any类型\n\n    可以在函数中定义函数 方法中定义方法\n\n    如果函数形参有默认值 不传参那么走默认值 否则传参会覆盖默认值 从左到右  也可以使用带名参数进行覆盖指定形参\n\n    `mysql(host=\"127.0.0.1\",pwd=\"123\")`\n\n    形参类型默认为val\n\n    scala支持可变参数,可变参数只能出现在形参列表的最后 使用* 来表示可变参数,可变参数其实是个序列集合\n\n    ```scala\n      def sum(n1: Int, args: Int*): Int = {\n    \n        for ( item<-args  ) {\n          println(item)\n        }\n        args.length\n      }\n    ```\n\n    \n\n  * 函数运行机制\n\n    栈与堆内存的调用\n\n  * **递归 （推荐使用递归）**\n\n    递归函数一定要指定返回类型\n\n  * 过程\n\n    将函数返回Unit的函数 称为过程函数 如果没有返回值 那么 函数签名上的=可以省略\n\n  * 惰性函数与异常\n\n    尽可能延迟表达式求值， 需要时提供元素 无需预先计算他们 lazyLoad ,使用 lazy 关键字 只能修饰val \n\n    只有当lazy变量被使用时候 才会加载使用\n\n    ```scala\n      def main(args: Array[String]): Unit = {\n        \n        lazy  val lazyV = sum(1,3);\n        println(lazyV)\n        \n      }\n    ```\n\n    scala的异常和java稍微有区别 使用 try catch finally \n\n    1.运行时异常 2.编译（checked）异常 java中的区分\n\n    scala中只有运行时异常,使用case 匹配 不同异常\n\n    ```scala\n      def mockExceptions(): Unit ={\n        try{\n           var i = 10/0\n        }catch {\n          case  ex:ArithmeticException=>{\n            println(\"catched a ArithmeticException\")\n          }\n          case  ex:Exception=>{\n            println(\"catched a exception\")\n          }\n        }finally {\n          println(\" finally printed\")\n        }\n      }\n    ```\n\n    throw 表达式 是有类型的 为Nothing\n\n    ```scala\n    def throwNothing():Nothing{\n     throw new Exception(\"Nothing\")\n    }\n    ```\n\n    使用@throws 注解 来表示抛出异常\n\n    ```scala\n    @throws(classOf[NumberFormatException])\n    def fn1()={\n    \t\"abc\".toInt\n    }\n    ```\n\n    \n\n  * 值函数\n\n  * 高阶函数\n\n  * 闭包\n\n  * 应用函数\n\n  * 柯里化函数 抽象控制\n\n    \n\n* 面向对象\n\n  * scala 对象类的属性必须赋予默认值 可用_来表示\n\n  * 属性默认是private的 不是public的\n\n    ```scala\n    class cat{\n        var name :String =\"\"\n        var age:Int =_\n             }\n    ```\n\n  ​        声明成员属性时候会自动编译生成 set get 方法\n\n     \t使用下划线给定默认值 必须指定类型\n\n  ​\t    一般使用val 声明对象引用 也可以用类型推导 \n\n  ​\t\t**当类型和后面对象类型有继承关系即多态时就必须声明实例变量的类型** 有点像泛型\n\n  ```scala\n   val cat:Cat = new cat\n  ```\n\n  \n\n  * scala 中的类不用刻意声明为public 默认是public\n\n  * 成员属性的声明\n\n    * 属性声明定义同变量\n\n    * 定义类型可以为值或者引用\n\n    * 声明一个属性必须显式的初始化\n\n    * 如果赋值为null 一定要声明属性的类型 否则该属性的类型就是Null\n\n    * 属性默认值：\n\n      * Byte Short Long Int  _对应0\n      * Float Double           _对应0.0\n      * String 和引用类型  _ 对应null\n      * Boolean                  _对应false\n\n    * 使用BeanProperty注解生成set get **且 这种方式生成的方法 与底层编译后自动生成的带$的setget方法不冲突 可以并存** \n\n      ```scala\n      import scala.beans.BeanProperty\n      \n      class A(){\n        @BeanProperty\n        var name:String=\"\"   \n      } \n      ```\n\n      \n\n  * scala 翻转循环\n\n    ```scala\n    for(i<-0 to 10 reverse){\n    \tprintln(i)\n    }\n    ```\n\n    \n\n    \n\n* scala的方法\n\n  方法就是函数 方法一般为对象的成员\n\n  ```scala\n  class cat{\n  \tdef eat()={\n  \tprintln(\"eat\")\n  \t}\n  }\n  ```\n\n* 构造器\n\n  java的构造器有固定要求 名字与类名一样 用于初始化对象 有默认无参构造器 super this .etc\n\n  scala的构造器,多个构造器可以重载  有**主构造器和辅构造器**\n\n  使用this 表示辅助构造器 可以根据参数列表来区分不同的辅助构造器\n\n  主构造器直接放在类名上声明\n\n  **主构造器会执行类定义中的所有语句，放在类中要执行的语句 除了声明的成员方法**\n\n  如果想让主构造器变成私有 那么可以在class的()前加private 这样只能通过辅助构造器去构造对象了\n\n  **主构造器的形参如果没有用任何修饰符修饰那么 这个参数是局部变量，如果主构造器的参数使用val进行修饰那么 这个属性就会成为一个私有只读属性** 变成immutable了 只读为只有get方法\n\n  ```scala\n  class A(inName:String){\n   var name=inName;\n  }\n  class B(val inName:String){\n   var name=inName;\n  }\n  ```\n\n  \n\n  ```scala\n  //私有主构造器\n  class Person private(inName:String,inAge:Int){\n   var name:String=inName\n   var age:Int=inAge\n   \n     def this(inName:String){\n         inName=name\n     }\n      override def toString:String={\n          \"name\"+name+\"age\"+age\n      }\n   \n  }\n  \n  ```\n\n  辅助构造器 使用this声明 和java中的this不一样,多个辅助构造器通过不同的形参列表进行区分 底层为java的构造器重载\n\n  **辅助构造器内第一行代码必须显式的调用主构造器**  这样做是为了显式的调用主构造器的父类构造方法\n\n  不能在辅助构造器调用该类的父类的主构造器  只有主构造器才能调用父类构造器 不能使用super.\n\n  ```scala\n  //主构造器\n  class Person(inName:String,inAge:Int){\n   var name:String=inName\n   var age:Int=inAge\n   \n     def this(inName:String){\n         inName=name\n     }\n      override def toString:String={\n          \"name\"+name+\"age\"+age\n      }\n   \t//辅助构造器\n      def this(name:String){\n          //调用主构造器 这里给的默认值 如果主构造器没有参数 那么就写this 就ok\n          this(_,_)\n          this.name=name\n      }\n  }\n  \n  ```\n\n* **对象的创建过程**\n\n  * 加载类信息 成员信息（属性及方法）及其他\n  * 在内存中开辟一块堆空间\n  * 使用父类构造器（主辅）进行初始化\n  * 使用主构造器进行属性的初始化\n  * 使用辅助构造器对属性进行再次初始化\n  * 将对象堆内存的地址赋给变量引用\n\n* scala包\n\n  除了java中的两种方式 scala还可以在同一个文件中创建多个包\n\n  ````scala\n  package com{\n  \tobjcet People{\n  \t\tmain\n  \t}\n  \tpackage scala{\n  \t\n  \t\tclass A{\n  \t\t\tdef say()={\n  \t\t\t\tprintln(\"A\")\n  \t\t\t}\n  \t\t}\n  \t\tpackage test{\n  \t\t\tclass B{\n  \t\t\t \tdef sayHello()={\n  \t\t\t \t\tprintln(\"B\")\n  \t\t\t \t}\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  ````\n\n  scala的包名和远吗所在的系统文件目录结构可以不一致 但是编译后端字节码文件路径和包名会保持一致 \n\n  scala自动引入 lang包和 scala包和 preDef包\n\n  scala的泛型使用[]中括号\n\n  import可以写在任何位置\n\n  包对象是对静态成员的抽象 包对象的名字要和包的名字一致\n\n  在包对象中定义方法变量 不能直接在包的大括号中定义会报错\n\n  ```\n  package object scala{\n  \n  }\n  pacakage scala{\n  \n  }\n  ```\n\n  scala中的可见性  priate表示私有 public一般为默认 \n\n  scala伴生类是伴生对象的静态成员或者属性的抽象封装\n\n  私有属性可以在本类中访问 也可以在伴生类中访问 \n\n  不可以用public显式的修饰属性或者方法\n\n  方法的访问权限默认为public\n\n  protected只能在子类访问 同包下不能访问\n\n  ```\n  class A{\n  \tvar name:String=\"\" //可读写\n  \tprivate var sla:Int=0 //只读\n  \t\t\n  }\n  ```\n\n  包访问权限示例，由于同包下的私有不能访问 所以使用中括号加包名表示 某个属性可以在某个包下访问\n\n  ```scala\n  class Person{\n  \tprivate [scala] val name:String=\"\"\n  }\n  ```\n\n  虽然用的protected 修饰 但是编译器生成的变量类型还是private 默认public 编译后也是private\n\n  只是该属性的访问方法是public或者private的\n\n* 包的引入\n\n  * import语句可以出现在任何地方\n\n  * 如果想要引入某个包中的所有的类 那么使用 `import scala._` 下划线\n\n  * 在需要用的时候才引用的话 那么作用域只在该代码块所在的大括号内\n\n  * 如果 多个包中有相同名字的类 可以重命名 使用{}进行重命名\n\n    ```scala\n    import scala.collection.mutable.HashMap \n    import java.util.{HashMap=>JavaHashMap}\n    ```\n\n* 面向对象\n\n  子类继承了所有属性 私有属性不能直接访问 需要通过公共方法访问\n\n  父类的protected属性 编译后也是public \n\n  \n\n  * 方法重写\n\n    使用override 关键字\n\n    ```scala\n    override def toString():String{\n    \tprintln(\"toString\")\n    }\n    ```\n\n    调用超类方法使用super关键字\n\n  * 类型检查 多态\n\n    * classOf[String] 获取String的class对象\n    * obj.isInstanceOf[String] 判断某个对象是否是String类型\n    * obj.asInstanceOf[T] 将obj对象强转为T类型\n\n  * 复写字段\n\n    * 使用override进行复写字段，java中没有属性或者字段的重写 （子类如果有同名的属性 那么父类引用调用的时候还是父类的属性，子类引用调用还是子类属性）scala中无论是子类引用还是父类引用 调用后都是子类属性\n\n    * 复写字段其实是复写方法\n\n    * 动态绑定\n\n      java的动态绑定机制\n\n      如果调用的是方法 那么jvm机会将该方法和对象内存地址绑定\n\n      如果调用的是一个属性 则没有动态绑定机制 在哪里调用就返回对应的值\n\n      scala则全部有动态绑定\n\n      * def 只能重写另个方法 即 方法只能重写另一个方法\n\n      * val只能重写另一个val属性或者 重写不带参数的def （因为 是get set方法） 带了参数就是方法的重载了\n\n      * var 只能重写另一个抽象的var\n\n        **抽象字段就是没有初始化的属性** 抽象字段要求所在类也为抽象类 标记为abstract\n\n        编译后不会生成对应的属性声明 只会生成两个对应的抽象方法 name name_$eq\n\n        ```scala\n        abstract class A{\n         \tvar name:String=_\n        }\n        class B extends A{\n            var name:String=\"\"\n        }\n        ```\n\n  * 抽象类\n\n    抽象类的属性可以没有值 没有值为抽象字段\n\n    可以有抽象字段可以有普通字段\n\n    抽象方法没有代码块\n\n    可以有抽象方法 可以有普通方法\n\n    **抽象的方法或者属性就不能用private修饰了**\n\n    ```scala\n    abstract classA{\n    \tvar name:String\n    \t\n    \tdef cry()\n    \tdef cry(inName:String)\n    }\n    ```\n\n  * 匿名子类\n\n    ```scala\n    abstract class A{\n     \tvar name :String\n     \tdef cry()\n    }\n    object anno {\n    main{\n    \tvar b = new A{\n    \t\toverride var name :String=\"\"\n    \t\toverride def cry():Unit{\n    \t\t\tprintln(\"cry\")\n    \t\t}\n    \t}\n        b.cry()\n    }\n    }\n    ```\n\n  * 继承层次\n\n    * Any \n\n      * AnyVal \n        * 基础类型  \n      * AnyRef \n        * collections\n        * javaclass \n        * other\n        * Null\n\n      * Nothing\n\n    * Any是顶级\n    * AnyRef相当于Object\n    * Null  shi null 类型\n    * Nothing 没有实力  泛型 底层类 \n\n  * 伴生对象\n\n    将静态属性和静态方法放到 该类的伴生对象中声明使用,抽象封装\n\n    这个和包对象有异曲同工之妙\n\n    伴生对象必须与该类同名\n\n    伴生对象依赖`public static final MOUDLE$`\n\n  * apply 方法\n\n    在伴生对象定义apply方法 那么就可以实现类名（参数）方式创建对象实例\n\n    ```scala\n    class Pig(inName:String){\n    var name :Stirng=inName\n    }\n    object Pig{\n    \tdef apply(inName:String):Pig=new Pig(inName)\n        def apply():Pig= new Pig()\n    }\n    \n    ```\n\n* trait\n\n  trait等价与接口+抽象类\n\n  动态混入 mix in\n\n  trait  继承\n\n  在 scala中 java的接口可以作为trait\n\n  特质可以看作对继承的一种补充\n\n  ```scala\n  trait behav {\n  \ttrait codes\n  }\n  ```\n\n  * 如果没有父类 多个特质继承\n\n    ```scala\n    class A extends behav with traitA ...{\n    \n    }\n    ```\n\n    \n\n  * 如果有父类  多个特质\n\n    ```scala\n    class B extends Father with   behav with  traitA with...{\n    \n    }\n    ```\n\n    当trait中有抽象和普通,会编译为两个class对象 一个trait.class接口 一个trait$.class抽象类 也是implement trait.class接口 但普通方法依赖MOUDLE来实现抽象类中的普通方法\n\n    当trait中只有抽象方法 生成 trait.class 接口 implements\n\n  \n\n  \n\n  * 使用 type 进行类型别名\n\n  * 动态混入 \n\n    解耦 \n\n    scala特有 补休该类的声明定义下 扩展类的功能 \n\n    不影响原有继承关系的基础上 给指定的类扩展功能\n\n    ```scala\n     class A{\n     \n     }\n    abstract class B{\n        def say();\n    }\n     object Mains{\n     \tmain{\n            //不修改类定义声明的情况下 进行动态混入\n     \t\tval a= new A with traitA\n            //含有抽象方法的类动态混入\n            var b = new B with traitB{\n                def say (){\n                    println(\"hi\")\n                }\n            }\n     \t}\n     }\n    ```\n\n  * 叠加特质\n\n    构建对象的时候 混入多个特质  即叠加特质\n\n    特质声明从左到右 方法执行顺序从右到左\n\n    ```scala\n    object A {\n        main {\n            var a = new A with traitA with traitB\n            a.say()\n        }\n    }\n    ```\n\n    如果 traitA 和 traitB 有共同的父类继承  那么 父类的构造只会走一次，叠加特质的初始化 会从左到右\n\n    如果traitA 和traitB 都有say 方法 那么 先走traitB 的方法 再执行 traitA的方法  遵循栈 从右向左\n\n    当有super的方法调用的时候 指的是左边的traitA的方法 当左边再没有trait的时候 直接找父类trait的方法\n\n    可以使用[?] 泛型 指定super[T]的调用 T类型必须是当前混入trait的父类\n\n  * 对象构造方式\n\n    * new 对象\n    * apply\n    * 匿名子类\n    * 动态混入\n\n  * 富接口\n\n    既有抽象方法又有非抽象方法的trait\n\n  * 特质中的具体字段\n\n    特质中的初始化了的字段 就是具体化字段 否则是抽象字段\n\n    混入该特质的类就拥有了该字段，该字段不是继承 而是直接加入到该类中\n\n    特质中的抽象字段 在具体的类的继承中必须被重写初始化\n\n  * 特质的构造顺序\n\n    ​\t普通特质继承的构造顺序\n\n    * 调用该类超类构造器\n    * 调用第一个特质的父类及爷类 构造器  依次往上推 如果执行过不再执行\n    * 调用第一个特质的构造器\n    * 调用第二个特质的父类及爷类 构造器  依次往上推 如果执行过不再执行\n    * 调用第二个特质的构造器\n    * ...\n\n    ```scala\n    class a extend b with traita with traitb{\n    \t\n    }\n    ```\n\n    动态混入对的构造顺序\n\n    * 先创建对象\n    * 在执行特质的构造 同上面普通特质继承的实现\n\n    ```scala\n    var c1 = new A with traitA with traitB\n    ```\n\n    两种方式 的区别是是否创建了该类的对象\n\n  * 扩展类的特质\n\n    特质可以继承类  用来拓展该类的一些功能\n\n    ```scala\n     trait log extends Exception{\n      def printE(){\n    \t  println(getMessage())\n      }\n     }\n    ```\n\n    所有混入该特质的类 会自动成为该特质所继承的超类的子类\n\n    若某个特质已经继承了某个类 那么混入该特质的类继承的类是该特质的超类的子类 否则会出现多继承现象\n\n  * 特质自身类型\n\n    解决特质循环依赖问题\n\n    限制混入该特质的类的类型\n\n    ```scala\n    class A extends Exception with log\n    ```\n\n    ```scala\n    trait logger{\n     this：Excption=>\n     def log():Unit={\n     \tprintln(getMessage())\n     }\n    }\n    ```\n\n  * 嵌套类\n\n    类中写类 类似java内部类\n\n    scala的静态内部类 是放在伴生类中的\n\n    ````scala\n    var innerClass=new outerClass.InnerClass\n    ````\n\n    内部类访问外部类的属性\n\n    * 外部类名.this.属性名\n\n    * 外部类名的别名.属性名\n\n      属性定义要在别名后面\n\n      ```scala\n      class Outer{\n      \tmyOuter=>\n      \t\n      \tclass innter {\n      \t\tvar name=\"\"\n      \t\tdef ages():Unit={\n      \t\t\tvar  outer = myOuter.age\n      \t\t}\n      \t}\n      \tvar age=1\n      }\n       \n      }\n      ```\n\n    \n\n  * 类型投影\n\n    屏蔽外部对象对内部类对象的影响 使用# 链接外部类与内部类\n\n    ```scala\n    def say(in:OuterClass#innerClass){\n    \tprint(\"say\")\n    }\n    ```\n\n  \n\n* 隐式转换和隐式值\n\n  * 隐式转换函数 用**implicit**关键字声明**带有单个参数的函数**  可以自动将值从一种类型转换为另一种类型\n\n  ```scala\n  implicit def fnc(d:Double):Int={\n  \t\td.toInt\n  }\n  ```\n\n  ​\t可以使用隐式转换给类动态添加功能\n\n  ​    隐式转换函数跟函数名没关系 跟函数签名（入参和返回值有关系）单个类型的隐式转换函数必须是唯一的   \t要不然编译器不知道使用哪个隐式转换函数\n\n  * 隐式值 就是隐式变量 将某个形参变量标志为隐式 implicit  编译器会在方法省略隐式参数的情况下去搜索作用于内的隐式值作为默认参数\n\n    隐式值使用 的方法调用的时候 不用带参数列表 直接方法名调用了\n\n    隐式值和函数默认值同时存在 隐式值级别高 没有隐式值 走默认值\n\n  ```scala\n    object Mains{\n        \n        main{\n        \timplicit val str:String=\"A\"\n            def hello(implicit name:Stirng):Unit={\n            \tprint(name)\n            }\n            //直接调用 不带括号 \n            hello \n        }\n    }\n  ```\n\n  * 隐式类\n\n    可以用隐式类来封装隐式值和隐式方法\n\n    * 构造器的构造参数有且只能有一个\n\n    * 隐式类必须被定义在类或者伴生对象或者包对象中，即隐式类不能是顶级的类\n\n    * 隐式类不能是case class即样式类\n\n    * 作用域内不能有与之同名称的标识符\n\n      ```scala\n      implicit class DB(val n:Mysql){\n      \tdef say():String={\n      \t\tn+\"scala\"\n      \t}\n      }\n      main{\n          var mysql=new Mysql\n          //当在DB隐式类的作用域 创建mysql对象 该隐式类就会生效\n      }\n      ```\n\n  * 隐式转换时机\n\n    **即什么时候使用隐式转换**\n\n    * 当方法中的参数的类型与目标类型不一致\n    * 当对象调用所在类中不存在的方法或成员属性时候，编译器会自动将对象进行隐式转换（根据类型）\n\n  * 编译器如何查找隐式转换\n\n    * 在当前代码作用域下查找隐式实体\n    * 如果上述查找失败 那么继续在隐式参数的类型的作用域里查找\n      * T with A with B with C  在ABC中都搜索\n      * 如果T 是参数化类型  比如List[String]  会在List和String的伴生对象找\n      * 如果T是个单利对象 p.T  那么 p 对象也会被搜索\n      * 如果T是个类型注入 即内部类  即S#T 那么S和T 都会被搜索\n\n  \n\n  * 隐式转换前提\n\n    不能存在二义性\n\n    隐式操作不能嵌套使用 循环调用\n\n  ","source":"_posts/Scala.md","raw":"---\ntitle: Scala\ndate: 2020-01-22 18:09:08\ntags: scala\ncategories: scala\n\n---\n\n以前看scala的一些笔记<!---more--->\n\n\n\n\n\n* scala命名规范\n\n  * 有意义简明\n\n  * 驼峰式\n\n* 运算符\n\n  * 算数运算符\n\n    * 除以\n\n      ```scala\n      var i=10/3\n      //此处i的值为3.0 因为默认数值类型为int 所以除法获得的结果只能保留整数\n      ```\n\n      \n\n    * 取模=a-a/b*b\n\n      ```scala\n       var j=10%3\n       \n       j=-10%3(-10-(-3)*3=-10+9)\n       \n      ```\n\n      \n\n      ```scala\n         ...\n         //还有97天放假 还有多少个星期\n          var a = 97 / 7;\n          val b = 97 % 7;\n          println(\"当前剩余\" + a + \"个星期零\" + b + \"天\");\n          if (b > 0) {\n            a = a + 1\n            println(a)\n          } else {\n            println(a)\n          }\n          //定义变量保存华氏温度 5/9*（华氏温度-100） 请求华氏温度对应的摄氏温度 测试温度为232.5\n          val sheshi= huaShi(232.5);\n          println(sheshi)\n        }\n      \n        def huaShi(huashi: Double): String = {\n          (5.0 / 9 * (huashi - 100.00)).formatted(\"%.2f\")\n        }\n      ```\n\n      \n\n  * 赋值运算符\n\n    scala中没有++和-- 用+= -= 代替\n\n  * 比较运算符 （关系运算符）\n\n    同java，><=!=,比较的时候左右类型要保持一致\n\n  * 逻辑运算符\n\n    返回boolean\n\n  * 位运算符\n\n    同java\n\n    scala 不支持三目运算符\n\n    运算符优先级别\n\n    （）[] 级别最高\n\n    * 单目运算\n\n    * 算术运算\n\n    * 移位运算\n\n    * 比较运算\n\n    * 位运算\n\n    * 关系\n    * 赋值\n\n* 键盘输入语句\n\n* 循环守卫\n\n  ```scala\n  for(i<-1 to 3 if i!=2){\n  println(i)\n  }\n  ```\n\n* for循环 util 左包右不包\n\n  ```scala\n  for (i<-1  util 3){\n  \tprintln(i)\n  }\n  ```\n\n  \n\n* 循环引入变量\n\n  ```scala\n  for (i<- 1 to 3 ; j=4-i){\n  \tprintln(j)\n  }\n  \n  ```\n\n* 多重循环\n\n  scala的多重循环 相当于嵌套for循环\n\n  ```scala\n  for(i<-1 to3 ; j<-3 to 10){\n         println(i)\n   \n         println(j)\n  }\n  ```\n\n  \n\n* 循环返回值 使用yeild\n\n  将 1-3遍历 将循环得到的i放到vector中 作为变量result  yield 表示将哪些逻辑作为返回  yield后可以接代码块\n\n  ```scala\n  var result= for(i<-1 to 3) yield i\n  println(result)\n  \n  var res=for (i<-3 to 10) yield  i+1\n  println(res)\n  ```\n\n  \n\n* for循环 步长 \n\n  以下代码 1到10 每隔步长打印\n\n  同样可以用循环守卫实现\n\n  ```scala\n  for (i <- Range(1,10,2)){\n  println(i)\n  }\n  ```\n\n* while循环没有返回值 返回的是（）即Unit\n\n* break continue 不支持 在 `util.control.Breaks._` 使用 break() ,breakable(op:=>Unit)\n\n* 高阶函数传入代码块时候 小括号会换成大括号 \n\n* 使用if-else 或循环守卫实现continue\n\n* 函数式编程\n\n  * 函数定义声明\n\n    scala中函数和方法几乎等同 \n\n    函数的形参列表和返回值列表数据类型可以是值类型或引用类型\n\n    返回值加return 函数就不能自动推断返回类型 \n\n    如果没有声明函数返回类型 即使加了return 也没有返回值\n\n    如果不确定返回值 可用用Any类型\n\n    可以在函数中定义函数 方法中定义方法\n\n    如果函数形参有默认值 不传参那么走默认值 否则传参会覆盖默认值 从左到右  也可以使用带名参数进行覆盖指定形参\n\n    `mysql(host=\"127.0.0.1\",pwd=\"123\")`\n\n    形参类型默认为val\n\n    scala支持可变参数,可变参数只能出现在形参列表的最后 使用* 来表示可变参数,可变参数其实是个序列集合\n\n    ```scala\n      def sum(n1: Int, args: Int*): Int = {\n    \n        for ( item<-args  ) {\n          println(item)\n        }\n        args.length\n      }\n    ```\n\n    \n\n  * 函数运行机制\n\n    栈与堆内存的调用\n\n  * **递归 （推荐使用递归）**\n\n    递归函数一定要指定返回类型\n\n  * 过程\n\n    将函数返回Unit的函数 称为过程函数 如果没有返回值 那么 函数签名上的=可以省略\n\n  * 惰性函数与异常\n\n    尽可能延迟表达式求值， 需要时提供元素 无需预先计算他们 lazyLoad ,使用 lazy 关键字 只能修饰val \n\n    只有当lazy变量被使用时候 才会加载使用\n\n    ```scala\n      def main(args: Array[String]): Unit = {\n        \n        lazy  val lazyV = sum(1,3);\n        println(lazyV)\n        \n      }\n    ```\n\n    scala的异常和java稍微有区别 使用 try catch finally \n\n    1.运行时异常 2.编译（checked）异常 java中的区分\n\n    scala中只有运行时异常,使用case 匹配 不同异常\n\n    ```scala\n      def mockExceptions(): Unit ={\n        try{\n           var i = 10/0\n        }catch {\n          case  ex:ArithmeticException=>{\n            println(\"catched a ArithmeticException\")\n          }\n          case  ex:Exception=>{\n            println(\"catched a exception\")\n          }\n        }finally {\n          println(\" finally printed\")\n        }\n      }\n    ```\n\n    throw 表达式 是有类型的 为Nothing\n\n    ```scala\n    def throwNothing():Nothing{\n     throw new Exception(\"Nothing\")\n    }\n    ```\n\n    使用@throws 注解 来表示抛出异常\n\n    ```scala\n    @throws(classOf[NumberFormatException])\n    def fn1()={\n    \t\"abc\".toInt\n    }\n    ```\n\n    \n\n  * 值函数\n\n  * 高阶函数\n\n  * 闭包\n\n  * 应用函数\n\n  * 柯里化函数 抽象控制\n\n    \n\n* 面向对象\n\n  * scala 对象类的属性必须赋予默认值 可用_来表示\n\n  * 属性默认是private的 不是public的\n\n    ```scala\n    class cat{\n        var name :String =\"\"\n        var age:Int =_\n             }\n    ```\n\n  ​        声明成员属性时候会自动编译生成 set get 方法\n\n     \t使用下划线给定默认值 必须指定类型\n\n  ​\t    一般使用val 声明对象引用 也可以用类型推导 \n\n  ​\t\t**当类型和后面对象类型有继承关系即多态时就必须声明实例变量的类型** 有点像泛型\n\n  ```scala\n   val cat:Cat = new cat\n  ```\n\n  \n\n  * scala 中的类不用刻意声明为public 默认是public\n\n  * 成员属性的声明\n\n    * 属性声明定义同变量\n\n    * 定义类型可以为值或者引用\n\n    * 声明一个属性必须显式的初始化\n\n    * 如果赋值为null 一定要声明属性的类型 否则该属性的类型就是Null\n\n    * 属性默认值：\n\n      * Byte Short Long Int  _对应0\n      * Float Double           _对应0.0\n      * String 和引用类型  _ 对应null\n      * Boolean                  _对应false\n\n    * 使用BeanProperty注解生成set get **且 这种方式生成的方法 与底层编译后自动生成的带$的setget方法不冲突 可以并存** \n\n      ```scala\n      import scala.beans.BeanProperty\n      \n      class A(){\n        @BeanProperty\n        var name:String=\"\"   \n      } \n      ```\n\n      \n\n  * scala 翻转循环\n\n    ```scala\n    for(i<-0 to 10 reverse){\n    \tprintln(i)\n    }\n    ```\n\n    \n\n    \n\n* scala的方法\n\n  方法就是函数 方法一般为对象的成员\n\n  ```scala\n  class cat{\n  \tdef eat()={\n  \tprintln(\"eat\")\n  \t}\n  }\n  ```\n\n* 构造器\n\n  java的构造器有固定要求 名字与类名一样 用于初始化对象 有默认无参构造器 super this .etc\n\n  scala的构造器,多个构造器可以重载  有**主构造器和辅构造器**\n\n  使用this 表示辅助构造器 可以根据参数列表来区分不同的辅助构造器\n\n  主构造器直接放在类名上声明\n\n  **主构造器会执行类定义中的所有语句，放在类中要执行的语句 除了声明的成员方法**\n\n  如果想让主构造器变成私有 那么可以在class的()前加private 这样只能通过辅助构造器去构造对象了\n\n  **主构造器的形参如果没有用任何修饰符修饰那么 这个参数是局部变量，如果主构造器的参数使用val进行修饰那么 这个属性就会成为一个私有只读属性** 变成immutable了 只读为只有get方法\n\n  ```scala\n  class A(inName:String){\n   var name=inName;\n  }\n  class B(val inName:String){\n   var name=inName;\n  }\n  ```\n\n  \n\n  ```scala\n  //私有主构造器\n  class Person private(inName:String,inAge:Int){\n   var name:String=inName\n   var age:Int=inAge\n   \n     def this(inName:String){\n         inName=name\n     }\n      override def toString:String={\n          \"name\"+name+\"age\"+age\n      }\n   \n  }\n  \n  ```\n\n  辅助构造器 使用this声明 和java中的this不一样,多个辅助构造器通过不同的形参列表进行区分 底层为java的构造器重载\n\n  **辅助构造器内第一行代码必须显式的调用主构造器**  这样做是为了显式的调用主构造器的父类构造方法\n\n  不能在辅助构造器调用该类的父类的主构造器  只有主构造器才能调用父类构造器 不能使用super.\n\n  ```scala\n  //主构造器\n  class Person(inName:String,inAge:Int){\n   var name:String=inName\n   var age:Int=inAge\n   \n     def this(inName:String){\n         inName=name\n     }\n      override def toString:String={\n          \"name\"+name+\"age\"+age\n      }\n   \t//辅助构造器\n      def this(name:String){\n          //调用主构造器 这里给的默认值 如果主构造器没有参数 那么就写this 就ok\n          this(_,_)\n          this.name=name\n      }\n  }\n  \n  ```\n\n* **对象的创建过程**\n\n  * 加载类信息 成员信息（属性及方法）及其他\n  * 在内存中开辟一块堆空间\n  * 使用父类构造器（主辅）进行初始化\n  * 使用主构造器进行属性的初始化\n  * 使用辅助构造器对属性进行再次初始化\n  * 将对象堆内存的地址赋给变量引用\n\n* scala包\n\n  除了java中的两种方式 scala还可以在同一个文件中创建多个包\n\n  ````scala\n  package com{\n  \tobjcet People{\n  \t\tmain\n  \t}\n  \tpackage scala{\n  \t\n  \t\tclass A{\n  \t\t\tdef say()={\n  \t\t\t\tprintln(\"A\")\n  \t\t\t}\n  \t\t}\n  \t\tpackage test{\n  \t\t\tclass B{\n  \t\t\t \tdef sayHello()={\n  \t\t\t \t\tprintln(\"B\")\n  \t\t\t \t}\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  ````\n\n  scala的包名和远吗所在的系统文件目录结构可以不一致 但是编译后端字节码文件路径和包名会保持一致 \n\n  scala自动引入 lang包和 scala包和 preDef包\n\n  scala的泛型使用[]中括号\n\n  import可以写在任何位置\n\n  包对象是对静态成员的抽象 包对象的名字要和包的名字一致\n\n  在包对象中定义方法变量 不能直接在包的大括号中定义会报错\n\n  ```\n  package object scala{\n  \n  }\n  pacakage scala{\n  \n  }\n  ```\n\n  scala中的可见性  priate表示私有 public一般为默认 \n\n  scala伴生类是伴生对象的静态成员或者属性的抽象封装\n\n  私有属性可以在本类中访问 也可以在伴生类中访问 \n\n  不可以用public显式的修饰属性或者方法\n\n  方法的访问权限默认为public\n\n  protected只能在子类访问 同包下不能访问\n\n  ```\n  class A{\n  \tvar name:String=\"\" //可读写\n  \tprivate var sla:Int=0 //只读\n  \t\t\n  }\n  ```\n\n  包访问权限示例，由于同包下的私有不能访问 所以使用中括号加包名表示 某个属性可以在某个包下访问\n\n  ```scala\n  class Person{\n  \tprivate [scala] val name:String=\"\"\n  }\n  ```\n\n  虽然用的protected 修饰 但是编译器生成的变量类型还是private 默认public 编译后也是private\n\n  只是该属性的访问方法是public或者private的\n\n* 包的引入\n\n  * import语句可以出现在任何地方\n\n  * 如果想要引入某个包中的所有的类 那么使用 `import scala._` 下划线\n\n  * 在需要用的时候才引用的话 那么作用域只在该代码块所在的大括号内\n\n  * 如果 多个包中有相同名字的类 可以重命名 使用{}进行重命名\n\n    ```scala\n    import scala.collection.mutable.HashMap \n    import java.util.{HashMap=>JavaHashMap}\n    ```\n\n* 面向对象\n\n  子类继承了所有属性 私有属性不能直接访问 需要通过公共方法访问\n\n  父类的protected属性 编译后也是public \n\n  \n\n  * 方法重写\n\n    使用override 关键字\n\n    ```scala\n    override def toString():String{\n    \tprintln(\"toString\")\n    }\n    ```\n\n    调用超类方法使用super关键字\n\n  * 类型检查 多态\n\n    * classOf[String] 获取String的class对象\n    * obj.isInstanceOf[String] 判断某个对象是否是String类型\n    * obj.asInstanceOf[T] 将obj对象强转为T类型\n\n  * 复写字段\n\n    * 使用override进行复写字段，java中没有属性或者字段的重写 （子类如果有同名的属性 那么父类引用调用的时候还是父类的属性，子类引用调用还是子类属性）scala中无论是子类引用还是父类引用 调用后都是子类属性\n\n    * 复写字段其实是复写方法\n\n    * 动态绑定\n\n      java的动态绑定机制\n\n      如果调用的是方法 那么jvm机会将该方法和对象内存地址绑定\n\n      如果调用的是一个属性 则没有动态绑定机制 在哪里调用就返回对应的值\n\n      scala则全部有动态绑定\n\n      * def 只能重写另个方法 即 方法只能重写另一个方法\n\n      * val只能重写另一个val属性或者 重写不带参数的def （因为 是get set方法） 带了参数就是方法的重载了\n\n      * var 只能重写另一个抽象的var\n\n        **抽象字段就是没有初始化的属性** 抽象字段要求所在类也为抽象类 标记为abstract\n\n        编译后不会生成对应的属性声明 只会生成两个对应的抽象方法 name name_$eq\n\n        ```scala\n        abstract class A{\n         \tvar name:String=_\n        }\n        class B extends A{\n            var name:String=\"\"\n        }\n        ```\n\n  * 抽象类\n\n    抽象类的属性可以没有值 没有值为抽象字段\n\n    可以有抽象字段可以有普通字段\n\n    抽象方法没有代码块\n\n    可以有抽象方法 可以有普通方法\n\n    **抽象的方法或者属性就不能用private修饰了**\n\n    ```scala\n    abstract classA{\n    \tvar name:String\n    \t\n    \tdef cry()\n    \tdef cry(inName:String)\n    }\n    ```\n\n  * 匿名子类\n\n    ```scala\n    abstract class A{\n     \tvar name :String\n     \tdef cry()\n    }\n    object anno {\n    main{\n    \tvar b = new A{\n    \t\toverride var name :String=\"\"\n    \t\toverride def cry():Unit{\n    \t\t\tprintln(\"cry\")\n    \t\t}\n    \t}\n        b.cry()\n    }\n    }\n    ```\n\n  * 继承层次\n\n    * Any \n\n      * AnyVal \n        * 基础类型  \n      * AnyRef \n        * collections\n        * javaclass \n        * other\n        * Null\n\n      * Nothing\n\n    * Any是顶级\n    * AnyRef相当于Object\n    * Null  shi null 类型\n    * Nothing 没有实力  泛型 底层类 \n\n  * 伴生对象\n\n    将静态属性和静态方法放到 该类的伴生对象中声明使用,抽象封装\n\n    这个和包对象有异曲同工之妙\n\n    伴生对象必须与该类同名\n\n    伴生对象依赖`public static final MOUDLE$`\n\n  * apply 方法\n\n    在伴生对象定义apply方法 那么就可以实现类名（参数）方式创建对象实例\n\n    ```scala\n    class Pig(inName:String){\n    var name :Stirng=inName\n    }\n    object Pig{\n    \tdef apply(inName:String):Pig=new Pig(inName)\n        def apply():Pig= new Pig()\n    }\n    \n    ```\n\n* trait\n\n  trait等价与接口+抽象类\n\n  动态混入 mix in\n\n  trait  继承\n\n  在 scala中 java的接口可以作为trait\n\n  特质可以看作对继承的一种补充\n\n  ```scala\n  trait behav {\n  \ttrait codes\n  }\n  ```\n\n  * 如果没有父类 多个特质继承\n\n    ```scala\n    class A extends behav with traitA ...{\n    \n    }\n    ```\n\n    \n\n  * 如果有父类  多个特质\n\n    ```scala\n    class B extends Father with   behav with  traitA with...{\n    \n    }\n    ```\n\n    当trait中有抽象和普通,会编译为两个class对象 一个trait.class接口 一个trait$.class抽象类 也是implement trait.class接口 但普通方法依赖MOUDLE来实现抽象类中的普通方法\n\n    当trait中只有抽象方法 生成 trait.class 接口 implements\n\n  \n\n  \n\n  * 使用 type 进行类型别名\n\n  * 动态混入 \n\n    解耦 \n\n    scala特有 补休该类的声明定义下 扩展类的功能 \n\n    不影响原有继承关系的基础上 给指定的类扩展功能\n\n    ```scala\n     class A{\n     \n     }\n    abstract class B{\n        def say();\n    }\n     object Mains{\n     \tmain{\n            //不修改类定义声明的情况下 进行动态混入\n     \t\tval a= new A with traitA\n            //含有抽象方法的类动态混入\n            var b = new B with traitB{\n                def say (){\n                    println(\"hi\")\n                }\n            }\n     \t}\n     }\n    ```\n\n  * 叠加特质\n\n    构建对象的时候 混入多个特质  即叠加特质\n\n    特质声明从左到右 方法执行顺序从右到左\n\n    ```scala\n    object A {\n        main {\n            var a = new A with traitA with traitB\n            a.say()\n        }\n    }\n    ```\n\n    如果 traitA 和 traitB 有共同的父类继承  那么 父类的构造只会走一次，叠加特质的初始化 会从左到右\n\n    如果traitA 和traitB 都有say 方法 那么 先走traitB 的方法 再执行 traitA的方法  遵循栈 从右向左\n\n    当有super的方法调用的时候 指的是左边的traitA的方法 当左边再没有trait的时候 直接找父类trait的方法\n\n    可以使用[?] 泛型 指定super[T]的调用 T类型必须是当前混入trait的父类\n\n  * 对象构造方式\n\n    * new 对象\n    * apply\n    * 匿名子类\n    * 动态混入\n\n  * 富接口\n\n    既有抽象方法又有非抽象方法的trait\n\n  * 特质中的具体字段\n\n    特质中的初始化了的字段 就是具体化字段 否则是抽象字段\n\n    混入该特质的类就拥有了该字段，该字段不是继承 而是直接加入到该类中\n\n    特质中的抽象字段 在具体的类的继承中必须被重写初始化\n\n  * 特质的构造顺序\n\n    ​\t普通特质继承的构造顺序\n\n    * 调用该类超类构造器\n    * 调用第一个特质的父类及爷类 构造器  依次往上推 如果执行过不再执行\n    * 调用第一个特质的构造器\n    * 调用第二个特质的父类及爷类 构造器  依次往上推 如果执行过不再执行\n    * 调用第二个特质的构造器\n    * ...\n\n    ```scala\n    class a extend b with traita with traitb{\n    \t\n    }\n    ```\n\n    动态混入对的构造顺序\n\n    * 先创建对象\n    * 在执行特质的构造 同上面普通特质继承的实现\n\n    ```scala\n    var c1 = new A with traitA with traitB\n    ```\n\n    两种方式 的区别是是否创建了该类的对象\n\n  * 扩展类的特质\n\n    特质可以继承类  用来拓展该类的一些功能\n\n    ```scala\n     trait log extends Exception{\n      def printE(){\n    \t  println(getMessage())\n      }\n     }\n    ```\n\n    所有混入该特质的类 会自动成为该特质所继承的超类的子类\n\n    若某个特质已经继承了某个类 那么混入该特质的类继承的类是该特质的超类的子类 否则会出现多继承现象\n\n  * 特质自身类型\n\n    解决特质循环依赖问题\n\n    限制混入该特质的类的类型\n\n    ```scala\n    class A extends Exception with log\n    ```\n\n    ```scala\n    trait logger{\n     this：Excption=>\n     def log():Unit={\n     \tprintln(getMessage())\n     }\n    }\n    ```\n\n  * 嵌套类\n\n    类中写类 类似java内部类\n\n    scala的静态内部类 是放在伴生类中的\n\n    ````scala\n    var innerClass=new outerClass.InnerClass\n    ````\n\n    内部类访问外部类的属性\n\n    * 外部类名.this.属性名\n\n    * 外部类名的别名.属性名\n\n      属性定义要在别名后面\n\n      ```scala\n      class Outer{\n      \tmyOuter=>\n      \t\n      \tclass innter {\n      \t\tvar name=\"\"\n      \t\tdef ages():Unit={\n      \t\t\tvar  outer = myOuter.age\n      \t\t}\n      \t}\n      \tvar age=1\n      }\n       \n      }\n      ```\n\n    \n\n  * 类型投影\n\n    屏蔽外部对象对内部类对象的影响 使用# 链接外部类与内部类\n\n    ```scala\n    def say(in:OuterClass#innerClass){\n    \tprint(\"say\")\n    }\n    ```\n\n  \n\n* 隐式转换和隐式值\n\n  * 隐式转换函数 用**implicit**关键字声明**带有单个参数的函数**  可以自动将值从一种类型转换为另一种类型\n\n  ```scala\n  implicit def fnc(d:Double):Int={\n  \t\td.toInt\n  }\n  ```\n\n  ​\t可以使用隐式转换给类动态添加功能\n\n  ​    隐式转换函数跟函数名没关系 跟函数签名（入参和返回值有关系）单个类型的隐式转换函数必须是唯一的   \t要不然编译器不知道使用哪个隐式转换函数\n\n  * 隐式值 就是隐式变量 将某个形参变量标志为隐式 implicit  编译器会在方法省略隐式参数的情况下去搜索作用于内的隐式值作为默认参数\n\n    隐式值使用 的方法调用的时候 不用带参数列表 直接方法名调用了\n\n    隐式值和函数默认值同时存在 隐式值级别高 没有隐式值 走默认值\n\n  ```scala\n    object Mains{\n        \n        main{\n        \timplicit val str:String=\"A\"\n            def hello(implicit name:Stirng):Unit={\n            \tprint(name)\n            }\n            //直接调用 不带括号 \n            hello \n        }\n    }\n  ```\n\n  * 隐式类\n\n    可以用隐式类来封装隐式值和隐式方法\n\n    * 构造器的构造参数有且只能有一个\n\n    * 隐式类必须被定义在类或者伴生对象或者包对象中，即隐式类不能是顶级的类\n\n    * 隐式类不能是case class即样式类\n\n    * 作用域内不能有与之同名称的标识符\n\n      ```scala\n      implicit class DB(val n:Mysql){\n      \tdef say():String={\n      \t\tn+\"scala\"\n      \t}\n      }\n      main{\n          var mysql=new Mysql\n          //当在DB隐式类的作用域 创建mysql对象 该隐式类就会生效\n      }\n      ```\n\n  * 隐式转换时机\n\n    **即什么时候使用隐式转换**\n\n    * 当方法中的参数的类型与目标类型不一致\n    * 当对象调用所在类中不存在的方法或成员属性时候，编译器会自动将对象进行隐式转换（根据类型）\n\n  * 编译器如何查找隐式转换\n\n    * 在当前代码作用域下查找隐式实体\n    * 如果上述查找失败 那么继续在隐式参数的类型的作用域里查找\n      * T with A with B with C  在ABC中都搜索\n      * 如果T 是参数化类型  比如List[String]  会在List和String的伴生对象找\n      * 如果T是个单利对象 p.T  那么 p 对象也会被搜索\n      * 如果T是个类型注入 即内部类  即S#T 那么S和T 都会被搜索\n\n  \n\n  * 隐式转换前提\n\n    不能存在二义性\n\n    隐式操作不能嵌套使用 循环调用\n\n  ","slug":"Scala","published":1,"updated":"2022-09-03T07:30:55.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz84y0020twfat85uoyvu","content":"<p>以前看scala的一些笔记<a id=\"more\"></a></p>\n<ul>\n<li><p>scala命名规范</p>\n<ul>\n<li><p>有意义简明</p>\n</li>\n<li><p>驼峰式</p>\n</li>\n</ul>\n</li>\n<li><p>运算符</p>\n<ul>\n<li><p>算数运算符</p>\n<ul>\n<li><p>除以</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i=<span class=\"number\">10</span>/<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">//此处i的值为3.0 因为默认数值类型为int 所以除法获得的结果只能保留整数</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>* 取模=a-a/b*b\n\n  <figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> j=<span class=\"number\">10</span>%<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">j=<span class=\"number\">-10</span>%<span class=\"number\">3</span>(<span class=\"number\">-10</span>-(<span class=\"number\">-3</span>)*<span class=\"number\">3</span>=<span class=\"number\">-10</span>+<span class=\"number\">9</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n  <figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ...</span><br><span class=\"line\"> <span class=\"comment\">//还有97天放假 还有多少个星期</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">97</span> / <span class=\"number\">7</span>;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> b = <span class=\"number\">97</span> % <span class=\"number\">7</span>;</span><br><span class=\"line\">  println(<span class=\"string\">\"当前剩余\"</span> + a + <span class=\"string\">\"个星期零\"</span> + b + <span class=\"string\">\"天\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    a = a + <span class=\"number\">1</span></span><br><span class=\"line\">    println(a)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    println(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//定义变量保存华氏温度 5/9*（华氏温度-100） 请求华氏温度对应的摄氏温度 测试温度为232.5</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> sheshi= huaShi(<span class=\"number\">232.5</span>);</span><br><span class=\"line\">  println(sheshi)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">huaShi</span></span>(huashi: <span class=\"type\">Double</span>): <span class=\"type\">String</span> = &#123;</span><br><span class=\"line\">  (<span class=\"number\">5.0</span> / <span class=\"number\">9</span> * (huashi - <span class=\"number\">100.00</span>)).formatted(<span class=\"string\">\"%.2f\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul>\n<li><p>赋值运算符</p>\n<p>scala中没有++和– 用+= -= 代替</p>\n</li>\n<li><p>比较运算符 （关系运算符）</p>\n<p>同java，&gt;&lt;=!=,比较的时候左右类型要保持一致</p>\n</li>\n<li><p>逻辑运算符</p>\n<p>返回boolean</p>\n</li>\n<li><p>位运算符</p>\n<p>同java</p>\n<p>scala 不支持三目运算符</p>\n<p>运算符优先级别</p>\n<p>（）[] 级别最高</p>\n<ul>\n<li><p>单目运算</p>\n</li>\n<li><p>算术运算</p>\n</li>\n<li><p>移位运算</p>\n</li>\n<li><p>比较运算</p>\n</li>\n<li><p>位运算</p>\n</li>\n<li><p>关系</p>\n</li>\n<li><p>赋值</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>键盘输入语句</p>\n</li>\n<li><p>循环守卫</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i&lt;<span class=\"number\">-1</span> to <span class=\"number\">3</span> <span class=\"keyword\">if</span> i!=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">println(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>for循环 util 左包右不包</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i&lt;<span class=\"number\">-1</span>  util <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">\tprintln(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>循环引入变量</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i&lt;- <span class=\"number\">1</span> to <span class=\"number\">3</span> ; j=<span class=\"number\">4</span>-i)&#123;</span><br><span class=\"line\">\tprintln(j)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多重循环</p>\n<p>scala的多重循环 相当于嵌套for循环</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i&lt;<span class=\"number\">-1</span> to3 ; j&lt;<span class=\"number\">-3</span> to <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">       println(i)</span><br><span class=\"line\"> </span><br><span class=\"line\">       println(j)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>循环返回值 使用yeild</p>\n<p>将 1-3遍历 将循环得到的i放到vector中 作为变量result  yield 表示将哪些逻辑作为返回  yield后可以接代码块</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result= <span class=\"keyword\">for</span>(i&lt;<span class=\"number\">-1</span> to <span class=\"number\">3</span>) <span class=\"keyword\">yield</span> i</span><br><span class=\"line\">println(result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> res=<span class=\"keyword\">for</span> (i&lt;<span class=\"number\">-3</span> to <span class=\"number\">10</span>) <span class=\"keyword\">yield</span>  i+<span class=\"number\">1</span></span><br><span class=\"line\">println(res)</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>for循环 步长 </p>\n<p>以下代码 1到10 每隔步长打印</p>\n<p>同样可以用循环守卫实现</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i &lt;- <span class=\"type\">Range</span>(<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">println(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>while循环没有返回值 返回的是（）即Unit</p>\n</li>\n<li><p>break continue 不支持 在 <code>util.control.Breaks._</code> 使用 break() ,breakable(op:=&gt;Unit)</p>\n</li>\n<li><p>高阶函数传入代码块时候 小括号会换成大括号 </p>\n</li>\n<li><p>使用if-else 或循环守卫实现continue</p>\n</li>\n<li><p>函数式编程</p>\n<ul>\n<li><p>函数定义声明</p>\n<p>scala中函数和方法几乎等同 </p>\n<p>函数的形参列表和返回值列表数据类型可以是值类型或引用类型</p>\n<p>返回值加return 函数就不能自动推断返回类型 </p>\n<p>如果没有声明函数返回类型 即使加了return 也没有返回值</p>\n<p>如果不确定返回值 可用用Any类型</p>\n<p>可以在函数中定义函数 方法中定义方法</p>\n<p>如果函数形参有默认值 不传参那么走默认值 否则传参会覆盖默认值 从左到右  也可以使用带名参数进行覆盖指定形参</p>\n<p><code>mysql(host=&quot;127.0.0.1&quot;,pwd=&quot;123&quot;)</code></p>\n<p>形参类型默认为val</p>\n<p>scala支持可变参数,可变参数只能出现在形参列表的最后 使用* 来表示可变参数,可变参数其实是个序列集合</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span></span>(n1: <span class=\"type\">Int</span>, args: <span class=\"type\">Int</span>*): <span class=\"type\">Int</span> = &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( item&lt;-args  ) &#123;</span><br><span class=\"line\">    println(item)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  args.length</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>函数运行机制</p>\n<p>栈与堆内存的调用</p>\n</li>\n<li><p><strong>递归 （推荐使用递归）</strong></p>\n<p>递归函数一定要指定返回类型</p>\n</li>\n<li><p>过程</p>\n<p>将函数返回Unit的函数 称为过程函数 如果没有返回值 那么 函数签名上的=可以省略</p>\n</li>\n<li><p>惰性函数与异常</p>\n<p>尽可能延迟表达式求值， 需要时提供元素 无需预先计算他们 lazyLoad ,使用 lazy 关键字 只能修饰val </p>\n<p>只有当lazy变量被使用时候 才会加载使用</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">lazy</span>  <span class=\"keyword\">val</span> lazyV = sum(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">  println(lazyV)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>scala的异常和java稍微有区别 使用 try catch finally </p>\n<p>1.运行时异常 2.编译（checked）异常 java中的区分</p>\n<p>scala中只有运行时异常,使用case 匹配 不同异常</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mockExceptions</span></span>(): <span class=\"type\">Unit</span> =&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> i = <span class=\"number\">10</span>/<span class=\"number\">0</span></span><br><span class=\"line\">  &#125;<span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span>  ex:<span class=\"type\">ArithmeticException</span>=&gt;&#123;</span><br><span class=\"line\">      println(<span class=\"string\">\"catched a ArithmeticException\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span>  ex:<span class=\"type\">Exception</span>=&gt;&#123;</span><br><span class=\"line\">      println(<span class=\"string\">\"catched a exception\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\" finally printed\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>throw 表达式 是有类型的 为Nothing</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">throwNothing</span></span>():<span class=\"type\">Nothing</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">Exception</span>(<span class=\"string\">\"Nothing\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用@throws 注解 来表示抛出异常</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@throws</span>(classOf[<span class=\"type\">NumberFormatException</span>])</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fn1</span></span>()=&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"abc\"</span>.toInt</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>值函数</p>\n</li>\n<li><p>高阶函数</p>\n</li>\n<li><p>闭包</p>\n</li>\n<li><p>应用函数</p>\n</li>\n<li><p>柯里化函数 抽象控制</p>\n</li>\n</ul>\n<ul>\n<li><p>面向对象</p>\n<ul>\n<li><p>scala 对象类的属性必须赋予默认值 可用_来表示</p>\n</li>\n<li><p>属性默认是private的 不是public的</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">cat</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name :<span class=\"type\">String</span> =<span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> age:<span class=\"type\">Int</span> =_</span><br><span class=\"line\">         &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>​        声明成员属性时候会自动编译生成 set get 方法</p>\n<pre><code>使用下划线给定默认值 必须指定类型</code></pre><p>​        一般使用val 声明对象引用 也可以用类型推导 </p>\n<p>​        <strong>当类型和后面对象类型有继承关系即多态时就必须声明实例变量的类型</strong> 有点像泛型</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> cat:<span class=\"type\">Cat</span> = <span class=\"keyword\">new</span> cat</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>scala 中的类不用刻意声明为public 默认是public</p>\n</li>\n<li><p>成员属性的声明</p>\n<ul>\n<li><p>属性声明定义同变量</p>\n</li>\n<li><p>定义类型可以为值或者引用</p>\n</li>\n<li><p>声明一个属性必须显式的初始化</p>\n</li>\n<li><p>如果赋值为null 一定要声明属性的类型 否则该属性的类型就是Null</p>\n</li>\n<li><p>属性默认值：</p>\n<ul>\n<li>Byte Short Long Int  _对应0</li>\n<li>Float Double           _对应0.0</li>\n<li>String 和引用类型  _ 对应null</li>\n<li>Boolean                  _对应false</li>\n</ul>\n</li>\n<li><p>使用BeanProperty注解生成set get <strong>且 这种方式生成的方法 与底层编译后自动生成的带$的setget方法不冲突 可以并存</strong> </p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.beans.<span class=\"type\">BeanProperty</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@BeanProperty</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name:<span class=\"type\">String</span>=<span class=\"string\">\"\"</span>   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>scala 翻转循环</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i&lt;<span class=\"number\">-0</span> to <span class=\"number\">10</span> reverse)&#123;</span><br><span class=\"line\">\tprintln(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>scala的方法</p>\n<p>方法就是函数 方法一般为对象的成员</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">cat</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eat</span></span>()=&#123;</span><br><span class=\"line\">\tprintln(<span class=\"string\">\"eat\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造器</p>\n<p>java的构造器有固定要求 名字与类名一样 用于初始化对象 有默认无参构造器 super this .etc</p>\n<p>scala的构造器,多个构造器可以重载  有<strong>主构造器和辅构造器</strong></p>\n<p>使用this 表示辅助构造器 可以根据参数列表来区分不同的辅助构造器</p>\n<p>主构造器直接放在类名上声明</p>\n<p><strong>主构造器会执行类定义中的所有语句，放在类中要执行的语句 除了声明的成员方法</strong></p>\n<p>如果想让主构造器变成私有 那么可以在class的()前加private 这样只能通过辅助构造器去构造对象了</p>\n<p><strong>主构造器的形参如果没有用任何修饰符修饰那么 这个参数是局部变量，如果主构造器的参数使用val进行修饰那么 这个属性就会成为一个私有只读属性</strong> 变成immutable了 只读为只有get方法</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>(<span class=\"params\">inName:<span class=\"type\">String</span></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> name=inName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>(<span class=\"params\">val inName:<span class=\"type\">String</span></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> name=inName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n  <figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//私有主构造器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"title\">private</span>(<span class=\"params\">inName:<span class=\"type\">String</span>,inAge:<span class=\"type\">Int</span></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> name:<span class=\"type\">String</span>=inName</span><br><span class=\"line\"> <span class=\"keyword\">var</span> age:<span class=\"type\">Int</span>=inAge</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(inName:<span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">       inName=name</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span></span>:<span class=\"type\">String</span>=&#123;</span><br><span class=\"line\">        <span class=\"string\">\"name\"</span>+name+<span class=\"string\">\"age\"</span>+age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  辅助构造器 使用this声明 和java中的this不一样,多个辅助构造器通过不同的形参列表进行区分 底层为java的构造器重载</p>\n<p>  <strong>辅助构造器内第一行代码必须显式的调用主构造器</strong>  这样做是为了显式的调用主构造器的父类构造方法</p>\n<p>  不能在辅助构造器调用该类的父类的主构造器  只有主构造器才能调用父类构造器 不能使用super.</p>\n  <figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//主构造器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">inName:<span class=\"type\">String</span>,inAge:<span class=\"type\">Int</span></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> name:<span class=\"type\">String</span>=inName</span><br><span class=\"line\"> <span class=\"keyword\">var</span> age:<span class=\"type\">Int</span>=inAge</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(inName:<span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">       inName=name</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span></span>:<span class=\"type\">String</span>=&#123;</span><br><span class=\"line\">        <span class=\"string\">\"name\"</span>+name+<span class=\"string\">\"age\"</span>+age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> \t<span class=\"comment\">//辅助构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(name:<span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用主构造器 这里给的默认值 如果主构造器没有参数 那么就写this 就ok</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>(_,_)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>对象的创建过程</strong></p>\n<ul>\n<li>加载类信息 成员信息（属性及方法）及其他</li>\n<li>在内存中开辟一块堆空间</li>\n<li>使用父类构造器（主辅）进行初始化</li>\n<li>使用主构造器进行属性的初始化</li>\n<li>使用辅助构造器对属性进行再次初始化</li>\n<li>将对象堆内存的地址赋给变量引用</li>\n</ul>\n</li>\n<li><p>scala包</p>\n<p>除了java中的两种方式 scala还可以在同一个文件中创建多个包</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com&#123;</span><br><span class=\"line\">\tobjcet <span class=\"type\">People</span>&#123;</span><br><span class=\"line\">\t\tmain</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">package</span> scala&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span></span>()=&#123;</span><br><span class=\"line\">\t\t\t\tprintln(<span class=\"string\">\"A\"</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">package</span> test&#123;</span><br><span class=\"line\">\t\t\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">\t\t\t \t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>()=&#123;</span><br><span class=\"line\">\t\t\t \t\tprintln(<span class=\"string\">\"B\"</span>)</span><br><span class=\"line\">\t\t\t \t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>scala的包名和远吗所在的系统文件目录结构可以不一致 但是编译后端字节码文件路径和包名会保持一致 </p>\n<p>scala自动引入 lang包和 scala包和 preDef包</p>\n<p>scala的泛型使用[]中括号</p>\n<p>import可以写在任何位置</p>\n<p>包对象是对静态成员的抽象 包对象的名字要和包的名字一致</p>\n<p>在包对象中定义方法变量 不能直接在包的大括号中定义会报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package object scala&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pacakage scala&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>scala中的可见性  priate表示私有 public一般为默认 </p>\n<p>scala伴生类是伴生对象的静态成员或者属性的抽象封装</p>\n<p>私有属性可以在本类中访问 也可以在伴生类中访问 </p>\n<p>不可以用public显式的修饰属性或者方法</p>\n<p>方法的访问权限默认为public</p>\n<p>protected只能在子类访问 同包下不能访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A&#123;</span><br><span class=\"line\">\tvar name:String=&quot;&quot; //可读写</span><br><span class=\"line\">\tprivate var sla:Int=0 //只读</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>包访问权限示例，由于同包下的私有不能访问 所以使用中括号加包名表示 某个属性可以在某个包下访问</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> [scala] <span class=\"keyword\">val</span> name:<span class=\"type\">String</span>=<span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虽然用的protected 修饰 但是编译器生成的变量类型还是private 默认public 编译后也是private</p>\n<p>只是该属性的访问方法是public或者private的</p>\n</li>\n<li><p>包的引入</p>\n<ul>\n<li><p>import语句可以出现在任何地方</p>\n</li>\n<li><p>如果想要引入某个包中的所有的类 那么使用 <code>import scala._</code> 下划线</p>\n</li>\n<li><p>在需要用的时候才引用的话 那么作用域只在该代码块所在的大括号内</p>\n</li>\n<li><p>如果 多个包中有相同名字的类 可以重命名 使用{}进行重命名</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.mutable.<span class=\"type\">HashMap</span> </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.&#123;<span class=\"type\">HashMap</span>=&gt;<span class=\"type\">JavaHashMap</span>&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>面向对象</p>\n<p>子类继承了所有属性 私有属性不能直接访问 需要通过公共方法访问</p>\n<p>父类的protected属性 编译后也是public </p>\n</li>\n</ul>\n<ul>\n<li><p>方法重写</p>\n<p>使用override 关键字</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span></span>():<span class=\"type\">String</span>&#123;</span><br><span class=\"line\">\tprintln(<span class=\"string\">\"toString\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用超类方法使用super关键字</p>\n</li>\n<li><p>类型检查 多态</p>\n<ul>\n<li>classOf[String] 获取String的class对象</li>\n<li>obj.isInstanceOf[String] 判断某个对象是否是String类型</li>\n<li>obj.asInstanceOf[T] 将obj对象强转为T类型</li>\n</ul>\n</li>\n<li><p>复写字段</p>\n<ul>\n<li><p>使用override进行复写字段，java中没有属性或者字段的重写 （子类如果有同名的属性 那么父类引用调用的时候还是父类的属性，子类引用调用还是子类属性）scala中无论是子类引用还是父类引用 调用后都是子类属性</p>\n</li>\n<li><p>复写字段其实是复写方法</p>\n</li>\n<li><p>动态绑定</p>\n<p>java的动态绑定机制</p>\n<p>如果调用的是方法 那么jvm机会将该方法和对象内存地址绑定</p>\n<p>如果调用的是一个属性 则没有动态绑定机制 在哪里调用就返回对应的值</p>\n<p>scala则全部有动态绑定</p>\n<ul>\n<li><p>def 只能重写另个方法 即 方法只能重写另一个方法</p>\n</li>\n<li><p>val只能重写另一个val属性或者 重写不带参数的def （因为 是get set方法） 带了参数就是方法的重载了</p>\n</li>\n<li><p>var 只能重写另一个抽象的var</p>\n<p><strong>抽象字段就是没有初始化的属性</strong> 抽象字段要求所在类也为抽象类 标记为abstract</p>\n<p>编译后不会生成对应的属性声明 只会生成两个对应的抽象方法 name name_$eq</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">var</span> name:<span class=\"type\">String</span>=_</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name:<span class=\"type\">String</span>=<span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>抽象类</p>\n<p>抽象类的属性可以没有值 没有值为抽象字段</p>\n<p>可以有抽象字段可以有普通字段</p>\n<p>抽象方法没有代码块</p>\n<p>可以有抽象方法 可以有普通方法</p>\n<p><strong>抽象的方法或者属性就不能用private修饰了</strong></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> classA&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name:<span class=\"type\">String</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cry</span></span>()</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cry</span></span>(inName:<span class=\"type\">String</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匿名子类</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">var</span> name :<span class=\"type\">String</span></span><br><span class=\"line\"> \t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cry</span></span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">anno</span> </span>&#123;</span><br><span class=\"line\">main&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"type\">A</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">override</span> <span class=\"keyword\">var</span> name :<span class=\"type\">String</span>=<span class=\"string\">\"\"</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cry</span></span>():<span class=\"type\">Unit</span>&#123;</span><br><span class=\"line\">\t\t\tprintln(<span class=\"string\">\"cry\"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    b.cry()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>继承层次</p>\n<ul>\n<li><p>Any </p>\n<ul>\n<li><p>AnyVal </p>\n<ul>\n<li>基础类型  </li>\n</ul>\n</li>\n<li><p>AnyRef </p>\n<ul>\n<li>collections</li>\n<li>javaclass </li>\n<li>other</li>\n<li>Null</li>\n</ul>\n</li>\n<li><p>Nothing</p>\n</li>\n</ul>\n</li>\n<li><p>Any是顶级</p>\n</li>\n<li><p>AnyRef相当于Object</p>\n</li>\n<li><p>Null  shi null 类型</p>\n</li>\n<li><p>Nothing 没有实力  泛型 底层类 </p>\n</li>\n</ul>\n</li>\n<li><p>伴生对象</p>\n<p>将静态属性和静态方法放到 该类的伴生对象中声明使用,抽象封装</p>\n<p>这个和包对象有异曲同工之妙</p>\n<p>伴生对象必须与该类同名</p>\n<p>伴生对象依赖<code>public static final MOUDLE$</code></p>\n</li>\n<li><p>apply 方法</p>\n<p>在伴生对象定义apply方法 那么就可以实现类名（参数）方式创建对象实例</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pig</span>(<span class=\"params\">inName:<span class=\"type\">String</span></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name :<span class=\"type\">Stirng</span>=inName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Pig</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(inName:<span class=\"type\">String</span>):<span class=\"type\">Pig</span>=<span class=\"keyword\">new</span> <span class=\"type\">Pig</span>(inName)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>():<span class=\"type\">Pig</span>= <span class=\"keyword\">new</span> <span class=\"type\">Pig</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<ul>\n<li><p>trait</p>\n<p>trait等价与接口+抽象类</p>\n<p>动态混入 mix in</p>\n<p>trait  继承</p>\n<p>在 scala中 java的接口可以作为trait</p>\n<p>特质可以看作对继承的一种补充</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">behav</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">codes</span></span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>如果没有父类 多个特质继承</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">extends</span> <span class=\"title\">behav</span> <span class=\"keyword\">with</span> <span class=\"title\">traitA</span> ...</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>如果有父类  多个特质</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span> <span class=\"keyword\">with</span>   <span class=\"title\">behav</span> <span class=\"keyword\">with</span>  <span class=\"title\">traitA</span> <span class=\"keyword\">with</span>...</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当trait中有抽象和普通,会编译为两个class对象 一个trait.class接口 一个trait$.class抽象类 也是implement trait.class接口 但普通方法依赖MOUDLE来实现抽象类中的普通方法</p>\n<p>当trait中只有抽象方法 生成 trait.class 接口 implements</p>\n</li>\n</ul>\n<ul>\n<li><p>使用 type 进行类型别名</p>\n</li>\n<li><p>动态混入 </p>\n<p>解耦 </p>\n<p>scala特有 补休该类的声明定义下 扩展类的功能 </p>\n<p>不影响原有继承关系的基础上 给指定的类扩展功能</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span></span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Mains</span></span>&#123;</span><br><span class=\"line\"> \tmain&#123;</span><br><span class=\"line\">        <span class=\"comment\">//不修改类定义声明的情况下 进行动态混入</span></span><br><span class=\"line\"> \t\t<span class=\"keyword\">val</span> a= <span class=\"keyword\">new</span> <span class=\"type\">A</span> <span class=\"keyword\">with</span> traitA</span><br><span class=\"line\">        <span class=\"comment\">//含有抽象方法的类动态混入</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"type\">B</span> <span class=\"keyword\">with</span> traitB&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span> </span>()&#123;</span><br><span class=\"line\">                println(<span class=\"string\">\"hi\"</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>叠加特质</p>\n<p>构建对象的时候 混入多个特质  即叠加特质</p>\n<p>特质声明从左到右 方法执行顺序从右到左</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    main &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"type\">A</span> <span class=\"keyword\">with</span> traitA <span class=\"keyword\">with</span> traitB</span><br><span class=\"line\">        a.say()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果 traitA 和 traitB 有共同的父类继承  那么 父类的构造只会走一次，叠加特质的初始化 会从左到右</p>\n<p>如果traitA 和traitB 都有say 方法 那么 先走traitB 的方法 再执行 traitA的方法  遵循栈 从右向左</p>\n<p>当有super的方法调用的时候 指的是左边的traitA的方法 当左边再没有trait的时候 直接找父类trait的方法</p>\n<p>可以使用[?] 泛型 指定super[T]的调用 T类型必须是当前混入trait的父类</p>\n</li>\n<li><p>对象构造方式</p>\n<ul>\n<li>new 对象</li>\n<li>apply</li>\n<li>匿名子类</li>\n<li>动态混入</li>\n</ul>\n</li>\n<li><p>富接口</p>\n<p>既有抽象方法又有非抽象方法的trait</p>\n</li>\n<li><p>特质中的具体字段</p>\n<p>特质中的初始化了的字段 就是具体化字段 否则是抽象字段</p>\n<p>混入该特质的类就拥有了该字段，该字段不是继承 而是直接加入到该类中</p>\n<p>特质中的抽象字段 在具体的类的继承中必须被重写初始化</p>\n</li>\n<li><p>特质的构造顺序</p>\n<p>​    普通特质继承的构造顺序</p>\n<ul>\n<li>调用该类超类构造器</li>\n<li>调用第一个特质的父类及爷类 构造器  依次往上推 如果执行过不再执行</li>\n<li>调用第一个特质的构造器</li>\n<li>调用第二个特质的父类及爷类 构造器  依次往上推 如果执行过不再执行</li>\n<li>调用第二个特质的构造器</li>\n<li>…</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">a</span> <span class=\"title\">extend</span> <span class=\"title\">b</span> <span class=\"keyword\">with</span> <span class=\"title\">traita</span> <span class=\"keyword\">with</span> <span class=\"title\">traitb</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>动态混入对的构造顺序</p>\n<ul>\n<li>先创建对象</li>\n<li>在执行特质的构造 同上面普通特质继承的实现</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c1 = <span class=\"keyword\">new</span> <span class=\"type\">A</span> <span class=\"keyword\">with</span> traitA <span class=\"keyword\">with</span> traitB</span><br></pre></td></tr></table></figure>\n\n<p>两种方式 的区别是是否创建了该类的对象</p>\n</li>\n<li><p>扩展类的特质</p>\n<p>特质可以继承类  用来拓展该类的一些功能</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">log</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printE</span></span>()&#123;</span><br><span class=\"line\">  println(getMessage())</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所有混入该特质的类 会自动成为该特质所继承的超类的子类</p>\n<p>若某个特质已经继承了某个类 那么混入该特质的类继承的类是该特质的超类的子类 否则会出现多继承现象</p>\n</li>\n<li><p>特质自身类型</p>\n<p>解决特质循环依赖问题</p>\n<p>限制混入该特质的类的类型</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> <span class=\"keyword\">with</span> <span class=\"title\">log</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">logger</span></span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>：<span class=\"type\">Excption</span>=&gt;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>():<span class=\"type\">Unit</span>=&#123;</span><br><span class=\"line\"> \tprintln(getMessage())</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>嵌套类</p>\n<p>类中写类 类似java内部类</p>\n<p>scala的静态内部类 是放在伴生类中的</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> innerClass=<span class=\"keyword\">new</span> outerClass.<span class=\"type\">InnerClass</span></span><br></pre></td></tr></table></figure>\n\n<p>内部类访问外部类的属性</p>\n<ul>\n<li><p>外部类名.this.属性名</p>\n</li>\n<li><p>外部类名的别名.属性名</p>\n<p>属性定义要在别名后面</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span></span>&#123;</span><br><span class=\"line\">\tmyOuter=&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">innter</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> name=<span class=\"string\">\"\"</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ages</span></span>():<span class=\"type\">Unit</span>=&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span>  outer = myOuter.age</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> age=<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>类型投影</p>\n<p>屏蔽外部对象对内部类对象的影响 使用# 链接外部类与内部类</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span></span>(in:<span class=\"type\">OuterClass</span>#innerClass)&#123;</span><br><span class=\"line\">\tprint(<span class=\"string\">\"say\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>隐式转换和隐式值</p>\n<ul>\n<li>隐式转换函数 用<strong>implicit</strong>关键字声明<strong>带有单个参数的函数</strong>  可以自动将值从一种类型转换为另一种类型</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">implicit</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fnc</span></span>(d:<span class=\"type\">Double</span>):<span class=\"type\">Int</span>=&#123;</span><br><span class=\"line\">\t\td.toInt</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    可以使用隐式转换给类动态添加功能</p>\n<p>​    隐式转换函数跟函数名没关系 跟函数签名（入参和返回值有关系）单个类型的隐式转换函数必须是唯一的       要不然编译器不知道使用哪个隐式转换函数</p>\n<ul>\n<li><p>隐式值 就是隐式变量 将某个形参变量标志为隐式 implicit  编译器会在方法省略隐式参数的情况下去搜索作用于内的隐式值作为默认参数</p>\n<p>隐式值使用 的方法调用的时候 不用带参数列表 直接方法名调用了</p>\n<p>隐式值和函数默认值同时存在 隐式值级别高 没有隐式值 走默认值</p>\n</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Mains</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    main&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">implicit</span> <span class=\"keyword\">val</span> str:<span class=\"type\">String</span>=<span class=\"string\">\"A\"</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span>(<span class=\"keyword\">implicit</span> name:<span class=\"type\">Stirng</span>):<span class=\"type\">Unit</span>=&#123;</span><br><span class=\"line\">        \tprint(name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//直接调用 不带括号 </span></span><br><span class=\"line\">        hello </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>隐式类</p>\n<p>可以用隐式类来封装隐式值和隐式方法</p>\n<ul>\n<li><p>构造器的构造参数有且只能有一个</p>\n</li>\n<li><p>隐式类必须被定义在类或者伴生对象或者包对象中，即隐式类不能是顶级的类</p>\n</li>\n<li><p>隐式类不能是case class即样式类</p>\n</li>\n<li><p>作用域内不能有与之同名称的标识符</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">implicit</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DB</span>(<span class=\"params\">val n:<span class=\"type\">Mysql</span></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span></span>():<span class=\"type\">String</span>=&#123;</span><br><span class=\"line\">\t\tn+<span class=\"string\">\"scala\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mysql=<span class=\"keyword\">new</span> <span class=\"type\">Mysql</span></span><br><span class=\"line\">    <span class=\"comment\">//当在DB隐式类的作用域 创建mysql对象 该隐式类就会生效</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>隐式转换时机</p>\n<p><strong>即什么时候使用隐式转换</strong></p>\n<ul>\n<li>当方法中的参数的类型与目标类型不一致</li>\n<li>当对象调用所在类中不存在的方法或成员属性时候，编译器会自动将对象进行隐式转换（根据类型）</li>\n</ul>\n</li>\n<li><p>编译器如何查找隐式转换</p>\n<ul>\n<li>在当前代码作用域下查找隐式实体</li>\n<li>如果上述查找失败 那么继续在隐式参数的类型的作用域里查找<ul>\n<li>T with A with B with C  在ABC中都搜索</li>\n<li>如果T 是参数化类型  比如List[String]  会在List和String的伴生对象找</li>\n<li>如果T是个单利对象 p.T  那么 p 对象也会被搜索</li>\n<li>如果T是个类型注入 即内部类  即S#T 那么S和T 都会被搜索</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>隐式转换前提</p>\n<p>不能存在二义性</p>\n<p>隐式操作不能嵌套使用 循环调用</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>以前看scala的一些笔记</p>","more":"<p></p>\n<ul>\n<li><p>scala命名规范</p>\n<ul>\n<li><p>有意义简明</p>\n</li>\n<li><p>驼峰式</p>\n</li>\n</ul>\n</li>\n<li><p>运算符</p>\n<ul>\n<li><p>算数运算符</p>\n<ul>\n<li><p>除以</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i=<span class=\"number\">10</span>/<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">//此处i的值为3.0 因为默认数值类型为int 所以除法获得的结果只能保留整数</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>* 取模=a-a/b*b\n\n  <figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> j=<span class=\"number\">10</span>%<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">j=<span class=\"number\">-10</span>%<span class=\"number\">3</span>(<span class=\"number\">-10</span>-(<span class=\"number\">-3</span>)*<span class=\"number\">3</span>=<span class=\"number\">-10</span>+<span class=\"number\">9</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n  <figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ...</span><br><span class=\"line\"> <span class=\"comment\">//还有97天放假 还有多少个星期</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">97</span> / <span class=\"number\">7</span>;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> b = <span class=\"number\">97</span> % <span class=\"number\">7</span>;</span><br><span class=\"line\">  println(<span class=\"string\">\"当前剩余\"</span> + a + <span class=\"string\">\"个星期零\"</span> + b + <span class=\"string\">\"天\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    a = a + <span class=\"number\">1</span></span><br><span class=\"line\">    println(a)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    println(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//定义变量保存华氏温度 5/9*（华氏温度-100） 请求华氏温度对应的摄氏温度 测试温度为232.5</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> sheshi= huaShi(<span class=\"number\">232.5</span>);</span><br><span class=\"line\">  println(sheshi)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">huaShi</span></span>(huashi: <span class=\"type\">Double</span>): <span class=\"type\">String</span> = &#123;</span><br><span class=\"line\">  (<span class=\"number\">5.0</span> / <span class=\"number\">9</span> * (huashi - <span class=\"number\">100.00</span>)).formatted(<span class=\"string\">\"%.2f\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul>\n<li><p>赋值运算符</p>\n<p>scala中没有++和– 用+= -= 代替</p>\n</li>\n<li><p>比较运算符 （关系运算符）</p>\n<p>同java，&gt;&lt;=!=,比较的时候左右类型要保持一致</p>\n</li>\n<li><p>逻辑运算符</p>\n<p>返回boolean</p>\n</li>\n<li><p>位运算符</p>\n<p>同java</p>\n<p>scala 不支持三目运算符</p>\n<p>运算符优先级别</p>\n<p>（）[] 级别最高</p>\n<ul>\n<li><p>单目运算</p>\n</li>\n<li><p>算术运算</p>\n</li>\n<li><p>移位运算</p>\n</li>\n<li><p>比较运算</p>\n</li>\n<li><p>位运算</p>\n</li>\n<li><p>关系</p>\n</li>\n<li><p>赋值</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>键盘输入语句</p>\n</li>\n<li><p>循环守卫</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i&lt;<span class=\"number\">-1</span> to <span class=\"number\">3</span> <span class=\"keyword\">if</span> i!=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">println(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>for循环 util 左包右不包</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i&lt;<span class=\"number\">-1</span>  util <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">\tprintln(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>循环引入变量</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i&lt;- <span class=\"number\">1</span> to <span class=\"number\">3</span> ; j=<span class=\"number\">4</span>-i)&#123;</span><br><span class=\"line\">\tprintln(j)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多重循环</p>\n<p>scala的多重循环 相当于嵌套for循环</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i&lt;<span class=\"number\">-1</span> to3 ; j&lt;<span class=\"number\">-3</span> to <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">       println(i)</span><br><span class=\"line\"> </span><br><span class=\"line\">       println(j)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>循环返回值 使用yeild</p>\n<p>将 1-3遍历 将循环得到的i放到vector中 作为变量result  yield 表示将哪些逻辑作为返回  yield后可以接代码块</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result= <span class=\"keyword\">for</span>(i&lt;<span class=\"number\">-1</span> to <span class=\"number\">3</span>) <span class=\"keyword\">yield</span> i</span><br><span class=\"line\">println(result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> res=<span class=\"keyword\">for</span> (i&lt;<span class=\"number\">-3</span> to <span class=\"number\">10</span>) <span class=\"keyword\">yield</span>  i+<span class=\"number\">1</span></span><br><span class=\"line\">println(res)</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>for循环 步长 </p>\n<p>以下代码 1到10 每隔步长打印</p>\n<p>同样可以用循环守卫实现</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i &lt;- <span class=\"type\">Range</span>(<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">println(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>while循环没有返回值 返回的是（）即Unit</p>\n</li>\n<li><p>break continue 不支持 在 <code>util.control.Breaks._</code> 使用 break() ,breakable(op:=&gt;Unit)</p>\n</li>\n<li><p>高阶函数传入代码块时候 小括号会换成大括号 </p>\n</li>\n<li><p>使用if-else 或循环守卫实现continue</p>\n</li>\n<li><p>函数式编程</p>\n<ul>\n<li><p>函数定义声明</p>\n<p>scala中函数和方法几乎等同 </p>\n<p>函数的形参列表和返回值列表数据类型可以是值类型或引用类型</p>\n<p>返回值加return 函数就不能自动推断返回类型 </p>\n<p>如果没有声明函数返回类型 即使加了return 也没有返回值</p>\n<p>如果不确定返回值 可用用Any类型</p>\n<p>可以在函数中定义函数 方法中定义方法</p>\n<p>如果函数形参有默认值 不传参那么走默认值 否则传参会覆盖默认值 从左到右  也可以使用带名参数进行覆盖指定形参</p>\n<p><code>mysql(host=&quot;127.0.0.1&quot;,pwd=&quot;123&quot;)</code></p>\n<p>形参类型默认为val</p>\n<p>scala支持可变参数,可变参数只能出现在形参列表的最后 使用* 来表示可变参数,可变参数其实是个序列集合</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span></span>(n1: <span class=\"type\">Int</span>, args: <span class=\"type\">Int</span>*): <span class=\"type\">Int</span> = &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( item&lt;-args  ) &#123;</span><br><span class=\"line\">    println(item)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  args.length</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>函数运行机制</p>\n<p>栈与堆内存的调用</p>\n</li>\n<li><p><strong>递归 （推荐使用递归）</strong></p>\n<p>递归函数一定要指定返回类型</p>\n</li>\n<li><p>过程</p>\n<p>将函数返回Unit的函数 称为过程函数 如果没有返回值 那么 函数签名上的=可以省略</p>\n</li>\n<li><p>惰性函数与异常</p>\n<p>尽可能延迟表达式求值， 需要时提供元素 无需预先计算他们 lazyLoad ,使用 lazy 关键字 只能修饰val </p>\n<p>只有当lazy变量被使用时候 才会加载使用</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">lazy</span>  <span class=\"keyword\">val</span> lazyV = sum(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">  println(lazyV)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>scala的异常和java稍微有区别 使用 try catch finally </p>\n<p>1.运行时异常 2.编译（checked）异常 java中的区分</p>\n<p>scala中只有运行时异常,使用case 匹配 不同异常</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mockExceptions</span></span>(): <span class=\"type\">Unit</span> =&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> i = <span class=\"number\">10</span>/<span class=\"number\">0</span></span><br><span class=\"line\">  &#125;<span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span>  ex:<span class=\"type\">ArithmeticException</span>=&gt;&#123;</span><br><span class=\"line\">      println(<span class=\"string\">\"catched a ArithmeticException\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span>  ex:<span class=\"type\">Exception</span>=&gt;&#123;</span><br><span class=\"line\">      println(<span class=\"string\">\"catched a exception\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\" finally printed\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>throw 表达式 是有类型的 为Nothing</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">throwNothing</span></span>():<span class=\"type\">Nothing</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">Exception</span>(<span class=\"string\">\"Nothing\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用@throws 注解 来表示抛出异常</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@throws</span>(classOf[<span class=\"type\">NumberFormatException</span>])</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fn1</span></span>()=&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"abc\"</span>.toInt</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>值函数</p>\n</li>\n<li><p>高阶函数</p>\n</li>\n<li><p>闭包</p>\n</li>\n<li><p>应用函数</p>\n</li>\n<li><p>柯里化函数 抽象控制</p>\n</li>\n</ul>\n<ul>\n<li><p>面向对象</p>\n<ul>\n<li><p>scala 对象类的属性必须赋予默认值 可用_来表示</p>\n</li>\n<li><p>属性默认是private的 不是public的</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">cat</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name :<span class=\"type\">String</span> =<span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> age:<span class=\"type\">Int</span> =_</span><br><span class=\"line\">         &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>​        声明成员属性时候会自动编译生成 set get 方法</p>\n<pre><code>使用下划线给定默认值 必须指定类型</code></pre><p>​        一般使用val 声明对象引用 也可以用类型推导 </p>\n<p>​        <strong>当类型和后面对象类型有继承关系即多态时就必须声明实例变量的类型</strong> 有点像泛型</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> cat:<span class=\"type\">Cat</span> = <span class=\"keyword\">new</span> cat</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>scala 中的类不用刻意声明为public 默认是public</p>\n</li>\n<li><p>成员属性的声明</p>\n<ul>\n<li><p>属性声明定义同变量</p>\n</li>\n<li><p>定义类型可以为值或者引用</p>\n</li>\n<li><p>声明一个属性必须显式的初始化</p>\n</li>\n<li><p>如果赋值为null 一定要声明属性的类型 否则该属性的类型就是Null</p>\n</li>\n<li><p>属性默认值：</p>\n<ul>\n<li>Byte Short Long Int  _对应0</li>\n<li>Float Double           _对应0.0</li>\n<li>String 和引用类型  _ 对应null</li>\n<li>Boolean                  _对应false</li>\n</ul>\n</li>\n<li><p>使用BeanProperty注解生成set get <strong>且 这种方式生成的方法 与底层编译后自动生成的带$的setget方法不冲突 可以并存</strong> </p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.beans.<span class=\"type\">BeanProperty</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@BeanProperty</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name:<span class=\"type\">String</span>=<span class=\"string\">\"\"</span>   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>scala 翻转循环</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i&lt;<span class=\"number\">-0</span> to <span class=\"number\">10</span> reverse)&#123;</span><br><span class=\"line\">\tprintln(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>scala的方法</p>\n<p>方法就是函数 方法一般为对象的成员</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">cat</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eat</span></span>()=&#123;</span><br><span class=\"line\">\tprintln(<span class=\"string\">\"eat\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造器</p>\n<p>java的构造器有固定要求 名字与类名一样 用于初始化对象 有默认无参构造器 super this .etc</p>\n<p>scala的构造器,多个构造器可以重载  有<strong>主构造器和辅构造器</strong></p>\n<p>使用this 表示辅助构造器 可以根据参数列表来区分不同的辅助构造器</p>\n<p>主构造器直接放在类名上声明</p>\n<p><strong>主构造器会执行类定义中的所有语句，放在类中要执行的语句 除了声明的成员方法</strong></p>\n<p>如果想让主构造器变成私有 那么可以在class的()前加private 这样只能通过辅助构造器去构造对象了</p>\n<p><strong>主构造器的形参如果没有用任何修饰符修饰那么 这个参数是局部变量，如果主构造器的参数使用val进行修饰那么 这个属性就会成为一个私有只读属性</strong> 变成immutable了 只读为只有get方法</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>(<span class=\"params\">inName:<span class=\"type\">String</span></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> name=inName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>(<span class=\"params\">val inName:<span class=\"type\">String</span></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> name=inName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n  <figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//私有主构造器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"title\">private</span>(<span class=\"params\">inName:<span class=\"type\">String</span>,inAge:<span class=\"type\">Int</span></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> name:<span class=\"type\">String</span>=inName</span><br><span class=\"line\"> <span class=\"keyword\">var</span> age:<span class=\"type\">Int</span>=inAge</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(inName:<span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">       inName=name</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span></span>:<span class=\"type\">String</span>=&#123;</span><br><span class=\"line\">        <span class=\"string\">\"name\"</span>+name+<span class=\"string\">\"age\"</span>+age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  辅助构造器 使用this声明 和java中的this不一样,多个辅助构造器通过不同的形参列表进行区分 底层为java的构造器重载</p>\n<p>  <strong>辅助构造器内第一行代码必须显式的调用主构造器</strong>  这样做是为了显式的调用主构造器的父类构造方法</p>\n<p>  不能在辅助构造器调用该类的父类的主构造器  只有主构造器才能调用父类构造器 不能使用super.</p>\n  <figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//主构造器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">inName:<span class=\"type\">String</span>,inAge:<span class=\"type\">Int</span></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> name:<span class=\"type\">String</span>=inName</span><br><span class=\"line\"> <span class=\"keyword\">var</span> age:<span class=\"type\">Int</span>=inAge</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(inName:<span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">       inName=name</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span></span>:<span class=\"type\">String</span>=&#123;</span><br><span class=\"line\">        <span class=\"string\">\"name\"</span>+name+<span class=\"string\">\"age\"</span>+age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> \t<span class=\"comment\">//辅助构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(name:<span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用主构造器 这里给的默认值 如果主构造器没有参数 那么就写this 就ok</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>(_,_)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>对象的创建过程</strong></p>\n<ul>\n<li>加载类信息 成员信息（属性及方法）及其他</li>\n<li>在内存中开辟一块堆空间</li>\n<li>使用父类构造器（主辅）进行初始化</li>\n<li>使用主构造器进行属性的初始化</li>\n<li>使用辅助构造器对属性进行再次初始化</li>\n<li>将对象堆内存的地址赋给变量引用</li>\n</ul>\n</li>\n<li><p>scala包</p>\n<p>除了java中的两种方式 scala还可以在同一个文件中创建多个包</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com&#123;</span><br><span class=\"line\">\tobjcet <span class=\"type\">People</span>&#123;</span><br><span class=\"line\">\t\tmain</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">package</span> scala&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span></span>()=&#123;</span><br><span class=\"line\">\t\t\t\tprintln(<span class=\"string\">\"A\"</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">package</span> test&#123;</span><br><span class=\"line\">\t\t\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">\t\t\t \t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>()=&#123;</span><br><span class=\"line\">\t\t\t \t\tprintln(<span class=\"string\">\"B\"</span>)</span><br><span class=\"line\">\t\t\t \t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>scala的包名和远吗所在的系统文件目录结构可以不一致 但是编译后端字节码文件路径和包名会保持一致 </p>\n<p>scala自动引入 lang包和 scala包和 preDef包</p>\n<p>scala的泛型使用[]中括号</p>\n<p>import可以写在任何位置</p>\n<p>包对象是对静态成员的抽象 包对象的名字要和包的名字一致</p>\n<p>在包对象中定义方法变量 不能直接在包的大括号中定义会报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package object scala&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pacakage scala&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>scala中的可见性  priate表示私有 public一般为默认 </p>\n<p>scala伴生类是伴生对象的静态成员或者属性的抽象封装</p>\n<p>私有属性可以在本类中访问 也可以在伴生类中访问 </p>\n<p>不可以用public显式的修饰属性或者方法</p>\n<p>方法的访问权限默认为public</p>\n<p>protected只能在子类访问 同包下不能访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A&#123;</span><br><span class=\"line\">\tvar name:String=&quot;&quot; //可读写</span><br><span class=\"line\">\tprivate var sla:Int=0 //只读</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>包访问权限示例，由于同包下的私有不能访问 所以使用中括号加包名表示 某个属性可以在某个包下访问</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> [scala] <span class=\"keyword\">val</span> name:<span class=\"type\">String</span>=<span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虽然用的protected 修饰 但是编译器生成的变量类型还是private 默认public 编译后也是private</p>\n<p>只是该属性的访问方法是public或者private的</p>\n</li>\n<li><p>包的引入</p>\n<ul>\n<li><p>import语句可以出现在任何地方</p>\n</li>\n<li><p>如果想要引入某个包中的所有的类 那么使用 <code>import scala._</code> 下划线</p>\n</li>\n<li><p>在需要用的时候才引用的话 那么作用域只在该代码块所在的大括号内</p>\n</li>\n<li><p>如果 多个包中有相同名字的类 可以重命名 使用{}进行重命名</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.mutable.<span class=\"type\">HashMap</span> </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.&#123;<span class=\"type\">HashMap</span>=&gt;<span class=\"type\">JavaHashMap</span>&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>面向对象</p>\n<p>子类继承了所有属性 私有属性不能直接访问 需要通过公共方法访问</p>\n<p>父类的protected属性 编译后也是public </p>\n</li>\n</ul>\n<ul>\n<li><p>方法重写</p>\n<p>使用override 关键字</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span></span>():<span class=\"type\">String</span>&#123;</span><br><span class=\"line\">\tprintln(<span class=\"string\">\"toString\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用超类方法使用super关键字</p>\n</li>\n<li><p>类型检查 多态</p>\n<ul>\n<li>classOf[String] 获取String的class对象</li>\n<li>obj.isInstanceOf[String] 判断某个对象是否是String类型</li>\n<li>obj.asInstanceOf[T] 将obj对象强转为T类型</li>\n</ul>\n</li>\n<li><p>复写字段</p>\n<ul>\n<li><p>使用override进行复写字段，java中没有属性或者字段的重写 （子类如果有同名的属性 那么父类引用调用的时候还是父类的属性，子类引用调用还是子类属性）scala中无论是子类引用还是父类引用 调用后都是子类属性</p>\n</li>\n<li><p>复写字段其实是复写方法</p>\n</li>\n<li><p>动态绑定</p>\n<p>java的动态绑定机制</p>\n<p>如果调用的是方法 那么jvm机会将该方法和对象内存地址绑定</p>\n<p>如果调用的是一个属性 则没有动态绑定机制 在哪里调用就返回对应的值</p>\n<p>scala则全部有动态绑定</p>\n<ul>\n<li><p>def 只能重写另个方法 即 方法只能重写另一个方法</p>\n</li>\n<li><p>val只能重写另一个val属性或者 重写不带参数的def （因为 是get set方法） 带了参数就是方法的重载了</p>\n</li>\n<li><p>var 只能重写另一个抽象的var</p>\n<p><strong>抽象字段就是没有初始化的属性</strong> 抽象字段要求所在类也为抽象类 标记为abstract</p>\n<p>编译后不会生成对应的属性声明 只会生成两个对应的抽象方法 name name_$eq</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">var</span> name:<span class=\"type\">String</span>=_</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name:<span class=\"type\">String</span>=<span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>抽象类</p>\n<p>抽象类的属性可以没有值 没有值为抽象字段</p>\n<p>可以有抽象字段可以有普通字段</p>\n<p>抽象方法没有代码块</p>\n<p>可以有抽象方法 可以有普通方法</p>\n<p><strong>抽象的方法或者属性就不能用private修饰了</strong></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> classA&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name:<span class=\"type\">String</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cry</span></span>()</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cry</span></span>(inName:<span class=\"type\">String</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匿名子类</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">var</span> name :<span class=\"type\">String</span></span><br><span class=\"line\"> \t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cry</span></span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">anno</span> </span>&#123;</span><br><span class=\"line\">main&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"type\">A</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">override</span> <span class=\"keyword\">var</span> name :<span class=\"type\">String</span>=<span class=\"string\">\"\"</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cry</span></span>():<span class=\"type\">Unit</span>&#123;</span><br><span class=\"line\">\t\t\tprintln(<span class=\"string\">\"cry\"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    b.cry()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>继承层次</p>\n<ul>\n<li><p>Any </p>\n<ul>\n<li><p>AnyVal </p>\n<ul>\n<li>基础类型  </li>\n</ul>\n</li>\n<li><p>AnyRef </p>\n<ul>\n<li>collections</li>\n<li>javaclass </li>\n<li>other</li>\n<li>Null</li>\n</ul>\n</li>\n<li><p>Nothing</p>\n</li>\n</ul>\n</li>\n<li><p>Any是顶级</p>\n</li>\n<li><p>AnyRef相当于Object</p>\n</li>\n<li><p>Null  shi null 类型</p>\n</li>\n<li><p>Nothing 没有实力  泛型 底层类 </p>\n</li>\n</ul>\n</li>\n<li><p>伴生对象</p>\n<p>将静态属性和静态方法放到 该类的伴生对象中声明使用,抽象封装</p>\n<p>这个和包对象有异曲同工之妙</p>\n<p>伴生对象必须与该类同名</p>\n<p>伴生对象依赖<code>public static final MOUDLE$</code></p>\n</li>\n<li><p>apply 方法</p>\n<p>在伴生对象定义apply方法 那么就可以实现类名（参数）方式创建对象实例</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pig</span>(<span class=\"params\">inName:<span class=\"type\">String</span></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name :<span class=\"type\">Stirng</span>=inName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Pig</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(inName:<span class=\"type\">String</span>):<span class=\"type\">Pig</span>=<span class=\"keyword\">new</span> <span class=\"type\">Pig</span>(inName)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>():<span class=\"type\">Pig</span>= <span class=\"keyword\">new</span> <span class=\"type\">Pig</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<ul>\n<li><p>trait</p>\n<p>trait等价与接口+抽象类</p>\n<p>动态混入 mix in</p>\n<p>trait  继承</p>\n<p>在 scala中 java的接口可以作为trait</p>\n<p>特质可以看作对继承的一种补充</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">behav</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">codes</span></span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>如果没有父类 多个特质继承</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">extends</span> <span class=\"title\">behav</span> <span class=\"keyword\">with</span> <span class=\"title\">traitA</span> ...</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>如果有父类  多个特质</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span> <span class=\"keyword\">with</span>   <span class=\"title\">behav</span> <span class=\"keyword\">with</span>  <span class=\"title\">traitA</span> <span class=\"keyword\">with</span>...</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当trait中有抽象和普通,会编译为两个class对象 一个trait.class接口 一个trait$.class抽象类 也是implement trait.class接口 但普通方法依赖MOUDLE来实现抽象类中的普通方法</p>\n<p>当trait中只有抽象方法 生成 trait.class 接口 implements</p>\n</li>\n</ul>\n<ul>\n<li><p>使用 type 进行类型别名</p>\n</li>\n<li><p>动态混入 </p>\n<p>解耦 </p>\n<p>scala特有 补休该类的声明定义下 扩展类的功能 </p>\n<p>不影响原有继承关系的基础上 给指定的类扩展功能</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span></span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Mains</span></span>&#123;</span><br><span class=\"line\"> \tmain&#123;</span><br><span class=\"line\">        <span class=\"comment\">//不修改类定义声明的情况下 进行动态混入</span></span><br><span class=\"line\"> \t\t<span class=\"keyword\">val</span> a= <span class=\"keyword\">new</span> <span class=\"type\">A</span> <span class=\"keyword\">with</span> traitA</span><br><span class=\"line\">        <span class=\"comment\">//含有抽象方法的类动态混入</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"type\">B</span> <span class=\"keyword\">with</span> traitB&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span> </span>()&#123;</span><br><span class=\"line\">                println(<span class=\"string\">\"hi\"</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>叠加特质</p>\n<p>构建对象的时候 混入多个特质  即叠加特质</p>\n<p>特质声明从左到右 方法执行顺序从右到左</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    main &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"type\">A</span> <span class=\"keyword\">with</span> traitA <span class=\"keyword\">with</span> traitB</span><br><span class=\"line\">        a.say()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果 traitA 和 traitB 有共同的父类继承  那么 父类的构造只会走一次，叠加特质的初始化 会从左到右</p>\n<p>如果traitA 和traitB 都有say 方法 那么 先走traitB 的方法 再执行 traitA的方法  遵循栈 从右向左</p>\n<p>当有super的方法调用的时候 指的是左边的traitA的方法 当左边再没有trait的时候 直接找父类trait的方法</p>\n<p>可以使用[?] 泛型 指定super[T]的调用 T类型必须是当前混入trait的父类</p>\n</li>\n<li><p>对象构造方式</p>\n<ul>\n<li>new 对象</li>\n<li>apply</li>\n<li>匿名子类</li>\n<li>动态混入</li>\n</ul>\n</li>\n<li><p>富接口</p>\n<p>既有抽象方法又有非抽象方法的trait</p>\n</li>\n<li><p>特质中的具体字段</p>\n<p>特质中的初始化了的字段 就是具体化字段 否则是抽象字段</p>\n<p>混入该特质的类就拥有了该字段，该字段不是继承 而是直接加入到该类中</p>\n<p>特质中的抽象字段 在具体的类的继承中必须被重写初始化</p>\n</li>\n<li><p>特质的构造顺序</p>\n<p>​    普通特质继承的构造顺序</p>\n<ul>\n<li>调用该类超类构造器</li>\n<li>调用第一个特质的父类及爷类 构造器  依次往上推 如果执行过不再执行</li>\n<li>调用第一个特质的构造器</li>\n<li>调用第二个特质的父类及爷类 构造器  依次往上推 如果执行过不再执行</li>\n<li>调用第二个特质的构造器</li>\n<li>…</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">a</span> <span class=\"title\">extend</span> <span class=\"title\">b</span> <span class=\"keyword\">with</span> <span class=\"title\">traita</span> <span class=\"keyword\">with</span> <span class=\"title\">traitb</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>动态混入对的构造顺序</p>\n<ul>\n<li>先创建对象</li>\n<li>在执行特质的构造 同上面普通特质继承的实现</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c1 = <span class=\"keyword\">new</span> <span class=\"type\">A</span> <span class=\"keyword\">with</span> traitA <span class=\"keyword\">with</span> traitB</span><br></pre></td></tr></table></figure>\n\n<p>两种方式 的区别是是否创建了该类的对象</p>\n</li>\n<li><p>扩展类的特质</p>\n<p>特质可以继承类  用来拓展该类的一些功能</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">log</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printE</span></span>()&#123;</span><br><span class=\"line\">  println(getMessage())</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所有混入该特质的类 会自动成为该特质所继承的超类的子类</p>\n<p>若某个特质已经继承了某个类 那么混入该特质的类继承的类是该特质的超类的子类 否则会出现多继承现象</p>\n</li>\n<li><p>特质自身类型</p>\n<p>解决特质循环依赖问题</p>\n<p>限制混入该特质的类的类型</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> <span class=\"keyword\">with</span> <span class=\"title\">log</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">logger</span></span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>：<span class=\"type\">Excption</span>=&gt;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>():<span class=\"type\">Unit</span>=&#123;</span><br><span class=\"line\"> \tprintln(getMessage())</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>嵌套类</p>\n<p>类中写类 类似java内部类</p>\n<p>scala的静态内部类 是放在伴生类中的</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> innerClass=<span class=\"keyword\">new</span> outerClass.<span class=\"type\">InnerClass</span></span><br></pre></td></tr></table></figure>\n\n<p>内部类访问外部类的属性</p>\n<ul>\n<li><p>外部类名.this.属性名</p>\n</li>\n<li><p>外部类名的别名.属性名</p>\n<p>属性定义要在别名后面</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span></span>&#123;</span><br><span class=\"line\">\tmyOuter=&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">innter</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> name=<span class=\"string\">\"\"</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ages</span></span>():<span class=\"type\">Unit</span>=&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span>  outer = myOuter.age</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> age=<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>类型投影</p>\n<p>屏蔽外部对象对内部类对象的影响 使用# 链接外部类与内部类</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span></span>(in:<span class=\"type\">OuterClass</span>#innerClass)&#123;</span><br><span class=\"line\">\tprint(<span class=\"string\">\"say\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>隐式转换和隐式值</p>\n<ul>\n<li>隐式转换函数 用<strong>implicit</strong>关键字声明<strong>带有单个参数的函数</strong>  可以自动将值从一种类型转换为另一种类型</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">implicit</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fnc</span></span>(d:<span class=\"type\">Double</span>):<span class=\"type\">Int</span>=&#123;</span><br><span class=\"line\">\t\td.toInt</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    可以使用隐式转换给类动态添加功能</p>\n<p>​    隐式转换函数跟函数名没关系 跟函数签名（入参和返回值有关系）单个类型的隐式转换函数必须是唯一的       要不然编译器不知道使用哪个隐式转换函数</p>\n<ul>\n<li><p>隐式值 就是隐式变量 将某个形参变量标志为隐式 implicit  编译器会在方法省略隐式参数的情况下去搜索作用于内的隐式值作为默认参数</p>\n<p>隐式值使用 的方法调用的时候 不用带参数列表 直接方法名调用了</p>\n<p>隐式值和函数默认值同时存在 隐式值级别高 没有隐式值 走默认值</p>\n</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Mains</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    main&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">implicit</span> <span class=\"keyword\">val</span> str:<span class=\"type\">String</span>=<span class=\"string\">\"A\"</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span></span>(<span class=\"keyword\">implicit</span> name:<span class=\"type\">Stirng</span>):<span class=\"type\">Unit</span>=&#123;</span><br><span class=\"line\">        \tprint(name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//直接调用 不带括号 </span></span><br><span class=\"line\">        hello </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>隐式类</p>\n<p>可以用隐式类来封装隐式值和隐式方法</p>\n<ul>\n<li><p>构造器的构造参数有且只能有一个</p>\n</li>\n<li><p>隐式类必须被定义在类或者伴生对象或者包对象中，即隐式类不能是顶级的类</p>\n</li>\n<li><p>隐式类不能是case class即样式类</p>\n</li>\n<li><p>作用域内不能有与之同名称的标识符</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">implicit</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DB</span>(<span class=\"params\">val n:<span class=\"type\">Mysql</span></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span></span>():<span class=\"type\">String</span>=&#123;</span><br><span class=\"line\">\t\tn+<span class=\"string\">\"scala\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mysql=<span class=\"keyword\">new</span> <span class=\"type\">Mysql</span></span><br><span class=\"line\">    <span class=\"comment\">//当在DB隐式类的作用域 创建mysql对象 该隐式类就会生效</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>隐式转换时机</p>\n<p><strong>即什么时候使用隐式转换</strong></p>\n<ul>\n<li>当方法中的参数的类型与目标类型不一致</li>\n<li>当对象调用所在类中不存在的方法或成员属性时候，编译器会自动将对象进行隐式转换（根据类型）</li>\n</ul>\n</li>\n<li><p>编译器如何查找隐式转换</p>\n<ul>\n<li>在当前代码作用域下查找隐式实体</li>\n<li>如果上述查找失败 那么继续在隐式参数的类型的作用域里查找<ul>\n<li>T with A with B with C  在ABC中都搜索</li>\n<li>如果T 是参数化类型  比如List[String]  会在List和String的伴生对象找</li>\n<li>如果T是个单利对象 p.T  那么 p 对象也会被搜索</li>\n<li>如果T是个类型注入 即内部类  即S#T 那么S和T 都会被搜索</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>隐式转换前提</p>\n<p>不能存在二义性</p>\n<p>隐式操作不能嵌套使用 循环调用</p>\n</li>\n</ul>"},{"title":"Storm Standanlone And Cluster installment","date":"2019-09-13T08:11:14.000Z","_content":"","source":"_posts/Storm-Standanlone-And-Cluster-installment.md","raw":"---\ntitle: Storm Standanlone And Cluster installment\ndate: 2019-09-13 16:11:14\ntags:\n---\n","slug":"Storm-Standanlone-And-Cluster-installment","published":1,"updated":"2022-09-03T07:30:55.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz8500022twfardjghgxr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Rust语言Win环境搭建配置","date":"2017-11-18T17:06:28.000Z","_content":"\nWindows环境下Rust语言的环境搭建与IDE配置<!--more-->\n\n> Rust 语言是Rust 是 Mozilla 开发的注重安全、性能和并发性的编程语言。“Rust”，由 web 语言的领军人物 [Brendan Eich](https://baike.baidu.com/item/Brendan%20Eich)（js 之父），Dave Herman 以及 [Mozilla](https://baike.baidu.com/item/Mozilla) 公司的 Graydon Hoare 合力开发。吸收了其他的语言的一些特性,并有自己独到之处\n\n* 进行下载安装\n\n  首先进入rust 的官网进行下载安装\n\n  []: https://www.rust-lang.org/zh-CN/\t\"Rust官网\"\n\n  现在都用rustup来进行rust语言版本的管理因为rust语言版本更新很快\n\n  双击rustup-init.exe后进入安装界面 选择**2 Customize installation**\n\n  - 是否用**default host tripe** 我选是\n  - 使用哪个版本(stable,nightly),我选nightly\n  - 是否加入环境变量(这个后期可以修改),我选是\n\n* 配置环境变量及中科大源\n\n  安装完成后在C盘下-->用户-->你的登陆用户名文件夹下会多出.rust文件夹 及.cargo文件夹\n\n  如果你不想将rust的安装目录放置在系统盘 那么可以进行文件夹迁移,同时进行修改环境变量\n\n  - 环境变量配置:\n\n    ```\n    CARGO_HOME:D:\\Cargo\\.cargo\n    RUSTUP_HOME:D:\\Rustup\\.rustup\n    ```\n\n    简单介绍下cargo ,cargo是rust语言的包管理器 有点类似java中maven等一系列项目构建工具,使用cargo可以很方便的管理rust工程.\n\n    Path环境变量:\n\n    ``` \n    PATH:%CARGO_HOME%/bin;\n    ```\n\n    ​\n\n  - 添加中科大镜像源\n\n    因为GFW的问题 rust的官方源会链接不上 那么我们加入中科大的镜像源\n\n    在.cargo文件夹下创建一个config文件,不带任何后缀\n\n    ```\n    [registry]\n    index = \"https://mirrors.ustc.edu.cn/crates.io-index/\"\n    [source.crates-io]\n    registry = \"https://github.com/rust-lang/crates.io-index\"\n    replace-with = 'ustc'\n    [source.ustc]\n    registry = \"https://mirrors.ustc.edu.cn/crates.io-index/\"\n    ```\n\n    ​\n\n  - 加入RUSTUP_DIST_SERVER环境变量及RUSTUP_UPDATE_ROOT环境变量\n\n    ```\n    RUSTUP_DIST_SERVER:http://mirrors.ustc.edu.cn/rust-static\n    RUSTUP_UPDATE_ROOT:http://mirrors.ustc.edu.cn/rust-static/rustup\n    ```\n\n\n\n**至此rust语言安装完毕**\n\n *  检查 rustup安装 \n\n    打开cmd输入\n\n    ```\n    C:\\Users\\andy>rustup -V\n    rustup 1.7.0 (813f7b7a8 2017-10-30)\n    ```\n\n* 检查cargo安装\n\n  ```\n  C:\\Users\\andy>cargo -V\n  cargo 0.24.0-nightly (abd137ad1 2017-11-12)\n  ```\n\n  ​\n\n如果 提示没有默认的 toolchain 那么 install:\n\n```\nrustup install nightly-x86_64-pc-windows-gnu\n```\n\n将stable-gnu版本设为默认toolchain\n\n```\nrustup default nightly-x86_64-pc-windows-gnu\n```\n\n* 安装相关插件\n\n  - 安装rustfmt\n\n    ```\n    C:\\Users\\andy>rustup show\n    Default host: x86_64-pc-windows-gnu\n\n    nightly-x86_64-pc-windows-gnu (default)\n    rustc 1.23.0-nightly (6160040d8 2017-11-18)\n    ```\n\n  - 将gnu版本设为默认\n\n    ```\n    C:\\Users\\andy>rustup default nightly-x86_64-pc-windows-gnu\n    info: using existing install for 'nightly-x86_64-pc-windows-gnu'\n    info: default toolchain set to 'nightly-x86_64-pc-windows-gnu'\n\n      nightly-x86_64-pc-windows-gnu unchanged - rustc 1.23.0-nightly (6160040d8 2017\n    -11-18)\n    ```\n\n    ​\n\n  - 安装fmt\n\n    ```\n    cargo +nightly-x86_64-pc-windows-gnu install rustfmt\n    ```\n\n    ​\n\n  - 安装racer\n\n    ```\n    rustup component add rust-src --toolchain nightly-x86_64-pc-windows-gnu\n    ```\n\n  - 设置 rust_src_path 环境变量(注意路径)\n\n    ```\n    RUST_SRC_PATH:D:\\Rustup\\.rustup\\toolchains\\nightly-x86_64-pc-windows-gnu\\lib\\rustlib\\src\\rust\\src\n\n    ```\n\n    ​\n\n  - 执行 \n\n    ```\n    cargo +nightly install racer\n    ```\n\n    **在安装插件时候如果之前你安装过该插件 那么就在命令后加入 --forece 这样就会覆盖安装**\n\n  - 安装RLS 如果nightly 已经安装了 那么只执行第二条就行了 \n\n    ```\n    rustup component add rls --toolchain nightly-x86_64-pc-windows-gnu\n    rustup component add rust-analysis --toolchain nightly-x86_64-pc-windows-gnu\n    ```\n\n    ​\n\n**至此 插件安装完毕**\n\n* 配置IDE\n\n  eclipse intellij idea vscode sumblime vs 都支持rust 这里只介绍idea 与vscode\n\n  **Idea配置**\n\n  - 下载IntelliJ 旗舰版 只有 CLion 支持调试\n\n    进入Configureation--->Settings---->Plugins 搜索Rust,会提示无插件可用,那么Search in repositories 可以看到Rust语言插件 进行安装 然后重启 idea\n\n    重启完毕后,可以new rust工程了\n\n  **Vscode配置**\n\n  - 首先安装用于调试的GDB,我这里安装的是gnu版本的rust \n\n    下载*VisualGDB*\n\n    ​\n\n  - 配置vscode首选项,可以按你自己的来\n\n    ```\n    // 将设置放入此文件中以覆盖默认设置\n    {\n        \"terminal.integrated.shell.windows\": \"C:\\\\Windows\\\\Sysnative\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\",\n        \"editor.fontSize\": 14,\n        \"editor.fontFamily\": \"Consolas, 'Courier New', monospace\",\n        \"editor.tabSize\": 4,\n        \"editor.cursorStyle\": \"line\",\n        \"editor.multiCursorModifier\": \"alt\",\n        \"editor.insertSpaces\": true,\n        \"editor.wordWrap\": \"off\",\n        \"rust.racerPath\": \"D:\\\\Cargo\\\\.cargo\\\\bin\\\\racer.exe\", // Specifies path to Racer binary if it's not in PATH\n        \"rust.rustLangSrcPath\": \"D:\\\\Rustup\\\\.rustup\\\\toolchains\\\\nightly-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\src\\\\rust\\\\src\", // Specifies path to /src directory of local copy of Rust sources\n        \"rust.rustfmtPath\": null, // Specifies path to Rustfmt binary if it's not in PATH\n        \"rust.cargoPath\": \"D:\\\\Cargo\\\\.cargo/bin/cargo.exe\", // Specifies path to Cargo binary if it's not in PATH\n        \"rust.formatOnSave\": true, // Turn on/off autoformatting file on save (EXPERIMENTAL)\n        \"rust.checkOnSave\": true,    \n        \"[rust]\": {\n            \n        },\n        \"workbench.startupEditor\": \"welcomePage\",\n        \"rust.mode\": \"rls\",\n        \"rust.rustup\": {\n            \"toolchain\": \"nightly-x86_64-pc-windows-gnu\",\n            \"nightlyToolchain\": \"nightly-x86_64-pc-windows-gnu\"\n        \n        },\n        \"rust.rls\": {\n            \"useRustfmt\":true,\n            \"env\": {\n            \"RUST_LOG\": \"rls=debug\"\n            }\n        }\n    }\n    ```\n\n    ​\n\n**这样就结束了,IDE配置这块以后再补充,时间太长了**\n\n参考:\n\n中文社区QQ群:303838735 \n\n[]: https://zhuanlan.zhihu.com/p/27782375\t\"Rust 环境配置事项一览\"\n\n","source":"_posts/Rust语言Win环境搭建配置.md","raw":"---\ntitle: Rust语言Win环境搭建配置\ndate: 2017-11-19 01:06:28\ntags: [Rust]\ncategories: [Rust]\n---\n\nWindows环境下Rust语言的环境搭建与IDE配置<!--more-->\n\n> Rust 语言是Rust 是 Mozilla 开发的注重安全、性能和并发性的编程语言。“Rust”，由 web 语言的领军人物 [Brendan Eich](https://baike.baidu.com/item/Brendan%20Eich)（js 之父），Dave Herman 以及 [Mozilla](https://baike.baidu.com/item/Mozilla) 公司的 Graydon Hoare 合力开发。吸收了其他的语言的一些特性,并有自己独到之处\n\n* 进行下载安装\n\n  首先进入rust 的官网进行下载安装\n\n  []: https://www.rust-lang.org/zh-CN/\t\"Rust官网\"\n\n  现在都用rustup来进行rust语言版本的管理因为rust语言版本更新很快\n\n  双击rustup-init.exe后进入安装界面 选择**2 Customize installation**\n\n  - 是否用**default host tripe** 我选是\n  - 使用哪个版本(stable,nightly),我选nightly\n  - 是否加入环境变量(这个后期可以修改),我选是\n\n* 配置环境变量及中科大源\n\n  安装完成后在C盘下-->用户-->你的登陆用户名文件夹下会多出.rust文件夹 及.cargo文件夹\n\n  如果你不想将rust的安装目录放置在系统盘 那么可以进行文件夹迁移,同时进行修改环境变量\n\n  - 环境变量配置:\n\n    ```\n    CARGO_HOME:D:\\Cargo\\.cargo\n    RUSTUP_HOME:D:\\Rustup\\.rustup\n    ```\n\n    简单介绍下cargo ,cargo是rust语言的包管理器 有点类似java中maven等一系列项目构建工具,使用cargo可以很方便的管理rust工程.\n\n    Path环境变量:\n\n    ``` \n    PATH:%CARGO_HOME%/bin;\n    ```\n\n    ​\n\n  - 添加中科大镜像源\n\n    因为GFW的问题 rust的官方源会链接不上 那么我们加入中科大的镜像源\n\n    在.cargo文件夹下创建一个config文件,不带任何后缀\n\n    ```\n    [registry]\n    index = \"https://mirrors.ustc.edu.cn/crates.io-index/\"\n    [source.crates-io]\n    registry = \"https://github.com/rust-lang/crates.io-index\"\n    replace-with = 'ustc'\n    [source.ustc]\n    registry = \"https://mirrors.ustc.edu.cn/crates.io-index/\"\n    ```\n\n    ​\n\n  - 加入RUSTUP_DIST_SERVER环境变量及RUSTUP_UPDATE_ROOT环境变量\n\n    ```\n    RUSTUP_DIST_SERVER:http://mirrors.ustc.edu.cn/rust-static\n    RUSTUP_UPDATE_ROOT:http://mirrors.ustc.edu.cn/rust-static/rustup\n    ```\n\n\n\n**至此rust语言安装完毕**\n\n *  检查 rustup安装 \n\n    打开cmd输入\n\n    ```\n    C:\\Users\\andy>rustup -V\n    rustup 1.7.0 (813f7b7a8 2017-10-30)\n    ```\n\n* 检查cargo安装\n\n  ```\n  C:\\Users\\andy>cargo -V\n  cargo 0.24.0-nightly (abd137ad1 2017-11-12)\n  ```\n\n  ​\n\n如果 提示没有默认的 toolchain 那么 install:\n\n```\nrustup install nightly-x86_64-pc-windows-gnu\n```\n\n将stable-gnu版本设为默认toolchain\n\n```\nrustup default nightly-x86_64-pc-windows-gnu\n```\n\n* 安装相关插件\n\n  - 安装rustfmt\n\n    ```\n    C:\\Users\\andy>rustup show\n    Default host: x86_64-pc-windows-gnu\n\n    nightly-x86_64-pc-windows-gnu (default)\n    rustc 1.23.0-nightly (6160040d8 2017-11-18)\n    ```\n\n  - 将gnu版本设为默认\n\n    ```\n    C:\\Users\\andy>rustup default nightly-x86_64-pc-windows-gnu\n    info: using existing install for 'nightly-x86_64-pc-windows-gnu'\n    info: default toolchain set to 'nightly-x86_64-pc-windows-gnu'\n\n      nightly-x86_64-pc-windows-gnu unchanged - rustc 1.23.0-nightly (6160040d8 2017\n    -11-18)\n    ```\n\n    ​\n\n  - 安装fmt\n\n    ```\n    cargo +nightly-x86_64-pc-windows-gnu install rustfmt\n    ```\n\n    ​\n\n  - 安装racer\n\n    ```\n    rustup component add rust-src --toolchain nightly-x86_64-pc-windows-gnu\n    ```\n\n  - 设置 rust_src_path 环境变量(注意路径)\n\n    ```\n    RUST_SRC_PATH:D:\\Rustup\\.rustup\\toolchains\\nightly-x86_64-pc-windows-gnu\\lib\\rustlib\\src\\rust\\src\n\n    ```\n\n    ​\n\n  - 执行 \n\n    ```\n    cargo +nightly install racer\n    ```\n\n    **在安装插件时候如果之前你安装过该插件 那么就在命令后加入 --forece 这样就会覆盖安装**\n\n  - 安装RLS 如果nightly 已经安装了 那么只执行第二条就行了 \n\n    ```\n    rustup component add rls --toolchain nightly-x86_64-pc-windows-gnu\n    rustup component add rust-analysis --toolchain nightly-x86_64-pc-windows-gnu\n    ```\n\n    ​\n\n**至此 插件安装完毕**\n\n* 配置IDE\n\n  eclipse intellij idea vscode sumblime vs 都支持rust 这里只介绍idea 与vscode\n\n  **Idea配置**\n\n  - 下载IntelliJ 旗舰版 只有 CLion 支持调试\n\n    进入Configureation--->Settings---->Plugins 搜索Rust,会提示无插件可用,那么Search in repositories 可以看到Rust语言插件 进行安装 然后重启 idea\n\n    重启完毕后,可以new rust工程了\n\n  **Vscode配置**\n\n  - 首先安装用于调试的GDB,我这里安装的是gnu版本的rust \n\n    下载*VisualGDB*\n\n    ​\n\n  - 配置vscode首选项,可以按你自己的来\n\n    ```\n    // 将设置放入此文件中以覆盖默认设置\n    {\n        \"terminal.integrated.shell.windows\": \"C:\\\\Windows\\\\Sysnative\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\",\n        \"editor.fontSize\": 14,\n        \"editor.fontFamily\": \"Consolas, 'Courier New', monospace\",\n        \"editor.tabSize\": 4,\n        \"editor.cursorStyle\": \"line\",\n        \"editor.multiCursorModifier\": \"alt\",\n        \"editor.insertSpaces\": true,\n        \"editor.wordWrap\": \"off\",\n        \"rust.racerPath\": \"D:\\\\Cargo\\\\.cargo\\\\bin\\\\racer.exe\", // Specifies path to Racer binary if it's not in PATH\n        \"rust.rustLangSrcPath\": \"D:\\\\Rustup\\\\.rustup\\\\toolchains\\\\nightly-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\src\\\\rust\\\\src\", // Specifies path to /src directory of local copy of Rust sources\n        \"rust.rustfmtPath\": null, // Specifies path to Rustfmt binary if it's not in PATH\n        \"rust.cargoPath\": \"D:\\\\Cargo\\\\.cargo/bin/cargo.exe\", // Specifies path to Cargo binary if it's not in PATH\n        \"rust.formatOnSave\": true, // Turn on/off autoformatting file on save (EXPERIMENTAL)\n        \"rust.checkOnSave\": true,    \n        \"[rust]\": {\n            \n        },\n        \"workbench.startupEditor\": \"welcomePage\",\n        \"rust.mode\": \"rls\",\n        \"rust.rustup\": {\n            \"toolchain\": \"nightly-x86_64-pc-windows-gnu\",\n            \"nightlyToolchain\": \"nightly-x86_64-pc-windows-gnu\"\n        \n        },\n        \"rust.rls\": {\n            \"useRustfmt\":true,\n            \"env\": {\n            \"RUST_LOG\": \"rls=debug\"\n            }\n        }\n    }\n    ```\n\n    ​\n\n**这样就结束了,IDE配置这块以后再补充,时间太长了**\n\n参考:\n\n中文社区QQ群:303838735 \n\n[]: https://zhuanlan.zhihu.com/p/27782375\t\"Rust 环境配置事项一览\"\n\n","slug":"Rust语言Win环境搭建配置","published":1,"updated":"2022-09-03T07:30:55.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz8530027twfa4hp9ufvu","content":"<p>Windows环境下Rust语言的环境搭建与IDE配置<a id=\"more\"></a></p>\n<blockquote>\n<p>Rust 语言是Rust 是 Mozilla 开发的注重安全、性能和并发性的编程语言。“Rust”，由 web 语言的领军人物 <a href=\"https://baike.baidu.com/item/Brendan%20Eich\" target=\"_blank\" rel=\"noopener\">Brendan Eich</a>（js 之父），Dave Herman 以及 <a href=\"https://baike.baidu.com/item/Mozilla\" target=\"_blank\" rel=\"noopener\">Mozilla</a> 公司的 Graydon Hoare 合力开发。吸收了其他的语言的一些特性,并有自己独到之处</p>\n</blockquote>\n<ul>\n<li><p>进行下载安装</p>\n<p>首先进入rust 的官网进行下载安装</p>\n<p>[]: <a href=\"https://www.rust-lang.org/zh-CN/\" target=\"_blank\" rel=\"noopener\">https://www.rust-lang.org/zh-CN/</a>    “Rust官网”</p>\n<p>现在都用rustup来进行rust语言版本的管理因为rust语言版本更新很快</p>\n<p>双击rustup-init.exe后进入安装界面 选择<strong>2 Customize installation</strong></p>\n<ul>\n<li>是否用<strong>default host tripe</strong> 我选是</li>\n<li>使用哪个版本(stable,nightly),我选nightly</li>\n<li>是否加入环境变量(这个后期可以修改),我选是</li>\n</ul>\n</li>\n<li><p>配置环境变量及中科大源</p>\n<p>安装完成后在C盘下–&gt;用户–&gt;你的登陆用户名文件夹下会多出.rust文件夹 及.cargo文件夹</p>\n<p>如果你不想将rust的安装目录放置在系统盘 那么可以进行文件夹迁移,同时进行修改环境变量</p>\n<ul>\n<li><p>环境变量配置:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CARGO_HOME:D:\\Cargo\\.cargo</span><br><span class=\"line\">RUSTUP_HOME:D:\\Rustup\\.rustup</span><br></pre></td></tr></table></figure>\n\n<p>简单介绍下cargo ,cargo是rust语言的包管理器 有点类似java中maven等一系列项目构建工具,使用cargo可以很方便的管理rust工程.</p>\n<p>Path环境变量:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH:%CARGO_HOME%/bin;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>添加中科大镜像源</p>\n<p>因为GFW的问题 rust的官方源会链接不上 那么我们加入中科大的镜像源</p>\n<p>在.cargo文件夹下创建一个config文件,不带任何后缀</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[registry]</span><br><span class=\"line\">index = &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><br><span class=\"line\">[source.crates-io]</span><br><span class=\"line\">registry = &quot;https://github.com/rust-lang/crates.io-index&quot;</span><br><span class=\"line\">replace-with = &apos;ustc&apos;</span><br><span class=\"line\">[source.ustc]</span><br><span class=\"line\">registry = &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>加入RUSTUP_DIST_SERVER环境变量及RUSTUP_UPDATE_ROOT环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUSTUP_DIST_SERVER:http://mirrors.ustc.edu.cn/rust-static</span><br><span class=\"line\">RUSTUP_UPDATE_ROOT:http://mirrors.ustc.edu.cn/rust-static/rustup</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>至此rust语言安装完毕</strong></p>\n<ul>\n<li><p>检查 rustup安装 </p>\n<p>打开cmd输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\andy&gt;rustup -V</span><br><span class=\"line\">rustup 1.7.0 (813f7b7a8 2017-10-30)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<ul>\n<li><p>检查cargo安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\andy&gt;cargo -V</span><br><span class=\"line\">cargo 0.24.0-nightly (abd137ad1 2017-11-12)</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n</ul>\n<p>如果 提示没有默认的 toolchain 那么 install:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rustup install nightly-x86_64-pc-windows-gnu</span><br></pre></td></tr></table></figure>\n\n<p>将stable-gnu版本设为默认toolchain</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rustup default nightly-x86_64-pc-windows-gnu</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>安装相关插件</p>\n<ul>\n<li><p>安装rustfmt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\andy&gt;rustup show</span><br><span class=\"line\">Default host: x86_64-pc-windows-gnu</span><br><span class=\"line\"></span><br><span class=\"line\">nightly-x86_64-pc-windows-gnu (default)</span><br><span class=\"line\">rustc 1.23.0-nightly (6160040d8 2017-11-18)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将gnu版本设为默认</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\andy&gt;rustup default nightly-x86_64-pc-windows-gnu</span><br><span class=\"line\">info: using existing install for &apos;nightly-x86_64-pc-windows-gnu&apos;</span><br><span class=\"line\">info: default toolchain set to &apos;nightly-x86_64-pc-windows-gnu&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">  nightly-x86_64-pc-windows-gnu unchanged - rustc 1.23.0-nightly (6160040d8 2017</span><br><span class=\"line\">-11-18)</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>安装fmt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo +nightly-x86_64-pc-windows-gnu install rustfmt</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>安装racer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rustup component add rust-src --toolchain nightly-x86_64-pc-windows-gnu</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置 rust_src_path 环境变量(注意路径)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUST_SRC_PATH:D:\\Rustup\\.rustup\\toolchains\\nightly-x86_64-pc-windows-gnu\\lib\\rustlib\\src\\rust\\src</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>执行 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo +nightly install racer</span><br></pre></td></tr></table></figure>\n\n<p><strong>在安装插件时候如果之前你安装过该插件 那么就在命令后加入 –forece 这样就会覆盖安装</strong></p>\n</li>\n<li><p>安装RLS 如果nightly 已经安装了 那么只执行第二条就行了 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rustup component add rls --toolchain nightly-x86_64-pc-windows-gnu</span><br><span class=\"line\">rustup component add rust-analysis --toolchain nightly-x86_64-pc-windows-gnu</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>至此 插件安装完毕</strong></p>\n<ul>\n<li><p>配置IDE</p>\n<p>eclipse intellij idea vscode sumblime vs 都支持rust 这里只介绍idea 与vscode</p>\n<p><strong>Idea配置</strong></p>\n<ul>\n<li><p>下载IntelliJ 旗舰版 只有 CLion 支持调试</p>\n<p>进入Configureation—&gt;Settings—-&gt;Plugins 搜索Rust,会提示无插件可用,那么Search in repositories 可以看到Rust语言插件 进行安装 然后重启 idea</p>\n<p>重启完毕后,可以new rust工程了</p>\n</li>\n</ul>\n<p><strong>Vscode配置</strong></p>\n<ul>\n<li><p>首先安装用于调试的GDB,我这里安装的是gnu版本的rust </p>\n<p>下载<em>VisualGDB</em></p>\n<p>​</p>\n</li>\n<li><p>配置vscode首选项,可以按你自己的来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将设置放入此文件中以覆盖默认设置</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\Windows\\\\Sysnative\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe&quot;,</span><br><span class=\"line\">    &quot;editor.fontSize&quot;: 14,</span><br><span class=\"line\">    &quot;editor.fontFamily&quot;: &quot;Consolas, &apos;Courier New&apos;, monospace&quot;,</span><br><span class=\"line\">    &quot;editor.tabSize&quot;: 4,</span><br><span class=\"line\">    &quot;editor.cursorStyle&quot;: &quot;line&quot;,</span><br><span class=\"line\">    &quot;editor.multiCursorModifier&quot;: &quot;alt&quot;,</span><br><span class=\"line\">    &quot;editor.insertSpaces&quot;: true,</span><br><span class=\"line\">    &quot;editor.wordWrap&quot;: &quot;off&quot;,</span><br><span class=\"line\">    &quot;rust.racerPath&quot;: &quot;D:\\\\Cargo\\\\.cargo\\\\bin\\\\racer.exe&quot;, // Specifies path to Racer binary if it&apos;s not in PATH</span><br><span class=\"line\">    &quot;rust.rustLangSrcPath&quot;: &quot;D:\\\\Rustup\\\\.rustup\\\\toolchains\\\\nightly-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\src\\\\rust\\\\src&quot;, // Specifies path to /src directory of local copy of Rust sources</span><br><span class=\"line\">    &quot;rust.rustfmtPath&quot;: null, // Specifies path to Rustfmt binary if it&apos;s not in PATH</span><br><span class=\"line\">    &quot;rust.cargoPath&quot;: &quot;D:\\\\Cargo\\\\.cargo/bin/cargo.exe&quot;, // Specifies path to Cargo binary if it&apos;s not in PATH</span><br><span class=\"line\">    &quot;rust.formatOnSave&quot;: true, // Turn on/off autoformatting file on save (EXPERIMENTAL)</span><br><span class=\"line\">    &quot;rust.checkOnSave&quot;: true,    </span><br><span class=\"line\">    &quot;[rust]&quot;: &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;workbench.startupEditor&quot;: &quot;welcomePage&quot;,</span><br><span class=\"line\">    &quot;rust.mode&quot;: &quot;rls&quot;,</span><br><span class=\"line\">    &quot;rust.rustup&quot;: &#123;</span><br><span class=\"line\">        &quot;toolchain&quot;: &quot;nightly-x86_64-pc-windows-gnu&quot;,</span><br><span class=\"line\">        &quot;nightlyToolchain&quot;: &quot;nightly-x86_64-pc-windows-gnu&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;rust.rls&quot;: &#123;</span><br><span class=\"line\">        &quot;useRustfmt&quot;:true,</span><br><span class=\"line\">        &quot;env&quot;: &#123;</span><br><span class=\"line\">        &quot;RUST_LOG&quot;: &quot;rls=debug&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>这样就结束了,IDE配置这块以后再补充,时间太长了</strong></p>\n<p>参考:</p>\n<p>中文社区QQ群:303838735 </p>\n<p>[]: <a href=\"https://zhuanlan.zhihu.com/p/27782375\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/27782375</a>    “Rust 环境配置事项一览”</p>\n","site":{"data":{}},"excerpt":"<p>Windows环境下Rust语言的环境搭建与IDE配置</p>","more":"<p></p>\n<blockquote>\n<p>Rust 语言是Rust 是 Mozilla 开发的注重安全、性能和并发性的编程语言。“Rust”，由 web 语言的领军人物 <a href=\"https://baike.baidu.com/item/Brendan%20Eich\" target=\"_blank\" rel=\"noopener\">Brendan Eich</a>（js 之父），Dave Herman 以及 <a href=\"https://baike.baidu.com/item/Mozilla\" target=\"_blank\" rel=\"noopener\">Mozilla</a> 公司的 Graydon Hoare 合力开发。吸收了其他的语言的一些特性,并有自己独到之处</p>\n</blockquote>\n<ul>\n<li><p>进行下载安装</p>\n<p>首先进入rust 的官网进行下载安装</p>\n<p>[]: <a href=\"https://www.rust-lang.org/zh-CN/\" target=\"_blank\" rel=\"noopener\">https://www.rust-lang.org/zh-CN/</a>    “Rust官网”</p>\n<p>现在都用rustup来进行rust语言版本的管理因为rust语言版本更新很快</p>\n<p>双击rustup-init.exe后进入安装界面 选择<strong>2 Customize installation</strong></p>\n<ul>\n<li>是否用<strong>default host tripe</strong> 我选是</li>\n<li>使用哪个版本(stable,nightly),我选nightly</li>\n<li>是否加入环境变量(这个后期可以修改),我选是</li>\n</ul>\n</li>\n<li><p>配置环境变量及中科大源</p>\n<p>安装完成后在C盘下–&gt;用户–&gt;你的登陆用户名文件夹下会多出.rust文件夹 及.cargo文件夹</p>\n<p>如果你不想将rust的安装目录放置在系统盘 那么可以进行文件夹迁移,同时进行修改环境变量</p>\n<ul>\n<li><p>环境变量配置:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CARGO_HOME:D:\\Cargo\\.cargo</span><br><span class=\"line\">RUSTUP_HOME:D:\\Rustup\\.rustup</span><br></pre></td></tr></table></figure>\n\n<p>简单介绍下cargo ,cargo是rust语言的包管理器 有点类似java中maven等一系列项目构建工具,使用cargo可以很方便的管理rust工程.</p>\n<p>Path环境变量:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH:%CARGO_HOME%/bin;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>添加中科大镜像源</p>\n<p>因为GFW的问题 rust的官方源会链接不上 那么我们加入中科大的镜像源</p>\n<p>在.cargo文件夹下创建一个config文件,不带任何后缀</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[registry]</span><br><span class=\"line\">index = &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><br><span class=\"line\">[source.crates-io]</span><br><span class=\"line\">registry = &quot;https://github.com/rust-lang/crates.io-index&quot;</span><br><span class=\"line\">replace-with = &apos;ustc&apos;</span><br><span class=\"line\">[source.ustc]</span><br><span class=\"line\">registry = &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>加入RUSTUP_DIST_SERVER环境变量及RUSTUP_UPDATE_ROOT环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUSTUP_DIST_SERVER:http://mirrors.ustc.edu.cn/rust-static</span><br><span class=\"line\">RUSTUP_UPDATE_ROOT:http://mirrors.ustc.edu.cn/rust-static/rustup</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>至此rust语言安装完毕</strong></p>\n<ul>\n<li><p>检查 rustup安装 </p>\n<p>打开cmd输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\andy&gt;rustup -V</span><br><span class=\"line\">rustup 1.7.0 (813f7b7a8 2017-10-30)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<ul>\n<li><p>检查cargo安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\andy&gt;cargo -V</span><br><span class=\"line\">cargo 0.24.0-nightly (abd137ad1 2017-11-12)</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n</ul>\n<p>如果 提示没有默认的 toolchain 那么 install:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rustup install nightly-x86_64-pc-windows-gnu</span><br></pre></td></tr></table></figure>\n\n<p>将stable-gnu版本设为默认toolchain</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rustup default nightly-x86_64-pc-windows-gnu</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>安装相关插件</p>\n<ul>\n<li><p>安装rustfmt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\andy&gt;rustup show</span><br><span class=\"line\">Default host: x86_64-pc-windows-gnu</span><br><span class=\"line\"></span><br><span class=\"line\">nightly-x86_64-pc-windows-gnu (default)</span><br><span class=\"line\">rustc 1.23.0-nightly (6160040d8 2017-11-18)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将gnu版本设为默认</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\andy&gt;rustup default nightly-x86_64-pc-windows-gnu</span><br><span class=\"line\">info: using existing install for &apos;nightly-x86_64-pc-windows-gnu&apos;</span><br><span class=\"line\">info: default toolchain set to &apos;nightly-x86_64-pc-windows-gnu&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">  nightly-x86_64-pc-windows-gnu unchanged - rustc 1.23.0-nightly (6160040d8 2017</span><br><span class=\"line\">-11-18)</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>安装fmt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo +nightly-x86_64-pc-windows-gnu install rustfmt</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>安装racer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rustup component add rust-src --toolchain nightly-x86_64-pc-windows-gnu</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置 rust_src_path 环境变量(注意路径)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUST_SRC_PATH:D:\\Rustup\\.rustup\\toolchains\\nightly-x86_64-pc-windows-gnu\\lib\\rustlib\\src\\rust\\src</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>执行 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo +nightly install racer</span><br></pre></td></tr></table></figure>\n\n<p><strong>在安装插件时候如果之前你安装过该插件 那么就在命令后加入 –forece 这样就会覆盖安装</strong></p>\n</li>\n<li><p>安装RLS 如果nightly 已经安装了 那么只执行第二条就行了 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rustup component add rls --toolchain nightly-x86_64-pc-windows-gnu</span><br><span class=\"line\">rustup component add rust-analysis --toolchain nightly-x86_64-pc-windows-gnu</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>至此 插件安装完毕</strong></p>\n<ul>\n<li><p>配置IDE</p>\n<p>eclipse intellij idea vscode sumblime vs 都支持rust 这里只介绍idea 与vscode</p>\n<p><strong>Idea配置</strong></p>\n<ul>\n<li><p>下载IntelliJ 旗舰版 只有 CLion 支持调试</p>\n<p>进入Configureation—&gt;Settings—-&gt;Plugins 搜索Rust,会提示无插件可用,那么Search in repositories 可以看到Rust语言插件 进行安装 然后重启 idea</p>\n<p>重启完毕后,可以new rust工程了</p>\n</li>\n</ul>\n<p><strong>Vscode配置</strong></p>\n<ul>\n<li><p>首先安装用于调试的GDB,我这里安装的是gnu版本的rust </p>\n<p>下载<em>VisualGDB</em></p>\n<p>​</p>\n</li>\n<li><p>配置vscode首选项,可以按你自己的来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将设置放入此文件中以覆盖默认设置</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\Windows\\\\Sysnative\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe&quot;,</span><br><span class=\"line\">    &quot;editor.fontSize&quot;: 14,</span><br><span class=\"line\">    &quot;editor.fontFamily&quot;: &quot;Consolas, &apos;Courier New&apos;, monospace&quot;,</span><br><span class=\"line\">    &quot;editor.tabSize&quot;: 4,</span><br><span class=\"line\">    &quot;editor.cursorStyle&quot;: &quot;line&quot;,</span><br><span class=\"line\">    &quot;editor.multiCursorModifier&quot;: &quot;alt&quot;,</span><br><span class=\"line\">    &quot;editor.insertSpaces&quot;: true,</span><br><span class=\"line\">    &quot;editor.wordWrap&quot;: &quot;off&quot;,</span><br><span class=\"line\">    &quot;rust.racerPath&quot;: &quot;D:\\\\Cargo\\\\.cargo\\\\bin\\\\racer.exe&quot;, // Specifies path to Racer binary if it&apos;s not in PATH</span><br><span class=\"line\">    &quot;rust.rustLangSrcPath&quot;: &quot;D:\\\\Rustup\\\\.rustup\\\\toolchains\\\\nightly-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\src\\\\rust\\\\src&quot;, // Specifies path to /src directory of local copy of Rust sources</span><br><span class=\"line\">    &quot;rust.rustfmtPath&quot;: null, // Specifies path to Rustfmt binary if it&apos;s not in PATH</span><br><span class=\"line\">    &quot;rust.cargoPath&quot;: &quot;D:\\\\Cargo\\\\.cargo/bin/cargo.exe&quot;, // Specifies path to Cargo binary if it&apos;s not in PATH</span><br><span class=\"line\">    &quot;rust.formatOnSave&quot;: true, // Turn on/off autoformatting file on save (EXPERIMENTAL)</span><br><span class=\"line\">    &quot;rust.checkOnSave&quot;: true,    </span><br><span class=\"line\">    &quot;[rust]&quot;: &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;workbench.startupEditor&quot;: &quot;welcomePage&quot;,</span><br><span class=\"line\">    &quot;rust.mode&quot;: &quot;rls&quot;,</span><br><span class=\"line\">    &quot;rust.rustup&quot;: &#123;</span><br><span class=\"line\">        &quot;toolchain&quot;: &quot;nightly-x86_64-pc-windows-gnu&quot;,</span><br><span class=\"line\">        &quot;nightlyToolchain&quot;: &quot;nightly-x86_64-pc-windows-gnu&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;rust.rls&quot;: &#123;</span><br><span class=\"line\">        &quot;useRustfmt&quot;:true,</span><br><span class=\"line\">        &quot;env&quot;: &#123;</span><br><span class=\"line\">        &quot;RUST_LOG&quot;: &quot;rls=debug&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>这样就结束了,IDE配置这块以后再补充,时间太长了</strong></p>\n<p>参考:</p>\n<p>中文社区QQ群:303838735 </p>\n<p>[]: <a href=\"https://zhuanlan.zhihu.com/p/27782375\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/27782375</a>    “Rust 环境配置事项一览”</p>"},{"title":"Spring事件驱动之同步事件驱动监听","date":"2017-11-18T17:12:23.000Z","_content":"\n\n\nSpring事件驱动之同步事件驱动监听<!--more-->\n\n\n\n> 简单记录下Spring的事件驱动\n\n* 首先定义个event事件\n\n  ```\n  package com.commons.event;\n  import org.springframework.context.ApplicationEvent;\n  public class MyEvent extends ApplicationEvent {\n      private static final long serialVersionUID = 1L;\n      private Object obj;\n      \n      public Object getObj() {\n          return obj;\n      }\n      public void setObj(Object obj) {\n          this.obj = obj;\n      }\n      public MyEvent(Object source) {\n          super(source);\n      }\n      public MyEvent(Object source, Object obj) {\n          super(source);\n          this.obj = obj;\n      }   \n  } \n  ```\n\n  我这里就用Object 来代替你放置在事件中的数据了,注意需要进行**生成构造参数**.\n\n\n* 然后定义个发布者\n\n  ```java\n  package com.commons.event;\n  import org.springframework.beans.BeansException;\n  import org.springframework.context.ApplicationContext;\n  import org.springframework.context.ApplicationContextAware;\n  import org.springframework.context.ApplicationEvent;\n  import org.springframework.stereotype.Service;\n  @Service(\"myPublisher\")\n  public class MyPublisher implements ApplicationContextAware {\n      private static ApplicationContext applicationContext;\n      @Override\n      public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n          this.applicationContext = applicationContext;\n      }\n      public static void publish(ApplicationEvent event) {\n          applicationContext.publishEvent(event);\n      }\n  }     \n  ```\n\n  我这里将这个发布者注册到spring,好像因为之前spring上下文拿不到导致发布事件不成功,具体以后再说,建议spring管理\n\n* 定义监听器\n\n  ```java\n  package com.commons.event;\n  import org.slf4j.Logger;\n  import org.slf4j.LoggerFactory;\n  import org.springframework.context.ApplicationListener;\n  import org.springframework.stereotype.Component;\n  @Component(\"myListener\")\n  public class MyListener implements ApplicationListener<MyEvent> {\n      private static final Logger logger = LoggerFactory.getLogger(MyListener.class);\n      /**\n       * 在这里可以注入你需要的Bean 然后做逻辑操作\n       */\n      @Override\n      public void onApplicationEvent(MyEvent event) {\n          Object obj = event.getObj();\n          logger.info(\"监听器监听到事件{}发布\",event.getObj());\n      }\n  }\n  ```\n\n* 调用实例(我这里偷个懒就用postConstruct进行测试了因为在spring项目中):\n\n  ```\n  package com.commons.event;\n  import javax.annotation.PostConstruct;\n  import javax.annotation.Resource;\n  import org.springframework.stereotype.Component;\n  @Component\n  public class TestSpringEvent {\n      @Resource\n      private MyPublisher publisher;\n      @PostConstruct\n      private void testPublisher() {\n          publisher.publish(new MyEvent(MyListener.class,new String(\"test\")));\n      }\n  }    \n  ```\n\n  ​\n\n下一篇的事件驱动记录关于异步事件驱动以及事务相关","source":"_posts/Spring事件驱动之同步事件驱动监听.md","raw":"---\ntitle: Spring事件驱动之同步事件驱动监听\ndate: 2017-11-19 01:12:23\ntags: [Spring,Java]\ncategories: [Java]\n---\n\n\n\nSpring事件驱动之同步事件驱动监听<!--more-->\n\n\n\n> 简单记录下Spring的事件驱动\n\n* 首先定义个event事件\n\n  ```\n  package com.commons.event;\n  import org.springframework.context.ApplicationEvent;\n  public class MyEvent extends ApplicationEvent {\n      private static final long serialVersionUID = 1L;\n      private Object obj;\n      \n      public Object getObj() {\n          return obj;\n      }\n      public void setObj(Object obj) {\n          this.obj = obj;\n      }\n      public MyEvent(Object source) {\n          super(source);\n      }\n      public MyEvent(Object source, Object obj) {\n          super(source);\n          this.obj = obj;\n      }   \n  } \n  ```\n\n  我这里就用Object 来代替你放置在事件中的数据了,注意需要进行**生成构造参数**.\n\n\n* 然后定义个发布者\n\n  ```java\n  package com.commons.event;\n  import org.springframework.beans.BeansException;\n  import org.springframework.context.ApplicationContext;\n  import org.springframework.context.ApplicationContextAware;\n  import org.springframework.context.ApplicationEvent;\n  import org.springframework.stereotype.Service;\n  @Service(\"myPublisher\")\n  public class MyPublisher implements ApplicationContextAware {\n      private static ApplicationContext applicationContext;\n      @Override\n      public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n          this.applicationContext = applicationContext;\n      }\n      public static void publish(ApplicationEvent event) {\n          applicationContext.publishEvent(event);\n      }\n  }     \n  ```\n\n  我这里将这个发布者注册到spring,好像因为之前spring上下文拿不到导致发布事件不成功,具体以后再说,建议spring管理\n\n* 定义监听器\n\n  ```java\n  package com.commons.event;\n  import org.slf4j.Logger;\n  import org.slf4j.LoggerFactory;\n  import org.springframework.context.ApplicationListener;\n  import org.springframework.stereotype.Component;\n  @Component(\"myListener\")\n  public class MyListener implements ApplicationListener<MyEvent> {\n      private static final Logger logger = LoggerFactory.getLogger(MyListener.class);\n      /**\n       * 在这里可以注入你需要的Bean 然后做逻辑操作\n       */\n      @Override\n      public void onApplicationEvent(MyEvent event) {\n          Object obj = event.getObj();\n          logger.info(\"监听器监听到事件{}发布\",event.getObj());\n      }\n  }\n  ```\n\n* 调用实例(我这里偷个懒就用postConstruct进行测试了因为在spring项目中):\n\n  ```\n  package com.commons.event;\n  import javax.annotation.PostConstruct;\n  import javax.annotation.Resource;\n  import org.springframework.stereotype.Component;\n  @Component\n  public class TestSpringEvent {\n      @Resource\n      private MyPublisher publisher;\n      @PostConstruct\n      private void testPublisher() {\n          publisher.publish(new MyEvent(MyListener.class,new String(\"test\")));\n      }\n  }    \n  ```\n\n  ​\n\n下一篇的事件驱动记录关于异步事件驱动以及事务相关","slug":"Spring事件驱动之同步事件驱动监听","published":1,"updated":"2022-09-03T07:30:55.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz8550029twfaombar12k","content":"<p>Spring事件驱动之同步事件驱动监听<a id=\"more\"></a></p>\n<blockquote>\n<p>简单记录下Spring的事件驱动</p>\n</blockquote>\n<ul>\n<li><p>首先定义个event事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.commons.event;</span><br><span class=\"line\">import org.springframework.context.ApplicationEvent;</span><br><span class=\"line\">public class MyEvent extends ApplicationEvent &#123;</span><br><span class=\"line\">    private static final long serialVersionUID = 1L;</span><br><span class=\"line\">    private Object obj;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public Object getObj() &#123;</span><br><span class=\"line\">        return obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setObj(Object obj) &#123;</span><br><span class=\"line\">        this.obj = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public MyEvent(Object source) &#123;</span><br><span class=\"line\">        super(source);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public MyEvent(Object source, Object obj) &#123;</span><br><span class=\"line\">        super(source);</span><br><span class=\"line\">        this.obj = obj;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我这里就用Object 来代替你放置在事件中的数据了,注意需要进行<strong>生成构造参数</strong>.</p>\n</li>\n</ul>\n<ul>\n<li><p>然后定义个发布者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.commons.event;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.BeansException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"myPublisher\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPublisher</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.applicationContext = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">publish</span><span class=\"params\">(ApplicationEvent event)</span> </span>&#123;</span><br><span class=\"line\">        applicationContext.publishEvent(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我这里将这个发布者注册到spring,好像因为之前spring上下文拿不到导致发布事件不成功,具体以后再说,建议spring管理</p>\n</li>\n<li><p>定义监听器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.commons.event;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(<span class=\"string\">\"myListener\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationListener</span>&lt;<span class=\"title\">MyEvent</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(MyListener<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在这里可以注入你需要的Bean 然后做逻辑操作</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(MyEvent event)</span> </span>&#123;</span><br><span class=\"line\">        Object obj = event.getObj();</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"监听器监听到事件&#123;&#125;发布\"</span>,event.getObj());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用实例(我这里偷个懒就用postConstruct进行测试了因为在spring项目中):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.commons.event;</span><br><span class=\"line\">import javax.annotation.PostConstruct;</span><br><span class=\"line\">import javax.annotation.Resource;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class TestSpringEvent &#123;</span><br><span class=\"line\">    @Resource</span><br><span class=\"line\">    private MyPublisher publisher;</span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    private void testPublisher() &#123;</span><br><span class=\"line\">        publisher.publish(new MyEvent(MyListener.class,new String(&quot;test&quot;)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n</ul>\n<p>下一篇的事件驱动记录关于异步事件驱动以及事务相关</p>\n","site":{"data":{}},"excerpt":"<p>Spring事件驱动之同步事件驱动监听</p>","more":"<p></p>\n<blockquote>\n<p>简单记录下Spring的事件驱动</p>\n</blockquote>\n<ul>\n<li><p>首先定义个event事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.commons.event;</span><br><span class=\"line\">import org.springframework.context.ApplicationEvent;</span><br><span class=\"line\">public class MyEvent extends ApplicationEvent &#123;</span><br><span class=\"line\">    private static final long serialVersionUID = 1L;</span><br><span class=\"line\">    private Object obj;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public Object getObj() &#123;</span><br><span class=\"line\">        return obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setObj(Object obj) &#123;</span><br><span class=\"line\">        this.obj = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public MyEvent(Object source) &#123;</span><br><span class=\"line\">        super(source);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public MyEvent(Object source, Object obj) &#123;</span><br><span class=\"line\">        super(source);</span><br><span class=\"line\">        this.obj = obj;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我这里就用Object 来代替你放置在事件中的数据了,注意需要进行<strong>生成构造参数</strong>.</p>\n</li>\n</ul>\n<ul>\n<li><p>然后定义个发布者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.commons.event;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.BeansException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"myPublisher\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPublisher</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.applicationContext = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">publish</span><span class=\"params\">(ApplicationEvent event)</span> </span>&#123;</span><br><span class=\"line\">        applicationContext.publishEvent(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我这里将这个发布者注册到spring,好像因为之前spring上下文拿不到导致发布事件不成功,具体以后再说,建议spring管理</p>\n</li>\n<li><p>定义监听器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.commons.event;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(<span class=\"string\">\"myListener\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationListener</span>&lt;<span class=\"title\">MyEvent</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(MyListener<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在这里可以注入你需要的Bean 然后做逻辑操作</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(MyEvent event)</span> </span>&#123;</span><br><span class=\"line\">        Object obj = event.getObj();</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"监听器监听到事件&#123;&#125;发布\"</span>,event.getObj());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用实例(我这里偷个懒就用postConstruct进行测试了因为在spring项目中):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.commons.event;</span><br><span class=\"line\">import javax.annotation.PostConstruct;</span><br><span class=\"line\">import javax.annotation.Resource;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class TestSpringEvent &#123;</span><br><span class=\"line\">    @Resource</span><br><span class=\"line\">    private MyPublisher publisher;</span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    private void testPublisher() &#123;</span><br><span class=\"line\">        publisher.publish(new MyEvent(MyListener.class,new String(&quot;test&quot;)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n</ul>\n<p>下一篇的事件驱动记录关于异步事件驱动以及事务相关</p>"},{"title":"Storm简介","date":"2019-09-14T12:57:32.000Z","_content":"\nStorm概念记录<!--more-->\n\n* 拓扑\n\n  拓扑（toplogies） 是对实时计算应用逻辑的封装，作用与MapReduce的任务 job 很相似，区别是mapreduce的job在计算后得到结果后会结束但是拓扑会一直在运行，除非你手动结束它\n\n  * TopologiesBuilder\n\n    用来构建拓扑。\n\n* 流\n\n* 数据源\n\n* 数据流处理单元\n\n* 数据流分组\n\n* 可靠性\n\n* 任务\n\n* 工作进程","source":"_posts/Storm简介.md","raw":"---\ntitle: Storm简介\ndate: 2019-09-14 20:57:32\ntags: [BigData]\ncategories: [BigData]\n---\n\nStorm概念记录<!--more-->\n\n* 拓扑\n\n  拓扑（toplogies） 是对实时计算应用逻辑的封装，作用与MapReduce的任务 job 很相似，区别是mapreduce的job在计算后得到结果后会结束但是拓扑会一直在运行，除非你手动结束它\n\n  * TopologiesBuilder\n\n    用来构建拓扑。\n\n* 流\n\n* 数据源\n\n* 数据流处理单元\n\n* 数据流分组\n\n* 可靠性\n\n* 任务\n\n* 工作进程","slug":"Storm简介","published":1,"updated":"2022-09-03T07:30:55.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz858002dtwfaxe8064dq","content":"<p>Storm概念记录<a id=\"more\"></a></p>\n<ul>\n<li><p>拓扑</p>\n<p>拓扑（toplogies） 是对实时计算应用逻辑的封装，作用与MapReduce的任务 job 很相似，区别是mapreduce的job在计算后得到结果后会结束但是拓扑会一直在运行，除非你手动结束它</p>\n<ul>\n<li><p>TopologiesBuilder</p>\n<p>用来构建拓扑。</p>\n</li>\n</ul>\n</li>\n<li><p>流</p>\n</li>\n<li><p>数据源</p>\n</li>\n<li><p>数据流处理单元</p>\n</li>\n<li><p>数据流分组</p>\n</li>\n<li><p>可靠性</p>\n</li>\n<li><p>任务</p>\n</li>\n<li><p>工作进程</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Storm概念记录</p>","more":"<p></p>\n<ul>\n<li><p>拓扑</p>\n<p>拓扑（toplogies） 是对实时计算应用逻辑的封装，作用与MapReduce的任务 job 很相似，区别是mapreduce的job在计算后得到结果后会结束但是拓扑会一直在运行，除非你手动结束它</p>\n<ul>\n<li><p>TopologiesBuilder</p>\n<p>用来构建拓扑。</p>\n</li>\n</ul>\n</li>\n<li><p>流</p>\n</li>\n<li><p>数据源</p>\n</li>\n<li><p>数据流处理单元</p>\n</li>\n<li><p>数据流分组</p>\n</li>\n<li><p>可靠性</p>\n</li>\n<li><p>任务</p>\n</li>\n<li><p>工作进程</p>\n</li>\n</ul>"},{"title":"Spring源码一","date":"2018-10-27T03:22:12.000Z","_content":"\nSpring源码(1)<!--more-->\n\n#### 源码下载\n\n写的比较匆忙 ，结合Ctrl+F进行寻找关键字进行查询是最妙的。\n\n* 下载源码\n\n  首先从github上下载源码\n\n  ```\n  git clonehttps://github.com/spring-projects/spring-framework.git spring-framework\n  ```\n\n  你也可以用SourceTree (一个界面化的git工具) 来管理你的git项目\n\n* 下载gradle\n\n  ```\n  https://gradle.org/\n  ```\n\n  下载完之后需要进行环境变量的配置\n\n  * 在环境变量中配置``GRADLE_HOME=D:\\ENV\\gradle-4.10.2-bin\\gradle-4.10.2``\n\n  * 添加path变量 ``%GRADLE_HOME%\\bin``\n\n  * 测试\n\n    ```\n    PS C:\\Users\\andreby\\Desktop> gradle -version\n    \n    ------------------------------------------------------------\n    Gradle 4.10.2\n    ------------------------------------------------------------\n    \n    Build time:   2018-09-19 18:10:15 UTC\n    Revision:     b4d8d5d170bb4ba516e88d7fe5647e2323d791dd\n    \n    Kotlin DSL:   1.0-rc-6\n    Kotlin:       1.2.61\n    Groovy:       2.4.15\n    Ant:          Apache Ant(TM) version 1.9.11 compiled on March 23 2018\n    JVM:          1.8.0_171 (Oracle Corporation 25.171-b11)\n    OS:           Windows 10 10.0 amd64\n    ```\n\n* 使用gradle将源码转换为eclipse 工程\n\n  Spring是分多模块的，所以你要查看哪个模块的源码，就进哪个模块的目录下执行以下命令就可以看到了。\n\n  ```\n  gradle cleanIdea eclipse \n  ```\n\n  **可能需要梯子**\n\n* 导入工程,即可食用,注意各个工程之间的依赖\n\n* 导入后的问题\n\n  导入后发现一片红色感叹号，看下sts中的problems的选项框，发现是缺少jar包\n\n  ``spring-cglib-repack-3.2.8 `` 和``spring-objenesis-repack-3.0.1.jar ``\n\n   我查了下网上大神们的说法：\n\n  **通过阅读源码发现为了避免第三方 class 的冲突，spring 把最新的 cglib 和 objenesis 给 repack 了**\n\n  参考链接：\n\n  []: https://blog.csdn.net/sekiu/article/details/50624180\n\n#### Spring-Core\n\n正常的spring启动，是以xml配置bean然后进行启动，web项目由web容器来管理spring容器。\n\n我们在applicationContext.xml中配置好bean后，那么启动时候加载这个xml就可以了。\n\n### web容器启动流程\n\n以web项目为例子 springmvc项目 一般使用web.xml进行管理web容器，而spring容器一般交付给web容器进行管理。\n\n* tomcat 启动，加载context监听器。\n\n  首先tomcat的StandardContext类在tomcat启动时候会调用``listenerStart``\n\n  去加载配置在web.xml中的监听器\n\n  webxml中的配置的spring的ContextLoadListener\n\n  ContextLoaderListener 继承自ServletContextListener\n\n  嗯，首先加载WebAppRootListener 这个也是继承自ServletContextListener的\n\n  ```\n  ...\n  <listener>\n  <listener-class>org.springframework.web.util.WebAppRootListener</listener-class>\n  </listener>\n  <listener>\n   <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n  <listener>\n      <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>\n  </listener>\n  ```\n\n  1.StardandContext中的listenerStart方法：\n\n  ```\n     /**\n       * Configure the set of instantiated application event listeners\n       * for this Context.\n       * @return <code>true</code> if all listeners wre\n       * initialized successfully, or <code>false</code> otherwise.\n       */\n      public boolean listenerStart() {\n  \n          if (log.isDebugEnabled())\n              log.debug(\"Configuring application event listeners\");\n  \n          // Instantiate the required listeners\n          String listeners[] = findApplicationListeners();\n          Object results[] = new Object[listeners.length];\n          boolean ok = true;\n          for (int i = 0; i < results.length; i++) {\n              if (getLogger().isDebugEnabled())\n                  getLogger().debug(\" Configuring event listener class '\" +\n                      listeners[i] + \"'\");\n              try {\n                  String listener = listeners[i];\n                  results[i] = getInstanceManager().newInstance(listener);\n              } catch (Throwable t) {\n                  t = ExceptionUtils.unwrapInvocationTargetException(t);\n                  ExceptionUtils.handleThrowable(t);\n                  getLogger().error(sm.getString(\n                          \"standardContext.applicationListener\", listeners[i]), t);\n                  ok = false;\n              }\n          }\n          if (!ok) {\n              getLogger().error(sm.getString(\"standardContext.applicationSkipped\"));\n              return false;\n          }\n  \n          // Sort listeners in two arrays\n          List<Object> eventListeners = new ArrayList<>();\n          List<Object> lifecycleListeners = new ArrayList<>();\n          for (int i = 0; i < results.length; i++) {\n              if ((results[i] instanceof ServletContextAttributeListener)\n                  || (results[i] instanceof ServletRequestAttributeListener)\n                  || (results[i] instanceof ServletRequestListener)\n                  || (results[i] instanceof HttpSessionIdListener)\n                  || (results[i] instanceof HttpSessionAttributeListener)) {\n                  eventListeners.add(results[i]);\n              }\n              if ((results[i] instanceof ServletContextListener)\n                  || (results[i] instanceof HttpSessionListener)) {\n                  lifecycleListeners.add(results[i]);\n              }\n          }\n  \n          // Listener instances may have been added directly to this Context by\n          // ServletContextInitializers and other code via the pluggability APIs.\n          // Put them these listeners after the ones defined in web.xml and/or\n          // annotations then overwrite the list of instances with the new, full\n          // list.\n          for (Object eventListener: getApplicationEventListeners()) {\n              eventListeners.add(eventListener);\n          }\n          setApplicationEventListeners(eventListeners.toArray());\n          for (Object lifecycleListener: getApplicationLifecycleListeners()) {\n              lifecycleListeners.add(lifecycleListener);\n              if (lifecycleListener instanceof ServletContextListener) {\n                  noPluggabilityListeners.add(lifecycleListener);\n              }\n          }\n          setApplicationLifecycleListeners(lifecycleListeners.toArray());\n  \n          // Send application start events\n  \n          if (getLogger().isDebugEnabled())\n              getLogger().debug(\"Sending application start events\");\n  \n          // Ensure context is not null\n          getServletContext();\n          context.setNewServletContextListenerAllowed(false);\n  \n          Object instances[] = getApplicationLifecycleListeners();\n          if (instances == null || instances.length == 0) {\n              return ok;\n          }\n  \t\t//Spring中经典的事件驱动， 创建一个event\n  \t\t//1.1构建一个事件 内置Context成员变量\n          ServletContextEvent event = new ServletContextEvent(getServletContext());\n          ServletContextEvent tldEvent = null;\n          if (noPluggabilityListeners.size() > 0) {\n              noPluggabilityServletContext = new NoPluggabilityServletContext(getServletContext());\n              tldEvent = new ServletContextEvent(noPluggabilityServletContext);\n          }\n          //1.2这里遍历循环 加载所有的继承自ServletContextListener\n          for (int i = 0; i < instances.length; i++) {\n              if (!(instances[i] instanceof ServletContextListener))\n                  continue;\n              ServletContextListener listener =\n                  (ServletContextListener) instances[i];\n              try {\n                  fireContainerEvent(\"beforeContextInitialized\", listener);\n                  if (noPluggabilityListeners.contains(listener)) {\n                  \t**//注意这里要加载tldEvent**\n                      listener.contextInitialized(tldEvent);\n                  } else {\n                      listener.contextInitialized(event);\n                  }\n                  fireContainerEvent(\"afterContextInitialized\", listener);\n              } catch (Throwable t) {\n                  ExceptionUtils.handleThrowable(t);\n                  fireContainerEvent(\"afterContextInitialized\", listener);\n                  getLogger().error\n                      (sm.getString(\"standardContext.listenerStart\",\n                                    instances[i].getClass().getName()), t);\n                  ok = false;\n              }\n          }\n          return ok;\n  \n      }\n  \n  ```\n\n  2.那首先加载 WebRootContextListener\n\n  ```\n  ...\n  public class WebAppRootListener implements ServletContextListener {\n  \n  \t@Override\n  \tpublic void contextInitialized(ServletContextEvent event) {\n  \t\tWebUtils.setWebAppRootSystemProperty(event.getServletContext());\n  \t}\n  ...\n  ```\n\n  ```\n  \tpublic static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {\n  \t\tAssert.notNull(servletContext, \"ServletContext must not be null\");\n  \t\t//获得context的根目录\n  \t\tString root = servletContext.getRealPath(\"/\");\n  \t\tif (root == null) {\n  \t\t\tthrow new IllegalStateException(\n  \t\t\t\t\"Cannot set web app root system property when WAR file is not expanded\");\n  \t\t}\n  \t\t//WEB_APP_ROOT_KEY_PARAM=webAppRootKey 就是在 web.xml文件中定义的webAppRootKey\n  \t\tString param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM);\n  \t\t//\n  \t\tString key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY);\n  \t\tString oldValue = System.getProperty(key);\n  \t\tif (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {\n  \t\t\tthrow new IllegalStateException(\n  \t\t\t\t\"Web app root system property already set to different value: '\" +\n  \t\t\t\tkey + \"' = [\" + oldValue + \"] instead of [\" + root + \"] - \" +\n  \t\t\t\t\"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!\");\n  \t\t}\n  \t\t//设置系统环境变量\n  \t\tSystem.setProperty(key, root);\n  \t\tservletContext.log(\"Set web app root system property: '\" + key + \"' = [\" + root + \"]\");\n  \t}\n  ```\n\n  3.**加载Spring的ContextLoaderListener**\n\n  ```\n  public class ContextLoaderListener extends ContextLoader implements ServletContextListener {\n  ...\n  \t@Override\n  \tpublic void contextInitialized(ServletContextEvent event) {\n  \t\t//3.1初始化web容器对象\n  \t\tinitWebApplicationContext(event.getServletContext());\n  \t}\n  ...\n  \n  ```\n\n  3.1跳转到ContextLoader进行加载上下文环境\n\n  ```\n  public class ContextLoader {\n  ...\n  \tstatic {\n  \t\t// Load default strategy implementations from properties file.\n  \t\t// This is currently strictly internal and not meant to be customized\n  \t\t// by application developers.\n  \t\ttry {\n  \t\t\tClassPathResource resource = new ClassPathResource(DEFAULT_STRATEGIES_PATH, ContextLoader.class);\n  \t\t\tdefaultStrategies = PropertiesLoaderUtils.loadProperties(resource);\n  \t\t}\n  \t\tcatch (IOException ex) {\n  \t\t\tthrow new IllegalStateException(\"Could not load 'ContextLoader.properties': \" + ex.getMessage());\n  \t\t}\n  \t}\n  \t...\n  \t/**\n  \t * Initialize Spring's web application context for the given servlet context,\n  \t * using the application context provided at construction time, or creating a new one\n  \t * according to the \"{@link #CONTEXT_CLASS_PARAM contextClass}\" and\n  \t * \"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}\" context-params.\n  \t * @param servletContext current servlet context\n  \t * @return the new WebApplicationContext\n  \t * @see #ContextLoader(WebApplicationContext)\n  \t * @see #CONTEXT_CLASS_PARAM\n  \t * @see #CONFIG_LOCATION_PARAM\n  \t */\n  \tpublic WebApplicationContext initWebApplicationContext(ServletContext servletContext) {\n  \t\tif (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {\n  \t\t\tthrow new IllegalStateException(\n  \t\t\t\t\t\"Cannot initialize context because there is already a root application context present - \" +\n  \t\t\t\t\t\"check whether you have multiple ContextLoader* definitions in your web.xml!\");\n  \t\t}\n  \n  \t\tLog logger = LogFactory.getLog(ContextLoader.class);\n  \t\tservletContext.log(\"Initializing Spring root WebApplicationContext\");\n  \t\tif (logger.isInfoEnabled()) {\n  \t\t\tlogger.info(\"Root WebApplicationContext: initialization started\");\n  \t\t}\n  \t\t//记录初始化时间\n  \t\tlong startTime = System.currentTimeMillis();\n  \n  \t\ttry {\n  \t\t\t// Store context in local instance variable, to guarantee that\n  \t\t\t// it is available on ServletContext shutdown.\n  \t\t\tif (this.context == null) {\n  \t\t\t//3.1.1如果上下文环境对象为null，那么实例化一个\n  \t\t\t\tthis.context = createWebApplicationContext(servletContext);\n  \t\t\t}\n  \t\t\tif (this.context instanceof ConfigurableWebApplicationContext) {\n  \t\t\t\tConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context;\n  \t\t\t\tif (!cwac.isActive()) {\n  \t\t\t\t\t// The context has not yet been refreshed -> provide services such as\n  \t\t\t\t\t// setting the parent context, setting the application context id, etc\n  \t\t\t\t\tif (cwac.getParent() == null) {\n  \t\t\t\t\t\t// The context instance was injected without an explicit parent ->\n  \t\t\t\t\t\t// determine parent for root web application context, if any.\n  \t\t\t\t\t\t//加载父容器\n  \t\t\t\t\t\tApplicationContext parent = loadParentContext(servletContext);\n  \t\t\t\t\t\tcwac.setParent(parent);\n  \t\t\t\t\t}\n  \t\t\t\t\t//3.1.2配置并刷新web上下文环境\n  \t\t\t\t\tconfigureAndRefreshWebApplicationContext(cwac, servletContext);\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context);\n  \n  \t\t\tClassLoader ccl = Thread.currentThread().getContextClassLoader();\n  \t\t\tif (ccl == ContextLoader.class.getClassLoader()) {\n  \t\t\t\tcurrentContext = this.context;\n  \t\t\t}\n  \t\t\telse if (ccl != null) {\n  \t\t\t\tcurrentContextPerThread.put(ccl, this.context);\n  \t\t\t}\n  \n  \t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\tlogger.debug(\"Published root WebApplicationContext as ServletContext attribute with name [\" +\n  \t\t\t\t\t\tWebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + \"]\");\n  \t\t\t}\n  \t\t\tif (logger.isInfoEnabled()) {\n  \t\t\t\tlong elapsedTime = System.currentTimeMillis() - startTime;\n  \t\t\t\tlogger.info(\"Root WebApplicationContext: initialization completed in \" + elapsedTime + \" ms\");\n  \t\t\t}\n  \n  \t\t\treturn this.context;\n  \t\t}\n  \t\tcatch (RuntimeException ex) {\n  \t\t\tlogger.error(\"Context initialization failed\", ex);\n  \t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);\n  \t\t\tthrow ex;\n  \t\t}\n  \t\tcatch (Error err) {\n  \t\t\tlogger.error(\"Context initialization failed\", err);\n  \t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err);\n  \t\t\tthrow err;\n  \t\t}\n  \t}\n  \t\n  ```\n\n  3.1.1实例化上下文环境对象\n\n  ```\n  protected WebApplicationContext createWebApplicationContext(ServletContext sc) {\n  //拿到class对象\n  Class<?> contextClass = determineContextClass(sc);\n  \t\tif (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {\n  \t\t\tthrow new ApplicationContextException(\"Custom context class [\" + contextClass.getName() +\n  \t\t\t\t\t\"] is not of type [\" + ConfigurableWebApplicationContext.class.getName() + \"]\");\n  \t\t}\n  \t\t//反射生成对象 ConfigurableWebApplicationContext\n  \t\treturn ( ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);\n  \t}\n  ```\n\n  加载父类容器\n\n  ```\n  public class ContextLoader {\n  ...\n  \t/**\n  \t * Template method with default implementation (which may be overridden by a\n  \t * subclass), to load or obtain an ApplicationContext instance which will be\n  \t * used as the parent context of the root WebApplicationContext. If the\n  \t * return value from the method is null, no parent context is set.\\\n  \t // 注意下面的话 意思是允许加载多web容器\n  \t * <p>The main reason to load a parent context here is to allow multiple root\n  \t * web application contexts to all be children of a shared EAR context, or\n  \t * alternately to also share the same parent context that is visible to\n  \t * EJBs. For pure web applications, there is usually no need to worry about\n  \t * having a parent context to the root web application context.\n  \t * <p>The default implementation uses\n  \t * {@link org.springframework.context.access.ContextSingletonBeanFactoryLocator},\n  \t * configured via {@link #LOCATOR_FACTORY_SELECTOR_PARAM} and\n  \t * {@link #LOCATOR_FACTORY_KEY_PARAM}, to load a parent context\n  \t * which will be shared by all other users of ContextsingletonBeanFactoryLocator\n  \t * which also use the same configuration parameters.\n  \t * @param servletContext current servlet context\n  \t * @return the parent application context, or {@code null} if none\n  \t * @see org.springframework.context.access.ContextSingletonBeanFactoryLocator\n  \t */\n  \tprotected ApplicationContext loadParentContext(ServletContext servletContext) {\n  \t\tApplicationContext parentContext = null;\n  \t\tString locatorFactorySelector = servletContext.getInitParameter(LOCATOR_FACTORY_SELECTOR_PARAM);\n  \t\tString parentContextKey = servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM);\n  \n  \t\tif (parentContextKey != null) {\n  \t\t\t// locatorFactorySelector may be null, indicating the default \"classpath*:beanRefContext.xml\"\n  \t\t\tBeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance(locatorFactorySelector);\n  \t\t\tLog logger = LogFactory.getLog(ContextLoader.class);\n  \t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\tlogger.debug(\"Getting parent context definition: using parent context key of '\" +\n  \t\t\t\t\t\tparentContextKey + \"' with BeanFactoryLocator\");\n  \t\t\t}\n  \t\t\tthis.parentContextRef = locator.useBeanFactory(parentContextKey);\n  \t\t\tparentContext = (ApplicationContext) this.parentContextRef.getFactory();\n  \t\t}\n  \n  \t\treturn parentContext;\n  \t}\n  ...\n  ```\n\n  3.1.2配置并刷新web上下文环境\n\n  ```\n  public class ContextLoader {\n  ...\n  protected void configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext wac, ServletContext sc) {\n  \t\tif (ObjectUtils.identityToString(wac).equals(wac.getId())) {\n  \t\t\t// The application context id is still set to its original default value\n  \t\t\t// -> assign a more useful id based on available information\n  \t\t\tString idParam = sc.getInitParameter(CONTEXT_ID_PARAM);\n  \t\t\tif (idParam != null) {\n  \t\t\t\twac.setId(idParam);\n  \t\t\t}\n  \t\t\telse {\n  \t\t\t\t// Generate default id...\n  \t\t\t\twac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX +\n  \t\t\t\t\t\tObjectUtils.getDisplayString(sc.getContextPath()));\n  \t\t\t}\n  \t\t}\n  \t\t//设置上下文环境对象\n  \t\twac.setServletContext(sc);\n  \t\t//获取初始化变量\n  \t\tString configLocationParam = sc.getInitParameter(CONFIG_LOCATION_PARAM);\n  \t\tif (configLocationParam != null) {\n  \t\t//设置初始化变量到web容器中\n  \t\t//设置配置location到web容器这里的configLocationParam 就是web.xml中配置的\t\t     //classpath:xxxxxx.xml\n  \t\t\twac.setConfigLocation(configLocationParam);\n  \t\t}\n  \n  \t\t// The wac environment's #initPropertySources will be called in any case when the context\n  \t\t// is refreshed; do it eagerly here to ensure servlet property sources are in place for\n  \t\t// use in any post-processing or initialization that occurs below prior to #refresh\n  \t\t//获取环境对象\n  \t\tConfigurableEnvironment env = wac.getEnvironment();\n  \t\t//3.1.2.1初始化一些配置properties\n      \tif (env instanceof ConfigurableWebEnvironment) {\n  \t\t\t((ConfigurableWebEnvironment) env).initPropertySources(sc, null);\n  \t\t}\n  \t\t//3.1.2.2装配上下文环境对象\n  \t\tcustomizeContext(sc, wac);\n  \t\t//3.1.2.3刷新上下文环境\n  \t\twac.refresh();\n  \t}\n  \t...\n  \t}\n  ```\n\n  3.1.2.1初始化一些配置properties\n\n  ```\n  public class StandardServletEnvironment extends StandardEnvironment implements ConfigurableWebEnvironment {\n  ...\n  \t@Override\n  \tpublic void initPropertySources(ServletContext servletContext, ServletConfig servletConfig) {\n  \t\tWebApplicationContextUtils.initServletPropertySources(getPropertySources(), servletContext, servletConfig);\n  \t}\n  ...\n  }\n  public abstract class WebApplicationContextUtils {\n  ...\n  \t/**\n  \t * Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with\n  \t * actual instances populated with the given {@code servletContext} and\n  \t * {@code servletConfig} objects.\n  \t * <p>This method is idempotent with respect to the fact it may be called any number\n  \t * of times but will perform replacement of stub property sources with their\n  \t * corresponding actual property sources once and only once.\n  \t * @param propertySources the {@link MutablePropertySources} to initialize (must not\n  \t * be {@code null})\n  \t * @param servletContext the current {@link ServletContext} (ignored if {@code null}\n  \t * or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME\n  \t * servlet context property source} has already been initialized)\n  \t * @param servletConfig the current {@link ServletConfig} (ignored if {@code null}\n  \t * or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME\n  \t * servlet config property source} has already been initialized)\n  \t * @see org.springframework.core.env.PropertySource.StubPropertySource\n  \t * @see org.springframework.core.env.ConfigurableEnvironment#getPropertySources()\n  \t */\n  \tpublic static void initServletPropertySources(\n  \t\t\tMutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {\n  \n  \t\tAssert.notNull(propertySources, \"'propertySources' must not be null\");\n  \t\t//propertySources包含这些初始化配置[servletConfigInitParams,servletContextInitParams,jndiProperties,systemProperties,systemEnvironment]\n  \t\t//SERVLET_CONTEXT_PROPERTY_SOURCE_NAME=servletContextInitParams\n  \t\t//\n  \t\tif (servletContext != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&\n  \t\t\t\tpropertySources.get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {\n  \t\t\tpropertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,\n  \t\t\t\t\tnew ServletContextPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext));\n  \t\t}\n  \t\tif (servletConfig != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&\n  \t\t\t\tpropertySources.get(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {\n  \t\t\tpropertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,\n  \t\t\t\t\tnew ServletConfigPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig));\n  \t\t}\n  \t}\n  ...\n  }\n  ```\n\n  3.1.2.2装配上下文环境对象\n\n  ```\n  public class ContextLoader {\n  ...\n  /**\n  \t * Customize the {@link ConfigurableWebApplicationContext} created by this\n  \t * ContextLoader after config locations have been supplied to the context\n  \t * but before the context is <em>refreshed</em>.\n  \t * <p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)\n  \t * determines} what (if any) context initializer classes have been specified through\n  \t * {@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and\n  \t * {@linkplain ApplicationContextInitializer#initialize invokes each} with the\n  \t * given web application context.\n  \t * <p>Any {@code ApplicationContextInitializers} implementing\n  \t * {@link org.springframework.core.Ordered Ordered} or marked with @{@link\n  \t * org.springframework.core.annotation.Order Order} will be sorted appropriately.\n  \t * @param sc the current servlet context\n  \t * @param wac the newly created application context\n  \t * @see #CONTEXT_INITIALIZER_CLASSES_PARAM\n  \t * @see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)\n  \t */\n  \tprotected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {\n  \t\tList<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =\n  \t\t\t\tdetermineContextInitializerClasses(sc);\n  \n  \t\tfor (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {\n  \t\t\tClass<?> initializerContextClass =\n  \t\t\t\t\tGenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class);\n  \t\t\tif (initializerContextClass != null && !initializerContextClass.isInstance(wac)) {\n  \t\t\t\tthrow new ApplicationContextException(String.format(\n  \t\t\t\t\t\t\"Could not apply context initializer [%s] since its generic parameter [%s] \" +\n  \t\t\t\t\t\t\"is not assignable from the type of application context used by this \" +\n  \t\t\t\t\t\t\"context loader: [%s]\", initializerClass.getName(), initializerContextClass.getName(),\n  \t\t\t\t\t\twac.getClass().getName()));\n  \t\t\t}\n  \t\t\tthis.contextInitializers.add(BeanUtils.instantiateClass(initializerClass));\n  \t\t}\n  \n  \t\tAnnotationAwareOrderComparator.sort(this.contextInitializers);\n  \t\tfor (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : this.contextInitializers) {\n  \t\t\t//3.1.2.2.1遍历所有的上下文初始化器，进行初始化容器\n  \t\t\tinitializer.initialize(wac);\n  \t\t}\n  \t}\n  ...\n  }\n  ```\n\n  3.1.2.2.1遍历所有的上下文初始化器，进行初始化容器\n\n  ```\n  public interface ApplicationContextInitializer<C extends ConfigurableApplicationContext> {\n  \n  \t/**\n  \t * Initialize the given application context.\n  \t * @param applicationContext the application to configure\n  \t */\n  \tvoid initialize(C applicationContext);\n  \n  }\n  ```\n\n  **3.1.2.3刷新上下文环境,这个很重要的一个方法,Spring的bean解析就在这里啊**\n\n  ```\n  public abstract class AbstractApplicationContext extends DefaultResourceLoader\n  \t\timplements ConfigurableApplicationContext, DisposableBean {\n  \t\t...\n  \t\t@Override\n  \tpublic void refresh() throws BeansException, IllegalStateException {\n  \t\tsynchronized (this.startupShutdownMonitor) {\n  \t\t\t// Prepare this context for refreshing.\n  \t\t\t//3.1.2.3.1预备刷新前的一些准备工作\n  \t\t\tprepareRefresh();\n  \n  \t\t\t// Tell the subclass to refresh the internal bean factory.\n  \t\t\t//3.1.2.3.2告诉父类刷新内置bean工厂\n  \t\t\tConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n  \n  \t\t\t// Prepare the bean factory for use in this context.\n  \t\t\t//3.1.2.3.3创建bean工厂 主要对bean工厂进行特征设置\n  \t\t\t prepareBeanFactory(beanFactory);\n  \n  \t\t\ttry {\n  \t\t\t\t// Allows post-processing of the bean factory in context subclasses.\n  \t\t\t\t//此方法允许子类在所有的 bean 尚未初始化之前注册 BeanPostProcessor\n  \t\t\t\tpostProcessBeanFactory(beanFactory);\n  \n  \t\t\t\t// Invoke factory processors registered as beans in the context.\n  \t\t\t\t//BeanFactoryPostProcessor 接口允许我们在 bean 正是初始化之前改变其值。此接口只\t\t\t\t//有一个方法\n  \t\t\t\tinvokeBeanFactoryPostProcessors(beanFactory);\n  \n  \t\t\t\t// Register bean processors that intercept bean creation.\n  \t\t\t\t//BeanPostProcessors注册 在BeanDefinitions 中查找BeanPostProcessor保存一个\t\t\t\t//list中\n                  registerBeanPostProcessors(beanFactory);\n  \t\t\t\t//支持国际化\n  \t\t\t\t// Initialize message source for this context.\n  \t\t\t\tinitMessageSource();\n  \t\t\t\t//加载事件驱动ApplicationEventMulticaster来管理事件驱动三元素 可以看下具体实现\n  \t\t\t\t//有addApplicationListener multicastEvent 传播嘛\n  \t\t\t\t//ApplicationEventPublisher是将事件委托给ApplicationEventMulticaster来处理的\n  \t\t\t\t// Initialize event multicaster for this context.\n  \t\t\t\tinitApplicationEventMulticaster();\n  \t\t\t\t//初始化其他的特殊的bean 没有实现方法 默认走的空实现\n  \t\t\t\t// Initialize other special beans in specific context subclasses.\n  \t\t\t\tonRefresh();\n  \n  \t\t\t\t// Check for listener beans and register them.\n  \t\t\t\t//这里注册监听器了 结合上面的事件广播类进行\n  \t\t\t\tregisterListeners();\n  \t\t\t\t//在工厂中进行单例beans的注册配置\n  \t\t\t\t// Instantiate all remaining (non-lazy-init) singletons.\n  \t\t\t\tfinishBeanFactoryInitialization(beanFactory);\n  \n  \t\t\t\t// Last step: publish corresponding event.\n  \t\t\t\tfinishRefresh();\n  \t\t\t}\n  \n  \t\t\tcatch (BeansException ex) {\n  \t\t\t\tif (logger.isWarnEnabled()) {\n  \t\t\t\t\tlogger.warn(\"Exception encountered during context initialization - \" +\n  \t\t\t\t\t\t\t\"cancelling refresh attempt: \" + ex);\n  \t\t\t\t}\n  \n  \t\t\t\t// Destroy already created singletons to avoid dangling resources.\n  \t\t\t\tdestroyBeans();\n  \n  \t\t\t\t// Reset 'active' flag.\n  \t\t\t\tcancelRefresh(ex);\n  \n  \t\t\t\t// Propagate exception to caller.\n  \t\t\t\tthrow ex;\n  \t\t\t}\n  \n  \t\t\tfinally {\n  \t\t\t\t// Reset common introspection caches in Spring's core, since we\n  \t\t\t\t// might not ever need metadata for singleton beans anymore...\n  \t\t\t\tresetCommonCaches();\n  \t\t\t}\n  \t\t}\n  \t}\n  \t...\n  \t\t}\n  ```\n\n  **finishRefresh**\n\n  ```\n  \tprotected void finishRefresh() {\n  \t\t// Initialize lifecycle processor for this context.\n  \t\tinitLifecycleProcessor();\n  \n  \t\t// Propagate refresh to lifecycle processor first.\n  \t\tgetLifecycleProcessor().onRefresh();\n  \n  \t\t// Publish the final event.\n  \t\t//最后发布上下文构建成功事件\n  \t\tpublishEvent(new ContextRefreshedEvent(this));\n  \t\t//注册下上下文环境。\n  \t\t// Participate in LiveBeansView MBean, if active.\n  \t\tLiveBeansView.registerApplicationContext(this);\n  \t}\n  ```\n\n  \n\n  finishBeanFactoryInitialization在工厂中进行单例beans的注册配置**\n\n  * ConversionService bean类型转换的一个服务bean\n  * StringValueResolver 用于解析注解值\n  * LoadTimeWeaverAware 实现了此接口的 bean 可以得到 LoadTimeWeaver，此处仅仅初始化 \n  * preInstantiateSingletons  \n\n  ```\n  \t/**\n  \t * Finish the initialization of this context's bean factory,\n  \t * initializing all remaining singleton beans.\n  \t */\n  \tprotected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {\n  \t\t// Initialize conversion service for this context.\n  \t\tif (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &&\n  \t\t\t\tbeanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {\n  \t\t\tbeanFactory.setConversionService(\n  \t\t\t\t\tbeanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));\n  \t\t}\n  \n  \t\t// Register a default embedded value resolver if no bean post-processor\n  \t\t// (such as a PropertyPlaceholderConfigurer bean) registered any before:\n  \t\t// at this point, primarily for resolution in annotation attribute values.\n  \t\tif (!beanFactory.hasEmbeddedValueResolver()) {\n  \t\t\tbeanFactory.addEmbeddedValueResolver(new StringValueResolver() {\n  \t\t\t\t@Override\n  \t\t\t\tpublic String resolveStringValue(String strVal) {\n  \t\t\t\t\treturn getEnvironment().resolvePlaceholders(strVal);\n  \t\t\t\t}\n  \t\t\t});\n  \t\t}\n  \n  \t\t// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.\n  \t\tString[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);\n  \t\tfor (String weaverAwareName : weaverAwareNames) {\n  \t\t\tgetBean(weaverAwareName);\n  \t\t}\n  \n  \t\t// Stop using the temporary ClassLoader for type matching.\n  \t\tbeanFactory.setTempClassLoader(null);\n  \n  \t\t// Allow for caching all bean definition metadata, not expecting further changes.\n  \t\tbeanFactory.freezeConfiguration();\n  \n  \t\t// Instantiate all remaining (non-lazy-init) singletons.\n  \t\tbeanFactory.preInstantiateSingletons();\n  \t}\n  ```\n\n  **preInstantiateSingletons  进行单例bean的预初始化**\n\n  首先进行单例类的初始化，其中如果 bean 是 FactoryBean 类型 (注意，只定义了 factory-method 属性的普通 bean 并不是 FactoryBean)，并且还是 SmartFactoryBean 类型，那么需要判断是否需要 eagerInit(isEagerInit 是此接口定义的方法)。 \n\n  ```\n  @Override\n  \tpublic void preInstantiateSingletons() throws BeansException {\n  \t\tif (this.logger.isDebugEnabled()) {\n  \t\t\tthis.logger.debug(\"Pre-instantiating singletons in \" + this);\n  \t\t}\n  \n  \t\t// Iterate over a copy to allow for init methods which in turn register new bean definitions.\n  \t\t// While this may not be part of the regular factory bootstrap, it does otherwise work fine.\n  \t\tList<String> beanNames = new ArrayList<String>(this.beanDefinitionNames);\n  \n  \t\t// Trigger initialization of all non-lazy singleton beans...\n  \t\tfor (String beanName : beanNames) {\n  \t\t\tRootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);\n  \t\t\tif (!bd.isAbstract() && bd.isSingleton() && !bd.isLazyInit()) {\n  \t\t\t\tif (isFactoryBean(beanName)) {\n  \t\t\t\t\tfinal FactoryBean<?> factory = (FactoryBean<?>) getBean(FACTORY_BEAN_PREFIX + beanName);\n  \t\t\t\t\tboolean isEagerInit;\n  \t\t\t\t\tif (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {\n  \t\t\t\t\t\tisEagerInit = AccessController.doPrivileged(new PrivilegedAction<Boolean>() {\n  \t\t\t\t\t\t\t@Override\n  \t\t\t\t\t\t\tpublic Boolean run() {\n  \t\t\t\t\t\t\t\treturn ((SmartFactoryBean<?>) factory).isEagerInit();\n  \t\t\t\t\t\t\t}\n  \t\t\t\t\t\t}, getAccessControlContext());\n  \t\t\t\t\t}\n  \t\t\t\t\telse {\n  \t\t\t\t\t\tisEagerInit = (factory instanceof SmartFactoryBean &&\n  \t\t\t\t\t\t\t\t((SmartFactoryBean<?>) factory).isEagerInit());\n  \t\t\t\t\t}\n  \t\t\t\t\tif (isEagerInit) {\n  \t\t\t\t\t\tgetBean(beanName);\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\telse {\n  \t\t\t\t\tgetBean(beanName);\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \n  \t\t// Trigger post-initialization callback for all applicable beans...\n  \t\tfor (String beanName : beanNames) {\n  \t\t\tObject singletonInstance = getSingleton(beanName);\n  \t\t\tif (singletonInstance instanceof SmartInitializingSingleton) {\n  \t\t\t\tfinal SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;\n  \t\t\t\tif (System.getSecurityManager() != null) {\n  \t\t\t\t\tAccessController.doPrivileged(new PrivilegedAction<Object>() {\n  \t\t\t\t\t\t@Override\n  \t\t\t\t\t\tpublic Object run() {\n  \t\t\t\t\t\t\tsmartSingleton.afterSingletonsInstantiated();\n  \t\t\t\t\t\t\treturn null;\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}, getAccessControlContext());\n  \t\t\t\t}\n  \t\t\t\telse {\n  \t\t\t\t\tsmartSingleton.afterSingletonsInstantiated();\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t}\n  \n  ```\n\n  \n\n  **registerListeners，注册监听器**\n\n  需要指出的是监听器列表在ContextLoader类中的``initWebApplicationContext``方法中的``loadParentContext``中的``useBeanFactory``中已经添加进入了\n\n  ````\n  public class EventListenerMethodProcessor implements SmartInitializingSingleton, ApplicationContextAware {\n  ...\n  \tprotected void processBean(final List<EventListenerFactory> factories, final String beanName, final Class<?> targetType) {\n  \t\tif (!this.nonAnnotatedClasses.contains(targetType)) {\n  \t\t\tMap<Method, EventListener> annotatedMethods = null;\n  \t\t\ttry {\n  \t\t\t\tannotatedMethods = MethodIntrospector.selectMethods(targetType,\n  \t\t\t\t\t\tnew MethodIntrospector.MetadataLookup<EventListener>() {\n  \t\t\t\t\t\t\t@Override\n  \t\t\t\t\t\t\tpublic EventListener inspect(Method method) {\n  \t\t\t\t\t\t\t\treturn AnnotatedElementUtils.findMergedAnnotation(method, EventListener.class);\n  \t\t\t\t\t\t\t}\n  \t\t\t\t\t\t});\n  \t\t\t}\n  \t\t\tcatch (Throwable ex) {\n  \t\t\t\t// An unresolvable type in a method signature, probably from a lazy bean - let's ignore it.\n  \t\t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\t\tlogger.debug(\"Could not resolve methods for bean with name '\" + beanName + \"'\", ex);\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\tif (CollectionUtils.isEmpty(annotatedMethods)) {\n  \t\t\t\tthis.nonAnnotatedClasses.add(targetType);\n  \t\t\t\tif (logger.isTraceEnabled()) {\n  \t\t\t\t\tlogger.trace(\"No @EventListener annotations found on bean class: \" + targetType.getName());\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\telse {\n  \t\t\t\t// Non-empty set of methods\n  \t\t\t\tfor (Method method : annotatedMethods.keySet()) {\n  \t\t\t\t\tfor (EventListenerFactory factory : factories) {\n  \t\t\t\t\t\tif (factory.supportsMethod(method)) {\n  \t\t\t\t\t\t\tMethod methodToUse = AopUtils.selectInvocableMethod(\n  \t\t\t\t\t\t\t\t\tmethod, this.applicationContext.getType(beanName));\n  \t\t\t\t\t\t\tApplicationListener<?> applicationListener =\n  \t\t\t\t\t\t\t\t\tfactory.createApplicationListener(beanName, targetType, methodToUse);\n  \t\t\t\t\t\t\tif (applicationListener instanceof ApplicationListenerMethodAdapter) {\n  \t\t\t\t\t\t\t\t((ApplicationListenerMethodAdapter) applicationListener)\n  \t\t\t\t\t\t\t\t\t\t.init(this.applicationContext, this.evaluator);\n  \t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t//注意这里添加applicationListener到环境中了\t\t\t\t\t\t\tthis.applicationContext.addApplicationListener(applicationListener);\n  \t\t\t\t\t\t\tbreak;\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\t\tlogger.debug(annotatedMethods.size() + \" @EventListener methods processed on bean '\" +\n  \t\t\t\t\t\t\tbeanName + \"': \" + annotatedMethods);\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t}\n  ...\n  }\n  ````\n\n  下面是上下文环境中的监听器注册到工厂\n\n  ```\n  \t/**\n  \t * Add beans that implement ApplicationListener as listeners.\n  \t * Doesn't affect other listeners, which can be added without being beans.\n  \t */\n  \tprotected void registerListeners() {\n  \t\t// Register statically specified listeners first.\n  \t\t//获得到之前加载的监听器列表 监听器列表在configureAndRefreshWebApplicationContext的时候就\n  \t\tfor (ApplicationListener<?> listener : getApplicationListeners()) {\n  \t\t\tgetApplicationEventMulticaster().addApplicationListener(listener);\n  \t\t}\n  \n  \t\t// Do not initialize FactoryBeans here: We need to leave all regular beans\n  \t\t// uninitialized to let post-processors apply to them!\n  \t\tString[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false);\n  \t\tfor (String listenerBeanName : listenerBeanNames) {\n  \t\t\tgetApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);\n  \t\t}\n  \n  \t\t// Publish early application events now that we finally have a multicaster...\n  \t\tSet<ApplicationEvent> earlyEventsToProcess = this.earlyApplicationEvents;\n  \t\tthis.earlyApplicationEvents = null;\n  \t\tif (earlyEventsToProcess != null) {\n  \t\t\tfor (ApplicationEvent earlyEvent : earlyEventsToProcess) {\n  \t\t\t\tgetApplicationEventMulticaster().multicastEvent(earlyEvent);\n  \t\t\t}\n  \t\t}\n  \t}\n  ```\n\n  \n\n  **initApplicationEventMulticaster**\n\n  ```\n  \t/**\n  \t * Initialize the ApplicationEventMulticaster.\n  \t * Uses SimpleApplicationEventMulticaster if none defined in the context.\n  \t * @see org.springframework.context.event.SimpleApplicationEventMulticaster\n  \t */\n  \tprotected void initApplicationEventMulticaster() {\n  \t\tConfigurableListableBeanFactory beanFactory = getBeanFactory();\n  \t\t//看工厂中有没有ApplicationEventMulticaster这个类 如果有的话 就取出来\n  \t\tif (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) {\n  \t\t\tthis.applicationEventMulticaster =\n  \t\t\t\t\tbeanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);\n  \t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\tlogger.debug(\"Using ApplicationEventMulticaster [\" + this.applicationEventMulticaster + \"]\");\n  \t\t\t}\n  \t\t}\n  \t\telse {\n  \t\t//如果没有这个类 那么就创建一个 然后作为单例对象放置到工厂中。工厂是在上下文环境对象中包含着的\n  \t\t\tthis.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory);\n  \t\t\tbeanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster);\n  \t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\tlogger.debug(\"Unable to locate ApplicationEventMulticaster with name '\" +\n  \t\t\t\t\t\tAPPLICATION_EVENT_MULTICASTER_BEAN_NAME +\n  \t\t\t\t\t\t\"': using default [\" + this.applicationEventMulticaster + \"]\");\n  \t\t\t}\n  \t\t}\n  \t}\n  ```\n\n  \n\n  **3.1.2.3.1预备刷新前的一些准备工作**\n\n  ```\n  /**\n  \t * Prepare this context for refreshing, setting its startup date and\n  \t * active flag as well as performing any initialization of property sources.\n  \t */\n  \tprotected void prepareRefresh() {\n  \t\tthis.startupDate = System.currentTimeMillis();\n  \t\tthis.closed.set(false);\n  \t\tthis.active.set(true);\n  \n  \t\tif (logger.isInfoEnabled()) {\n  \t\t\tlogger.info(\"Refreshing \" + this);\n  \t\t}\n  \n  \t\t// Initialize any placeholder property sources in the context environment\n  \t\t//3.1.2.3.1.1初始化一些配置文件\n  \t\tinitPropertySources();\n  \n  \t\t// Validate that all properties marked as required are resolvable\n  \t\t// see ConfigurablePropertyResolver#setRequiredProperties\n  \t\t//3.1.2.3.2校验必须的配置\n  \t\tgetEnvironment().validateRequiredProperties();\n  \n  \t\t// Allow for the collection of early ApplicationEvents,\n  \t\t// to be published once the multicaster is available...\n  \t\tthis.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>();\n  \t}\n  ```\n\n  **3.1.2.3.2告诉父类刷新内置bean工厂**\n\n  ```\n  \t/**\n  \t * Tell the subclass to refresh the internal bean factory.\n  \t * @return the fresh BeanFactory instance\n  \t * @see #refreshBeanFactory()\n  \t * @see #getBeanFactory()\n  \t */\n  \tprotected ConfigurableListableBeanFactory obtainFreshBeanFactory() {\n  \t\t//3.1.2.3.2.1在这里refresh bean工厂\n  \t\trefreshBeanFactory();\n  \t\tConfigurableListableBeanFactory beanFactory = getBeanFactory();\n  \t\tif (logger.isDebugEnabled()) {\n  \t\t\tlogger.debug(\"Bean factory for \" + getDisplayName() + \": \" + beanFactory);\n  \t\t}\n  \t\treturn beanFactory;\n  \t}\n  ```\n\n  **3.1.2.3.2.1在这里refresh bean工厂**\n\n  ```\n  \t@Override\n  \tprotected final void refreshBeanFactory() throws BeansException {\n  \t//如果存在工厂了 就销毁掉 然后关闭工厂 这样就刷新了\n  \t\tif (hasBeanFactory()) {\n  \t\t\tdestroyBeans();\n  \t\t\tcloseBeanFactory();\n  \t\t}\n  \t\ttry {\n  \t\t\t//创建bean可装配到list中的工厂\n  \t\t\tDefaultListableBeanFactory beanFactory = createBeanFactory();\n  \t\t\tbeanFactory.setSerializationId(getId());\n  \t\t\t//3.1.2.3.2.1.1给与子类自由定制bean容器的机会\n  \t\t\tcustomizeBeanFactory(beanFactory);\n  \t\t\t//3.1.2.3.2.1.2核心的bean加载方法。\n  \t\t\tloadBeanDefinitions(beanFactory);\n  \t\t\tsynchronized (this.beanFactoryMonitor) {\n  \t\t\t\tthis.beanFactory = beanFactory;\n  \t\t\t}\n  \t\t}\n  \t\tcatch (IOException ex) {\n  \t\t\tthrow new ApplicationContextException(\"I/O error parsing bean definition source for \" + getDisplayName(), ex);\n  \t\t}\n  \t}\n  ```\n\n  **3.1.2.3.2.1.1给与子类自由定制bean容器的机会**\n\n  ```\n  /**\n  \t * Customize the internal bean factory used by this context.\n  \t * Called for each {@link #refresh()} attempt.\n  \t * <p>The default implementation applies this context's\n  \t * {@linkplain #setAllowBeanDefinitionOverriding \"allowBeanDefinitionOverriding\"}\n  \t * and {@linkplain #setAllowCircularReferences \"allowCircularReferences\"} settings,\n  \t * if specified. Can be overridden in subclasses to customize any of\n  \t * {@link DefaultListableBeanFactory}'s settings.\n  \t * @param beanFactory the newly created bean factory for this context\n  \t * @see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding\n  \t * @see DefaultListableBeanFactory#setAllowCircularReferences\n  \t * @see DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping\n  \t * @see DefaultListableBeanFactory#setAllowEagerClassLoading\n  \t */\n  \tprotected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {\n  \t\tif (this.allowBeanDefinitionOverriding != null) {\n  \t\t\t//默认false，不允许覆盖beanFactory.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding);\n  \t\t}\n  \t\tif (this.allowCircularReferences != null) {\n  \t\t//默认false,不允许循环引用\n  \t\t\tbeanFactory.setAllowCircularReferences(this.allowCircularReferences);\n  \t\t}\n  \t}\n  ```\n\n  **3.1.2.3.2.1.2核心的bean加载方法。这个方法很重要**\n\n  ```\n  \t/**\n  \t * Loads the bean definitions via an XmlBeanDefinitionReader.\n  \t * @see org.springframework.beans.factory.xml.XmlBeanDefinitionReader\n  \t * @see #initBeanDefinitionReader\n  \t * @see #loadBeanDefinitions\n  \t */\n  \t@Override\n  \tprotected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException {\n  \t\t// Create a new XmlBeanDefinitionReader for the given BeanFactory.\n  \t\t//创建一个基于xml的bean声明读取器\n  \t\tXmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);\n  \n  \t\t// Configure the bean definition reader with this context's\n  \t\t// resource loading environment.\n  \t\t//设置环境\n  \t\tbeanDefinitionReader.setEnvironment(getEnvironment());\n  \t\t//设置资源加载器\n  \t\tbeanDefinitionReader.setResourceLoader(this);\n  \t\t//设置一个资源entity解析器 这里肯定是xml\n  \t\tbeanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this));\n  \n  \t\t// Allow a subclass to provide custom initialization of the reader,\n  \t\t// then proceed with actually loading the bean definitions.\n  \t\t//3.1.2.3.2.1.2.1初始化bean声明读取器\n  \t\tinitBeanDefinitionReader(beanDefinitionReader);\n  \t\tloadBeanDefinitions(beanDefinitionReader);\n  \t}\n  ```\n\n  **3.1.2.3.2.1.2.1初始化bean声明读取器**\n\n  ```\n  \tpublic class XmlWebApplicationContext extends AbstractRefreshableWebApplicationContext {\n  \t/**\n  \t * Load the bean definitions with the given XmlBeanDefinitionReader.\n  \t * <p>The lifecycle of the bean factory is handled by the refreshBeanFactory method;\n  \t * therefore this method is just supposed to load and/or register bean definitions.\n  \t * <p>Delegates to a ResourcePatternResolver for resolving location patterns\n  \t * into Resource instances.\n  \t * @throws IOException if the required XML document isn't found\n  \t * @see #refreshBeanFactory\n  \t * @see #getConfigLocations\n  \t * @see #getResources\n  \t * @see #getResourcePatternResolver\n  \t */\n  \tprotected void loadBeanDefinitions(XmlBeanDefinitionReader reader) throws IOException {\n  \t\tString[] configLocations = getConfigLocations();\n  \t\tif (configLocations != null) {\n  \t\t\tfor (String configLocation : configLocations) {\n  \t\t\t\t//读取具体配置位置然后读取器进行加载跳入下面的方法\n  \t\t\t\treader.loadBeanDefinitions(configLocation);\n  \t\t\t}\n  \t\t}\n  \t}\n  }\t\n  \tpublic abstract class AbstractBeanDefinitionReader implements EnvironmentCapable, BeanDefinitionReader {\n   ...\n  \t/**\n  \t * Load bean definitions from the specified resource location.\n  \t * <p>The location can also be a location pattern, provided that the\n  \t * ResourceLoader of this bean definition reader is a ResourcePatternResolver.\n  \t * @param location the resource location, to be loaded with the ResourceLoader\n  \t * (or ResourcePatternResolver) of this bean definition reader\n  \t * @param actualResources a Set to be filled with the actual Resource objects\n  \t * that have been resolved during the loading process. May be {@code null}\n  \t * to indicate that the caller is not interested in those Resource objects.\n  \t * @return the number of bean definitions found\n  \t * @throws BeanDefinitionStoreException in case of loading or parsing errors\n  \t * @see #getResourceLoader()\n  \t * @see #loadBeanDefinitions(org.springframework.core.io.Resource)\n  \t * @see #loadBeanDefinitions(org.springframework.core.io.Resource[])\n  \t */\n  \tpublic int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException {\n  \t\t//开始读取配置了bean的xml文件\n  \t\tResourceLoader resourceLoader = getResourceLoader();\n  \t\t//如果资源加载器不存在的话那么就抛出异常\n  \t\tif (resourceLoader == null) {\n  \t\t\tthrow new BeanDefinitionStoreException(\n  \t\t\t\t\t\"Cannot import bean definitions from location [\" + location + \"]: no ResourceLoader available\");\n  \t\t}\n  \t\t//如果是classpath：application*.xml这种pattern的话\n  \t\tif (resourceLoader instanceof ResourcePatternResolver) {\n  \t\t\t// Resource pattern matching available.\n  \t\t\ttry {\n  \t\t\t//获得资源\n  \t\t\t\tResource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);\n  \t\t\t\t//遍历循环 获取所有的资源的总数\n  \t\t\t\tint loadCount = loadBeanDefinitions(resources);\n  \t\t\t\t//遍历循环放入actualResources这个set中。\n  \t\t\t\tif (actualResources != null) {\n  \t\t\t\t\tfor (Resource resource : resources) {\n  \t\t\t\t\t\tactualResources.add(resource);\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\t\tlogger.debug(\"Loaded \" + loadCount + \" bean definitions from location pattern [\" + location + \"]\");\n  \t\t\t\t}\n  \t\t\t\treturn loadCount;\n  \t\t\t}\n  \t\t\tcatch (IOException ex) {\n  \t\t\t\tthrow new BeanDefinitionStoreException(\n  \t\t\t\t\t\t\"Could not resolve bean definition resource pattern [\" + location + \"]\", ex);\n  \t\t\t}\n  \t\t}else {\n  \t\t\t//否则的话只允许绝对路径的资源配置文件，\n  \t\t\t// Can only load single resources by absolute URL.\n  \t\t\tResource resource = resourceLoader.getResource(location);\n  \t\t\t//获得资源总数\n  \t\t\tint loadCount = loadBeanDefinitions(resource);\n  \t\t\tif (actualResources != null) {\n  \t\t\t\t//同样加载到set中\n  \t\t\t\tactualResources.add(resource);\n  \t\t\t}\n  \t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\tlogger.debug(\"Loaded \" + loadCount + \" bean definitions from location [\" + location + \"]\");\n  \t\t\t}\n  \t\t\treturn loadCount;\n  \t\t}\n  \t}\n  \t...\n   }\n  ```\n\n  **getResources(location)**\n\n  ````\n  public class PathMatchingResourcePatternResolver implements ResourcePatternResolver {\n  \t...\n  \t@Override\n  \tpublic Resource[] getResources(String locationPattern) throws IOException {\n  \t\tAssert.notNull(locationPattern, \"Location pattern must not be null\");\n  \t\t//CLASSPATH_ALL_URL_PREFIX=classpath*:\n  \t\t//如果是以classpath*:开头的\n  \t\tif (locationPattern.startsWith(CLASSPATH_ALL_URL_PREFIX)) {\n  \t\t\t// a class path resource (multiple resources for same name possible)\n  \t\t\t//这里的注释的意思是多个资源的partern的话\n  \t\t\tif (getPathMatcher().isPattern(locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length()))) {\n  \t\t\t\t// a class path resource pattern\n  \t\t\t\t//获取匹配的资源列表 返回资源列表\n  \t\t\t\treturn findPathMatchingResources(locationPattern);\n  \t\t\t}\n  \t\t\telse {\n  \t\t\t\t// all class path resources with the given name\n  \t\t\t\treturn \n  //获取所有的classpath下的资源\t\t\tfindAllClassPathResources(locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length()));\n  \t\t\t}\n  \t\t}\n  \t\telse {\n  \t\t\t// Generally only look for a pattern after a prefix here,\n  \t\t\t// and on Tomcat only after the \"*/\" separator for its \"war:\" protocol.\n  \t\t\tint prefixEnd = (locationPattern.startsWith(\"war:\") ? locationPattern.indexOf(\"*/\") + 1 :\n  \t\t\t\t\tlocationPattern.indexOf(':') + 1);\n  \t\t\tif (getPathMatcher().isPattern(locationPattern.substring(prefixEnd))) {\n  \t\t\t\t// a file pattern\n  \t\t\t\treturn findPathMatchingResources(locationPattern);\n  \t\t\t}\n  \t\t\telse {\n  \t\t\t\t// a single resource with the given name\n  \t\t\t\treturn new Resource[] {getResourceLoader().getResource(locationPattern)};\n  \t\t\t}\n  \t\t}\n  \t}\n  \t...\n  \t}\n  ````\n\n  **findPathMatchingResources,这个找出所有的给定资源匹配模式下的资源列表classpath:***\n\n  ```\n  /**\n  \t * Find all resources that match the given location pattern via the\n  \t * Ant-style PathMatcher. Supports resources in jar files and zip files\n  \t * and in the file system.\n  \t * @param locationPattern the location pattern to match\n  \t * @return the result as Resource array\n  \t * @throws IOException in case of I/O errors\n  \t * @see #doFindPathMatchingJarResources\n  \t * @see #doFindPathMatchingFileResources\n  \t * @see org.springframework.util.PathMatcher\n  \t */\n  \tprotected Resource[] findPathMatchingResources(String locationPattern) throws IOException {\n  \t\t//获取给定location的根目录\n  \t\tString rootDirPath = determineRootDir(locationPattern);\n  \t\tString subPattern = locationPattern.substring(rootDirPath.length());\n  \t\tResource[] rootDirResources = getResources(rootDirPath);\n  \t\tSet<Resource> result = new LinkedHashSet<>(16);\n  \t\tfor (Resource rootDirResource : rootDirResources) {\n  \t\t\trootDirResource = resolveRootDirResource(rootDirResource);\n  \t\t\tURL rootDirUrl = rootDirResource.getURL();\n  \t\t\tif (equinoxResolveMethod != null && rootDirUrl.getProtocol().startsWith(\"bundle\")) {\n  \t\t\t\tURL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl);\n  \t\t\t\tif (resolvedUrl != null) {\n  \t\t\t\t\trootDirUrl = resolvedUrl;\n  \t\t\t\t}\n  \t\t\t\trootDirResource = new UrlResource(rootDirUrl);\n  \t\t\t}\n  \t\t\tif (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {\n  \t\t\t\tresult.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()));\n  \t\t\t}\n  \t\t\telse if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) {\n  \t\t\t\tresult.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern));\n  \t\t\t}\n  \t\t\telse {\n  \t\t\t\tresult.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern));\n  \t\t\t}\n  \t\t}\n  \t\tif (logger.isTraceEnabled()) {\n  \t\t\tlogger.trace(\"Resolved location pattern [\" + locationPattern + \"] to resources \" + result);\n  \t\t}\n  \t\treturn result.toArray(new Resource[0]);\n  \t}\n  \n  ```\n\n  **findAllClassPathResources，获取所有classpath下的资源**\n\n  ```\n  \t/**\n  \t * Find all class location resources with the given location via the ClassLoader.\n  \t * Delegates to {@link #doFindAllClassPathResources(String)}.\n  \t * @param location the absolute path within the classpath\n  \t * @return the result as Resource array\n  \t * @throws IOException in case of I/O errors\n  \t * @see java.lang.ClassLoader#getResources\n  \t * @see #convertClassLoaderURL\n  \t */\n  \tprotected Resource[] findAllClassPathResources(String location) throws IOException {\n  \t\tString path = location;\n  \t\tif (path.startsWith(\"/\")) {\n  \t\t\tpath = path.substring(1);\n  \t\t}\n  \t\tSet<Resource> result = doFindAllClassPathResources(path);\n  \t\tif (logger.isTraceEnabled()) {\n  \t\t\tlogger.trace(\"Resolved classpath location [\" + location + \"] to resources \" + result);\n  \t\t}\n  \t\treturn result.toArray(new Resource[0]);\n  \t}\n  ```\n\n  \n\n  **3.1.2.3.1.1初始化一些配置文件**\n\n  ```\n  public abstract class AbstractRefreshableWebApplicationContext extends AbstractRefreshableConfigApplicationContext\n  \t\timplements ConfigurableWebApplicationContext, ThemeSource {\n  \t\t\n  \t\t...\n  \t\t\t/**\n  \t * {@inheritDoc}\n  \t * <p>Replace {@code Servlet}-related property sources.\n  \t */\n  \t@Override\n  \tprotected void initPropertySources() {\n  \t//获得环境对象\n  \t\tConfigurableEnvironment env = getEnvironment();\n  \t\tif (env instanceof ConfigurableWebEnvironment) {\n  \t\t//加载并初始化配置source\n  \t\t//又跳到StandardServletEnvironment 进行3.1.2.1初始化一些配置properties\n          ((ConfigurableWebEnvironment) env).initPropertySources(this.servletContext, \t\tthis.servletConfig);\n  \t\t}\n  \t}\n  \t\t...\n  \t\t}\n  ```\n\n   **3.1.2.3.1告诉父类去刷新内置的bean工厂。**\n\n  ```\n  \t/**\n  \t * Tell the subclass to refresh the internal bean factory.\n  \t * @return the fresh BeanFactory instance\n  \t * @see #refreshBeanFactory()\n  \t * @see #getBeanFactory()\n  \t */\n  \tprotected ConfigurableListableBeanFactory obtainFreshBeanFactory() {\n  \t\trefreshBeanFactory();\n  \t\tConfigurableListableBeanFactory beanFactory = getBeanFactory();\n  \t\tif (logger.isDebugEnabled()) {\n  \t\t\tlogger.debug(\"Bean factory for \" + getDisplayName() + \": \" + beanFactory);\n  \t\t}\n  \t\treturn beanFactory;\n  \t}\n  ```\n\n  **3.1.2.3.3准备bean工厂，包含以下几项:**\n\n  * BeanExpressionResolver(SpringEL解析器)\n  * PropertyEditorRegistrar 向spring注册Java的PropertyEditor,定义bean的xml里面都是字符串那么由这个东西来转换为我们需要的类型。只有一个实现ResourceEditorRegistrar \n  * 设置环境注入 addBeanPostProcessor 这样可以将spring内部的一些对象注入到工厂\n  * 依赖解析忽略 ignoreDependencyInterface 指定哪些依赖在注入的时候应该被忽略\n  * bean 伪装 有些对象不在工厂中，但是我们依然想让他被装配到工厂中 那么 registerResolvableDependency 这个装配关系存贮在一个Map<Class<?>,Object>中\n\n  ```\n  /**\n  \t * Configure the factory's standard context characteristics,\n  \t * such as the context's ClassLoader and post-processors.\n  \t * @param beanFactory the BeanFactory to configure\n  \t */\n  \tprotected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n  \t\t// Tell the internal bean factory to use the context's class loader etc.\n  \t\tbeanFactory.setBeanClassLoader(getClassLoader());\n  \t\tbeanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));\n  \t\tbeanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));\n  \n  \t\t// Configure the bean factory with context callbacks.\n  \t\tbeanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));\n  \t\tbeanFactory.ignoreDependencyInterface(EnvironmentAware.class);\n  \t\tbeanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);\n  \t\tbeanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);\n  \t\tbeanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);\n  \t\tbeanFactory.ignoreDependencyInterface(MessageSourceAware.class);\n  \t\tbeanFactory.ignoreDependencyInterface(ApplicationContextAware.class);\n  \n  \t\t// BeanFactory interface not registered as resolvable type in a plain factory.\n  \t\t// MessageSource registered (and found for autowiring) as a bean.\n  \t\tbeanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);\n  \t\tbeanFactory.registerResolvableDependency(ResourceLoader.class, this);\n  \t\tbeanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);\n  \t\tbeanFactory.registerResolvableDependency(ApplicationContext.class, this);\n  \n  \t\t// Register early post-processor for detecting inner beans as ApplicationListeners.\n  \t\tbeanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));\n  \n  \t\t// Detect a LoadTimeWeaver and prepare for weaving, if found.\n  \t\tif (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {\n  \t\t\tbeanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));\n  \t\t\t// Set a temporary ClassLoader for type matching.\n  \t\t\tbeanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));\n  \t\t}\n  \n  \t\t// Register default environment beans.\n  \t\t//将一些环境变量bean注册为单例对象\n  \t\tif (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) {\n  \t\t\tbeanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());\n  \t\t}\n  \t\tif (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) {\n  \t\t\tbeanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());\n  \t\t}\n  \t\tif (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) {\n  \t\t\tbeanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());\n  \t\t}\n  \t}\n  ```\n\n  **这样的话SpringCore中关于Spring容器的启动（当然我这里直接是Web容器管理Spring容器）就基本完了回头可以画下流程图 ，普通的Spring容器的启动也是一样的**\n\n\n\n","source":"_posts/Spring源码一.md","raw":"---\ntitle: Spring源码一\ndate: 2018-10-27 11:22:12\ntags: [Spring]\ncategories: [Spring]\n---\n\nSpring源码(1)<!--more-->\n\n#### 源码下载\n\n写的比较匆忙 ，结合Ctrl+F进行寻找关键字进行查询是最妙的。\n\n* 下载源码\n\n  首先从github上下载源码\n\n  ```\n  git clonehttps://github.com/spring-projects/spring-framework.git spring-framework\n  ```\n\n  你也可以用SourceTree (一个界面化的git工具) 来管理你的git项目\n\n* 下载gradle\n\n  ```\n  https://gradle.org/\n  ```\n\n  下载完之后需要进行环境变量的配置\n\n  * 在环境变量中配置``GRADLE_HOME=D:\\ENV\\gradle-4.10.2-bin\\gradle-4.10.2``\n\n  * 添加path变量 ``%GRADLE_HOME%\\bin``\n\n  * 测试\n\n    ```\n    PS C:\\Users\\andreby\\Desktop> gradle -version\n    \n    ------------------------------------------------------------\n    Gradle 4.10.2\n    ------------------------------------------------------------\n    \n    Build time:   2018-09-19 18:10:15 UTC\n    Revision:     b4d8d5d170bb4ba516e88d7fe5647e2323d791dd\n    \n    Kotlin DSL:   1.0-rc-6\n    Kotlin:       1.2.61\n    Groovy:       2.4.15\n    Ant:          Apache Ant(TM) version 1.9.11 compiled on March 23 2018\n    JVM:          1.8.0_171 (Oracle Corporation 25.171-b11)\n    OS:           Windows 10 10.0 amd64\n    ```\n\n* 使用gradle将源码转换为eclipse 工程\n\n  Spring是分多模块的，所以你要查看哪个模块的源码，就进哪个模块的目录下执行以下命令就可以看到了。\n\n  ```\n  gradle cleanIdea eclipse \n  ```\n\n  **可能需要梯子**\n\n* 导入工程,即可食用,注意各个工程之间的依赖\n\n* 导入后的问题\n\n  导入后发现一片红色感叹号，看下sts中的problems的选项框，发现是缺少jar包\n\n  ``spring-cglib-repack-3.2.8 `` 和``spring-objenesis-repack-3.0.1.jar ``\n\n   我查了下网上大神们的说法：\n\n  **通过阅读源码发现为了避免第三方 class 的冲突，spring 把最新的 cglib 和 objenesis 给 repack 了**\n\n  参考链接：\n\n  []: https://blog.csdn.net/sekiu/article/details/50624180\n\n#### Spring-Core\n\n正常的spring启动，是以xml配置bean然后进行启动，web项目由web容器来管理spring容器。\n\n我们在applicationContext.xml中配置好bean后，那么启动时候加载这个xml就可以了。\n\n### web容器启动流程\n\n以web项目为例子 springmvc项目 一般使用web.xml进行管理web容器，而spring容器一般交付给web容器进行管理。\n\n* tomcat 启动，加载context监听器。\n\n  首先tomcat的StandardContext类在tomcat启动时候会调用``listenerStart``\n\n  去加载配置在web.xml中的监听器\n\n  webxml中的配置的spring的ContextLoadListener\n\n  ContextLoaderListener 继承自ServletContextListener\n\n  嗯，首先加载WebAppRootListener 这个也是继承自ServletContextListener的\n\n  ```\n  ...\n  <listener>\n  <listener-class>org.springframework.web.util.WebAppRootListener</listener-class>\n  </listener>\n  <listener>\n   <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n  <listener>\n      <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>\n  </listener>\n  ```\n\n  1.StardandContext中的listenerStart方法：\n\n  ```\n     /**\n       * Configure the set of instantiated application event listeners\n       * for this Context.\n       * @return <code>true</code> if all listeners wre\n       * initialized successfully, or <code>false</code> otherwise.\n       */\n      public boolean listenerStart() {\n  \n          if (log.isDebugEnabled())\n              log.debug(\"Configuring application event listeners\");\n  \n          // Instantiate the required listeners\n          String listeners[] = findApplicationListeners();\n          Object results[] = new Object[listeners.length];\n          boolean ok = true;\n          for (int i = 0; i < results.length; i++) {\n              if (getLogger().isDebugEnabled())\n                  getLogger().debug(\" Configuring event listener class '\" +\n                      listeners[i] + \"'\");\n              try {\n                  String listener = listeners[i];\n                  results[i] = getInstanceManager().newInstance(listener);\n              } catch (Throwable t) {\n                  t = ExceptionUtils.unwrapInvocationTargetException(t);\n                  ExceptionUtils.handleThrowable(t);\n                  getLogger().error(sm.getString(\n                          \"standardContext.applicationListener\", listeners[i]), t);\n                  ok = false;\n              }\n          }\n          if (!ok) {\n              getLogger().error(sm.getString(\"standardContext.applicationSkipped\"));\n              return false;\n          }\n  \n          // Sort listeners in two arrays\n          List<Object> eventListeners = new ArrayList<>();\n          List<Object> lifecycleListeners = new ArrayList<>();\n          for (int i = 0; i < results.length; i++) {\n              if ((results[i] instanceof ServletContextAttributeListener)\n                  || (results[i] instanceof ServletRequestAttributeListener)\n                  || (results[i] instanceof ServletRequestListener)\n                  || (results[i] instanceof HttpSessionIdListener)\n                  || (results[i] instanceof HttpSessionAttributeListener)) {\n                  eventListeners.add(results[i]);\n              }\n              if ((results[i] instanceof ServletContextListener)\n                  || (results[i] instanceof HttpSessionListener)) {\n                  lifecycleListeners.add(results[i]);\n              }\n          }\n  \n          // Listener instances may have been added directly to this Context by\n          // ServletContextInitializers and other code via the pluggability APIs.\n          // Put them these listeners after the ones defined in web.xml and/or\n          // annotations then overwrite the list of instances with the new, full\n          // list.\n          for (Object eventListener: getApplicationEventListeners()) {\n              eventListeners.add(eventListener);\n          }\n          setApplicationEventListeners(eventListeners.toArray());\n          for (Object lifecycleListener: getApplicationLifecycleListeners()) {\n              lifecycleListeners.add(lifecycleListener);\n              if (lifecycleListener instanceof ServletContextListener) {\n                  noPluggabilityListeners.add(lifecycleListener);\n              }\n          }\n          setApplicationLifecycleListeners(lifecycleListeners.toArray());\n  \n          // Send application start events\n  \n          if (getLogger().isDebugEnabled())\n              getLogger().debug(\"Sending application start events\");\n  \n          // Ensure context is not null\n          getServletContext();\n          context.setNewServletContextListenerAllowed(false);\n  \n          Object instances[] = getApplicationLifecycleListeners();\n          if (instances == null || instances.length == 0) {\n              return ok;\n          }\n  \t\t//Spring中经典的事件驱动， 创建一个event\n  \t\t//1.1构建一个事件 内置Context成员变量\n          ServletContextEvent event = new ServletContextEvent(getServletContext());\n          ServletContextEvent tldEvent = null;\n          if (noPluggabilityListeners.size() > 0) {\n              noPluggabilityServletContext = new NoPluggabilityServletContext(getServletContext());\n              tldEvent = new ServletContextEvent(noPluggabilityServletContext);\n          }\n          //1.2这里遍历循环 加载所有的继承自ServletContextListener\n          for (int i = 0; i < instances.length; i++) {\n              if (!(instances[i] instanceof ServletContextListener))\n                  continue;\n              ServletContextListener listener =\n                  (ServletContextListener) instances[i];\n              try {\n                  fireContainerEvent(\"beforeContextInitialized\", listener);\n                  if (noPluggabilityListeners.contains(listener)) {\n                  \t**//注意这里要加载tldEvent**\n                      listener.contextInitialized(tldEvent);\n                  } else {\n                      listener.contextInitialized(event);\n                  }\n                  fireContainerEvent(\"afterContextInitialized\", listener);\n              } catch (Throwable t) {\n                  ExceptionUtils.handleThrowable(t);\n                  fireContainerEvent(\"afterContextInitialized\", listener);\n                  getLogger().error\n                      (sm.getString(\"standardContext.listenerStart\",\n                                    instances[i].getClass().getName()), t);\n                  ok = false;\n              }\n          }\n          return ok;\n  \n      }\n  \n  ```\n\n  2.那首先加载 WebRootContextListener\n\n  ```\n  ...\n  public class WebAppRootListener implements ServletContextListener {\n  \n  \t@Override\n  \tpublic void contextInitialized(ServletContextEvent event) {\n  \t\tWebUtils.setWebAppRootSystemProperty(event.getServletContext());\n  \t}\n  ...\n  ```\n\n  ```\n  \tpublic static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException {\n  \t\tAssert.notNull(servletContext, \"ServletContext must not be null\");\n  \t\t//获得context的根目录\n  \t\tString root = servletContext.getRealPath(\"/\");\n  \t\tif (root == null) {\n  \t\t\tthrow new IllegalStateException(\n  \t\t\t\t\"Cannot set web app root system property when WAR file is not expanded\");\n  \t\t}\n  \t\t//WEB_APP_ROOT_KEY_PARAM=webAppRootKey 就是在 web.xml文件中定义的webAppRootKey\n  \t\tString param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM);\n  \t\t//\n  \t\tString key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY);\n  \t\tString oldValue = System.getProperty(key);\n  \t\tif (oldValue != null && !StringUtils.pathEquals(oldValue, root)) {\n  \t\t\tthrow new IllegalStateException(\n  \t\t\t\t\"Web app root system property already set to different value: '\" +\n  \t\t\t\tkey + \"' = [\" + oldValue + \"] instead of [\" + root + \"] - \" +\n  \t\t\t\t\"Choose unique values for the 'webAppRootKey' context-param in your web.xml files!\");\n  \t\t}\n  \t\t//设置系统环境变量\n  \t\tSystem.setProperty(key, root);\n  \t\tservletContext.log(\"Set web app root system property: '\" + key + \"' = [\" + root + \"]\");\n  \t}\n  ```\n\n  3.**加载Spring的ContextLoaderListener**\n\n  ```\n  public class ContextLoaderListener extends ContextLoader implements ServletContextListener {\n  ...\n  \t@Override\n  \tpublic void contextInitialized(ServletContextEvent event) {\n  \t\t//3.1初始化web容器对象\n  \t\tinitWebApplicationContext(event.getServletContext());\n  \t}\n  ...\n  \n  ```\n\n  3.1跳转到ContextLoader进行加载上下文环境\n\n  ```\n  public class ContextLoader {\n  ...\n  \tstatic {\n  \t\t// Load default strategy implementations from properties file.\n  \t\t// This is currently strictly internal and not meant to be customized\n  \t\t// by application developers.\n  \t\ttry {\n  \t\t\tClassPathResource resource = new ClassPathResource(DEFAULT_STRATEGIES_PATH, ContextLoader.class);\n  \t\t\tdefaultStrategies = PropertiesLoaderUtils.loadProperties(resource);\n  \t\t}\n  \t\tcatch (IOException ex) {\n  \t\t\tthrow new IllegalStateException(\"Could not load 'ContextLoader.properties': \" + ex.getMessage());\n  \t\t}\n  \t}\n  \t...\n  \t/**\n  \t * Initialize Spring's web application context for the given servlet context,\n  \t * using the application context provided at construction time, or creating a new one\n  \t * according to the \"{@link #CONTEXT_CLASS_PARAM contextClass}\" and\n  \t * \"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}\" context-params.\n  \t * @param servletContext current servlet context\n  \t * @return the new WebApplicationContext\n  \t * @see #ContextLoader(WebApplicationContext)\n  \t * @see #CONTEXT_CLASS_PARAM\n  \t * @see #CONFIG_LOCATION_PARAM\n  \t */\n  \tpublic WebApplicationContext initWebApplicationContext(ServletContext servletContext) {\n  \t\tif (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {\n  \t\t\tthrow new IllegalStateException(\n  \t\t\t\t\t\"Cannot initialize context because there is already a root application context present - \" +\n  \t\t\t\t\t\"check whether you have multiple ContextLoader* definitions in your web.xml!\");\n  \t\t}\n  \n  \t\tLog logger = LogFactory.getLog(ContextLoader.class);\n  \t\tservletContext.log(\"Initializing Spring root WebApplicationContext\");\n  \t\tif (logger.isInfoEnabled()) {\n  \t\t\tlogger.info(\"Root WebApplicationContext: initialization started\");\n  \t\t}\n  \t\t//记录初始化时间\n  \t\tlong startTime = System.currentTimeMillis();\n  \n  \t\ttry {\n  \t\t\t// Store context in local instance variable, to guarantee that\n  \t\t\t// it is available on ServletContext shutdown.\n  \t\t\tif (this.context == null) {\n  \t\t\t//3.1.1如果上下文环境对象为null，那么实例化一个\n  \t\t\t\tthis.context = createWebApplicationContext(servletContext);\n  \t\t\t}\n  \t\t\tif (this.context instanceof ConfigurableWebApplicationContext) {\n  \t\t\t\tConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context;\n  \t\t\t\tif (!cwac.isActive()) {\n  \t\t\t\t\t// The context has not yet been refreshed -> provide services such as\n  \t\t\t\t\t// setting the parent context, setting the application context id, etc\n  \t\t\t\t\tif (cwac.getParent() == null) {\n  \t\t\t\t\t\t// The context instance was injected without an explicit parent ->\n  \t\t\t\t\t\t// determine parent for root web application context, if any.\n  \t\t\t\t\t\t//加载父容器\n  \t\t\t\t\t\tApplicationContext parent = loadParentContext(servletContext);\n  \t\t\t\t\t\tcwac.setParent(parent);\n  \t\t\t\t\t}\n  \t\t\t\t\t//3.1.2配置并刷新web上下文环境\n  \t\t\t\t\tconfigureAndRefreshWebApplicationContext(cwac, servletContext);\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context);\n  \n  \t\t\tClassLoader ccl = Thread.currentThread().getContextClassLoader();\n  \t\t\tif (ccl == ContextLoader.class.getClassLoader()) {\n  \t\t\t\tcurrentContext = this.context;\n  \t\t\t}\n  \t\t\telse if (ccl != null) {\n  \t\t\t\tcurrentContextPerThread.put(ccl, this.context);\n  \t\t\t}\n  \n  \t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\tlogger.debug(\"Published root WebApplicationContext as ServletContext attribute with name [\" +\n  \t\t\t\t\t\tWebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + \"]\");\n  \t\t\t}\n  \t\t\tif (logger.isInfoEnabled()) {\n  \t\t\t\tlong elapsedTime = System.currentTimeMillis() - startTime;\n  \t\t\t\tlogger.info(\"Root WebApplicationContext: initialization completed in \" + elapsedTime + \" ms\");\n  \t\t\t}\n  \n  \t\t\treturn this.context;\n  \t\t}\n  \t\tcatch (RuntimeException ex) {\n  \t\t\tlogger.error(\"Context initialization failed\", ex);\n  \t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);\n  \t\t\tthrow ex;\n  \t\t}\n  \t\tcatch (Error err) {\n  \t\t\tlogger.error(\"Context initialization failed\", err);\n  \t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err);\n  \t\t\tthrow err;\n  \t\t}\n  \t}\n  \t\n  ```\n\n  3.1.1实例化上下文环境对象\n\n  ```\n  protected WebApplicationContext createWebApplicationContext(ServletContext sc) {\n  //拿到class对象\n  Class<?> contextClass = determineContextClass(sc);\n  \t\tif (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {\n  \t\t\tthrow new ApplicationContextException(\"Custom context class [\" + contextClass.getName() +\n  \t\t\t\t\t\"] is not of type [\" + ConfigurableWebApplicationContext.class.getName() + \"]\");\n  \t\t}\n  \t\t//反射生成对象 ConfigurableWebApplicationContext\n  \t\treturn ( ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);\n  \t}\n  ```\n\n  加载父类容器\n\n  ```\n  public class ContextLoader {\n  ...\n  \t/**\n  \t * Template method with default implementation (which may be overridden by a\n  \t * subclass), to load or obtain an ApplicationContext instance which will be\n  \t * used as the parent context of the root WebApplicationContext. If the\n  \t * return value from the method is null, no parent context is set.\\\n  \t // 注意下面的话 意思是允许加载多web容器\n  \t * <p>The main reason to load a parent context here is to allow multiple root\n  \t * web application contexts to all be children of a shared EAR context, or\n  \t * alternately to also share the same parent context that is visible to\n  \t * EJBs. For pure web applications, there is usually no need to worry about\n  \t * having a parent context to the root web application context.\n  \t * <p>The default implementation uses\n  \t * {@link org.springframework.context.access.ContextSingletonBeanFactoryLocator},\n  \t * configured via {@link #LOCATOR_FACTORY_SELECTOR_PARAM} and\n  \t * {@link #LOCATOR_FACTORY_KEY_PARAM}, to load a parent context\n  \t * which will be shared by all other users of ContextsingletonBeanFactoryLocator\n  \t * which also use the same configuration parameters.\n  \t * @param servletContext current servlet context\n  \t * @return the parent application context, or {@code null} if none\n  \t * @see org.springframework.context.access.ContextSingletonBeanFactoryLocator\n  \t */\n  \tprotected ApplicationContext loadParentContext(ServletContext servletContext) {\n  \t\tApplicationContext parentContext = null;\n  \t\tString locatorFactorySelector = servletContext.getInitParameter(LOCATOR_FACTORY_SELECTOR_PARAM);\n  \t\tString parentContextKey = servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM);\n  \n  \t\tif (parentContextKey != null) {\n  \t\t\t// locatorFactorySelector may be null, indicating the default \"classpath*:beanRefContext.xml\"\n  \t\t\tBeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance(locatorFactorySelector);\n  \t\t\tLog logger = LogFactory.getLog(ContextLoader.class);\n  \t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\tlogger.debug(\"Getting parent context definition: using parent context key of '\" +\n  \t\t\t\t\t\tparentContextKey + \"' with BeanFactoryLocator\");\n  \t\t\t}\n  \t\t\tthis.parentContextRef = locator.useBeanFactory(parentContextKey);\n  \t\t\tparentContext = (ApplicationContext) this.parentContextRef.getFactory();\n  \t\t}\n  \n  \t\treturn parentContext;\n  \t}\n  ...\n  ```\n\n  3.1.2配置并刷新web上下文环境\n\n  ```\n  public class ContextLoader {\n  ...\n  protected void configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext wac, ServletContext sc) {\n  \t\tif (ObjectUtils.identityToString(wac).equals(wac.getId())) {\n  \t\t\t// The application context id is still set to its original default value\n  \t\t\t// -> assign a more useful id based on available information\n  \t\t\tString idParam = sc.getInitParameter(CONTEXT_ID_PARAM);\n  \t\t\tif (idParam != null) {\n  \t\t\t\twac.setId(idParam);\n  \t\t\t}\n  \t\t\telse {\n  \t\t\t\t// Generate default id...\n  \t\t\t\twac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX +\n  \t\t\t\t\t\tObjectUtils.getDisplayString(sc.getContextPath()));\n  \t\t\t}\n  \t\t}\n  \t\t//设置上下文环境对象\n  \t\twac.setServletContext(sc);\n  \t\t//获取初始化变量\n  \t\tString configLocationParam = sc.getInitParameter(CONFIG_LOCATION_PARAM);\n  \t\tif (configLocationParam != null) {\n  \t\t//设置初始化变量到web容器中\n  \t\t//设置配置location到web容器这里的configLocationParam 就是web.xml中配置的\t\t     //classpath:xxxxxx.xml\n  \t\t\twac.setConfigLocation(configLocationParam);\n  \t\t}\n  \n  \t\t// The wac environment's #initPropertySources will be called in any case when the context\n  \t\t// is refreshed; do it eagerly here to ensure servlet property sources are in place for\n  \t\t// use in any post-processing or initialization that occurs below prior to #refresh\n  \t\t//获取环境对象\n  \t\tConfigurableEnvironment env = wac.getEnvironment();\n  \t\t//3.1.2.1初始化一些配置properties\n      \tif (env instanceof ConfigurableWebEnvironment) {\n  \t\t\t((ConfigurableWebEnvironment) env).initPropertySources(sc, null);\n  \t\t}\n  \t\t//3.1.2.2装配上下文环境对象\n  \t\tcustomizeContext(sc, wac);\n  \t\t//3.1.2.3刷新上下文环境\n  \t\twac.refresh();\n  \t}\n  \t...\n  \t}\n  ```\n\n  3.1.2.1初始化一些配置properties\n\n  ```\n  public class StandardServletEnvironment extends StandardEnvironment implements ConfigurableWebEnvironment {\n  ...\n  \t@Override\n  \tpublic void initPropertySources(ServletContext servletContext, ServletConfig servletConfig) {\n  \t\tWebApplicationContextUtils.initServletPropertySources(getPropertySources(), servletContext, servletConfig);\n  \t}\n  ...\n  }\n  public abstract class WebApplicationContextUtils {\n  ...\n  \t/**\n  \t * Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with\n  \t * actual instances populated with the given {@code servletContext} and\n  \t * {@code servletConfig} objects.\n  \t * <p>This method is idempotent with respect to the fact it may be called any number\n  \t * of times but will perform replacement of stub property sources with their\n  \t * corresponding actual property sources once and only once.\n  \t * @param propertySources the {@link MutablePropertySources} to initialize (must not\n  \t * be {@code null})\n  \t * @param servletContext the current {@link ServletContext} (ignored if {@code null}\n  \t * or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME\n  \t * servlet context property source} has already been initialized)\n  \t * @param servletConfig the current {@link ServletConfig} (ignored if {@code null}\n  \t * or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME\n  \t * servlet config property source} has already been initialized)\n  \t * @see org.springframework.core.env.PropertySource.StubPropertySource\n  \t * @see org.springframework.core.env.ConfigurableEnvironment#getPropertySources()\n  \t */\n  \tpublic static void initServletPropertySources(\n  \t\t\tMutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {\n  \n  \t\tAssert.notNull(propertySources, \"'propertySources' must not be null\");\n  \t\t//propertySources包含这些初始化配置[servletConfigInitParams,servletContextInitParams,jndiProperties,systemProperties,systemEnvironment]\n  \t\t//SERVLET_CONTEXT_PROPERTY_SOURCE_NAME=servletContextInitParams\n  \t\t//\n  \t\tif (servletContext != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&\n  \t\t\t\tpropertySources.get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {\n  \t\t\tpropertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,\n  \t\t\t\t\tnew ServletContextPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext));\n  \t\t}\n  \t\tif (servletConfig != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&\n  \t\t\t\tpropertySources.get(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {\n  \t\t\tpropertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,\n  \t\t\t\t\tnew ServletConfigPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig));\n  \t\t}\n  \t}\n  ...\n  }\n  ```\n\n  3.1.2.2装配上下文环境对象\n\n  ```\n  public class ContextLoader {\n  ...\n  /**\n  \t * Customize the {@link ConfigurableWebApplicationContext} created by this\n  \t * ContextLoader after config locations have been supplied to the context\n  \t * but before the context is <em>refreshed</em>.\n  \t * <p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)\n  \t * determines} what (if any) context initializer classes have been specified through\n  \t * {@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and\n  \t * {@linkplain ApplicationContextInitializer#initialize invokes each} with the\n  \t * given web application context.\n  \t * <p>Any {@code ApplicationContextInitializers} implementing\n  \t * {@link org.springframework.core.Ordered Ordered} or marked with @{@link\n  \t * org.springframework.core.annotation.Order Order} will be sorted appropriately.\n  \t * @param sc the current servlet context\n  \t * @param wac the newly created application context\n  \t * @see #CONTEXT_INITIALIZER_CLASSES_PARAM\n  \t * @see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)\n  \t */\n  \tprotected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {\n  \t\tList<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =\n  \t\t\t\tdetermineContextInitializerClasses(sc);\n  \n  \t\tfor (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {\n  \t\t\tClass<?> initializerContextClass =\n  \t\t\t\t\tGenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class);\n  \t\t\tif (initializerContextClass != null && !initializerContextClass.isInstance(wac)) {\n  \t\t\t\tthrow new ApplicationContextException(String.format(\n  \t\t\t\t\t\t\"Could not apply context initializer [%s] since its generic parameter [%s] \" +\n  \t\t\t\t\t\t\"is not assignable from the type of application context used by this \" +\n  \t\t\t\t\t\t\"context loader: [%s]\", initializerClass.getName(), initializerContextClass.getName(),\n  \t\t\t\t\t\twac.getClass().getName()));\n  \t\t\t}\n  \t\t\tthis.contextInitializers.add(BeanUtils.instantiateClass(initializerClass));\n  \t\t}\n  \n  \t\tAnnotationAwareOrderComparator.sort(this.contextInitializers);\n  \t\tfor (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : this.contextInitializers) {\n  \t\t\t//3.1.2.2.1遍历所有的上下文初始化器，进行初始化容器\n  \t\t\tinitializer.initialize(wac);\n  \t\t}\n  \t}\n  ...\n  }\n  ```\n\n  3.1.2.2.1遍历所有的上下文初始化器，进行初始化容器\n\n  ```\n  public interface ApplicationContextInitializer<C extends ConfigurableApplicationContext> {\n  \n  \t/**\n  \t * Initialize the given application context.\n  \t * @param applicationContext the application to configure\n  \t */\n  \tvoid initialize(C applicationContext);\n  \n  }\n  ```\n\n  **3.1.2.3刷新上下文环境,这个很重要的一个方法,Spring的bean解析就在这里啊**\n\n  ```\n  public abstract class AbstractApplicationContext extends DefaultResourceLoader\n  \t\timplements ConfigurableApplicationContext, DisposableBean {\n  \t\t...\n  \t\t@Override\n  \tpublic void refresh() throws BeansException, IllegalStateException {\n  \t\tsynchronized (this.startupShutdownMonitor) {\n  \t\t\t// Prepare this context for refreshing.\n  \t\t\t//3.1.2.3.1预备刷新前的一些准备工作\n  \t\t\tprepareRefresh();\n  \n  \t\t\t// Tell the subclass to refresh the internal bean factory.\n  \t\t\t//3.1.2.3.2告诉父类刷新内置bean工厂\n  \t\t\tConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n  \n  \t\t\t// Prepare the bean factory for use in this context.\n  \t\t\t//3.1.2.3.3创建bean工厂 主要对bean工厂进行特征设置\n  \t\t\t prepareBeanFactory(beanFactory);\n  \n  \t\t\ttry {\n  \t\t\t\t// Allows post-processing of the bean factory in context subclasses.\n  \t\t\t\t//此方法允许子类在所有的 bean 尚未初始化之前注册 BeanPostProcessor\n  \t\t\t\tpostProcessBeanFactory(beanFactory);\n  \n  \t\t\t\t// Invoke factory processors registered as beans in the context.\n  \t\t\t\t//BeanFactoryPostProcessor 接口允许我们在 bean 正是初始化之前改变其值。此接口只\t\t\t\t//有一个方法\n  \t\t\t\tinvokeBeanFactoryPostProcessors(beanFactory);\n  \n  \t\t\t\t// Register bean processors that intercept bean creation.\n  \t\t\t\t//BeanPostProcessors注册 在BeanDefinitions 中查找BeanPostProcessor保存一个\t\t\t\t//list中\n                  registerBeanPostProcessors(beanFactory);\n  \t\t\t\t//支持国际化\n  \t\t\t\t// Initialize message source for this context.\n  \t\t\t\tinitMessageSource();\n  \t\t\t\t//加载事件驱动ApplicationEventMulticaster来管理事件驱动三元素 可以看下具体实现\n  \t\t\t\t//有addApplicationListener multicastEvent 传播嘛\n  \t\t\t\t//ApplicationEventPublisher是将事件委托给ApplicationEventMulticaster来处理的\n  \t\t\t\t// Initialize event multicaster for this context.\n  \t\t\t\tinitApplicationEventMulticaster();\n  \t\t\t\t//初始化其他的特殊的bean 没有实现方法 默认走的空实现\n  \t\t\t\t// Initialize other special beans in specific context subclasses.\n  \t\t\t\tonRefresh();\n  \n  \t\t\t\t// Check for listener beans and register them.\n  \t\t\t\t//这里注册监听器了 结合上面的事件广播类进行\n  \t\t\t\tregisterListeners();\n  \t\t\t\t//在工厂中进行单例beans的注册配置\n  \t\t\t\t// Instantiate all remaining (non-lazy-init) singletons.\n  \t\t\t\tfinishBeanFactoryInitialization(beanFactory);\n  \n  \t\t\t\t// Last step: publish corresponding event.\n  \t\t\t\tfinishRefresh();\n  \t\t\t}\n  \n  \t\t\tcatch (BeansException ex) {\n  \t\t\t\tif (logger.isWarnEnabled()) {\n  \t\t\t\t\tlogger.warn(\"Exception encountered during context initialization - \" +\n  \t\t\t\t\t\t\t\"cancelling refresh attempt: \" + ex);\n  \t\t\t\t}\n  \n  \t\t\t\t// Destroy already created singletons to avoid dangling resources.\n  \t\t\t\tdestroyBeans();\n  \n  \t\t\t\t// Reset 'active' flag.\n  \t\t\t\tcancelRefresh(ex);\n  \n  \t\t\t\t// Propagate exception to caller.\n  \t\t\t\tthrow ex;\n  \t\t\t}\n  \n  \t\t\tfinally {\n  \t\t\t\t// Reset common introspection caches in Spring's core, since we\n  \t\t\t\t// might not ever need metadata for singleton beans anymore...\n  \t\t\t\tresetCommonCaches();\n  \t\t\t}\n  \t\t}\n  \t}\n  \t...\n  \t\t}\n  ```\n\n  **finishRefresh**\n\n  ```\n  \tprotected void finishRefresh() {\n  \t\t// Initialize lifecycle processor for this context.\n  \t\tinitLifecycleProcessor();\n  \n  \t\t// Propagate refresh to lifecycle processor first.\n  \t\tgetLifecycleProcessor().onRefresh();\n  \n  \t\t// Publish the final event.\n  \t\t//最后发布上下文构建成功事件\n  \t\tpublishEvent(new ContextRefreshedEvent(this));\n  \t\t//注册下上下文环境。\n  \t\t// Participate in LiveBeansView MBean, if active.\n  \t\tLiveBeansView.registerApplicationContext(this);\n  \t}\n  ```\n\n  \n\n  finishBeanFactoryInitialization在工厂中进行单例beans的注册配置**\n\n  * ConversionService bean类型转换的一个服务bean\n  * StringValueResolver 用于解析注解值\n  * LoadTimeWeaverAware 实现了此接口的 bean 可以得到 LoadTimeWeaver，此处仅仅初始化 \n  * preInstantiateSingletons  \n\n  ```\n  \t/**\n  \t * Finish the initialization of this context's bean factory,\n  \t * initializing all remaining singleton beans.\n  \t */\n  \tprotected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {\n  \t\t// Initialize conversion service for this context.\n  \t\tif (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &&\n  \t\t\t\tbeanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {\n  \t\t\tbeanFactory.setConversionService(\n  \t\t\t\t\tbeanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));\n  \t\t}\n  \n  \t\t// Register a default embedded value resolver if no bean post-processor\n  \t\t// (such as a PropertyPlaceholderConfigurer bean) registered any before:\n  \t\t// at this point, primarily for resolution in annotation attribute values.\n  \t\tif (!beanFactory.hasEmbeddedValueResolver()) {\n  \t\t\tbeanFactory.addEmbeddedValueResolver(new StringValueResolver() {\n  \t\t\t\t@Override\n  \t\t\t\tpublic String resolveStringValue(String strVal) {\n  \t\t\t\t\treturn getEnvironment().resolvePlaceholders(strVal);\n  \t\t\t\t}\n  \t\t\t});\n  \t\t}\n  \n  \t\t// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.\n  \t\tString[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);\n  \t\tfor (String weaverAwareName : weaverAwareNames) {\n  \t\t\tgetBean(weaverAwareName);\n  \t\t}\n  \n  \t\t// Stop using the temporary ClassLoader for type matching.\n  \t\tbeanFactory.setTempClassLoader(null);\n  \n  \t\t// Allow for caching all bean definition metadata, not expecting further changes.\n  \t\tbeanFactory.freezeConfiguration();\n  \n  \t\t// Instantiate all remaining (non-lazy-init) singletons.\n  \t\tbeanFactory.preInstantiateSingletons();\n  \t}\n  ```\n\n  **preInstantiateSingletons  进行单例bean的预初始化**\n\n  首先进行单例类的初始化，其中如果 bean 是 FactoryBean 类型 (注意，只定义了 factory-method 属性的普通 bean 并不是 FactoryBean)，并且还是 SmartFactoryBean 类型，那么需要判断是否需要 eagerInit(isEagerInit 是此接口定义的方法)。 \n\n  ```\n  @Override\n  \tpublic void preInstantiateSingletons() throws BeansException {\n  \t\tif (this.logger.isDebugEnabled()) {\n  \t\t\tthis.logger.debug(\"Pre-instantiating singletons in \" + this);\n  \t\t}\n  \n  \t\t// Iterate over a copy to allow for init methods which in turn register new bean definitions.\n  \t\t// While this may not be part of the regular factory bootstrap, it does otherwise work fine.\n  \t\tList<String> beanNames = new ArrayList<String>(this.beanDefinitionNames);\n  \n  \t\t// Trigger initialization of all non-lazy singleton beans...\n  \t\tfor (String beanName : beanNames) {\n  \t\t\tRootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);\n  \t\t\tif (!bd.isAbstract() && bd.isSingleton() && !bd.isLazyInit()) {\n  \t\t\t\tif (isFactoryBean(beanName)) {\n  \t\t\t\t\tfinal FactoryBean<?> factory = (FactoryBean<?>) getBean(FACTORY_BEAN_PREFIX + beanName);\n  \t\t\t\t\tboolean isEagerInit;\n  \t\t\t\t\tif (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {\n  \t\t\t\t\t\tisEagerInit = AccessController.doPrivileged(new PrivilegedAction<Boolean>() {\n  \t\t\t\t\t\t\t@Override\n  \t\t\t\t\t\t\tpublic Boolean run() {\n  \t\t\t\t\t\t\t\treturn ((SmartFactoryBean<?>) factory).isEagerInit();\n  \t\t\t\t\t\t\t}\n  \t\t\t\t\t\t}, getAccessControlContext());\n  \t\t\t\t\t}\n  \t\t\t\t\telse {\n  \t\t\t\t\t\tisEagerInit = (factory instanceof SmartFactoryBean &&\n  \t\t\t\t\t\t\t\t((SmartFactoryBean<?>) factory).isEagerInit());\n  \t\t\t\t\t}\n  \t\t\t\t\tif (isEagerInit) {\n  \t\t\t\t\t\tgetBean(beanName);\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\telse {\n  \t\t\t\t\tgetBean(beanName);\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \n  \t\t// Trigger post-initialization callback for all applicable beans...\n  \t\tfor (String beanName : beanNames) {\n  \t\t\tObject singletonInstance = getSingleton(beanName);\n  \t\t\tif (singletonInstance instanceof SmartInitializingSingleton) {\n  \t\t\t\tfinal SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;\n  \t\t\t\tif (System.getSecurityManager() != null) {\n  \t\t\t\t\tAccessController.doPrivileged(new PrivilegedAction<Object>() {\n  \t\t\t\t\t\t@Override\n  \t\t\t\t\t\tpublic Object run() {\n  \t\t\t\t\t\t\tsmartSingleton.afterSingletonsInstantiated();\n  \t\t\t\t\t\t\treturn null;\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}, getAccessControlContext());\n  \t\t\t\t}\n  \t\t\t\telse {\n  \t\t\t\t\tsmartSingleton.afterSingletonsInstantiated();\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t}\n  \n  ```\n\n  \n\n  **registerListeners，注册监听器**\n\n  需要指出的是监听器列表在ContextLoader类中的``initWebApplicationContext``方法中的``loadParentContext``中的``useBeanFactory``中已经添加进入了\n\n  ````\n  public class EventListenerMethodProcessor implements SmartInitializingSingleton, ApplicationContextAware {\n  ...\n  \tprotected void processBean(final List<EventListenerFactory> factories, final String beanName, final Class<?> targetType) {\n  \t\tif (!this.nonAnnotatedClasses.contains(targetType)) {\n  \t\t\tMap<Method, EventListener> annotatedMethods = null;\n  \t\t\ttry {\n  \t\t\t\tannotatedMethods = MethodIntrospector.selectMethods(targetType,\n  \t\t\t\t\t\tnew MethodIntrospector.MetadataLookup<EventListener>() {\n  \t\t\t\t\t\t\t@Override\n  \t\t\t\t\t\t\tpublic EventListener inspect(Method method) {\n  \t\t\t\t\t\t\t\treturn AnnotatedElementUtils.findMergedAnnotation(method, EventListener.class);\n  \t\t\t\t\t\t\t}\n  \t\t\t\t\t\t});\n  \t\t\t}\n  \t\t\tcatch (Throwable ex) {\n  \t\t\t\t// An unresolvable type in a method signature, probably from a lazy bean - let's ignore it.\n  \t\t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\t\tlogger.debug(\"Could not resolve methods for bean with name '\" + beanName + \"'\", ex);\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\tif (CollectionUtils.isEmpty(annotatedMethods)) {\n  \t\t\t\tthis.nonAnnotatedClasses.add(targetType);\n  \t\t\t\tif (logger.isTraceEnabled()) {\n  \t\t\t\t\tlogger.trace(\"No @EventListener annotations found on bean class: \" + targetType.getName());\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\telse {\n  \t\t\t\t// Non-empty set of methods\n  \t\t\t\tfor (Method method : annotatedMethods.keySet()) {\n  \t\t\t\t\tfor (EventListenerFactory factory : factories) {\n  \t\t\t\t\t\tif (factory.supportsMethod(method)) {\n  \t\t\t\t\t\t\tMethod methodToUse = AopUtils.selectInvocableMethod(\n  \t\t\t\t\t\t\t\t\tmethod, this.applicationContext.getType(beanName));\n  \t\t\t\t\t\t\tApplicationListener<?> applicationListener =\n  \t\t\t\t\t\t\t\t\tfactory.createApplicationListener(beanName, targetType, methodToUse);\n  \t\t\t\t\t\t\tif (applicationListener instanceof ApplicationListenerMethodAdapter) {\n  \t\t\t\t\t\t\t\t((ApplicationListenerMethodAdapter) applicationListener)\n  \t\t\t\t\t\t\t\t\t\t.init(this.applicationContext, this.evaluator);\n  \t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t//注意这里添加applicationListener到环境中了\t\t\t\t\t\t\tthis.applicationContext.addApplicationListener(applicationListener);\n  \t\t\t\t\t\t\tbreak;\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\t\tlogger.debug(annotatedMethods.size() + \" @EventListener methods processed on bean '\" +\n  \t\t\t\t\t\t\tbeanName + \"': \" + annotatedMethods);\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t}\n  ...\n  }\n  ````\n\n  下面是上下文环境中的监听器注册到工厂\n\n  ```\n  \t/**\n  \t * Add beans that implement ApplicationListener as listeners.\n  \t * Doesn't affect other listeners, which can be added without being beans.\n  \t */\n  \tprotected void registerListeners() {\n  \t\t// Register statically specified listeners first.\n  \t\t//获得到之前加载的监听器列表 监听器列表在configureAndRefreshWebApplicationContext的时候就\n  \t\tfor (ApplicationListener<?> listener : getApplicationListeners()) {\n  \t\t\tgetApplicationEventMulticaster().addApplicationListener(listener);\n  \t\t}\n  \n  \t\t// Do not initialize FactoryBeans here: We need to leave all regular beans\n  \t\t// uninitialized to let post-processors apply to them!\n  \t\tString[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false);\n  \t\tfor (String listenerBeanName : listenerBeanNames) {\n  \t\t\tgetApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);\n  \t\t}\n  \n  \t\t// Publish early application events now that we finally have a multicaster...\n  \t\tSet<ApplicationEvent> earlyEventsToProcess = this.earlyApplicationEvents;\n  \t\tthis.earlyApplicationEvents = null;\n  \t\tif (earlyEventsToProcess != null) {\n  \t\t\tfor (ApplicationEvent earlyEvent : earlyEventsToProcess) {\n  \t\t\t\tgetApplicationEventMulticaster().multicastEvent(earlyEvent);\n  \t\t\t}\n  \t\t}\n  \t}\n  ```\n\n  \n\n  **initApplicationEventMulticaster**\n\n  ```\n  \t/**\n  \t * Initialize the ApplicationEventMulticaster.\n  \t * Uses SimpleApplicationEventMulticaster if none defined in the context.\n  \t * @see org.springframework.context.event.SimpleApplicationEventMulticaster\n  \t */\n  \tprotected void initApplicationEventMulticaster() {\n  \t\tConfigurableListableBeanFactory beanFactory = getBeanFactory();\n  \t\t//看工厂中有没有ApplicationEventMulticaster这个类 如果有的话 就取出来\n  \t\tif (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) {\n  \t\t\tthis.applicationEventMulticaster =\n  \t\t\t\t\tbeanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);\n  \t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\tlogger.debug(\"Using ApplicationEventMulticaster [\" + this.applicationEventMulticaster + \"]\");\n  \t\t\t}\n  \t\t}\n  \t\telse {\n  \t\t//如果没有这个类 那么就创建一个 然后作为单例对象放置到工厂中。工厂是在上下文环境对象中包含着的\n  \t\t\tthis.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory);\n  \t\t\tbeanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster);\n  \t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\tlogger.debug(\"Unable to locate ApplicationEventMulticaster with name '\" +\n  \t\t\t\t\t\tAPPLICATION_EVENT_MULTICASTER_BEAN_NAME +\n  \t\t\t\t\t\t\"': using default [\" + this.applicationEventMulticaster + \"]\");\n  \t\t\t}\n  \t\t}\n  \t}\n  ```\n\n  \n\n  **3.1.2.3.1预备刷新前的一些准备工作**\n\n  ```\n  /**\n  \t * Prepare this context for refreshing, setting its startup date and\n  \t * active flag as well as performing any initialization of property sources.\n  \t */\n  \tprotected void prepareRefresh() {\n  \t\tthis.startupDate = System.currentTimeMillis();\n  \t\tthis.closed.set(false);\n  \t\tthis.active.set(true);\n  \n  \t\tif (logger.isInfoEnabled()) {\n  \t\t\tlogger.info(\"Refreshing \" + this);\n  \t\t}\n  \n  \t\t// Initialize any placeholder property sources in the context environment\n  \t\t//3.1.2.3.1.1初始化一些配置文件\n  \t\tinitPropertySources();\n  \n  \t\t// Validate that all properties marked as required are resolvable\n  \t\t// see ConfigurablePropertyResolver#setRequiredProperties\n  \t\t//3.1.2.3.2校验必须的配置\n  \t\tgetEnvironment().validateRequiredProperties();\n  \n  \t\t// Allow for the collection of early ApplicationEvents,\n  \t\t// to be published once the multicaster is available...\n  \t\tthis.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>();\n  \t}\n  ```\n\n  **3.1.2.3.2告诉父类刷新内置bean工厂**\n\n  ```\n  \t/**\n  \t * Tell the subclass to refresh the internal bean factory.\n  \t * @return the fresh BeanFactory instance\n  \t * @see #refreshBeanFactory()\n  \t * @see #getBeanFactory()\n  \t */\n  \tprotected ConfigurableListableBeanFactory obtainFreshBeanFactory() {\n  \t\t//3.1.2.3.2.1在这里refresh bean工厂\n  \t\trefreshBeanFactory();\n  \t\tConfigurableListableBeanFactory beanFactory = getBeanFactory();\n  \t\tif (logger.isDebugEnabled()) {\n  \t\t\tlogger.debug(\"Bean factory for \" + getDisplayName() + \": \" + beanFactory);\n  \t\t}\n  \t\treturn beanFactory;\n  \t}\n  ```\n\n  **3.1.2.3.2.1在这里refresh bean工厂**\n\n  ```\n  \t@Override\n  \tprotected final void refreshBeanFactory() throws BeansException {\n  \t//如果存在工厂了 就销毁掉 然后关闭工厂 这样就刷新了\n  \t\tif (hasBeanFactory()) {\n  \t\t\tdestroyBeans();\n  \t\t\tcloseBeanFactory();\n  \t\t}\n  \t\ttry {\n  \t\t\t//创建bean可装配到list中的工厂\n  \t\t\tDefaultListableBeanFactory beanFactory = createBeanFactory();\n  \t\t\tbeanFactory.setSerializationId(getId());\n  \t\t\t//3.1.2.3.2.1.1给与子类自由定制bean容器的机会\n  \t\t\tcustomizeBeanFactory(beanFactory);\n  \t\t\t//3.1.2.3.2.1.2核心的bean加载方法。\n  \t\t\tloadBeanDefinitions(beanFactory);\n  \t\t\tsynchronized (this.beanFactoryMonitor) {\n  \t\t\t\tthis.beanFactory = beanFactory;\n  \t\t\t}\n  \t\t}\n  \t\tcatch (IOException ex) {\n  \t\t\tthrow new ApplicationContextException(\"I/O error parsing bean definition source for \" + getDisplayName(), ex);\n  \t\t}\n  \t}\n  ```\n\n  **3.1.2.3.2.1.1给与子类自由定制bean容器的机会**\n\n  ```\n  /**\n  \t * Customize the internal bean factory used by this context.\n  \t * Called for each {@link #refresh()} attempt.\n  \t * <p>The default implementation applies this context's\n  \t * {@linkplain #setAllowBeanDefinitionOverriding \"allowBeanDefinitionOverriding\"}\n  \t * and {@linkplain #setAllowCircularReferences \"allowCircularReferences\"} settings,\n  \t * if specified. Can be overridden in subclasses to customize any of\n  \t * {@link DefaultListableBeanFactory}'s settings.\n  \t * @param beanFactory the newly created bean factory for this context\n  \t * @see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding\n  \t * @see DefaultListableBeanFactory#setAllowCircularReferences\n  \t * @see DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping\n  \t * @see DefaultListableBeanFactory#setAllowEagerClassLoading\n  \t */\n  \tprotected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {\n  \t\tif (this.allowBeanDefinitionOverriding != null) {\n  \t\t\t//默认false，不允许覆盖beanFactory.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding);\n  \t\t}\n  \t\tif (this.allowCircularReferences != null) {\n  \t\t//默认false,不允许循环引用\n  \t\t\tbeanFactory.setAllowCircularReferences(this.allowCircularReferences);\n  \t\t}\n  \t}\n  ```\n\n  **3.1.2.3.2.1.2核心的bean加载方法。这个方法很重要**\n\n  ```\n  \t/**\n  \t * Loads the bean definitions via an XmlBeanDefinitionReader.\n  \t * @see org.springframework.beans.factory.xml.XmlBeanDefinitionReader\n  \t * @see #initBeanDefinitionReader\n  \t * @see #loadBeanDefinitions\n  \t */\n  \t@Override\n  \tprotected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException {\n  \t\t// Create a new XmlBeanDefinitionReader for the given BeanFactory.\n  \t\t//创建一个基于xml的bean声明读取器\n  \t\tXmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);\n  \n  \t\t// Configure the bean definition reader with this context's\n  \t\t// resource loading environment.\n  \t\t//设置环境\n  \t\tbeanDefinitionReader.setEnvironment(getEnvironment());\n  \t\t//设置资源加载器\n  \t\tbeanDefinitionReader.setResourceLoader(this);\n  \t\t//设置一个资源entity解析器 这里肯定是xml\n  \t\tbeanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this));\n  \n  \t\t// Allow a subclass to provide custom initialization of the reader,\n  \t\t// then proceed with actually loading the bean definitions.\n  \t\t//3.1.2.3.2.1.2.1初始化bean声明读取器\n  \t\tinitBeanDefinitionReader(beanDefinitionReader);\n  \t\tloadBeanDefinitions(beanDefinitionReader);\n  \t}\n  ```\n\n  **3.1.2.3.2.1.2.1初始化bean声明读取器**\n\n  ```\n  \tpublic class XmlWebApplicationContext extends AbstractRefreshableWebApplicationContext {\n  \t/**\n  \t * Load the bean definitions with the given XmlBeanDefinitionReader.\n  \t * <p>The lifecycle of the bean factory is handled by the refreshBeanFactory method;\n  \t * therefore this method is just supposed to load and/or register bean definitions.\n  \t * <p>Delegates to a ResourcePatternResolver for resolving location patterns\n  \t * into Resource instances.\n  \t * @throws IOException if the required XML document isn't found\n  \t * @see #refreshBeanFactory\n  \t * @see #getConfigLocations\n  \t * @see #getResources\n  \t * @see #getResourcePatternResolver\n  \t */\n  \tprotected void loadBeanDefinitions(XmlBeanDefinitionReader reader) throws IOException {\n  \t\tString[] configLocations = getConfigLocations();\n  \t\tif (configLocations != null) {\n  \t\t\tfor (String configLocation : configLocations) {\n  \t\t\t\t//读取具体配置位置然后读取器进行加载跳入下面的方法\n  \t\t\t\treader.loadBeanDefinitions(configLocation);\n  \t\t\t}\n  \t\t}\n  \t}\n  }\t\n  \tpublic abstract class AbstractBeanDefinitionReader implements EnvironmentCapable, BeanDefinitionReader {\n   ...\n  \t/**\n  \t * Load bean definitions from the specified resource location.\n  \t * <p>The location can also be a location pattern, provided that the\n  \t * ResourceLoader of this bean definition reader is a ResourcePatternResolver.\n  \t * @param location the resource location, to be loaded with the ResourceLoader\n  \t * (or ResourcePatternResolver) of this bean definition reader\n  \t * @param actualResources a Set to be filled with the actual Resource objects\n  \t * that have been resolved during the loading process. May be {@code null}\n  \t * to indicate that the caller is not interested in those Resource objects.\n  \t * @return the number of bean definitions found\n  \t * @throws BeanDefinitionStoreException in case of loading or parsing errors\n  \t * @see #getResourceLoader()\n  \t * @see #loadBeanDefinitions(org.springframework.core.io.Resource)\n  \t * @see #loadBeanDefinitions(org.springframework.core.io.Resource[])\n  \t */\n  \tpublic int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException {\n  \t\t//开始读取配置了bean的xml文件\n  \t\tResourceLoader resourceLoader = getResourceLoader();\n  \t\t//如果资源加载器不存在的话那么就抛出异常\n  \t\tif (resourceLoader == null) {\n  \t\t\tthrow new BeanDefinitionStoreException(\n  \t\t\t\t\t\"Cannot import bean definitions from location [\" + location + \"]: no ResourceLoader available\");\n  \t\t}\n  \t\t//如果是classpath：application*.xml这种pattern的话\n  \t\tif (resourceLoader instanceof ResourcePatternResolver) {\n  \t\t\t// Resource pattern matching available.\n  \t\t\ttry {\n  \t\t\t//获得资源\n  \t\t\t\tResource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);\n  \t\t\t\t//遍历循环 获取所有的资源的总数\n  \t\t\t\tint loadCount = loadBeanDefinitions(resources);\n  \t\t\t\t//遍历循环放入actualResources这个set中。\n  \t\t\t\tif (actualResources != null) {\n  \t\t\t\t\tfor (Resource resource : resources) {\n  \t\t\t\t\t\tactualResources.add(resource);\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\t\tlogger.debug(\"Loaded \" + loadCount + \" bean definitions from location pattern [\" + location + \"]\");\n  \t\t\t\t}\n  \t\t\t\treturn loadCount;\n  \t\t\t}\n  \t\t\tcatch (IOException ex) {\n  \t\t\t\tthrow new BeanDefinitionStoreException(\n  \t\t\t\t\t\t\"Could not resolve bean definition resource pattern [\" + location + \"]\", ex);\n  \t\t\t}\n  \t\t}else {\n  \t\t\t//否则的话只允许绝对路径的资源配置文件，\n  \t\t\t// Can only load single resources by absolute URL.\n  \t\t\tResource resource = resourceLoader.getResource(location);\n  \t\t\t//获得资源总数\n  \t\t\tint loadCount = loadBeanDefinitions(resource);\n  \t\t\tif (actualResources != null) {\n  \t\t\t\t//同样加载到set中\n  \t\t\t\tactualResources.add(resource);\n  \t\t\t}\n  \t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\tlogger.debug(\"Loaded \" + loadCount + \" bean definitions from location [\" + location + \"]\");\n  \t\t\t}\n  \t\t\treturn loadCount;\n  \t\t}\n  \t}\n  \t...\n   }\n  ```\n\n  **getResources(location)**\n\n  ````\n  public class PathMatchingResourcePatternResolver implements ResourcePatternResolver {\n  \t...\n  \t@Override\n  \tpublic Resource[] getResources(String locationPattern) throws IOException {\n  \t\tAssert.notNull(locationPattern, \"Location pattern must not be null\");\n  \t\t//CLASSPATH_ALL_URL_PREFIX=classpath*:\n  \t\t//如果是以classpath*:开头的\n  \t\tif (locationPattern.startsWith(CLASSPATH_ALL_URL_PREFIX)) {\n  \t\t\t// a class path resource (multiple resources for same name possible)\n  \t\t\t//这里的注释的意思是多个资源的partern的话\n  \t\t\tif (getPathMatcher().isPattern(locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length()))) {\n  \t\t\t\t// a class path resource pattern\n  \t\t\t\t//获取匹配的资源列表 返回资源列表\n  \t\t\t\treturn findPathMatchingResources(locationPattern);\n  \t\t\t}\n  \t\t\telse {\n  \t\t\t\t// all class path resources with the given name\n  \t\t\t\treturn \n  //获取所有的classpath下的资源\t\t\tfindAllClassPathResources(locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length()));\n  \t\t\t}\n  \t\t}\n  \t\telse {\n  \t\t\t// Generally only look for a pattern after a prefix here,\n  \t\t\t// and on Tomcat only after the \"*/\" separator for its \"war:\" protocol.\n  \t\t\tint prefixEnd = (locationPattern.startsWith(\"war:\") ? locationPattern.indexOf(\"*/\") + 1 :\n  \t\t\t\t\tlocationPattern.indexOf(':') + 1);\n  \t\t\tif (getPathMatcher().isPattern(locationPattern.substring(prefixEnd))) {\n  \t\t\t\t// a file pattern\n  \t\t\t\treturn findPathMatchingResources(locationPattern);\n  \t\t\t}\n  \t\t\telse {\n  \t\t\t\t// a single resource with the given name\n  \t\t\t\treturn new Resource[] {getResourceLoader().getResource(locationPattern)};\n  \t\t\t}\n  \t\t}\n  \t}\n  \t...\n  \t}\n  ````\n\n  **findPathMatchingResources,这个找出所有的给定资源匹配模式下的资源列表classpath:***\n\n  ```\n  /**\n  \t * Find all resources that match the given location pattern via the\n  \t * Ant-style PathMatcher. Supports resources in jar files and zip files\n  \t * and in the file system.\n  \t * @param locationPattern the location pattern to match\n  \t * @return the result as Resource array\n  \t * @throws IOException in case of I/O errors\n  \t * @see #doFindPathMatchingJarResources\n  \t * @see #doFindPathMatchingFileResources\n  \t * @see org.springframework.util.PathMatcher\n  \t */\n  \tprotected Resource[] findPathMatchingResources(String locationPattern) throws IOException {\n  \t\t//获取给定location的根目录\n  \t\tString rootDirPath = determineRootDir(locationPattern);\n  \t\tString subPattern = locationPattern.substring(rootDirPath.length());\n  \t\tResource[] rootDirResources = getResources(rootDirPath);\n  \t\tSet<Resource> result = new LinkedHashSet<>(16);\n  \t\tfor (Resource rootDirResource : rootDirResources) {\n  \t\t\trootDirResource = resolveRootDirResource(rootDirResource);\n  \t\t\tURL rootDirUrl = rootDirResource.getURL();\n  \t\t\tif (equinoxResolveMethod != null && rootDirUrl.getProtocol().startsWith(\"bundle\")) {\n  \t\t\t\tURL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl);\n  \t\t\t\tif (resolvedUrl != null) {\n  \t\t\t\t\trootDirUrl = resolvedUrl;\n  \t\t\t\t}\n  \t\t\t\trootDirResource = new UrlResource(rootDirUrl);\n  \t\t\t}\n  \t\t\tif (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {\n  \t\t\t\tresult.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()));\n  \t\t\t}\n  \t\t\telse if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) {\n  \t\t\t\tresult.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern));\n  \t\t\t}\n  \t\t\telse {\n  \t\t\t\tresult.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern));\n  \t\t\t}\n  \t\t}\n  \t\tif (logger.isTraceEnabled()) {\n  \t\t\tlogger.trace(\"Resolved location pattern [\" + locationPattern + \"] to resources \" + result);\n  \t\t}\n  \t\treturn result.toArray(new Resource[0]);\n  \t}\n  \n  ```\n\n  **findAllClassPathResources，获取所有classpath下的资源**\n\n  ```\n  \t/**\n  \t * Find all class location resources with the given location via the ClassLoader.\n  \t * Delegates to {@link #doFindAllClassPathResources(String)}.\n  \t * @param location the absolute path within the classpath\n  \t * @return the result as Resource array\n  \t * @throws IOException in case of I/O errors\n  \t * @see java.lang.ClassLoader#getResources\n  \t * @see #convertClassLoaderURL\n  \t */\n  \tprotected Resource[] findAllClassPathResources(String location) throws IOException {\n  \t\tString path = location;\n  \t\tif (path.startsWith(\"/\")) {\n  \t\t\tpath = path.substring(1);\n  \t\t}\n  \t\tSet<Resource> result = doFindAllClassPathResources(path);\n  \t\tif (logger.isTraceEnabled()) {\n  \t\t\tlogger.trace(\"Resolved classpath location [\" + location + \"] to resources \" + result);\n  \t\t}\n  \t\treturn result.toArray(new Resource[0]);\n  \t}\n  ```\n\n  \n\n  **3.1.2.3.1.1初始化一些配置文件**\n\n  ```\n  public abstract class AbstractRefreshableWebApplicationContext extends AbstractRefreshableConfigApplicationContext\n  \t\timplements ConfigurableWebApplicationContext, ThemeSource {\n  \t\t\n  \t\t...\n  \t\t\t/**\n  \t * {@inheritDoc}\n  \t * <p>Replace {@code Servlet}-related property sources.\n  \t */\n  \t@Override\n  \tprotected void initPropertySources() {\n  \t//获得环境对象\n  \t\tConfigurableEnvironment env = getEnvironment();\n  \t\tif (env instanceof ConfigurableWebEnvironment) {\n  \t\t//加载并初始化配置source\n  \t\t//又跳到StandardServletEnvironment 进行3.1.2.1初始化一些配置properties\n          ((ConfigurableWebEnvironment) env).initPropertySources(this.servletContext, \t\tthis.servletConfig);\n  \t\t}\n  \t}\n  \t\t...\n  \t\t}\n  ```\n\n   **3.1.2.3.1告诉父类去刷新内置的bean工厂。**\n\n  ```\n  \t/**\n  \t * Tell the subclass to refresh the internal bean factory.\n  \t * @return the fresh BeanFactory instance\n  \t * @see #refreshBeanFactory()\n  \t * @see #getBeanFactory()\n  \t */\n  \tprotected ConfigurableListableBeanFactory obtainFreshBeanFactory() {\n  \t\trefreshBeanFactory();\n  \t\tConfigurableListableBeanFactory beanFactory = getBeanFactory();\n  \t\tif (logger.isDebugEnabled()) {\n  \t\t\tlogger.debug(\"Bean factory for \" + getDisplayName() + \": \" + beanFactory);\n  \t\t}\n  \t\treturn beanFactory;\n  \t}\n  ```\n\n  **3.1.2.3.3准备bean工厂，包含以下几项:**\n\n  * BeanExpressionResolver(SpringEL解析器)\n  * PropertyEditorRegistrar 向spring注册Java的PropertyEditor,定义bean的xml里面都是字符串那么由这个东西来转换为我们需要的类型。只有一个实现ResourceEditorRegistrar \n  * 设置环境注入 addBeanPostProcessor 这样可以将spring内部的一些对象注入到工厂\n  * 依赖解析忽略 ignoreDependencyInterface 指定哪些依赖在注入的时候应该被忽略\n  * bean 伪装 有些对象不在工厂中，但是我们依然想让他被装配到工厂中 那么 registerResolvableDependency 这个装配关系存贮在一个Map<Class<?>,Object>中\n\n  ```\n  /**\n  \t * Configure the factory's standard context characteristics,\n  \t * such as the context's ClassLoader and post-processors.\n  \t * @param beanFactory the BeanFactory to configure\n  \t */\n  \tprotected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n  \t\t// Tell the internal bean factory to use the context's class loader etc.\n  \t\tbeanFactory.setBeanClassLoader(getClassLoader());\n  \t\tbeanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));\n  \t\tbeanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));\n  \n  \t\t// Configure the bean factory with context callbacks.\n  \t\tbeanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));\n  \t\tbeanFactory.ignoreDependencyInterface(EnvironmentAware.class);\n  \t\tbeanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);\n  \t\tbeanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);\n  \t\tbeanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);\n  \t\tbeanFactory.ignoreDependencyInterface(MessageSourceAware.class);\n  \t\tbeanFactory.ignoreDependencyInterface(ApplicationContextAware.class);\n  \n  \t\t// BeanFactory interface not registered as resolvable type in a plain factory.\n  \t\t// MessageSource registered (and found for autowiring) as a bean.\n  \t\tbeanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);\n  \t\tbeanFactory.registerResolvableDependency(ResourceLoader.class, this);\n  \t\tbeanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);\n  \t\tbeanFactory.registerResolvableDependency(ApplicationContext.class, this);\n  \n  \t\t// Register early post-processor for detecting inner beans as ApplicationListeners.\n  \t\tbeanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));\n  \n  \t\t// Detect a LoadTimeWeaver and prepare for weaving, if found.\n  \t\tif (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {\n  \t\t\tbeanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));\n  \t\t\t// Set a temporary ClassLoader for type matching.\n  \t\t\tbeanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));\n  \t\t}\n  \n  \t\t// Register default environment beans.\n  \t\t//将一些环境变量bean注册为单例对象\n  \t\tif (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) {\n  \t\t\tbeanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());\n  \t\t}\n  \t\tif (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) {\n  \t\t\tbeanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());\n  \t\t}\n  \t\tif (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) {\n  \t\t\tbeanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());\n  \t\t}\n  \t}\n  ```\n\n  **这样的话SpringCore中关于Spring容器的启动（当然我这里直接是Web容器管理Spring容器）就基本完了回头可以画下流程图 ，普通的Spring容器的启动也是一样的**\n\n\n\n","slug":"Spring源码一","published":1,"updated":"2022-09-03T07:30:55.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz85b002ftwfakathhjme","content":"<p>Spring源码(1)<a id=\"more\"></a></p>\n<h4 id=\"源码下载\"><a href=\"#源码下载\" class=\"headerlink\" title=\"源码下载\"></a>源码下载</h4><p>写的比较匆忙 ，结合Ctrl+F进行寻找关键字进行查询是最妙的。</p>\n<ul>\n<li><p>下载源码</p>\n<p>首先从github上下载源码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clonehttps://github.com/spring-projects/spring-framework.git spring-framework</span><br></pre></td></tr></table></figure>\n\n<p>你也可以用SourceTree (一个界面化的git工具) 来管理你的git项目</p>\n</li>\n<li><p>下载gradle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://gradle.org/</span><br></pre></td></tr></table></figure>\n\n<p>下载完之后需要进行环境变量的配置</p>\n<ul>\n<li><p>在环境变量中配置<code>GRADLE_HOME=D:\\ENV\\gradle-4.10.2-bin\\gradle-4.10.2</code></p>\n</li>\n<li><p>添加path变量 <code>%GRADLE_HOME%\\bin</code></p>\n</li>\n<li><p>测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\andreby\\Desktop&gt; gradle -version</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">Gradle 4.10.2</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Build time:   2018-09-19 18:10:15 UTC</span><br><span class=\"line\">Revision:     b4d8d5d170bb4ba516e88d7fe5647e2323d791dd</span><br><span class=\"line\"></span><br><span class=\"line\">Kotlin DSL:   1.0-rc-6</span><br><span class=\"line\">Kotlin:       1.2.61</span><br><span class=\"line\">Groovy:       2.4.15</span><br><span class=\"line\">Ant:          Apache Ant(TM) version 1.9.11 compiled on March 23 2018</span><br><span class=\"line\">JVM:          1.8.0_171 (Oracle Corporation 25.171-b11)</span><br><span class=\"line\">OS:           Windows 10 10.0 amd64</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>使用gradle将源码转换为eclipse 工程</p>\n<p>Spring是分多模块的，所以你要查看哪个模块的源码，就进哪个模块的目录下执行以下命令就可以看到了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle cleanIdea eclipse</span><br></pre></td></tr></table></figure>\n\n<p><strong>可能需要梯子</strong></p>\n</li>\n<li><p>导入工程,即可食用,注意各个工程之间的依赖</p>\n</li>\n<li><p>导入后的问题</p>\n<p>导入后发现一片红色感叹号，看下sts中的problems的选项框，发现是缺少jar包</p>\n<p><code>spring-cglib-repack-3.2.8</code> 和<code>spring-objenesis-repack-3.0.1.jar</code></p>\n<p> 我查了下网上大神们的说法：</p>\n<p><strong>通过阅读源码发现为了避免第三方 class 的冲突，spring 把最新的 cglib 和 objenesis 给 repack 了</strong></p>\n<p>参考链接：</p>\n<p>[]: <a href=\"https://blog.csdn.net/sekiu/article/details/50624180\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sekiu/article/details/50624180</a></p>\n</li>\n</ul>\n<h4 id=\"Spring-Core\"><a href=\"#Spring-Core\" class=\"headerlink\" title=\"Spring-Core\"></a>Spring-Core</h4><p>正常的spring启动，是以xml配置bean然后进行启动，web项目由web容器来管理spring容器。</p>\n<p>我们在applicationContext.xml中配置好bean后，那么启动时候加载这个xml就可以了。</p>\n<h3 id=\"web容器启动流程\"><a href=\"#web容器启动流程\" class=\"headerlink\" title=\"web容器启动流程\"></a>web容器启动流程</h3><p>以web项目为例子 springmvc项目 一般使用web.xml进行管理web容器，而spring容器一般交付给web容器进行管理。</p>\n<ul>\n<li><p>tomcat 启动，加载context监听器。</p>\n<p>首先tomcat的StandardContext类在tomcat启动时候会调用<code>listenerStart</code></p>\n<p>去加载配置在web.xml中的监听器</p>\n<p>webxml中的配置的spring的ContextLoadListener</p>\n<p>ContextLoaderListener 继承自ServletContextListener</p>\n<p>嗯，首先加载WebAppRootListener 这个也是继承自ServletContextListener的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;listener&gt;</span><br><span class=\"line\">&lt;listener-class&gt;org.springframework.web.util.WebAppRootListener&lt;/listener-class&gt;</span><br><span class=\"line\">&lt;/listener&gt;</span><br><span class=\"line\">&lt;listener&gt;</span><br><span class=\"line\"> &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class=\"line\">&lt;/listener&gt;</span><br><span class=\"line\">&lt;listener&gt;</span><br><span class=\"line\">    &lt;listener-class&gt;org.springframework.web.util.IntrospectorCleanupListener&lt;/listener-class&gt;</span><br><span class=\"line\">&lt;/listener&gt;</span><br></pre></td></tr></table></figure>\n\n<p>1.StardandContext中的listenerStart方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> /**</span><br><span class=\"line\">   * Configure the set of instantiated application event listeners</span><br><span class=\"line\">   * for this Context.</span><br><span class=\"line\">   * @return &lt;code&gt;true&lt;/code&gt; if all listeners wre</span><br><span class=\"line\">   * initialized successfully, or &lt;code&gt;false&lt;/code&gt; otherwise.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public boolean listenerStart() &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">      if (log.isDebugEnabled())</span><br><span class=\"line\">          log.debug(&quot;Configuring application event listeners&quot;);</span><br><span class=\"line\">  </span><br><span class=\"line\">      // Instantiate the required listeners</span><br><span class=\"line\">      String listeners[] = findApplicationListeners();</span><br><span class=\"line\">      Object results[] = new Object[listeners.length];</span><br><span class=\"line\">      boolean ok = true;</span><br><span class=\"line\">      for (int i = 0; i &lt; results.length; i++) &#123;</span><br><span class=\"line\">          if (getLogger().isDebugEnabled())</span><br><span class=\"line\">              getLogger().debug(&quot; Configuring event listener class &apos;&quot; +</span><br><span class=\"line\">                  listeners[i] + &quot;&apos;&quot;);</span><br><span class=\"line\">          try &#123;</span><br><span class=\"line\">              String listener = listeners[i];</span><br><span class=\"line\">              results[i] = getInstanceManager().newInstance(listener);</span><br><span class=\"line\">          &#125; catch (Throwable t) &#123;</span><br><span class=\"line\">              t = ExceptionUtils.unwrapInvocationTargetException(t);</span><br><span class=\"line\">              ExceptionUtils.handleThrowable(t);</span><br><span class=\"line\">              getLogger().error(sm.getString(</span><br><span class=\"line\">                      &quot;standardContext.applicationListener&quot;, listeners[i]), t);</span><br><span class=\"line\">              ok = false;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (!ok) &#123;</span><br><span class=\"line\">          getLogger().error(sm.getString(&quot;standardContext.applicationSkipped&quot;));</span><br><span class=\"line\">          return false;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      // Sort listeners in two arrays</span><br><span class=\"line\">      List&lt;Object&gt; eventListeners = new ArrayList&lt;&gt;();</span><br><span class=\"line\">      List&lt;Object&gt; lifecycleListeners = new ArrayList&lt;&gt;();</span><br><span class=\"line\">      for (int i = 0; i &lt; results.length; i++) &#123;</span><br><span class=\"line\">          if ((results[i] instanceof ServletContextAttributeListener)</span><br><span class=\"line\">              || (results[i] instanceof ServletRequestAttributeListener)</span><br><span class=\"line\">              || (results[i] instanceof ServletRequestListener)</span><br><span class=\"line\">              || (results[i] instanceof HttpSessionIdListener)</span><br><span class=\"line\">              || (results[i] instanceof HttpSessionAttributeListener)) &#123;</span><br><span class=\"line\">              eventListeners.add(results[i]);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          if ((results[i] instanceof ServletContextListener)</span><br><span class=\"line\">              || (results[i] instanceof HttpSessionListener)) &#123;</span><br><span class=\"line\">              lifecycleListeners.add(results[i]);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      // Listener instances may have been added directly to this Context by</span><br><span class=\"line\">      // ServletContextInitializers and other code via the pluggability APIs.</span><br><span class=\"line\">      // Put them these listeners after the ones defined in web.xml and/or</span><br><span class=\"line\">      // annotations then overwrite the list of instances with the new, full</span><br><span class=\"line\">      // list.</span><br><span class=\"line\">      for (Object eventListener: getApplicationEventListeners()) &#123;</span><br><span class=\"line\">          eventListeners.add(eventListener);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      setApplicationEventListeners(eventListeners.toArray());</span><br><span class=\"line\">      for (Object lifecycleListener: getApplicationLifecycleListeners()) &#123;</span><br><span class=\"line\">          lifecycleListeners.add(lifecycleListener);</span><br><span class=\"line\">          if (lifecycleListener instanceof ServletContextListener) &#123;</span><br><span class=\"line\">              noPluggabilityListeners.add(lifecycleListener);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      setApplicationLifecycleListeners(lifecycleListeners.toArray());</span><br><span class=\"line\">  </span><br><span class=\"line\">      // Send application start events</span><br><span class=\"line\">  </span><br><span class=\"line\">      if (getLogger().isDebugEnabled())</span><br><span class=\"line\">          getLogger().debug(&quot;Sending application start events&quot;);</span><br><span class=\"line\">  </span><br><span class=\"line\">      // Ensure context is not null</span><br><span class=\"line\">      getServletContext();</span><br><span class=\"line\">      context.setNewServletContextListenerAllowed(false);</span><br><span class=\"line\">  </span><br><span class=\"line\">      Object instances[] = getApplicationLifecycleListeners();</span><br><span class=\"line\">      if (instances == null || instances.length == 0) &#123;</span><br><span class=\"line\">          return ok;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">//Spring中经典的事件驱动， 创建一个event</span><br><span class=\"line\">//1.1构建一个事件 内置Context成员变量</span><br><span class=\"line\">      ServletContextEvent event = new ServletContextEvent(getServletContext());</span><br><span class=\"line\">      ServletContextEvent tldEvent = null;</span><br><span class=\"line\">      if (noPluggabilityListeners.size() &gt; 0) &#123;</span><br><span class=\"line\">          noPluggabilityServletContext = new NoPluggabilityServletContext(getServletContext());</span><br><span class=\"line\">          tldEvent = new ServletContextEvent(noPluggabilityServletContext);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      //1.2这里遍历循环 加载所有的继承自ServletContextListener</span><br><span class=\"line\">      for (int i = 0; i &lt; instances.length; i++) &#123;</span><br><span class=\"line\">          if (!(instances[i] instanceof ServletContextListener))</span><br><span class=\"line\">              continue;</span><br><span class=\"line\">          ServletContextListener listener =</span><br><span class=\"line\">              (ServletContextListener) instances[i];</span><br><span class=\"line\">          try &#123;</span><br><span class=\"line\">              fireContainerEvent(&quot;beforeContextInitialized&quot;, listener);</span><br><span class=\"line\">              if (noPluggabilityListeners.contains(listener)) &#123;</span><br><span class=\"line\">              \t**//注意这里要加载tldEvent**</span><br><span class=\"line\">                  listener.contextInitialized(tldEvent);</span><br><span class=\"line\">              &#125; else &#123;</span><br><span class=\"line\">                  listener.contextInitialized(event);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              fireContainerEvent(&quot;afterContextInitialized&quot;, listener);</span><br><span class=\"line\">          &#125; catch (Throwable t) &#123;</span><br><span class=\"line\">              ExceptionUtils.handleThrowable(t);</span><br><span class=\"line\">              fireContainerEvent(&quot;afterContextInitialized&quot;, listener);</span><br><span class=\"line\">              getLogger().error</span><br><span class=\"line\">                  (sm.getString(&quot;standardContext.listenerStart&quot;,</span><br><span class=\"line\">                                instances[i].getClass().getName()), t);</span><br><span class=\"line\">              ok = false;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return ok;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.那首先加载 WebRootContextListener</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class WebAppRootListener implements ServletContextListener &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void contextInitialized(ServletContextEvent event) &#123;</span><br><span class=\"line\">\t\tWebUtils.setWebAppRootSystemProperty(event.getServletContext());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException &#123;</span><br><span class=\"line\">\tAssert.notNull(servletContext, &quot;ServletContext must not be null&quot;);</span><br><span class=\"line\">\t//获得context的根目录</span><br><span class=\"line\">\tString root = servletContext.getRealPath(&quot;/&quot;);</span><br><span class=\"line\">\tif (root == null) &#123;</span><br><span class=\"line\">\t\tthrow new IllegalStateException(</span><br><span class=\"line\">\t\t\t&quot;Cannot set web app root system property when WAR file is not expanded&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//WEB_APP_ROOT_KEY_PARAM=webAppRootKey 就是在 web.xml文件中定义的webAppRootKey</span><br><span class=\"line\">\tString param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM);</span><br><span class=\"line\">\t//</span><br><span class=\"line\">\tString key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY);</span><br><span class=\"line\">\tString oldValue = System.getProperty(key);</span><br><span class=\"line\">\tif (oldValue != null &amp;&amp; !StringUtils.pathEquals(oldValue, root)) &#123;</span><br><span class=\"line\">\t\tthrow new IllegalStateException(</span><br><span class=\"line\">\t\t\t&quot;Web app root system property already set to different value: &apos;&quot; +</span><br><span class=\"line\">\t\t\tkey + &quot;&apos; = [&quot; + oldValue + &quot;] instead of [&quot; + root + &quot;] - &quot; +</span><br><span class=\"line\">\t\t\t&quot;Choose unique values for the &apos;webAppRootKey&apos; context-param in your web.xml files!&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//设置系统环境变量</span><br><span class=\"line\">\tSystem.setProperty(key, root);</span><br><span class=\"line\">\tservletContext.log(&quot;Set web app root system property: &apos;&quot; + key + &quot;&apos; = [&quot; + root + &quot;]&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.<strong>加载Spring的ContextLoaderListener</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ContextLoaderListener extends ContextLoader implements ServletContextListener &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void contextInitialized(ServletContextEvent event) &#123;</span><br><span class=\"line\">\t\t//3.1初始化web容器对象</span><br><span class=\"line\">\t\tinitWebApplicationContext(event.getServletContext());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>3.1跳转到ContextLoader进行加载上下文环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ContextLoader &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">\tstatic &#123;</span><br><span class=\"line\">\t\t// Load default strategy implementations from properties file.</span><br><span class=\"line\">\t\t// This is currently strictly internal and not meant to be customized</span><br><span class=\"line\">\t\t// by application developers.</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tClassPathResource resource = new ClassPathResource(DEFAULT_STRATEGIES_PATH, ContextLoader.class);</span><br><span class=\"line\">\t\t\tdefaultStrategies = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (IOException ex) &#123;</span><br><span class=\"line\">\t\t\tthrow new IllegalStateException(&quot;Could not load &apos;ContextLoader.properties&apos;: &quot; + ex.getMessage());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Initialize Spring&apos;s web application context for the given servlet context,</span><br><span class=\"line\">\t * using the application context provided at construction time, or creating a new one</span><br><span class=\"line\">\t * according to the &quot;&#123;@link #CONTEXT_CLASS_PARAM contextClass&#125;&quot; and</span><br><span class=\"line\">\t * &quot;&#123;@link #CONFIG_LOCATION_PARAM contextConfigLocation&#125;&quot; context-params.</span><br><span class=\"line\">\t * @param servletContext current servlet context</span><br><span class=\"line\">\t * @return the new WebApplicationContext</span><br><span class=\"line\">\t * @see #ContextLoader(WebApplicationContext)</span><br><span class=\"line\">\t * @see #CONTEXT_CLASS_PARAM</span><br><span class=\"line\">\t * @see #CONFIG_LOCATION_PARAM</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic WebApplicationContext initWebApplicationContext(ServletContext servletContext) &#123;</span><br><span class=\"line\">\t\tif (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) &#123;</span><br><span class=\"line\">\t\t\tthrow new IllegalStateException(</span><br><span class=\"line\">\t\t\t\t\t&quot;Cannot initialize context because there is already a root application context present - &quot; +</span><br><span class=\"line\">\t\t\t\t\t&quot;check whether you have multiple ContextLoader* definitions in your web.xml!&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tLog logger = LogFactory.getLog(ContextLoader.class);</span><br><span class=\"line\">\t\tservletContext.log(&quot;Initializing Spring root WebApplicationContext&quot;);</span><br><span class=\"line\">\t\tif (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.info(&quot;Root WebApplicationContext: initialization started&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//记录初始化时间</span><br><span class=\"line\">\t\tlong startTime = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\t// Store context in local instance variable, to guarantee that</span><br><span class=\"line\">\t\t\t// it is available on ServletContext shutdown.</span><br><span class=\"line\">\t\t\tif (this.context == null) &#123;</span><br><span class=\"line\">\t\t\t//3.1.1如果上下文环境对象为null，那么实例化一个</span><br><span class=\"line\">\t\t\t\tthis.context = createWebApplicationContext(servletContext);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (this.context instanceof ConfigurableWebApplicationContext) &#123;</span><br><span class=\"line\">\t\t\t\tConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context;</span><br><span class=\"line\">\t\t\t\tif (!cwac.isActive()) &#123;</span><br><span class=\"line\">\t\t\t\t\t// The context has not yet been refreshed -&gt; provide services such as</span><br><span class=\"line\">\t\t\t\t\t// setting the parent context, setting the application context id, etc</span><br><span class=\"line\">\t\t\t\t\tif (cwac.getParent() == null) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t// The context instance was injected without an explicit parent -&gt;</span><br><span class=\"line\">\t\t\t\t\t\t// determine parent for root web application context, if any.</span><br><span class=\"line\">\t\t\t\t\t\t//加载父容器</span><br><span class=\"line\">\t\t\t\t\t\tApplicationContext parent = loadParentContext(servletContext);</span><br><span class=\"line\">\t\t\t\t\t\tcwac.setParent(parent);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t//3.1.2配置并刷新web上下文环境</span><br><span class=\"line\">\t\t\t\t\tconfigureAndRefreshWebApplicationContext(cwac, servletContext);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tClassLoader ccl = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">\t\t\tif (ccl == ContextLoader.class.getClassLoader()) &#123;</span><br><span class=\"line\">\t\t\t\tcurrentContext = this.context;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse if (ccl != null) &#123;</span><br><span class=\"line\">\t\t\t\tcurrentContextPerThread.put(ccl, this.context);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(&quot;Published root WebApplicationContext as ServletContext attribute with name [&quot; +</span><br><span class=\"line\">\t\t\t\t\t\tWebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + &quot;]&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlong elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class=\"line\">\t\t\t\tlogger.info(&quot;Root WebApplicationContext: initialization completed in &quot; + elapsedTime + &quot; ms&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\treturn this.context;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (RuntimeException ex) &#123;</span><br><span class=\"line\">\t\t\tlogger.error(&quot;Context initialization failed&quot;, ex);</span><br><span class=\"line\">\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);</span><br><span class=\"line\">\t\t\tthrow ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (Error err) &#123;</span><br><span class=\"line\">\t\t\tlogger.error(&quot;Context initialization failed&quot;, err);</span><br><span class=\"line\">\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err);</span><br><span class=\"line\">\t\t\tthrow err;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.1.1实例化上下文环境对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected WebApplicationContext createWebApplicationContext(ServletContext sc) &#123;</span><br><span class=\"line\">//拿到class对象</span><br><span class=\"line\">Class&lt;?&gt; contextClass = determineContextClass(sc);</span><br><span class=\"line\">\t\tif (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class=\"line\">\t\t\tthrow new ApplicationContextException(&quot;Custom context class [&quot; + contextClass.getName() +</span><br><span class=\"line\">\t\t\t\t\t&quot;] is not of type [&quot; + ConfigurableWebApplicationContext.class.getName() + &quot;]&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//反射生成对象 ConfigurableWebApplicationContext</span><br><span class=\"line\">\t\treturn ( ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>加载父类容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ContextLoader &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Template method with default implementation (which may be overridden by a</span><br><span class=\"line\">\t * subclass), to load or obtain an ApplicationContext instance which will be</span><br><span class=\"line\">\t * used as the parent context of the root WebApplicationContext. If the</span><br><span class=\"line\">\t * return value from the method is null, no parent context is set.\\</span><br><span class=\"line\">\t // 注意下面的话 意思是允许加载多web容器</span><br><span class=\"line\">\t * &lt;p&gt;The main reason to load a parent context here is to allow multiple root</span><br><span class=\"line\">\t * web application contexts to all be children of a shared EAR context, or</span><br><span class=\"line\">\t * alternately to also share the same parent context that is visible to</span><br><span class=\"line\">\t * EJBs. For pure web applications, there is usually no need to worry about</span><br><span class=\"line\">\t * having a parent context to the root web application context.</span><br><span class=\"line\">\t * &lt;p&gt;The default implementation uses</span><br><span class=\"line\">\t * &#123;@link org.springframework.context.access.ContextSingletonBeanFactoryLocator&#125;,</span><br><span class=\"line\">\t * configured via &#123;@link #LOCATOR_FACTORY_SELECTOR_PARAM&#125; and</span><br><span class=\"line\">\t * &#123;@link #LOCATOR_FACTORY_KEY_PARAM&#125;, to load a parent context</span><br><span class=\"line\">\t * which will be shared by all other users of ContextsingletonBeanFactoryLocator</span><br><span class=\"line\">\t * which also use the same configuration parameters.</span><br><span class=\"line\">\t * @param servletContext current servlet context</span><br><span class=\"line\">\t * @return the parent application context, or &#123;@code null&#125; if none</span><br><span class=\"line\">\t * @see org.springframework.context.access.ContextSingletonBeanFactoryLocator</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected ApplicationContext loadParentContext(ServletContext servletContext) &#123;</span><br><span class=\"line\">\t\tApplicationContext parentContext = null;</span><br><span class=\"line\">\t\tString locatorFactorySelector = servletContext.getInitParameter(LOCATOR_FACTORY_SELECTOR_PARAM);</span><br><span class=\"line\">\t\tString parentContextKey = servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (parentContextKey != null) &#123;</span><br><span class=\"line\">\t\t\t// locatorFactorySelector may be null, indicating the default &quot;classpath*:beanRefContext.xml&quot;</span><br><span class=\"line\">\t\t\tBeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance(locatorFactorySelector);</span><br><span class=\"line\">\t\t\tLog logger = LogFactory.getLog(ContextLoader.class);</span><br><span class=\"line\">\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(&quot;Getting parent context definition: using parent context key of &apos;&quot; +</span><br><span class=\"line\">\t\t\t\t\t\tparentContextKey + &quot;&apos; with BeanFactoryLocator&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tthis.parentContextRef = locator.useBeanFactory(parentContextKey);</span><br><span class=\"line\">\t\t\tparentContext = (ApplicationContext) this.parentContextRef.getFactory();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn parentContext;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>3.1.2配置并刷新web上下文环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ContextLoader &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">protected void configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext wac, ServletContext sc) &#123;</span><br><span class=\"line\">\t\tif (ObjectUtils.identityToString(wac).equals(wac.getId())) &#123;</span><br><span class=\"line\">\t\t\t// The application context id is still set to its original default value</span><br><span class=\"line\">\t\t\t// -&gt; assign a more useful id based on available information</span><br><span class=\"line\">\t\t\tString idParam = sc.getInitParameter(CONTEXT_ID_PARAM);</span><br><span class=\"line\">\t\t\tif (idParam != null) &#123;</span><br><span class=\"line\">\t\t\t\twac.setId(idParam);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\t// Generate default id...</span><br><span class=\"line\">\t\t\t\twac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX +</span><br><span class=\"line\">\t\t\t\t\t\tObjectUtils.getDisplayString(sc.getContextPath()));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//设置上下文环境对象</span><br><span class=\"line\">\t\twac.setServletContext(sc);</span><br><span class=\"line\">\t\t//获取初始化变量</span><br><span class=\"line\">\t\tString configLocationParam = sc.getInitParameter(CONFIG_LOCATION_PARAM);</span><br><span class=\"line\">\t\tif (configLocationParam != null) &#123;</span><br><span class=\"line\">\t\t//设置初始化变量到web容器中</span><br><span class=\"line\">\t\t//设置配置location到web容器这里的configLocationParam 就是web.xml中配置的\t\t     //classpath:xxxxxx.xml</span><br><span class=\"line\">\t\t\twac.setConfigLocation(configLocationParam);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// The wac environment&apos;s #initPropertySources will be called in any case when the context</span><br><span class=\"line\">\t\t// is refreshed; do it eagerly here to ensure servlet property sources are in place for</span><br><span class=\"line\">\t\t// use in any post-processing or initialization that occurs below prior to #refresh</span><br><span class=\"line\">\t\t//获取环境对象</span><br><span class=\"line\">\t\tConfigurableEnvironment env = wac.getEnvironment();</span><br><span class=\"line\">\t\t//3.1.2.1初始化一些配置properties</span><br><span class=\"line\">    \tif (env instanceof ConfigurableWebEnvironment) &#123;</span><br><span class=\"line\">\t\t\t((ConfigurableWebEnvironment) env).initPropertySources(sc, null);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//3.1.2.2装配上下文环境对象</span><br><span class=\"line\">\t\tcustomizeContext(sc, wac);</span><br><span class=\"line\">\t\t//3.1.2.3刷新上下文环境</span><br><span class=\"line\">\t\twac.refresh();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.1.2.1初始化一些配置properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class StandardServletEnvironment extends StandardEnvironment implements ConfigurableWebEnvironment &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void initPropertySources(ServletContext servletContext, ServletConfig servletConfig) &#123;</span><br><span class=\"line\">\t\tWebApplicationContextUtils.initServletPropertySources(getPropertySources(), servletContext, servletConfig);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public abstract class WebApplicationContextUtils &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Replace &#123;@code Servlet&#125;-based &#123;@link StubPropertySource stub property sources&#125; with</span><br><span class=\"line\">\t * actual instances populated with the given &#123;@code servletContext&#125; and</span><br><span class=\"line\">\t * &#123;@code servletConfig&#125; objects.</span><br><span class=\"line\">\t * &lt;p&gt;This method is idempotent with respect to the fact it may be called any number</span><br><span class=\"line\">\t * of times but will perform replacement of stub property sources with their</span><br><span class=\"line\">\t * corresponding actual property sources once and only once.</span><br><span class=\"line\">\t * @param propertySources the &#123;@link MutablePropertySources&#125; to initialize (must not</span><br><span class=\"line\">\t * be &#123;@code null&#125;)</span><br><span class=\"line\">\t * @param servletContext the current &#123;@link ServletContext&#125; (ignored if &#123;@code null&#125;</span><br><span class=\"line\">\t * or if the &#123;@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME</span><br><span class=\"line\">\t * servlet context property source&#125; has already been initialized)</span><br><span class=\"line\">\t * @param servletConfig the current &#123;@link ServletConfig&#125; (ignored if &#123;@code null&#125;</span><br><span class=\"line\">\t * or if the &#123;@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME</span><br><span class=\"line\">\t * servlet config property source&#125; has already been initialized)</span><br><span class=\"line\">\t * @see org.springframework.core.env.PropertySource.StubPropertySource</span><br><span class=\"line\">\t * @see org.springframework.core.env.ConfigurableEnvironment#getPropertySources()</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static void initServletPropertySources(</span><br><span class=\"line\">\t\t\tMutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tAssert.notNull(propertySources, &quot;&apos;propertySources&apos; must not be null&quot;);</span><br><span class=\"line\">\t\t//propertySources包含这些初始化配置[servletConfigInitParams,servletContextInitParams,jndiProperties,systemProperties,systemEnvironment]</span><br><span class=\"line\">\t\t//SERVLET_CONTEXT_PROPERTY_SOURCE_NAME=servletContextInitParams</span><br><span class=\"line\">\t\t//</span><br><span class=\"line\">\t\tif (servletContext != null &amp;&amp; propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &amp;&amp;</span><br><span class=\"line\">\t\t\t\tpropertySources.get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) &#123;</span><br><span class=\"line\">\t\t\tpropertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,</span><br><span class=\"line\">\t\t\t\t\tnew ServletContextPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (servletConfig != null &amp;&amp; propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &amp;&amp;</span><br><span class=\"line\">\t\t\t\tpropertySources.get(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) &#123;</span><br><span class=\"line\">\t\t\tpropertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,</span><br><span class=\"line\">\t\t\t\t\tnew ServletConfigPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.1.2.2装配上下文环境对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ContextLoader &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">/**</span><br><span class=\"line\">\t * Customize the &#123;@link ConfigurableWebApplicationContext&#125; created by this</span><br><span class=\"line\">\t * ContextLoader after config locations have been supplied to the context</span><br><span class=\"line\">\t * but before the context is &lt;em&gt;refreshed&lt;/em&gt;.</span><br><span class=\"line\">\t * &lt;p&gt;The default implementation &#123;@linkplain #determineContextInitializerClasses(ServletContext)</span><br><span class=\"line\">\t * determines&#125; what (if any) context initializer classes have been specified through</span><br><span class=\"line\">\t * &#123;@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters&#125; and</span><br><span class=\"line\">\t * &#123;@linkplain ApplicationContextInitializer#initialize invokes each&#125; with the</span><br><span class=\"line\">\t * given web application context.</span><br><span class=\"line\">\t * &lt;p&gt;Any &#123;@code ApplicationContextInitializers&#125; implementing</span><br><span class=\"line\">\t * &#123;@link org.springframework.core.Ordered Ordered&#125; or marked with @&#123;@link</span><br><span class=\"line\">\t * org.springframework.core.annotation.Order Order&#125; will be sorted appropriately.</span><br><span class=\"line\">\t * @param sc the current servlet context</span><br><span class=\"line\">\t * @param wac the newly created application context</span><br><span class=\"line\">\t * @see #CONTEXT_INITIALIZER_CLASSES_PARAM</span><br><span class=\"line\">\t * @see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) &#123;</span><br><span class=\"line\">\t\tList&lt;Class&lt;ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt;&gt;&gt; initializerClasses =</span><br><span class=\"line\">\t\t\t\tdetermineContextInitializerClasses(sc);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (Class&lt;ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt;&gt; initializerClass : initializerClasses) &#123;</span><br><span class=\"line\">\t\t\tClass&lt;?&gt; initializerContextClass =</span><br><span class=\"line\">\t\t\t\t\tGenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class);</span><br><span class=\"line\">\t\t\tif (initializerContextClass != null &amp;&amp; !initializerContextClass.isInstance(wac)) &#123;</span><br><span class=\"line\">\t\t\t\tthrow new ApplicationContextException(String.format(</span><br><span class=\"line\">\t\t\t\t\t\t&quot;Could not apply context initializer [%s] since its generic parameter [%s] &quot; +</span><br><span class=\"line\">\t\t\t\t\t\t&quot;is not assignable from the type of application context used by this &quot; +</span><br><span class=\"line\">\t\t\t\t\t\t&quot;context loader: [%s]&quot;, initializerClass.getName(), initializerContextClass.getName(),</span><br><span class=\"line\">\t\t\t\t\t\twac.getClass().getName()));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tthis.contextInitializers.add(BeanUtils.instantiateClass(initializerClass));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tAnnotationAwareOrderComparator.sort(this.contextInitializers);</span><br><span class=\"line\">\t\tfor (ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt; initializer : this.contextInitializers) &#123;</span><br><span class=\"line\">\t\t\t//3.1.2.2.1遍历所有的上下文初始化器，进行初始化容器</span><br><span class=\"line\">\t\t\tinitializer.initialize(wac);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.1.2.2.1遍历所有的上下文初始化器，进行初始化容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ApplicationContextInitializer&lt;C extends ConfigurableApplicationContext&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Initialize the given application context.</span><br><span class=\"line\">\t * @param applicationContext the application to configure</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tvoid initialize(C applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.1.2.3刷新上下文环境,这个很重要的一个方法,Spring的bean解析就在这里啊</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class AbstractApplicationContext extends DefaultResourceLoader</span><br><span class=\"line\">\t\timplements ConfigurableApplicationContext, DisposableBean &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t@Override</span><br><span class=\"line\">\tpublic void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class=\"line\">\t\tsynchronized (this.startupShutdownMonitor) &#123;</span><br><span class=\"line\">\t\t\t// Prepare this context for refreshing.</span><br><span class=\"line\">\t\t\t//3.1.2.3.1预备刷新前的一些准备工作</span><br><span class=\"line\">\t\t\tprepareRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t// Tell the subclass to refresh the internal bean factory.</span><br><span class=\"line\">\t\t\t//3.1.2.3.2告诉父类刷新内置bean工厂</span><br><span class=\"line\">\t\t\tConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t// Prepare the bean factory for use in this context.</span><br><span class=\"line\">\t\t\t//3.1.2.3.3创建bean工厂 主要对bean工厂进行特征设置</span><br><span class=\"line\">\t\t\t prepareBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t// Allows post-processing of the bean factory in context subclasses.</span><br><span class=\"line\">\t\t\t\t//此方法允许子类在所有的 bean 尚未初始化之前注册 BeanPostProcessor</span><br><span class=\"line\">\t\t\t\tpostProcessBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Invoke factory processors registered as beans in the context.</span><br><span class=\"line\">\t\t\t\t//BeanFactoryPostProcessor 接口允许我们在 bean 正是初始化之前改变其值。此接口只\t\t\t\t//有一个方法</span><br><span class=\"line\">\t\t\t\tinvokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Register bean processors that intercept bean creation.</span><br><span class=\"line\">\t\t\t\t//BeanPostProcessors注册 在BeanDefinitions 中查找BeanPostProcessor保存一个\t\t\t\t//list中</span><br><span class=\"line\">                registerBeanPostProcessors(beanFactory);</span><br><span class=\"line\">\t\t\t\t//支持国际化</span><br><span class=\"line\">\t\t\t\t// Initialize message source for this context.</span><br><span class=\"line\">\t\t\t\tinitMessageSource();</span><br><span class=\"line\">\t\t\t\t//加载事件驱动ApplicationEventMulticaster来管理事件驱动三元素 可以看下具体实现</span><br><span class=\"line\">\t\t\t\t//有addApplicationListener multicastEvent 传播嘛</span><br><span class=\"line\">\t\t\t\t//ApplicationEventPublisher是将事件委托给ApplicationEventMulticaster来处理的</span><br><span class=\"line\">\t\t\t\t// Initialize event multicaster for this context.</span><br><span class=\"line\">\t\t\t\tinitApplicationEventMulticaster();</span><br><span class=\"line\">\t\t\t\t//初始化其他的特殊的bean 没有实现方法 默认走的空实现</span><br><span class=\"line\">\t\t\t\t// Initialize other special beans in specific context subclasses.</span><br><span class=\"line\">\t\t\t\tonRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Check for listener beans and register them.</span><br><span class=\"line\">\t\t\t\t//这里注册监听器了 结合上面的事件广播类进行</span><br><span class=\"line\">\t\t\t\tregisterListeners();</span><br><span class=\"line\">\t\t\t\t//在工厂中进行单例beans的注册配置</span><br><span class=\"line\">\t\t\t\t// Instantiate all remaining (non-lazy-init) singletons.</span><br><span class=\"line\">\t\t\t\tfinishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Last step: publish corresponding event.</span><br><span class=\"line\">\t\t\t\tfinishRefresh();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tcatch (BeansException ex) &#123;</span><br><span class=\"line\">\t\t\t\tif (logger.isWarnEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.warn(&quot;Exception encountered during context initialization - &quot; +</span><br><span class=\"line\">\t\t\t\t\t\t\t&quot;cancelling refresh attempt: &quot; + ex);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Destroy already created singletons to avoid dangling resources.</span><br><span class=\"line\">\t\t\t\tdestroyBeans();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Reset &apos;active&apos; flag.</span><br><span class=\"line\">\t\t\t\tcancelRefresh(ex);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Propagate exception to caller.</span><br><span class=\"line\">\t\t\t\tthrow ex;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tfinally &#123;</span><br><span class=\"line\">\t\t\t\t// Reset common introspection caches in Spring&apos;s core, since we</span><br><span class=\"line\">\t\t\t\t// might not ever need metadata for singleton beans anymore...</span><br><span class=\"line\">\t\t\t\tresetCommonCaches();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>finishRefresh</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected void finishRefresh() &#123;</span><br><span class=\"line\">\t// Initialize lifecycle processor for this context.</span><br><span class=\"line\">\tinitLifecycleProcessor();</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Propagate refresh to lifecycle processor first.</span><br><span class=\"line\">\tgetLifecycleProcessor().onRefresh();</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Publish the final event.</span><br><span class=\"line\">\t//最后发布上下文构建成功事件</span><br><span class=\"line\">\tpublishEvent(new ContextRefreshedEvent(this));</span><br><span class=\"line\">\t//注册下上下文环境。</span><br><span class=\"line\">\t// Participate in LiveBeansView MBean, if active.</span><br><span class=\"line\">\tLiveBeansView.registerApplicationContext(this);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<p>  finishBeanFactoryInitialization在工厂中进行单例beans的注册配置**</p>\n<ul>\n<li><p>ConversionService bean类型转换的一个服务bean</p>\n</li>\n<li><p>StringValueResolver 用于解析注解值</p>\n</li>\n<li><p>LoadTimeWeaverAware 实现了此接口的 bean 可以得到 LoadTimeWeaver，此处仅仅初始化 </p>\n</li>\n<li><p>preInstantiateSingletons  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Finish the initialization of this context&apos;s bean factory,</span><br><span class=\"line\"> * initializing all remaining singleton beans.</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class=\"line\">\t// Initialize conversion service for this context.</span><br><span class=\"line\">\tif (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class=\"line\">\t\t\tbeanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class=\"line\">\t\tbeanFactory.setConversionService(</span><br><span class=\"line\">\t\t\t\tbeanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Register a default embedded value resolver if no bean post-processor</span><br><span class=\"line\">\t// (such as a PropertyPlaceholderConfigurer bean) registered any before:</span><br><span class=\"line\">\t// at this point, primarily for resolution in annotation attribute values.</span><br><span class=\"line\">\tif (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class=\"line\">\t\tbeanFactory.addEmbeddedValueResolver(new StringValueResolver() &#123;</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic String resolveStringValue(String strVal) &#123;</span><br><span class=\"line\">\t\t\t\treturn getEnvironment().resolvePlaceholders(strVal);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span><br><span class=\"line\">\tString[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);</span><br><span class=\"line\">\tfor (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class=\"line\">\t\tgetBean(weaverAwareName);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Stop using the temporary ClassLoader for type matching.</span><br><span class=\"line\">\tbeanFactory.setTempClassLoader(null);</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Allow for caching all bean definition metadata, not expecting further changes.</span><br><span class=\"line\">\tbeanFactory.freezeConfiguration();</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Instantiate all remaining (non-lazy-init) singletons.</span><br><span class=\"line\">\tbeanFactory.preInstantiateSingletons();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><em>preInstantiateSingletons  进行单例bean的预初始化*</em></p>\n<p>首先进行单例类的初始化，其中如果 bean 是 FactoryBean 类型 (注意，只定义了 factory-method 属性的普通 bean 并不是 FactoryBean)，并且还是 SmartFactoryBean 类型，那么需要判断是否需要 eagerInit(isEagerInit 是此接口定义的方法)。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">\tpublic void preInstantiateSingletons() throws BeansException &#123;</span><br><span class=\"line\">\t\tif (this.logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tthis.logger.debug(&quot;Pre-instantiating singletons in &quot; + this);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span><br><span class=\"line\">\t\t// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span><br><span class=\"line\">\t\tList&lt;String&gt; beanNames = new ArrayList&lt;String&gt;(this.beanDefinitionNames);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Trigger initialization of all non-lazy singleton beans...</span><br><span class=\"line\">\t\tfor (String beanName : beanNames) &#123;</span><br><span class=\"line\">\t\t\tRootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br><span class=\"line\">\t\t\tif (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class=\"line\">\t\t\t\tif (isFactoryBean(beanName)) &#123;</span><br><span class=\"line\">\t\t\t\t\tfinal FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class=\"line\">\t\t\t\t\tboolean isEagerInit;</span><br><span class=\"line\">\t\t\t\t\tif (System.getSecurityManager() != null &amp;&amp; factory instanceof SmartFactoryBean) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tisEagerInit = AccessController.doPrivileged(new PrivilegedAction&lt;Boolean&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\t\t\t\tpublic Boolean run() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\treturn ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit();</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;, getAccessControlContext());</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\t\t\tisEagerInit = (factory instanceof SmartFactoryBean &amp;&amp;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tif (isEagerInit) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tgetBean(beanName);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\t\tgetBean(beanName);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Trigger post-initialization callback for all applicable beans...</span><br><span class=\"line\">\t\tfor (String beanName : beanNames) &#123;</span><br><span class=\"line\">\t\t\tObject singletonInstance = getSingleton(beanName);</span><br><span class=\"line\">\t\t\tif (singletonInstance instanceof SmartInitializingSingleton) &#123;</span><br><span class=\"line\">\t\t\t\tfinal SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;</span><br><span class=\"line\">\t\t\t\tif (System.getSecurityManager() != null) &#123;</span><br><span class=\"line\">\t\t\t\t\tAccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\t\t\tpublic Object run() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tsmartSingleton.afterSingletonsInstantiated();</span><br><span class=\"line\">\t\t\t\t\t\t\treturn null;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;, getAccessControlContext());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\t\tsmartSingleton.afterSingletonsInstantiated();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<p>  <strong>registerListeners，注册监听器</strong></p>\n<p>  需要指出的是监听器列表在ContextLoader类中的<code>initWebApplicationContext</code>方法中的<code>loadParentContext</code>中的<code>useBeanFactory</code>中已经添加进入了</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class EventListenerMethodProcessor implements SmartInitializingSingleton, ApplicationContextAware &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">\tprotected void processBean(final List&lt;EventListenerFactory&gt; factories, final String beanName, final Class&lt;?&gt; targetType) &#123;</span><br><span class=\"line\">\t\tif (!this.nonAnnotatedClasses.contains(targetType)) &#123;</span><br><span class=\"line\">\t\t\tMap&lt;Method, EventListener&gt; annotatedMethods = null;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tannotatedMethods = MethodIntrospector.selectMethods(targetType,</span><br><span class=\"line\">\t\t\t\t\t\tnew MethodIntrospector.MetadataLookup&lt;EventListener&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\t\t\t\tpublic EventListener inspect(Method method) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\treturn AnnotatedElementUtils.findMergedAnnotation(method, EventListener.class);</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcatch (Throwable ex) &#123;</span><br><span class=\"line\">\t\t\t\t// An unresolvable type in a method signature, probably from a lazy bean - let&apos;s ignore it.</span><br><span class=\"line\">\t\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(&quot;Could not resolve methods for bean with name &apos;&quot; + beanName + &quot;&apos;&quot;, ex);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (CollectionUtils.isEmpty(annotatedMethods)) &#123;</span><br><span class=\"line\">\t\t\t\tthis.nonAnnotatedClasses.add(targetType);</span><br><span class=\"line\">\t\t\t\tif (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.trace(&quot;No @EventListener annotations found on bean class: &quot; + targetType.getName());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\t// Non-empty set of methods</span><br><span class=\"line\">\t\t\t\tfor (Method method : annotatedMethods.keySet()) &#123;</span><br><span class=\"line\">\t\t\t\t\tfor (EventListenerFactory factory : factories) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tif (factory.supportsMethod(method)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tMethod methodToUse = AopUtils.selectInvocableMethod(</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tmethod, this.applicationContext.getType(beanName));</span><br><span class=\"line\">\t\t\t\t\t\t\tApplicationListener&lt;?&gt; applicationListener =</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tfactory.createApplicationListener(beanName, targetType, methodToUse);</span><br><span class=\"line\">\t\t\t\t\t\t\tif (applicationListener instanceof ApplicationListenerMethodAdapter) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t((ApplicationListenerMethodAdapter) applicationListener)</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t.init(this.applicationContext, this.evaluator);</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t//注意这里添加applicationListener到环境中了\t\t\t\t\t\t\tthis.applicationContext.addApplicationListener(applicationListener);</span><br><span class=\"line\">\t\t\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(annotatedMethods.size() + &quot; @EventListener methods processed on bean &apos;&quot; +</span><br><span class=\"line\">\t\t\t\t\t\t\tbeanName + &quot;&apos;: &quot; + annotatedMethods);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  下面是上下文环境中的监听器注册到工厂</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Add beans that implement ApplicationListener as listeners.</span><br><span class=\"line\"> * Doesn&apos;t affect other listeners, which can be added without being beans.</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected void registerListeners() &#123;</span><br><span class=\"line\">\t// Register statically specified listeners first.</span><br><span class=\"line\">\t//获得到之前加载的监听器列表 监听器列表在configureAndRefreshWebApplicationContext的时候就</span><br><span class=\"line\">\tfor (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123;</span><br><span class=\"line\">\t\tgetApplicationEventMulticaster().addApplicationListener(listener);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Do not initialize FactoryBeans here: We need to leave all regular beans</span><br><span class=\"line\">\t// uninitialized to let post-processors apply to them!</span><br><span class=\"line\">\tString[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false);</span><br><span class=\"line\">\tfor (String listenerBeanName : listenerBeanNames) &#123;</span><br><span class=\"line\">\t\tgetApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Publish early application events now that we finally have a multicaster...</span><br><span class=\"line\">\tSet&lt;ApplicationEvent&gt; earlyEventsToProcess = this.earlyApplicationEvents;</span><br><span class=\"line\">\tthis.earlyApplicationEvents = null;</span><br><span class=\"line\">\tif (earlyEventsToProcess != null) &#123;</span><br><span class=\"line\">\t\tfor (ApplicationEvent earlyEvent : earlyEventsToProcess) &#123;</span><br><span class=\"line\">\t\t\tgetApplicationEventMulticaster().multicastEvent(earlyEvent);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>  <strong>initApplicationEventMulticaster</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Initialize the ApplicationEventMulticaster.</span><br><span class=\"line\"> * Uses SimpleApplicationEventMulticaster if none defined in the context.</span><br><span class=\"line\"> * @see org.springframework.context.event.SimpleApplicationEventMulticaster</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected void initApplicationEventMulticaster() &#123;</span><br><span class=\"line\">\tConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class=\"line\">\t//看工厂中有没有ApplicationEventMulticaster这个类 如果有的话 就取出来</span><br><span class=\"line\">\tif (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\tthis.applicationEventMulticaster =</span><br><span class=\"line\">\t\t\t\tbeanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);</span><br><span class=\"line\">\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(&quot;Using ApplicationEventMulticaster [&quot; + this.applicationEventMulticaster + &quot;]&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse &#123;</span><br><span class=\"line\">\t//如果没有这个类 那么就创建一个 然后作为单例对象放置到工厂中。工厂是在上下文环境对象中包含着的</span><br><span class=\"line\">\t\tthis.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory);</span><br><span class=\"line\">\t\tbeanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster);</span><br><span class=\"line\">\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(&quot;Unable to locate ApplicationEventMulticaster with name &apos;&quot; +</span><br><span class=\"line\">\t\t\t\t\tAPPLICATION_EVENT_MULTICASTER_BEAN_NAME +</span><br><span class=\"line\">\t\t\t\t\t&quot;&apos;: using default [&quot; + this.applicationEventMulticaster + &quot;]&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>  <strong>3.1.2.3.1预备刷新前的一些准备工作</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">\t * Prepare this context for refreshing, setting its startup date and</span><br><span class=\"line\">\t * active flag as well as performing any initialization of property sources.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected void prepareRefresh() &#123;</span><br><span class=\"line\">\t\tthis.startupDate = System.currentTimeMillis();</span><br><span class=\"line\">\t\tthis.closed.set(false);</span><br><span class=\"line\">\t\tthis.active.set(true);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.info(&quot;Refreshing &quot; + this);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Initialize any placeholder property sources in the context environment</span><br><span class=\"line\">\t\t//3.1.2.3.1.1初始化一些配置文件</span><br><span class=\"line\">\t\tinitPropertySources();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Validate that all properties marked as required are resolvable</span><br><span class=\"line\">\t\t// see ConfigurablePropertyResolver#setRequiredProperties</span><br><span class=\"line\">\t\t//3.1.2.3.2校验必须的配置</span><br><span class=\"line\">\t\tgetEnvironment().validateRequiredProperties();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Allow for the collection of early ApplicationEvents,</span><br><span class=\"line\">\t\t// to be published once the multicaster is available...</span><br><span class=\"line\">\t\tthis.earlyApplicationEvents = new LinkedHashSet&lt;ApplicationEvent&gt;();</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>3.1.2.3.2告诉父类刷新内置bean工厂</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Tell the subclass to refresh the internal bean factory.</span><br><span class=\"line\"> * @return the fresh BeanFactory instance</span><br><span class=\"line\"> * @see #refreshBeanFactory()</span><br><span class=\"line\"> * @see #getBeanFactory()</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected ConfigurableListableBeanFactory obtainFreshBeanFactory() &#123;</span><br><span class=\"line\">\t//3.1.2.3.2.1在这里refresh bean工厂</span><br><span class=\"line\">\trefreshBeanFactory();</span><br><span class=\"line\">\tConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class=\"line\">\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.debug(&quot;Bean factory for &quot; + getDisplayName() + &quot;: &quot; + beanFactory);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn beanFactory;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>3.1.2.3.2.1在这里refresh bean工厂</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected final void refreshBeanFactory() throws BeansException &#123;</span><br><span class=\"line\">//如果存在工厂了 就销毁掉 然后关闭工厂 这样就刷新了</span><br><span class=\"line\">\tif (hasBeanFactory()) &#123;</span><br><span class=\"line\">\t\tdestroyBeans();</span><br><span class=\"line\">\t\tcloseBeanFactory();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t\t//创建bean可装配到list中的工厂</span><br><span class=\"line\">\t\tDefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class=\"line\">\t\tbeanFactory.setSerializationId(getId());</span><br><span class=\"line\">\t\t//3.1.2.3.2.1.1给与子类自由定制bean容器的机会</span><br><span class=\"line\">\t\tcustomizeBeanFactory(beanFactory);</span><br><span class=\"line\">\t\t//3.1.2.3.2.1.2核心的bean加载方法。</span><br><span class=\"line\">\t\tloadBeanDefinitions(beanFactory);</span><br><span class=\"line\">\t\tsynchronized (this.beanFactoryMonitor) &#123;</span><br><span class=\"line\">\t\t\tthis.beanFactory = beanFactory;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcatch (IOException ex) &#123;</span><br><span class=\"line\">\t\tthrow new ApplicationContextException(&quot;I/O error parsing bean definition source for &quot; + getDisplayName(), ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>3.1.2.3.2.1.1给与子类自由定制bean容器的机会</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">\t * Customize the internal bean factory used by this context.</span><br><span class=\"line\">\t * Called for each &#123;@link #refresh()&#125; attempt.</span><br><span class=\"line\">\t * &lt;p&gt;The default implementation applies this context&apos;s</span><br><span class=\"line\">\t * &#123;@linkplain #setAllowBeanDefinitionOverriding &quot;allowBeanDefinitionOverriding&quot;&#125;</span><br><span class=\"line\">\t * and &#123;@linkplain #setAllowCircularReferences &quot;allowCircularReferences&quot;&#125; settings,</span><br><span class=\"line\">\t * if specified. Can be overridden in subclasses to customize any of</span><br><span class=\"line\">\t * &#123;@link DefaultListableBeanFactory&#125;&apos;s settings.</span><br><span class=\"line\">\t * @param beanFactory the newly created bean factory for this context</span><br><span class=\"line\">\t * @see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding</span><br><span class=\"line\">\t * @see DefaultListableBeanFactory#setAllowCircularReferences</span><br><span class=\"line\">\t * @see DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping</span><br><span class=\"line\">\t * @see DefaultListableBeanFactory#setAllowEagerClassLoading</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) &#123;</span><br><span class=\"line\">\t\tif (this.allowBeanDefinitionOverriding != null) &#123;</span><br><span class=\"line\">\t\t\t//默认false，不允许覆盖beanFactory.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (this.allowCircularReferences != null) &#123;</span><br><span class=\"line\">\t\t//默认false,不允许循环引用</span><br><span class=\"line\">\t\t\tbeanFactory.setAllowCircularReferences(this.allowCircularReferences);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>3.1.2.3.2.1.2核心的bean加载方法。这个方法很重要</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Loads the bean definitions via an XmlBeanDefinitionReader.</span><br><span class=\"line\"> * @see org.springframework.beans.factory.xml.XmlBeanDefinitionReader</span><br><span class=\"line\"> * @see #initBeanDefinitionReader</span><br><span class=\"line\"> * @see #loadBeanDefinitions</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Override</span><br><span class=\"line\">protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException &#123;</span><br><span class=\"line\">\t// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span><br><span class=\"line\">\t//创建一个基于xml的bean声明读取器</span><br><span class=\"line\">\tXmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Configure the bean definition reader with this context&apos;s</span><br><span class=\"line\">\t// resource loading environment.</span><br><span class=\"line\">\t//设置环境</span><br><span class=\"line\">\tbeanDefinitionReader.setEnvironment(getEnvironment());</span><br><span class=\"line\">\t//设置资源加载器</span><br><span class=\"line\">\tbeanDefinitionReader.setResourceLoader(this);</span><br><span class=\"line\">\t//设置一个资源entity解析器 这里肯定是xml</span><br><span class=\"line\">\tbeanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this));</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Allow a subclass to provide custom initialization of the reader,</span><br><span class=\"line\">\t// then proceed with actually loading the bean definitions.</span><br><span class=\"line\">\t//3.1.2.3.2.1.2.1初始化bean声明读取器</span><br><span class=\"line\">\tinitBeanDefinitionReader(beanDefinitionReader);</span><br><span class=\"line\">\tloadBeanDefinitions(beanDefinitionReader);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>3.1.2.3.2.1.2.1初始化bean声明读取器</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic class XmlWebApplicationContext extends AbstractRefreshableWebApplicationContext &#123;</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Load the bean definitions with the given XmlBeanDefinitionReader.</span><br><span class=\"line\">\t * &lt;p&gt;The lifecycle of the bean factory is handled by the refreshBeanFactory method;</span><br><span class=\"line\">\t * therefore this method is just supposed to load and/or register bean definitions.</span><br><span class=\"line\">\t * &lt;p&gt;Delegates to a ResourcePatternResolver for resolving location patterns</span><br><span class=\"line\">\t * into Resource instances.</span><br><span class=\"line\">\t * @throws IOException if the required XML document isn&apos;t found</span><br><span class=\"line\">\t * @see #refreshBeanFactory</span><br><span class=\"line\">\t * @see #getConfigLocations</span><br><span class=\"line\">\t * @see #getResources</span><br><span class=\"line\">\t * @see #getResourcePatternResolver</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected void loadBeanDefinitions(XmlBeanDefinitionReader reader) throws IOException &#123;</span><br><span class=\"line\">\t\tString[] configLocations = getConfigLocations();</span><br><span class=\"line\">\t\tif (configLocations != null) &#123;</span><br><span class=\"line\">\t\t\tfor (String configLocation : configLocations) &#123;</span><br><span class=\"line\">\t\t\t\t//读取具体配置位置然后读取器进行加载跳入下面的方法</span><br><span class=\"line\">\t\t\t\treader.loadBeanDefinitions(configLocation);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;\t</span><br><span class=\"line\">\tpublic abstract class AbstractBeanDefinitionReader implements EnvironmentCapable, BeanDefinitionReader &#123;</span><br><span class=\"line\"> ...</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Load bean definitions from the specified resource location.</span><br><span class=\"line\">\t * &lt;p&gt;The location can also be a location pattern, provided that the</span><br><span class=\"line\">\t * ResourceLoader of this bean definition reader is a ResourcePatternResolver.</span><br><span class=\"line\">\t * @param location the resource location, to be loaded with the ResourceLoader</span><br><span class=\"line\">\t * (or ResourcePatternResolver) of this bean definition reader</span><br><span class=\"line\">\t * @param actualResources a Set to be filled with the actual Resource objects</span><br><span class=\"line\">\t * that have been resolved during the loading process. May be &#123;@code null&#125;</span><br><span class=\"line\">\t * to indicate that the caller is not interested in those Resource objects.</span><br><span class=\"line\">\t * @return the number of bean definitions found</span><br><span class=\"line\">\t * @throws BeanDefinitionStoreException in case of loading or parsing errors</span><br><span class=\"line\">\t * @see #getResourceLoader()</span><br><span class=\"line\">\t * @see #loadBeanDefinitions(org.springframework.core.io.Resource)</span><br><span class=\"line\">\t * @see #loadBeanDefinitions(org.springframework.core.io.Resource[])</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic int loadBeanDefinitions(String location, @Nullable Set&lt;Resource&gt; actualResources) throws BeanDefinitionStoreException &#123;</span><br><span class=\"line\">\t\t//开始读取配置了bean的xml文件</span><br><span class=\"line\">\t\tResourceLoader resourceLoader = getResourceLoader();</span><br><span class=\"line\">\t\t//如果资源加载器不存在的话那么就抛出异常</span><br><span class=\"line\">\t\tif (resourceLoader == null) &#123;</span><br><span class=\"line\">\t\t\tthrow new BeanDefinitionStoreException(</span><br><span class=\"line\">\t\t\t\t\t&quot;Cannot import bean definitions from location [&quot; + location + &quot;]: no ResourceLoader available&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//如果是classpath：application*.xml这种pattern的话</span><br><span class=\"line\">\t\tif (resourceLoader instanceof ResourcePatternResolver) &#123;</span><br><span class=\"line\">\t\t\t// Resource pattern matching available.</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t//获得资源</span><br><span class=\"line\">\t\t\t\tResource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);</span><br><span class=\"line\">\t\t\t\t//遍历循环 获取所有的资源的总数</span><br><span class=\"line\">\t\t\t\tint loadCount = loadBeanDefinitions(resources);</span><br><span class=\"line\">\t\t\t\t//遍历循环放入actualResources这个set中。</span><br><span class=\"line\">\t\t\t\tif (actualResources != null) &#123;</span><br><span class=\"line\">\t\t\t\t\tfor (Resource resource : resources) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tactualResources.add(resource);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(&quot;Loaded &quot; + loadCount + &quot; bean definitions from location pattern [&quot; + location + &quot;]&quot;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\treturn loadCount;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcatch (IOException ex) &#123;</span><br><span class=\"line\">\t\t\t\tthrow new BeanDefinitionStoreException(</span><br><span class=\"line\">\t\t\t\t\t\t&quot;Could not resolve bean definition resource pattern [&quot; + location + &quot;]&quot;, ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;else &#123;</span><br><span class=\"line\">\t\t\t//否则的话只允许绝对路径的资源配置文件，</span><br><span class=\"line\">\t\t\t// Can only load single resources by absolute URL.</span><br><span class=\"line\">\t\t\tResource resource = resourceLoader.getResource(location);</span><br><span class=\"line\">\t\t\t//获得资源总数</span><br><span class=\"line\">\t\t\tint loadCount = loadBeanDefinitions(resource);</span><br><span class=\"line\">\t\t\tif (actualResources != null) &#123;</span><br><span class=\"line\">\t\t\t\t//同样加载到set中</span><br><span class=\"line\">\t\t\t\tactualResources.add(resource);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(&quot;Loaded &quot; + loadCount + &quot; bean definitions from location [&quot; + location + &quot;]&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn loadCount;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>getResources(location)</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PathMatchingResourcePatternResolver implements ResourcePatternResolver &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic Resource[] getResources(String locationPattern) throws IOException &#123;</span><br><span class=\"line\">\t\tAssert.notNull(locationPattern, &quot;Location pattern must not be null&quot;);</span><br><span class=\"line\">\t\t//CLASSPATH_ALL_URL_PREFIX=classpath*:</span><br><span class=\"line\">\t\t//如果是以classpath*:开头的</span><br><span class=\"line\">\t\tif (locationPattern.startsWith(CLASSPATH_ALL_URL_PREFIX)) &#123;</span><br><span class=\"line\">\t\t\t// a class path resource (multiple resources for same name possible)</span><br><span class=\"line\">\t\t\t//这里的注释的意思是多个资源的partern的话</span><br><span class=\"line\">\t\t\tif (getPathMatcher().isPattern(locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length()))) &#123;</span><br><span class=\"line\">\t\t\t\t// a class path resource pattern</span><br><span class=\"line\">\t\t\t\t//获取匹配的资源列表 返回资源列表</span><br><span class=\"line\">\t\t\t\treturn findPathMatchingResources(locationPattern);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\t// all class path resources with the given name</span><br><span class=\"line\">\t\t\t\treturn </span><br><span class=\"line\">//获取所有的classpath下的资源\t\t\tfindAllClassPathResources(locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length()));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse &#123;</span><br><span class=\"line\">\t\t\t// Generally only look for a pattern after a prefix here,</span><br><span class=\"line\">\t\t\t// and on Tomcat only after the &quot;*/&quot; separator for its &quot;war:&quot; protocol.</span><br><span class=\"line\">\t\t\tint prefixEnd = (locationPattern.startsWith(&quot;war:&quot;) ? locationPattern.indexOf(&quot;*/&quot;) + 1 :</span><br><span class=\"line\">\t\t\t\t\tlocationPattern.indexOf(&apos;:&apos;) + 1);</span><br><span class=\"line\">\t\t\tif (getPathMatcher().isPattern(locationPattern.substring(prefixEnd))) &#123;</span><br><span class=\"line\">\t\t\t\t// a file pattern</span><br><span class=\"line\">\t\t\t\treturn findPathMatchingResources(locationPattern);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\t// a single resource with the given name</span><br><span class=\"line\">\t\t\t\treturn new Resource[] &#123;getResourceLoader().getResource(locationPattern)&#125;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>findPathMatchingResources,这个找出所有的给定资源匹配模式下的资源列表classpath:*</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">\t * Find all resources that match the given location pattern via the</span><br><span class=\"line\">\t * Ant-style PathMatcher. Supports resources in jar files and zip files</span><br><span class=\"line\">\t * and in the file system.</span><br><span class=\"line\">\t * @param locationPattern the location pattern to match</span><br><span class=\"line\">\t * @return the result as Resource array</span><br><span class=\"line\">\t * @throws IOException in case of I/O errors</span><br><span class=\"line\">\t * @see #doFindPathMatchingJarResources</span><br><span class=\"line\">\t * @see #doFindPathMatchingFileResources</span><br><span class=\"line\">\t * @see org.springframework.util.PathMatcher</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected Resource[] findPathMatchingResources(String locationPattern) throws IOException &#123;</span><br><span class=\"line\">\t\t//获取给定location的根目录</span><br><span class=\"line\">\t\tString rootDirPath = determineRootDir(locationPattern);</span><br><span class=\"line\">\t\tString subPattern = locationPattern.substring(rootDirPath.length());</span><br><span class=\"line\">\t\tResource[] rootDirResources = getResources(rootDirPath);</span><br><span class=\"line\">\t\tSet&lt;Resource&gt; result = new LinkedHashSet&lt;&gt;(16);</span><br><span class=\"line\">\t\tfor (Resource rootDirResource : rootDirResources) &#123;</span><br><span class=\"line\">\t\t\trootDirResource = resolveRootDirResource(rootDirResource);</span><br><span class=\"line\">\t\t\tURL rootDirUrl = rootDirResource.getURL();</span><br><span class=\"line\">\t\t\tif (equinoxResolveMethod != null &amp;&amp; rootDirUrl.getProtocol().startsWith(&quot;bundle&quot;)) &#123;</span><br><span class=\"line\">\t\t\t\tURL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl);</span><br><span class=\"line\">\t\t\t\tif (resolvedUrl != null) &#123;</span><br><span class=\"line\">\t\t\t\t\trootDirUrl = resolvedUrl;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\trootDirResource = new UrlResource(rootDirUrl);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) &#123;</span><br><span class=\"line\">\t\t\t\tresult.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) &#123;</span><br><span class=\"line\">\t\t\t\tresult.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\tresult.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(&quot;Resolved location pattern [&quot; + locationPattern + &quot;] to resources &quot; + result);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn result.toArray(new Resource[0]);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>findAllClassPathResources，获取所有classpath下的资源</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Find all class location resources with the given location via the ClassLoader.</span><br><span class=\"line\"> * Delegates to &#123;@link #doFindAllClassPathResources(String)&#125;.</span><br><span class=\"line\"> * @param location the absolute path within the classpath</span><br><span class=\"line\"> * @return the result as Resource array</span><br><span class=\"line\"> * @throws IOException in case of I/O errors</span><br><span class=\"line\"> * @see java.lang.ClassLoader#getResources</span><br><span class=\"line\"> * @see #convertClassLoaderURL</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected Resource[] findAllClassPathResources(String location) throws IOException &#123;</span><br><span class=\"line\">\tString path = location;</span><br><span class=\"line\">\tif (path.startsWith(&quot;/&quot;)) &#123;</span><br><span class=\"line\">\t\tpath = path.substring(1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSet&lt;Resource&gt; result = doFindAllClassPathResources(path);</span><br><span class=\"line\">\tif (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.trace(&quot;Resolved classpath location [&quot; + location + &quot;] to resources &quot; + result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn result.toArray(new Resource[0]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>  <strong>3.1.2.3.1.1初始化一些配置文件</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class AbstractRefreshableWebApplicationContext extends AbstractRefreshableConfigApplicationContext</span><br><span class=\"line\">\t\timplements ConfigurableWebApplicationContext, ThemeSource &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t\t/**</span><br><span class=\"line\">\t * &#123;@inheritDoc&#125;</span><br><span class=\"line\">\t * &lt;p&gt;Replace &#123;@code Servlet&#125;-related property sources.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tprotected void initPropertySources() &#123;</span><br><span class=\"line\">\t//获得环境对象</span><br><span class=\"line\">\t\tConfigurableEnvironment env = getEnvironment();</span><br><span class=\"line\">\t\tif (env instanceof ConfigurableWebEnvironment) &#123;</span><br><span class=\"line\">\t\t//加载并初始化配置source</span><br><span class=\"line\">\t\t//又跳到StandardServletEnvironment 进行3.1.2.1初始化一些配置properties</span><br><span class=\"line\">        ((ConfigurableWebEnvironment) env).initPropertySources(this.servletContext, \t\tthis.servletConfig);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>   <strong>3.1.2.3.1告诉父类去刷新内置的bean工厂。</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Tell the subclass to refresh the internal bean factory.</span><br><span class=\"line\"> * @return the fresh BeanFactory instance</span><br><span class=\"line\"> * @see #refreshBeanFactory()</span><br><span class=\"line\"> * @see #getBeanFactory()</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected ConfigurableListableBeanFactory obtainFreshBeanFactory() &#123;</span><br><span class=\"line\">\trefreshBeanFactory();</span><br><span class=\"line\">\tConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class=\"line\">\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.debug(&quot;Bean factory for &quot; + getDisplayName() + &quot;: &quot; + beanFactory);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn beanFactory;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>3.1.2.3.3准备bean工厂，包含以下几项:</strong></p>\n<ul>\n<li><p>BeanExpressionResolver(SpringEL解析器)</p>\n</li>\n<li><p>PropertyEditorRegistrar 向spring注册Java的PropertyEditor,定义bean的xml里面都是字符串那么由这个东西来转换为我们需要的类型。只有一个实现ResourceEditorRegistrar </p>\n</li>\n<li><p>设置环境注入 addBeanPostProcessor 这样可以将spring内部的一些对象注入到工厂</p>\n</li>\n<li><p>依赖解析忽略 ignoreDependencyInterface 指定哪些依赖在注入的时候应该被忽略</p>\n</li>\n<li><p>bean 伪装 有些对象不在工厂中，但是我们依然想让他被装配到工厂中 那么 registerResolvableDependency 这个装配关系存贮在一个Map&lt;Class&lt;?&gt;,Object&gt;中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">\t * Configure the factory&apos;s standard context characteristics,</span><br><span class=\"line\">\t * such as the context&apos;s ClassLoader and post-processors.</span><br><span class=\"line\">\t * @param beanFactory the BeanFactory to configure</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class=\"line\">\t\t// Tell the internal bean factory to use the context&apos;s class loader etc.</span><br><span class=\"line\">\t\tbeanFactory.setBeanClassLoader(getClassLoader());</span><br><span class=\"line\">\t\tbeanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</span><br><span class=\"line\">\t\tbeanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Configure the bean factory with context callbacks.</span><br><span class=\"line\">\t\tbeanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));</span><br><span class=\"line\">\t\tbeanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span><br><span class=\"line\">\t\tbeanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</span><br><span class=\"line\">\t\tbeanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span><br><span class=\"line\">\t\tbeanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span><br><span class=\"line\">\t\tbeanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span><br><span class=\"line\">\t\tbeanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// BeanFactory interface not registered as resolvable type in a plain factory.</span><br><span class=\"line\">\t\t// MessageSource registered (and found for autowiring) as a bean.</span><br><span class=\"line\">\t\tbeanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</span><br><span class=\"line\">\t\tbeanFactory.registerResolvableDependency(ResourceLoader.class, this);</span><br><span class=\"line\">\t\tbeanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);</span><br><span class=\"line\">\t\tbeanFactory.registerResolvableDependency(ApplicationContext.class, this);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Register early post-processor for detecting inner beans as ApplicationListeners.</span><br><span class=\"line\">\t\tbeanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Detect a LoadTimeWeaver and prepare for weaving, if found.</span><br><span class=\"line\">\t\tif (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\t\tbeanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class=\"line\">\t\t\t// Set a temporary ClassLoader for type matching.</span><br><span class=\"line\">\t\t\tbeanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Register default environment beans.</span><br><span class=\"line\">\t\t//将一些环境变量bean注册为单例对象</span><br><span class=\"line\">\t\tif (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\t\tbeanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\t\tbeanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\t\tbeanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><em>这样的话SpringCore中关于Spring容器的启动（当然我这里直接是Web容器管理Spring容器）就基本完了回头可以画下流程图 ，普通的Spring容器的启动也是一样的*</em></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Spring源码(1)</p>","more":"<p></p>\n<h4 id=\"源码下载\"><a href=\"#源码下载\" class=\"headerlink\" title=\"源码下载\"></a>源码下载</h4><p>写的比较匆忙 ，结合Ctrl+F进行寻找关键字进行查询是最妙的。</p>\n<ul>\n<li><p>下载源码</p>\n<p>首先从github上下载源码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clonehttps://github.com/spring-projects/spring-framework.git spring-framework</span><br></pre></td></tr></table></figure>\n\n<p>你也可以用SourceTree (一个界面化的git工具) 来管理你的git项目</p>\n</li>\n<li><p>下载gradle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://gradle.org/</span><br></pre></td></tr></table></figure>\n\n<p>下载完之后需要进行环境变量的配置</p>\n<ul>\n<li><p>在环境变量中配置<code>GRADLE_HOME=D:\\ENV\\gradle-4.10.2-bin\\gradle-4.10.2</code></p>\n</li>\n<li><p>添加path变量 <code>%GRADLE_HOME%\\bin</code></p>\n</li>\n<li><p>测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\andreby\\Desktop&gt; gradle -version</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">Gradle 4.10.2</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Build time:   2018-09-19 18:10:15 UTC</span><br><span class=\"line\">Revision:     b4d8d5d170bb4ba516e88d7fe5647e2323d791dd</span><br><span class=\"line\"></span><br><span class=\"line\">Kotlin DSL:   1.0-rc-6</span><br><span class=\"line\">Kotlin:       1.2.61</span><br><span class=\"line\">Groovy:       2.4.15</span><br><span class=\"line\">Ant:          Apache Ant(TM) version 1.9.11 compiled on March 23 2018</span><br><span class=\"line\">JVM:          1.8.0_171 (Oracle Corporation 25.171-b11)</span><br><span class=\"line\">OS:           Windows 10 10.0 amd64</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>使用gradle将源码转换为eclipse 工程</p>\n<p>Spring是分多模块的，所以你要查看哪个模块的源码，就进哪个模块的目录下执行以下命令就可以看到了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle cleanIdea eclipse</span><br></pre></td></tr></table></figure>\n\n<p><strong>可能需要梯子</strong></p>\n</li>\n<li><p>导入工程,即可食用,注意各个工程之间的依赖</p>\n</li>\n<li><p>导入后的问题</p>\n<p>导入后发现一片红色感叹号，看下sts中的problems的选项框，发现是缺少jar包</p>\n<p><code>spring-cglib-repack-3.2.8</code> 和<code>spring-objenesis-repack-3.0.1.jar</code></p>\n<p> 我查了下网上大神们的说法：</p>\n<p><strong>通过阅读源码发现为了避免第三方 class 的冲突，spring 把最新的 cglib 和 objenesis 给 repack 了</strong></p>\n<p>参考链接：</p>\n<p>[]: <a href=\"https://blog.csdn.net/sekiu/article/details/50624180\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sekiu/article/details/50624180</a></p>\n</li>\n</ul>\n<h4 id=\"Spring-Core\"><a href=\"#Spring-Core\" class=\"headerlink\" title=\"Spring-Core\"></a>Spring-Core</h4><p>正常的spring启动，是以xml配置bean然后进行启动，web项目由web容器来管理spring容器。</p>\n<p>我们在applicationContext.xml中配置好bean后，那么启动时候加载这个xml就可以了。</p>\n<h3 id=\"web容器启动流程\"><a href=\"#web容器启动流程\" class=\"headerlink\" title=\"web容器启动流程\"></a>web容器启动流程</h3><p>以web项目为例子 springmvc项目 一般使用web.xml进行管理web容器，而spring容器一般交付给web容器进行管理。</p>\n<ul>\n<li><p>tomcat 启动，加载context监听器。</p>\n<p>首先tomcat的StandardContext类在tomcat启动时候会调用<code>listenerStart</code></p>\n<p>去加载配置在web.xml中的监听器</p>\n<p>webxml中的配置的spring的ContextLoadListener</p>\n<p>ContextLoaderListener 继承自ServletContextListener</p>\n<p>嗯，首先加载WebAppRootListener 这个也是继承自ServletContextListener的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;listener&gt;</span><br><span class=\"line\">&lt;listener-class&gt;org.springframework.web.util.WebAppRootListener&lt;/listener-class&gt;</span><br><span class=\"line\">&lt;/listener&gt;</span><br><span class=\"line\">&lt;listener&gt;</span><br><span class=\"line\"> &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class=\"line\">&lt;/listener&gt;</span><br><span class=\"line\">&lt;listener&gt;</span><br><span class=\"line\">    &lt;listener-class&gt;org.springframework.web.util.IntrospectorCleanupListener&lt;/listener-class&gt;</span><br><span class=\"line\">&lt;/listener&gt;</span><br></pre></td></tr></table></figure>\n\n<p>1.StardandContext中的listenerStart方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> /**</span><br><span class=\"line\">   * Configure the set of instantiated application event listeners</span><br><span class=\"line\">   * for this Context.</span><br><span class=\"line\">   * @return &lt;code&gt;true&lt;/code&gt; if all listeners wre</span><br><span class=\"line\">   * initialized successfully, or &lt;code&gt;false&lt;/code&gt; otherwise.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public boolean listenerStart() &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">      if (log.isDebugEnabled())</span><br><span class=\"line\">          log.debug(&quot;Configuring application event listeners&quot;);</span><br><span class=\"line\">  </span><br><span class=\"line\">      // Instantiate the required listeners</span><br><span class=\"line\">      String listeners[] = findApplicationListeners();</span><br><span class=\"line\">      Object results[] = new Object[listeners.length];</span><br><span class=\"line\">      boolean ok = true;</span><br><span class=\"line\">      for (int i = 0; i &lt; results.length; i++) &#123;</span><br><span class=\"line\">          if (getLogger().isDebugEnabled())</span><br><span class=\"line\">              getLogger().debug(&quot; Configuring event listener class &apos;&quot; +</span><br><span class=\"line\">                  listeners[i] + &quot;&apos;&quot;);</span><br><span class=\"line\">          try &#123;</span><br><span class=\"line\">              String listener = listeners[i];</span><br><span class=\"line\">              results[i] = getInstanceManager().newInstance(listener);</span><br><span class=\"line\">          &#125; catch (Throwable t) &#123;</span><br><span class=\"line\">              t = ExceptionUtils.unwrapInvocationTargetException(t);</span><br><span class=\"line\">              ExceptionUtils.handleThrowable(t);</span><br><span class=\"line\">              getLogger().error(sm.getString(</span><br><span class=\"line\">                      &quot;standardContext.applicationListener&quot;, listeners[i]), t);</span><br><span class=\"line\">              ok = false;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (!ok) &#123;</span><br><span class=\"line\">          getLogger().error(sm.getString(&quot;standardContext.applicationSkipped&quot;));</span><br><span class=\"line\">          return false;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      // Sort listeners in two arrays</span><br><span class=\"line\">      List&lt;Object&gt; eventListeners = new ArrayList&lt;&gt;();</span><br><span class=\"line\">      List&lt;Object&gt; lifecycleListeners = new ArrayList&lt;&gt;();</span><br><span class=\"line\">      for (int i = 0; i &lt; results.length; i++) &#123;</span><br><span class=\"line\">          if ((results[i] instanceof ServletContextAttributeListener)</span><br><span class=\"line\">              || (results[i] instanceof ServletRequestAttributeListener)</span><br><span class=\"line\">              || (results[i] instanceof ServletRequestListener)</span><br><span class=\"line\">              || (results[i] instanceof HttpSessionIdListener)</span><br><span class=\"line\">              || (results[i] instanceof HttpSessionAttributeListener)) &#123;</span><br><span class=\"line\">              eventListeners.add(results[i]);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          if ((results[i] instanceof ServletContextListener)</span><br><span class=\"line\">              || (results[i] instanceof HttpSessionListener)) &#123;</span><br><span class=\"line\">              lifecycleListeners.add(results[i]);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      // Listener instances may have been added directly to this Context by</span><br><span class=\"line\">      // ServletContextInitializers and other code via the pluggability APIs.</span><br><span class=\"line\">      // Put them these listeners after the ones defined in web.xml and/or</span><br><span class=\"line\">      // annotations then overwrite the list of instances with the new, full</span><br><span class=\"line\">      // list.</span><br><span class=\"line\">      for (Object eventListener: getApplicationEventListeners()) &#123;</span><br><span class=\"line\">          eventListeners.add(eventListener);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      setApplicationEventListeners(eventListeners.toArray());</span><br><span class=\"line\">      for (Object lifecycleListener: getApplicationLifecycleListeners()) &#123;</span><br><span class=\"line\">          lifecycleListeners.add(lifecycleListener);</span><br><span class=\"line\">          if (lifecycleListener instanceof ServletContextListener) &#123;</span><br><span class=\"line\">              noPluggabilityListeners.add(lifecycleListener);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      setApplicationLifecycleListeners(lifecycleListeners.toArray());</span><br><span class=\"line\">  </span><br><span class=\"line\">      // Send application start events</span><br><span class=\"line\">  </span><br><span class=\"line\">      if (getLogger().isDebugEnabled())</span><br><span class=\"line\">          getLogger().debug(&quot;Sending application start events&quot;);</span><br><span class=\"line\">  </span><br><span class=\"line\">      // Ensure context is not null</span><br><span class=\"line\">      getServletContext();</span><br><span class=\"line\">      context.setNewServletContextListenerAllowed(false);</span><br><span class=\"line\">  </span><br><span class=\"line\">      Object instances[] = getApplicationLifecycleListeners();</span><br><span class=\"line\">      if (instances == null || instances.length == 0) &#123;</span><br><span class=\"line\">          return ok;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">//Spring中经典的事件驱动， 创建一个event</span><br><span class=\"line\">//1.1构建一个事件 内置Context成员变量</span><br><span class=\"line\">      ServletContextEvent event = new ServletContextEvent(getServletContext());</span><br><span class=\"line\">      ServletContextEvent tldEvent = null;</span><br><span class=\"line\">      if (noPluggabilityListeners.size() &gt; 0) &#123;</span><br><span class=\"line\">          noPluggabilityServletContext = new NoPluggabilityServletContext(getServletContext());</span><br><span class=\"line\">          tldEvent = new ServletContextEvent(noPluggabilityServletContext);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      //1.2这里遍历循环 加载所有的继承自ServletContextListener</span><br><span class=\"line\">      for (int i = 0; i &lt; instances.length; i++) &#123;</span><br><span class=\"line\">          if (!(instances[i] instanceof ServletContextListener))</span><br><span class=\"line\">              continue;</span><br><span class=\"line\">          ServletContextListener listener =</span><br><span class=\"line\">              (ServletContextListener) instances[i];</span><br><span class=\"line\">          try &#123;</span><br><span class=\"line\">              fireContainerEvent(&quot;beforeContextInitialized&quot;, listener);</span><br><span class=\"line\">              if (noPluggabilityListeners.contains(listener)) &#123;</span><br><span class=\"line\">              \t**//注意这里要加载tldEvent**</span><br><span class=\"line\">                  listener.contextInitialized(tldEvent);</span><br><span class=\"line\">              &#125; else &#123;</span><br><span class=\"line\">                  listener.contextInitialized(event);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              fireContainerEvent(&quot;afterContextInitialized&quot;, listener);</span><br><span class=\"line\">          &#125; catch (Throwable t) &#123;</span><br><span class=\"line\">              ExceptionUtils.handleThrowable(t);</span><br><span class=\"line\">              fireContainerEvent(&quot;afterContextInitialized&quot;, listener);</span><br><span class=\"line\">              getLogger().error</span><br><span class=\"line\">                  (sm.getString(&quot;standardContext.listenerStart&quot;,</span><br><span class=\"line\">                                instances[i].getClass().getName()), t);</span><br><span class=\"line\">              ok = false;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return ok;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.那首先加载 WebRootContextListener</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class WebAppRootListener implements ServletContextListener &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void contextInitialized(ServletContextEvent event) &#123;</span><br><span class=\"line\">\t\tWebUtils.setWebAppRootSystemProperty(event.getServletContext());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void setWebAppRootSystemProperty(ServletContext servletContext) throws IllegalStateException &#123;</span><br><span class=\"line\">\tAssert.notNull(servletContext, &quot;ServletContext must not be null&quot;);</span><br><span class=\"line\">\t//获得context的根目录</span><br><span class=\"line\">\tString root = servletContext.getRealPath(&quot;/&quot;);</span><br><span class=\"line\">\tif (root == null) &#123;</span><br><span class=\"line\">\t\tthrow new IllegalStateException(</span><br><span class=\"line\">\t\t\t&quot;Cannot set web app root system property when WAR file is not expanded&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//WEB_APP_ROOT_KEY_PARAM=webAppRootKey 就是在 web.xml文件中定义的webAppRootKey</span><br><span class=\"line\">\tString param = servletContext.getInitParameter(WEB_APP_ROOT_KEY_PARAM);</span><br><span class=\"line\">\t//</span><br><span class=\"line\">\tString key = (param != null ? param : DEFAULT_WEB_APP_ROOT_KEY);</span><br><span class=\"line\">\tString oldValue = System.getProperty(key);</span><br><span class=\"line\">\tif (oldValue != null &amp;&amp; !StringUtils.pathEquals(oldValue, root)) &#123;</span><br><span class=\"line\">\t\tthrow new IllegalStateException(</span><br><span class=\"line\">\t\t\t&quot;Web app root system property already set to different value: &apos;&quot; +</span><br><span class=\"line\">\t\t\tkey + &quot;&apos; = [&quot; + oldValue + &quot;] instead of [&quot; + root + &quot;] - &quot; +</span><br><span class=\"line\">\t\t\t&quot;Choose unique values for the &apos;webAppRootKey&apos; context-param in your web.xml files!&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//设置系统环境变量</span><br><span class=\"line\">\tSystem.setProperty(key, root);</span><br><span class=\"line\">\tservletContext.log(&quot;Set web app root system property: &apos;&quot; + key + &quot;&apos; = [&quot; + root + &quot;]&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.<strong>加载Spring的ContextLoaderListener</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ContextLoaderListener extends ContextLoader implements ServletContextListener &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void contextInitialized(ServletContextEvent event) &#123;</span><br><span class=\"line\">\t\t//3.1初始化web容器对象</span><br><span class=\"line\">\t\tinitWebApplicationContext(event.getServletContext());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>3.1跳转到ContextLoader进行加载上下文环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ContextLoader &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">\tstatic &#123;</span><br><span class=\"line\">\t\t// Load default strategy implementations from properties file.</span><br><span class=\"line\">\t\t// This is currently strictly internal and not meant to be customized</span><br><span class=\"line\">\t\t// by application developers.</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tClassPathResource resource = new ClassPathResource(DEFAULT_STRATEGIES_PATH, ContextLoader.class);</span><br><span class=\"line\">\t\t\tdefaultStrategies = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (IOException ex) &#123;</span><br><span class=\"line\">\t\t\tthrow new IllegalStateException(&quot;Could not load &apos;ContextLoader.properties&apos;: &quot; + ex.getMessage());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Initialize Spring&apos;s web application context for the given servlet context,</span><br><span class=\"line\">\t * using the application context provided at construction time, or creating a new one</span><br><span class=\"line\">\t * according to the &quot;&#123;@link #CONTEXT_CLASS_PARAM contextClass&#125;&quot; and</span><br><span class=\"line\">\t * &quot;&#123;@link #CONFIG_LOCATION_PARAM contextConfigLocation&#125;&quot; context-params.</span><br><span class=\"line\">\t * @param servletContext current servlet context</span><br><span class=\"line\">\t * @return the new WebApplicationContext</span><br><span class=\"line\">\t * @see #ContextLoader(WebApplicationContext)</span><br><span class=\"line\">\t * @see #CONTEXT_CLASS_PARAM</span><br><span class=\"line\">\t * @see #CONFIG_LOCATION_PARAM</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic WebApplicationContext initWebApplicationContext(ServletContext servletContext) &#123;</span><br><span class=\"line\">\t\tif (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) &#123;</span><br><span class=\"line\">\t\t\tthrow new IllegalStateException(</span><br><span class=\"line\">\t\t\t\t\t&quot;Cannot initialize context because there is already a root application context present - &quot; +</span><br><span class=\"line\">\t\t\t\t\t&quot;check whether you have multiple ContextLoader* definitions in your web.xml!&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tLog logger = LogFactory.getLog(ContextLoader.class);</span><br><span class=\"line\">\t\tservletContext.log(&quot;Initializing Spring root WebApplicationContext&quot;);</span><br><span class=\"line\">\t\tif (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.info(&quot;Root WebApplicationContext: initialization started&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//记录初始化时间</span><br><span class=\"line\">\t\tlong startTime = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\t// Store context in local instance variable, to guarantee that</span><br><span class=\"line\">\t\t\t// it is available on ServletContext shutdown.</span><br><span class=\"line\">\t\t\tif (this.context == null) &#123;</span><br><span class=\"line\">\t\t\t//3.1.1如果上下文环境对象为null，那么实例化一个</span><br><span class=\"line\">\t\t\t\tthis.context = createWebApplicationContext(servletContext);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (this.context instanceof ConfigurableWebApplicationContext) &#123;</span><br><span class=\"line\">\t\t\t\tConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context;</span><br><span class=\"line\">\t\t\t\tif (!cwac.isActive()) &#123;</span><br><span class=\"line\">\t\t\t\t\t// The context has not yet been refreshed -&gt; provide services such as</span><br><span class=\"line\">\t\t\t\t\t// setting the parent context, setting the application context id, etc</span><br><span class=\"line\">\t\t\t\t\tif (cwac.getParent() == null) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t// The context instance was injected without an explicit parent -&gt;</span><br><span class=\"line\">\t\t\t\t\t\t// determine parent for root web application context, if any.</span><br><span class=\"line\">\t\t\t\t\t\t//加载父容器</span><br><span class=\"line\">\t\t\t\t\t\tApplicationContext parent = loadParentContext(servletContext);</span><br><span class=\"line\">\t\t\t\t\t\tcwac.setParent(parent);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t//3.1.2配置并刷新web上下文环境</span><br><span class=\"line\">\t\t\t\t\tconfigureAndRefreshWebApplicationContext(cwac, servletContext);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tClassLoader ccl = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">\t\t\tif (ccl == ContextLoader.class.getClassLoader()) &#123;</span><br><span class=\"line\">\t\t\t\tcurrentContext = this.context;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse if (ccl != null) &#123;</span><br><span class=\"line\">\t\t\t\tcurrentContextPerThread.put(ccl, this.context);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(&quot;Published root WebApplicationContext as ServletContext attribute with name [&quot; +</span><br><span class=\"line\">\t\t\t\t\t\tWebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + &quot;]&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlong elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class=\"line\">\t\t\t\tlogger.info(&quot;Root WebApplicationContext: initialization completed in &quot; + elapsedTime + &quot; ms&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\treturn this.context;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (RuntimeException ex) &#123;</span><br><span class=\"line\">\t\t\tlogger.error(&quot;Context initialization failed&quot;, ex);</span><br><span class=\"line\">\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);</span><br><span class=\"line\">\t\t\tthrow ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (Error err) &#123;</span><br><span class=\"line\">\t\t\tlogger.error(&quot;Context initialization failed&quot;, err);</span><br><span class=\"line\">\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err);</span><br><span class=\"line\">\t\t\tthrow err;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.1.1实例化上下文环境对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected WebApplicationContext createWebApplicationContext(ServletContext sc) &#123;</span><br><span class=\"line\">//拿到class对象</span><br><span class=\"line\">Class&lt;?&gt; contextClass = determineContextClass(sc);</span><br><span class=\"line\">\t\tif (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class=\"line\">\t\t\tthrow new ApplicationContextException(&quot;Custom context class [&quot; + contextClass.getName() +</span><br><span class=\"line\">\t\t\t\t\t&quot;] is not of type [&quot; + ConfigurableWebApplicationContext.class.getName() + &quot;]&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//反射生成对象 ConfigurableWebApplicationContext</span><br><span class=\"line\">\t\treturn ( ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>加载父类容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ContextLoader &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Template method with default implementation (which may be overridden by a</span><br><span class=\"line\">\t * subclass), to load or obtain an ApplicationContext instance which will be</span><br><span class=\"line\">\t * used as the parent context of the root WebApplicationContext. If the</span><br><span class=\"line\">\t * return value from the method is null, no parent context is set.\\</span><br><span class=\"line\">\t // 注意下面的话 意思是允许加载多web容器</span><br><span class=\"line\">\t * &lt;p&gt;The main reason to load a parent context here is to allow multiple root</span><br><span class=\"line\">\t * web application contexts to all be children of a shared EAR context, or</span><br><span class=\"line\">\t * alternately to also share the same parent context that is visible to</span><br><span class=\"line\">\t * EJBs. For pure web applications, there is usually no need to worry about</span><br><span class=\"line\">\t * having a parent context to the root web application context.</span><br><span class=\"line\">\t * &lt;p&gt;The default implementation uses</span><br><span class=\"line\">\t * &#123;@link org.springframework.context.access.ContextSingletonBeanFactoryLocator&#125;,</span><br><span class=\"line\">\t * configured via &#123;@link #LOCATOR_FACTORY_SELECTOR_PARAM&#125; and</span><br><span class=\"line\">\t * &#123;@link #LOCATOR_FACTORY_KEY_PARAM&#125;, to load a parent context</span><br><span class=\"line\">\t * which will be shared by all other users of ContextsingletonBeanFactoryLocator</span><br><span class=\"line\">\t * which also use the same configuration parameters.</span><br><span class=\"line\">\t * @param servletContext current servlet context</span><br><span class=\"line\">\t * @return the parent application context, or &#123;@code null&#125; if none</span><br><span class=\"line\">\t * @see org.springframework.context.access.ContextSingletonBeanFactoryLocator</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected ApplicationContext loadParentContext(ServletContext servletContext) &#123;</span><br><span class=\"line\">\t\tApplicationContext parentContext = null;</span><br><span class=\"line\">\t\tString locatorFactorySelector = servletContext.getInitParameter(LOCATOR_FACTORY_SELECTOR_PARAM);</span><br><span class=\"line\">\t\tString parentContextKey = servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (parentContextKey != null) &#123;</span><br><span class=\"line\">\t\t\t// locatorFactorySelector may be null, indicating the default &quot;classpath*:beanRefContext.xml&quot;</span><br><span class=\"line\">\t\t\tBeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance(locatorFactorySelector);</span><br><span class=\"line\">\t\t\tLog logger = LogFactory.getLog(ContextLoader.class);</span><br><span class=\"line\">\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(&quot;Getting parent context definition: using parent context key of &apos;&quot; +</span><br><span class=\"line\">\t\t\t\t\t\tparentContextKey + &quot;&apos; with BeanFactoryLocator&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tthis.parentContextRef = locator.useBeanFactory(parentContextKey);</span><br><span class=\"line\">\t\t\tparentContext = (ApplicationContext) this.parentContextRef.getFactory();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn parentContext;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>3.1.2配置并刷新web上下文环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ContextLoader &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">protected void configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext wac, ServletContext sc) &#123;</span><br><span class=\"line\">\t\tif (ObjectUtils.identityToString(wac).equals(wac.getId())) &#123;</span><br><span class=\"line\">\t\t\t// The application context id is still set to its original default value</span><br><span class=\"line\">\t\t\t// -&gt; assign a more useful id based on available information</span><br><span class=\"line\">\t\t\tString idParam = sc.getInitParameter(CONTEXT_ID_PARAM);</span><br><span class=\"line\">\t\t\tif (idParam != null) &#123;</span><br><span class=\"line\">\t\t\t\twac.setId(idParam);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\t// Generate default id...</span><br><span class=\"line\">\t\t\t\twac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX +</span><br><span class=\"line\">\t\t\t\t\t\tObjectUtils.getDisplayString(sc.getContextPath()));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//设置上下文环境对象</span><br><span class=\"line\">\t\twac.setServletContext(sc);</span><br><span class=\"line\">\t\t//获取初始化变量</span><br><span class=\"line\">\t\tString configLocationParam = sc.getInitParameter(CONFIG_LOCATION_PARAM);</span><br><span class=\"line\">\t\tif (configLocationParam != null) &#123;</span><br><span class=\"line\">\t\t//设置初始化变量到web容器中</span><br><span class=\"line\">\t\t//设置配置location到web容器这里的configLocationParam 就是web.xml中配置的\t\t     //classpath:xxxxxx.xml</span><br><span class=\"line\">\t\t\twac.setConfigLocation(configLocationParam);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// The wac environment&apos;s #initPropertySources will be called in any case when the context</span><br><span class=\"line\">\t\t// is refreshed; do it eagerly here to ensure servlet property sources are in place for</span><br><span class=\"line\">\t\t// use in any post-processing or initialization that occurs below prior to #refresh</span><br><span class=\"line\">\t\t//获取环境对象</span><br><span class=\"line\">\t\tConfigurableEnvironment env = wac.getEnvironment();</span><br><span class=\"line\">\t\t//3.1.2.1初始化一些配置properties</span><br><span class=\"line\">    \tif (env instanceof ConfigurableWebEnvironment) &#123;</span><br><span class=\"line\">\t\t\t((ConfigurableWebEnvironment) env).initPropertySources(sc, null);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//3.1.2.2装配上下文环境对象</span><br><span class=\"line\">\t\tcustomizeContext(sc, wac);</span><br><span class=\"line\">\t\t//3.1.2.3刷新上下文环境</span><br><span class=\"line\">\t\twac.refresh();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.1.2.1初始化一些配置properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class StandardServletEnvironment extends StandardEnvironment implements ConfigurableWebEnvironment &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void initPropertySources(ServletContext servletContext, ServletConfig servletConfig) &#123;</span><br><span class=\"line\">\t\tWebApplicationContextUtils.initServletPropertySources(getPropertySources(), servletContext, servletConfig);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public abstract class WebApplicationContextUtils &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Replace &#123;@code Servlet&#125;-based &#123;@link StubPropertySource stub property sources&#125; with</span><br><span class=\"line\">\t * actual instances populated with the given &#123;@code servletContext&#125; and</span><br><span class=\"line\">\t * &#123;@code servletConfig&#125; objects.</span><br><span class=\"line\">\t * &lt;p&gt;This method is idempotent with respect to the fact it may be called any number</span><br><span class=\"line\">\t * of times but will perform replacement of stub property sources with their</span><br><span class=\"line\">\t * corresponding actual property sources once and only once.</span><br><span class=\"line\">\t * @param propertySources the &#123;@link MutablePropertySources&#125; to initialize (must not</span><br><span class=\"line\">\t * be &#123;@code null&#125;)</span><br><span class=\"line\">\t * @param servletContext the current &#123;@link ServletContext&#125; (ignored if &#123;@code null&#125;</span><br><span class=\"line\">\t * or if the &#123;@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME</span><br><span class=\"line\">\t * servlet context property source&#125; has already been initialized)</span><br><span class=\"line\">\t * @param servletConfig the current &#123;@link ServletConfig&#125; (ignored if &#123;@code null&#125;</span><br><span class=\"line\">\t * or if the &#123;@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME</span><br><span class=\"line\">\t * servlet config property source&#125; has already been initialized)</span><br><span class=\"line\">\t * @see org.springframework.core.env.PropertySource.StubPropertySource</span><br><span class=\"line\">\t * @see org.springframework.core.env.ConfigurableEnvironment#getPropertySources()</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static void initServletPropertySources(</span><br><span class=\"line\">\t\t\tMutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tAssert.notNull(propertySources, &quot;&apos;propertySources&apos; must not be null&quot;);</span><br><span class=\"line\">\t\t//propertySources包含这些初始化配置[servletConfigInitParams,servletContextInitParams,jndiProperties,systemProperties,systemEnvironment]</span><br><span class=\"line\">\t\t//SERVLET_CONTEXT_PROPERTY_SOURCE_NAME=servletContextInitParams</span><br><span class=\"line\">\t\t//</span><br><span class=\"line\">\t\tif (servletContext != null &amp;&amp; propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &amp;&amp;</span><br><span class=\"line\">\t\t\t\tpropertySources.get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) &#123;</span><br><span class=\"line\">\t\t\tpropertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,</span><br><span class=\"line\">\t\t\t\t\tnew ServletContextPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (servletConfig != null &amp;&amp; propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &amp;&amp;</span><br><span class=\"line\">\t\t\t\tpropertySources.get(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) &#123;</span><br><span class=\"line\">\t\t\tpropertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,</span><br><span class=\"line\">\t\t\t\t\tnew ServletConfigPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.1.2.2装配上下文环境对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ContextLoader &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">/**</span><br><span class=\"line\">\t * Customize the &#123;@link ConfigurableWebApplicationContext&#125; created by this</span><br><span class=\"line\">\t * ContextLoader after config locations have been supplied to the context</span><br><span class=\"line\">\t * but before the context is &lt;em&gt;refreshed&lt;/em&gt;.</span><br><span class=\"line\">\t * &lt;p&gt;The default implementation &#123;@linkplain #determineContextInitializerClasses(ServletContext)</span><br><span class=\"line\">\t * determines&#125; what (if any) context initializer classes have been specified through</span><br><span class=\"line\">\t * &#123;@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters&#125; and</span><br><span class=\"line\">\t * &#123;@linkplain ApplicationContextInitializer#initialize invokes each&#125; with the</span><br><span class=\"line\">\t * given web application context.</span><br><span class=\"line\">\t * &lt;p&gt;Any &#123;@code ApplicationContextInitializers&#125; implementing</span><br><span class=\"line\">\t * &#123;@link org.springframework.core.Ordered Ordered&#125; or marked with @&#123;@link</span><br><span class=\"line\">\t * org.springframework.core.annotation.Order Order&#125; will be sorted appropriately.</span><br><span class=\"line\">\t * @param sc the current servlet context</span><br><span class=\"line\">\t * @param wac the newly created application context</span><br><span class=\"line\">\t * @see #CONTEXT_INITIALIZER_CLASSES_PARAM</span><br><span class=\"line\">\t * @see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) &#123;</span><br><span class=\"line\">\t\tList&lt;Class&lt;ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt;&gt;&gt; initializerClasses =</span><br><span class=\"line\">\t\t\t\tdetermineContextInitializerClasses(sc);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (Class&lt;ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt;&gt; initializerClass : initializerClasses) &#123;</span><br><span class=\"line\">\t\t\tClass&lt;?&gt; initializerContextClass =</span><br><span class=\"line\">\t\t\t\t\tGenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class);</span><br><span class=\"line\">\t\t\tif (initializerContextClass != null &amp;&amp; !initializerContextClass.isInstance(wac)) &#123;</span><br><span class=\"line\">\t\t\t\tthrow new ApplicationContextException(String.format(</span><br><span class=\"line\">\t\t\t\t\t\t&quot;Could not apply context initializer [%s] since its generic parameter [%s] &quot; +</span><br><span class=\"line\">\t\t\t\t\t\t&quot;is not assignable from the type of application context used by this &quot; +</span><br><span class=\"line\">\t\t\t\t\t\t&quot;context loader: [%s]&quot;, initializerClass.getName(), initializerContextClass.getName(),</span><br><span class=\"line\">\t\t\t\t\t\twac.getClass().getName()));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tthis.contextInitializers.add(BeanUtils.instantiateClass(initializerClass));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tAnnotationAwareOrderComparator.sort(this.contextInitializers);</span><br><span class=\"line\">\t\tfor (ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt; initializer : this.contextInitializers) &#123;</span><br><span class=\"line\">\t\t\t//3.1.2.2.1遍历所有的上下文初始化器，进行初始化容器</span><br><span class=\"line\">\t\t\tinitializer.initialize(wac);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.1.2.2.1遍历所有的上下文初始化器，进行初始化容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ApplicationContextInitializer&lt;C extends ConfigurableApplicationContext&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Initialize the given application context.</span><br><span class=\"line\">\t * @param applicationContext the application to configure</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tvoid initialize(C applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.1.2.3刷新上下文环境,这个很重要的一个方法,Spring的bean解析就在这里啊</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class AbstractApplicationContext extends DefaultResourceLoader</span><br><span class=\"line\">\t\timplements ConfigurableApplicationContext, DisposableBean &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t@Override</span><br><span class=\"line\">\tpublic void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class=\"line\">\t\tsynchronized (this.startupShutdownMonitor) &#123;</span><br><span class=\"line\">\t\t\t// Prepare this context for refreshing.</span><br><span class=\"line\">\t\t\t//3.1.2.3.1预备刷新前的一些准备工作</span><br><span class=\"line\">\t\t\tprepareRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t// Tell the subclass to refresh the internal bean factory.</span><br><span class=\"line\">\t\t\t//3.1.2.3.2告诉父类刷新内置bean工厂</span><br><span class=\"line\">\t\t\tConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t// Prepare the bean factory for use in this context.</span><br><span class=\"line\">\t\t\t//3.1.2.3.3创建bean工厂 主要对bean工厂进行特征设置</span><br><span class=\"line\">\t\t\t prepareBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t// Allows post-processing of the bean factory in context subclasses.</span><br><span class=\"line\">\t\t\t\t//此方法允许子类在所有的 bean 尚未初始化之前注册 BeanPostProcessor</span><br><span class=\"line\">\t\t\t\tpostProcessBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Invoke factory processors registered as beans in the context.</span><br><span class=\"line\">\t\t\t\t//BeanFactoryPostProcessor 接口允许我们在 bean 正是初始化之前改变其值。此接口只\t\t\t\t//有一个方法</span><br><span class=\"line\">\t\t\t\tinvokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Register bean processors that intercept bean creation.</span><br><span class=\"line\">\t\t\t\t//BeanPostProcessors注册 在BeanDefinitions 中查找BeanPostProcessor保存一个\t\t\t\t//list中</span><br><span class=\"line\">                registerBeanPostProcessors(beanFactory);</span><br><span class=\"line\">\t\t\t\t//支持国际化</span><br><span class=\"line\">\t\t\t\t// Initialize message source for this context.</span><br><span class=\"line\">\t\t\t\tinitMessageSource();</span><br><span class=\"line\">\t\t\t\t//加载事件驱动ApplicationEventMulticaster来管理事件驱动三元素 可以看下具体实现</span><br><span class=\"line\">\t\t\t\t//有addApplicationListener multicastEvent 传播嘛</span><br><span class=\"line\">\t\t\t\t//ApplicationEventPublisher是将事件委托给ApplicationEventMulticaster来处理的</span><br><span class=\"line\">\t\t\t\t// Initialize event multicaster for this context.</span><br><span class=\"line\">\t\t\t\tinitApplicationEventMulticaster();</span><br><span class=\"line\">\t\t\t\t//初始化其他的特殊的bean 没有实现方法 默认走的空实现</span><br><span class=\"line\">\t\t\t\t// Initialize other special beans in specific context subclasses.</span><br><span class=\"line\">\t\t\t\tonRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Check for listener beans and register them.</span><br><span class=\"line\">\t\t\t\t//这里注册监听器了 结合上面的事件广播类进行</span><br><span class=\"line\">\t\t\t\tregisterListeners();</span><br><span class=\"line\">\t\t\t\t//在工厂中进行单例beans的注册配置</span><br><span class=\"line\">\t\t\t\t// Instantiate all remaining (non-lazy-init) singletons.</span><br><span class=\"line\">\t\t\t\tfinishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Last step: publish corresponding event.</span><br><span class=\"line\">\t\t\t\tfinishRefresh();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tcatch (BeansException ex) &#123;</span><br><span class=\"line\">\t\t\t\tif (logger.isWarnEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.warn(&quot;Exception encountered during context initialization - &quot; +</span><br><span class=\"line\">\t\t\t\t\t\t\t&quot;cancelling refresh attempt: &quot; + ex);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Destroy already created singletons to avoid dangling resources.</span><br><span class=\"line\">\t\t\t\tdestroyBeans();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Reset &apos;active&apos; flag.</span><br><span class=\"line\">\t\t\t\tcancelRefresh(ex);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Propagate exception to caller.</span><br><span class=\"line\">\t\t\t\tthrow ex;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tfinally &#123;</span><br><span class=\"line\">\t\t\t\t// Reset common introspection caches in Spring&apos;s core, since we</span><br><span class=\"line\">\t\t\t\t// might not ever need metadata for singleton beans anymore...</span><br><span class=\"line\">\t\t\t\tresetCommonCaches();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>finishRefresh</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected void finishRefresh() &#123;</span><br><span class=\"line\">\t// Initialize lifecycle processor for this context.</span><br><span class=\"line\">\tinitLifecycleProcessor();</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Propagate refresh to lifecycle processor first.</span><br><span class=\"line\">\tgetLifecycleProcessor().onRefresh();</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Publish the final event.</span><br><span class=\"line\">\t//最后发布上下文构建成功事件</span><br><span class=\"line\">\tpublishEvent(new ContextRefreshedEvent(this));</span><br><span class=\"line\">\t//注册下上下文环境。</span><br><span class=\"line\">\t// Participate in LiveBeansView MBean, if active.</span><br><span class=\"line\">\tLiveBeansView.registerApplicationContext(this);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<p>  finishBeanFactoryInitialization在工厂中进行单例beans的注册配置**</p>\n<ul>\n<li><p>ConversionService bean类型转换的一个服务bean</p>\n</li>\n<li><p>StringValueResolver 用于解析注解值</p>\n</li>\n<li><p>LoadTimeWeaverAware 实现了此接口的 bean 可以得到 LoadTimeWeaver，此处仅仅初始化 </p>\n</li>\n<li><p>preInstantiateSingletons  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Finish the initialization of this context&apos;s bean factory,</span><br><span class=\"line\"> * initializing all remaining singleton beans.</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class=\"line\">\t// Initialize conversion service for this context.</span><br><span class=\"line\">\tif (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class=\"line\">\t\t\tbeanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class=\"line\">\t\tbeanFactory.setConversionService(</span><br><span class=\"line\">\t\t\t\tbeanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Register a default embedded value resolver if no bean post-processor</span><br><span class=\"line\">\t// (such as a PropertyPlaceholderConfigurer bean) registered any before:</span><br><span class=\"line\">\t// at this point, primarily for resolution in annotation attribute values.</span><br><span class=\"line\">\tif (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class=\"line\">\t\tbeanFactory.addEmbeddedValueResolver(new StringValueResolver() &#123;</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic String resolveStringValue(String strVal) &#123;</span><br><span class=\"line\">\t\t\t\treturn getEnvironment().resolvePlaceholders(strVal);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span><br><span class=\"line\">\tString[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);</span><br><span class=\"line\">\tfor (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class=\"line\">\t\tgetBean(weaverAwareName);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Stop using the temporary ClassLoader for type matching.</span><br><span class=\"line\">\tbeanFactory.setTempClassLoader(null);</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Allow for caching all bean definition metadata, not expecting further changes.</span><br><span class=\"line\">\tbeanFactory.freezeConfiguration();</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Instantiate all remaining (non-lazy-init) singletons.</span><br><span class=\"line\">\tbeanFactory.preInstantiateSingletons();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><em>preInstantiateSingletons  进行单例bean的预初始化*</em></p>\n<p>首先进行单例类的初始化，其中如果 bean 是 FactoryBean 类型 (注意，只定义了 factory-method 属性的普通 bean 并不是 FactoryBean)，并且还是 SmartFactoryBean 类型，那么需要判断是否需要 eagerInit(isEagerInit 是此接口定义的方法)。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">\tpublic void preInstantiateSingletons() throws BeansException &#123;</span><br><span class=\"line\">\t\tif (this.logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tthis.logger.debug(&quot;Pre-instantiating singletons in &quot; + this);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span><br><span class=\"line\">\t\t// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span><br><span class=\"line\">\t\tList&lt;String&gt; beanNames = new ArrayList&lt;String&gt;(this.beanDefinitionNames);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Trigger initialization of all non-lazy singleton beans...</span><br><span class=\"line\">\t\tfor (String beanName : beanNames) &#123;</span><br><span class=\"line\">\t\t\tRootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br><span class=\"line\">\t\t\tif (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class=\"line\">\t\t\t\tif (isFactoryBean(beanName)) &#123;</span><br><span class=\"line\">\t\t\t\t\tfinal FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class=\"line\">\t\t\t\t\tboolean isEagerInit;</span><br><span class=\"line\">\t\t\t\t\tif (System.getSecurityManager() != null &amp;&amp; factory instanceof SmartFactoryBean) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tisEagerInit = AccessController.doPrivileged(new PrivilegedAction&lt;Boolean&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\t\t\t\tpublic Boolean run() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\treturn ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit();</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;, getAccessControlContext());</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\t\t\tisEagerInit = (factory instanceof SmartFactoryBean &amp;&amp;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tif (isEagerInit) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tgetBean(beanName);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\t\tgetBean(beanName);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Trigger post-initialization callback for all applicable beans...</span><br><span class=\"line\">\t\tfor (String beanName : beanNames) &#123;</span><br><span class=\"line\">\t\t\tObject singletonInstance = getSingleton(beanName);</span><br><span class=\"line\">\t\t\tif (singletonInstance instanceof SmartInitializingSingleton) &#123;</span><br><span class=\"line\">\t\t\t\tfinal SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;</span><br><span class=\"line\">\t\t\t\tif (System.getSecurityManager() != null) &#123;</span><br><span class=\"line\">\t\t\t\t\tAccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\t\t\tpublic Object run() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tsmartSingleton.afterSingletonsInstantiated();</span><br><span class=\"line\">\t\t\t\t\t\t\treturn null;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;, getAccessControlContext());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\t\tsmartSingleton.afterSingletonsInstantiated();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<p>  <strong>registerListeners，注册监听器</strong></p>\n<p>  需要指出的是监听器列表在ContextLoader类中的<code>initWebApplicationContext</code>方法中的<code>loadParentContext</code>中的<code>useBeanFactory</code>中已经添加进入了</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class EventListenerMethodProcessor implements SmartInitializingSingleton, ApplicationContextAware &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">\tprotected void processBean(final List&lt;EventListenerFactory&gt; factories, final String beanName, final Class&lt;?&gt; targetType) &#123;</span><br><span class=\"line\">\t\tif (!this.nonAnnotatedClasses.contains(targetType)) &#123;</span><br><span class=\"line\">\t\t\tMap&lt;Method, EventListener&gt; annotatedMethods = null;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tannotatedMethods = MethodIntrospector.selectMethods(targetType,</span><br><span class=\"line\">\t\t\t\t\t\tnew MethodIntrospector.MetadataLookup&lt;EventListener&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\t\t\t\tpublic EventListener inspect(Method method) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\treturn AnnotatedElementUtils.findMergedAnnotation(method, EventListener.class);</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcatch (Throwable ex) &#123;</span><br><span class=\"line\">\t\t\t\t// An unresolvable type in a method signature, probably from a lazy bean - let&apos;s ignore it.</span><br><span class=\"line\">\t\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(&quot;Could not resolve methods for bean with name &apos;&quot; + beanName + &quot;&apos;&quot;, ex);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (CollectionUtils.isEmpty(annotatedMethods)) &#123;</span><br><span class=\"line\">\t\t\t\tthis.nonAnnotatedClasses.add(targetType);</span><br><span class=\"line\">\t\t\t\tif (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.trace(&quot;No @EventListener annotations found on bean class: &quot; + targetType.getName());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\t// Non-empty set of methods</span><br><span class=\"line\">\t\t\t\tfor (Method method : annotatedMethods.keySet()) &#123;</span><br><span class=\"line\">\t\t\t\t\tfor (EventListenerFactory factory : factories) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tif (factory.supportsMethod(method)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tMethod methodToUse = AopUtils.selectInvocableMethod(</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tmethod, this.applicationContext.getType(beanName));</span><br><span class=\"line\">\t\t\t\t\t\t\tApplicationListener&lt;?&gt; applicationListener =</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tfactory.createApplicationListener(beanName, targetType, methodToUse);</span><br><span class=\"line\">\t\t\t\t\t\t\tif (applicationListener instanceof ApplicationListenerMethodAdapter) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t((ApplicationListenerMethodAdapter) applicationListener)</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t.init(this.applicationContext, this.evaluator);</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t//注意这里添加applicationListener到环境中了\t\t\t\t\t\t\tthis.applicationContext.addApplicationListener(applicationListener);</span><br><span class=\"line\">\t\t\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(annotatedMethods.size() + &quot; @EventListener methods processed on bean &apos;&quot; +</span><br><span class=\"line\">\t\t\t\t\t\t\tbeanName + &quot;&apos;: &quot; + annotatedMethods);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  下面是上下文环境中的监听器注册到工厂</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Add beans that implement ApplicationListener as listeners.</span><br><span class=\"line\"> * Doesn&apos;t affect other listeners, which can be added without being beans.</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected void registerListeners() &#123;</span><br><span class=\"line\">\t// Register statically specified listeners first.</span><br><span class=\"line\">\t//获得到之前加载的监听器列表 监听器列表在configureAndRefreshWebApplicationContext的时候就</span><br><span class=\"line\">\tfor (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123;</span><br><span class=\"line\">\t\tgetApplicationEventMulticaster().addApplicationListener(listener);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Do not initialize FactoryBeans here: We need to leave all regular beans</span><br><span class=\"line\">\t// uninitialized to let post-processors apply to them!</span><br><span class=\"line\">\tString[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false);</span><br><span class=\"line\">\tfor (String listenerBeanName : listenerBeanNames) &#123;</span><br><span class=\"line\">\t\tgetApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Publish early application events now that we finally have a multicaster...</span><br><span class=\"line\">\tSet&lt;ApplicationEvent&gt; earlyEventsToProcess = this.earlyApplicationEvents;</span><br><span class=\"line\">\tthis.earlyApplicationEvents = null;</span><br><span class=\"line\">\tif (earlyEventsToProcess != null) &#123;</span><br><span class=\"line\">\t\tfor (ApplicationEvent earlyEvent : earlyEventsToProcess) &#123;</span><br><span class=\"line\">\t\t\tgetApplicationEventMulticaster().multicastEvent(earlyEvent);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>  <strong>initApplicationEventMulticaster</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Initialize the ApplicationEventMulticaster.</span><br><span class=\"line\"> * Uses SimpleApplicationEventMulticaster if none defined in the context.</span><br><span class=\"line\"> * @see org.springframework.context.event.SimpleApplicationEventMulticaster</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected void initApplicationEventMulticaster() &#123;</span><br><span class=\"line\">\tConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class=\"line\">\t//看工厂中有没有ApplicationEventMulticaster这个类 如果有的话 就取出来</span><br><span class=\"line\">\tif (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\tthis.applicationEventMulticaster =</span><br><span class=\"line\">\t\t\t\tbeanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);</span><br><span class=\"line\">\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(&quot;Using ApplicationEventMulticaster [&quot; + this.applicationEventMulticaster + &quot;]&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse &#123;</span><br><span class=\"line\">\t//如果没有这个类 那么就创建一个 然后作为单例对象放置到工厂中。工厂是在上下文环境对象中包含着的</span><br><span class=\"line\">\t\tthis.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory);</span><br><span class=\"line\">\t\tbeanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster);</span><br><span class=\"line\">\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(&quot;Unable to locate ApplicationEventMulticaster with name &apos;&quot; +</span><br><span class=\"line\">\t\t\t\t\tAPPLICATION_EVENT_MULTICASTER_BEAN_NAME +</span><br><span class=\"line\">\t\t\t\t\t&quot;&apos;: using default [&quot; + this.applicationEventMulticaster + &quot;]&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>  <strong>3.1.2.3.1预备刷新前的一些准备工作</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">\t * Prepare this context for refreshing, setting its startup date and</span><br><span class=\"line\">\t * active flag as well as performing any initialization of property sources.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected void prepareRefresh() &#123;</span><br><span class=\"line\">\t\tthis.startupDate = System.currentTimeMillis();</span><br><span class=\"line\">\t\tthis.closed.set(false);</span><br><span class=\"line\">\t\tthis.active.set(true);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.info(&quot;Refreshing &quot; + this);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Initialize any placeholder property sources in the context environment</span><br><span class=\"line\">\t\t//3.1.2.3.1.1初始化一些配置文件</span><br><span class=\"line\">\t\tinitPropertySources();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Validate that all properties marked as required are resolvable</span><br><span class=\"line\">\t\t// see ConfigurablePropertyResolver#setRequiredProperties</span><br><span class=\"line\">\t\t//3.1.2.3.2校验必须的配置</span><br><span class=\"line\">\t\tgetEnvironment().validateRequiredProperties();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Allow for the collection of early ApplicationEvents,</span><br><span class=\"line\">\t\t// to be published once the multicaster is available...</span><br><span class=\"line\">\t\tthis.earlyApplicationEvents = new LinkedHashSet&lt;ApplicationEvent&gt;();</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>3.1.2.3.2告诉父类刷新内置bean工厂</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Tell the subclass to refresh the internal bean factory.</span><br><span class=\"line\"> * @return the fresh BeanFactory instance</span><br><span class=\"line\"> * @see #refreshBeanFactory()</span><br><span class=\"line\"> * @see #getBeanFactory()</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected ConfigurableListableBeanFactory obtainFreshBeanFactory() &#123;</span><br><span class=\"line\">\t//3.1.2.3.2.1在这里refresh bean工厂</span><br><span class=\"line\">\trefreshBeanFactory();</span><br><span class=\"line\">\tConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class=\"line\">\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.debug(&quot;Bean factory for &quot; + getDisplayName() + &quot;: &quot; + beanFactory);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn beanFactory;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>3.1.2.3.2.1在这里refresh bean工厂</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected final void refreshBeanFactory() throws BeansException &#123;</span><br><span class=\"line\">//如果存在工厂了 就销毁掉 然后关闭工厂 这样就刷新了</span><br><span class=\"line\">\tif (hasBeanFactory()) &#123;</span><br><span class=\"line\">\t\tdestroyBeans();</span><br><span class=\"line\">\t\tcloseBeanFactory();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t\t//创建bean可装配到list中的工厂</span><br><span class=\"line\">\t\tDefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class=\"line\">\t\tbeanFactory.setSerializationId(getId());</span><br><span class=\"line\">\t\t//3.1.2.3.2.1.1给与子类自由定制bean容器的机会</span><br><span class=\"line\">\t\tcustomizeBeanFactory(beanFactory);</span><br><span class=\"line\">\t\t//3.1.2.3.2.1.2核心的bean加载方法。</span><br><span class=\"line\">\t\tloadBeanDefinitions(beanFactory);</span><br><span class=\"line\">\t\tsynchronized (this.beanFactoryMonitor) &#123;</span><br><span class=\"line\">\t\t\tthis.beanFactory = beanFactory;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcatch (IOException ex) &#123;</span><br><span class=\"line\">\t\tthrow new ApplicationContextException(&quot;I/O error parsing bean definition source for &quot; + getDisplayName(), ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>3.1.2.3.2.1.1给与子类自由定制bean容器的机会</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">\t * Customize the internal bean factory used by this context.</span><br><span class=\"line\">\t * Called for each &#123;@link #refresh()&#125; attempt.</span><br><span class=\"line\">\t * &lt;p&gt;The default implementation applies this context&apos;s</span><br><span class=\"line\">\t * &#123;@linkplain #setAllowBeanDefinitionOverriding &quot;allowBeanDefinitionOverriding&quot;&#125;</span><br><span class=\"line\">\t * and &#123;@linkplain #setAllowCircularReferences &quot;allowCircularReferences&quot;&#125; settings,</span><br><span class=\"line\">\t * if specified. Can be overridden in subclasses to customize any of</span><br><span class=\"line\">\t * &#123;@link DefaultListableBeanFactory&#125;&apos;s settings.</span><br><span class=\"line\">\t * @param beanFactory the newly created bean factory for this context</span><br><span class=\"line\">\t * @see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding</span><br><span class=\"line\">\t * @see DefaultListableBeanFactory#setAllowCircularReferences</span><br><span class=\"line\">\t * @see DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping</span><br><span class=\"line\">\t * @see DefaultListableBeanFactory#setAllowEagerClassLoading</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) &#123;</span><br><span class=\"line\">\t\tif (this.allowBeanDefinitionOverriding != null) &#123;</span><br><span class=\"line\">\t\t\t//默认false，不允许覆盖beanFactory.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (this.allowCircularReferences != null) &#123;</span><br><span class=\"line\">\t\t//默认false,不允许循环引用</span><br><span class=\"line\">\t\t\tbeanFactory.setAllowCircularReferences(this.allowCircularReferences);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>3.1.2.3.2.1.2核心的bean加载方法。这个方法很重要</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Loads the bean definitions via an XmlBeanDefinitionReader.</span><br><span class=\"line\"> * @see org.springframework.beans.factory.xml.XmlBeanDefinitionReader</span><br><span class=\"line\"> * @see #initBeanDefinitionReader</span><br><span class=\"line\"> * @see #loadBeanDefinitions</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Override</span><br><span class=\"line\">protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException &#123;</span><br><span class=\"line\">\t// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span><br><span class=\"line\">\t//创建一个基于xml的bean声明读取器</span><br><span class=\"line\">\tXmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Configure the bean definition reader with this context&apos;s</span><br><span class=\"line\">\t// resource loading environment.</span><br><span class=\"line\">\t//设置环境</span><br><span class=\"line\">\tbeanDefinitionReader.setEnvironment(getEnvironment());</span><br><span class=\"line\">\t//设置资源加载器</span><br><span class=\"line\">\tbeanDefinitionReader.setResourceLoader(this);</span><br><span class=\"line\">\t//设置一个资源entity解析器 这里肯定是xml</span><br><span class=\"line\">\tbeanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this));</span><br><span class=\"line\">  </span><br><span class=\"line\">\t// Allow a subclass to provide custom initialization of the reader,</span><br><span class=\"line\">\t// then proceed with actually loading the bean definitions.</span><br><span class=\"line\">\t//3.1.2.3.2.1.2.1初始化bean声明读取器</span><br><span class=\"line\">\tinitBeanDefinitionReader(beanDefinitionReader);</span><br><span class=\"line\">\tloadBeanDefinitions(beanDefinitionReader);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>3.1.2.3.2.1.2.1初始化bean声明读取器</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic class XmlWebApplicationContext extends AbstractRefreshableWebApplicationContext &#123;</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Load the bean definitions with the given XmlBeanDefinitionReader.</span><br><span class=\"line\">\t * &lt;p&gt;The lifecycle of the bean factory is handled by the refreshBeanFactory method;</span><br><span class=\"line\">\t * therefore this method is just supposed to load and/or register bean definitions.</span><br><span class=\"line\">\t * &lt;p&gt;Delegates to a ResourcePatternResolver for resolving location patterns</span><br><span class=\"line\">\t * into Resource instances.</span><br><span class=\"line\">\t * @throws IOException if the required XML document isn&apos;t found</span><br><span class=\"line\">\t * @see #refreshBeanFactory</span><br><span class=\"line\">\t * @see #getConfigLocations</span><br><span class=\"line\">\t * @see #getResources</span><br><span class=\"line\">\t * @see #getResourcePatternResolver</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected void loadBeanDefinitions(XmlBeanDefinitionReader reader) throws IOException &#123;</span><br><span class=\"line\">\t\tString[] configLocations = getConfigLocations();</span><br><span class=\"line\">\t\tif (configLocations != null) &#123;</span><br><span class=\"line\">\t\t\tfor (String configLocation : configLocations) &#123;</span><br><span class=\"line\">\t\t\t\t//读取具体配置位置然后读取器进行加载跳入下面的方法</span><br><span class=\"line\">\t\t\t\treader.loadBeanDefinitions(configLocation);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;\t</span><br><span class=\"line\">\tpublic abstract class AbstractBeanDefinitionReader implements EnvironmentCapable, BeanDefinitionReader &#123;</span><br><span class=\"line\"> ...</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Load bean definitions from the specified resource location.</span><br><span class=\"line\">\t * &lt;p&gt;The location can also be a location pattern, provided that the</span><br><span class=\"line\">\t * ResourceLoader of this bean definition reader is a ResourcePatternResolver.</span><br><span class=\"line\">\t * @param location the resource location, to be loaded with the ResourceLoader</span><br><span class=\"line\">\t * (or ResourcePatternResolver) of this bean definition reader</span><br><span class=\"line\">\t * @param actualResources a Set to be filled with the actual Resource objects</span><br><span class=\"line\">\t * that have been resolved during the loading process. May be &#123;@code null&#125;</span><br><span class=\"line\">\t * to indicate that the caller is not interested in those Resource objects.</span><br><span class=\"line\">\t * @return the number of bean definitions found</span><br><span class=\"line\">\t * @throws BeanDefinitionStoreException in case of loading or parsing errors</span><br><span class=\"line\">\t * @see #getResourceLoader()</span><br><span class=\"line\">\t * @see #loadBeanDefinitions(org.springframework.core.io.Resource)</span><br><span class=\"line\">\t * @see #loadBeanDefinitions(org.springframework.core.io.Resource[])</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic int loadBeanDefinitions(String location, @Nullable Set&lt;Resource&gt; actualResources) throws BeanDefinitionStoreException &#123;</span><br><span class=\"line\">\t\t//开始读取配置了bean的xml文件</span><br><span class=\"line\">\t\tResourceLoader resourceLoader = getResourceLoader();</span><br><span class=\"line\">\t\t//如果资源加载器不存在的话那么就抛出异常</span><br><span class=\"line\">\t\tif (resourceLoader == null) &#123;</span><br><span class=\"line\">\t\t\tthrow new BeanDefinitionStoreException(</span><br><span class=\"line\">\t\t\t\t\t&quot;Cannot import bean definitions from location [&quot; + location + &quot;]: no ResourceLoader available&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//如果是classpath：application*.xml这种pattern的话</span><br><span class=\"line\">\t\tif (resourceLoader instanceof ResourcePatternResolver) &#123;</span><br><span class=\"line\">\t\t\t// Resource pattern matching available.</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t//获得资源</span><br><span class=\"line\">\t\t\t\tResource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);</span><br><span class=\"line\">\t\t\t\t//遍历循环 获取所有的资源的总数</span><br><span class=\"line\">\t\t\t\tint loadCount = loadBeanDefinitions(resources);</span><br><span class=\"line\">\t\t\t\t//遍历循环放入actualResources这个set中。</span><br><span class=\"line\">\t\t\t\tif (actualResources != null) &#123;</span><br><span class=\"line\">\t\t\t\t\tfor (Resource resource : resources) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tactualResources.add(resource);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(&quot;Loaded &quot; + loadCount + &quot; bean definitions from location pattern [&quot; + location + &quot;]&quot;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\treturn loadCount;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcatch (IOException ex) &#123;</span><br><span class=\"line\">\t\t\t\tthrow new BeanDefinitionStoreException(</span><br><span class=\"line\">\t\t\t\t\t\t&quot;Could not resolve bean definition resource pattern [&quot; + location + &quot;]&quot;, ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;else &#123;</span><br><span class=\"line\">\t\t\t//否则的话只允许绝对路径的资源配置文件，</span><br><span class=\"line\">\t\t\t// Can only load single resources by absolute URL.</span><br><span class=\"line\">\t\t\tResource resource = resourceLoader.getResource(location);</span><br><span class=\"line\">\t\t\t//获得资源总数</span><br><span class=\"line\">\t\t\tint loadCount = loadBeanDefinitions(resource);</span><br><span class=\"line\">\t\t\tif (actualResources != null) &#123;</span><br><span class=\"line\">\t\t\t\t//同样加载到set中</span><br><span class=\"line\">\t\t\t\tactualResources.add(resource);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(&quot;Loaded &quot; + loadCount + &quot; bean definitions from location [&quot; + location + &quot;]&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn loadCount;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>getResources(location)</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PathMatchingResourcePatternResolver implements ResourcePatternResolver &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic Resource[] getResources(String locationPattern) throws IOException &#123;</span><br><span class=\"line\">\t\tAssert.notNull(locationPattern, &quot;Location pattern must not be null&quot;);</span><br><span class=\"line\">\t\t//CLASSPATH_ALL_URL_PREFIX=classpath*:</span><br><span class=\"line\">\t\t//如果是以classpath*:开头的</span><br><span class=\"line\">\t\tif (locationPattern.startsWith(CLASSPATH_ALL_URL_PREFIX)) &#123;</span><br><span class=\"line\">\t\t\t// a class path resource (multiple resources for same name possible)</span><br><span class=\"line\">\t\t\t//这里的注释的意思是多个资源的partern的话</span><br><span class=\"line\">\t\t\tif (getPathMatcher().isPattern(locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length()))) &#123;</span><br><span class=\"line\">\t\t\t\t// a class path resource pattern</span><br><span class=\"line\">\t\t\t\t//获取匹配的资源列表 返回资源列表</span><br><span class=\"line\">\t\t\t\treturn findPathMatchingResources(locationPattern);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\t// all class path resources with the given name</span><br><span class=\"line\">\t\t\t\treturn </span><br><span class=\"line\">//获取所有的classpath下的资源\t\t\tfindAllClassPathResources(locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length()));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse &#123;</span><br><span class=\"line\">\t\t\t// Generally only look for a pattern after a prefix here,</span><br><span class=\"line\">\t\t\t// and on Tomcat only after the &quot;*/&quot; separator for its &quot;war:&quot; protocol.</span><br><span class=\"line\">\t\t\tint prefixEnd = (locationPattern.startsWith(&quot;war:&quot;) ? locationPattern.indexOf(&quot;*/&quot;) + 1 :</span><br><span class=\"line\">\t\t\t\t\tlocationPattern.indexOf(&apos;:&apos;) + 1);</span><br><span class=\"line\">\t\t\tif (getPathMatcher().isPattern(locationPattern.substring(prefixEnd))) &#123;</span><br><span class=\"line\">\t\t\t\t// a file pattern</span><br><span class=\"line\">\t\t\t\treturn findPathMatchingResources(locationPattern);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\t// a single resource with the given name</span><br><span class=\"line\">\t\t\t\treturn new Resource[] &#123;getResourceLoader().getResource(locationPattern)&#125;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>findPathMatchingResources,这个找出所有的给定资源匹配模式下的资源列表classpath:*</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">\t * Find all resources that match the given location pattern via the</span><br><span class=\"line\">\t * Ant-style PathMatcher. Supports resources in jar files and zip files</span><br><span class=\"line\">\t * and in the file system.</span><br><span class=\"line\">\t * @param locationPattern the location pattern to match</span><br><span class=\"line\">\t * @return the result as Resource array</span><br><span class=\"line\">\t * @throws IOException in case of I/O errors</span><br><span class=\"line\">\t * @see #doFindPathMatchingJarResources</span><br><span class=\"line\">\t * @see #doFindPathMatchingFileResources</span><br><span class=\"line\">\t * @see org.springframework.util.PathMatcher</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected Resource[] findPathMatchingResources(String locationPattern) throws IOException &#123;</span><br><span class=\"line\">\t\t//获取给定location的根目录</span><br><span class=\"line\">\t\tString rootDirPath = determineRootDir(locationPattern);</span><br><span class=\"line\">\t\tString subPattern = locationPattern.substring(rootDirPath.length());</span><br><span class=\"line\">\t\tResource[] rootDirResources = getResources(rootDirPath);</span><br><span class=\"line\">\t\tSet&lt;Resource&gt; result = new LinkedHashSet&lt;&gt;(16);</span><br><span class=\"line\">\t\tfor (Resource rootDirResource : rootDirResources) &#123;</span><br><span class=\"line\">\t\t\trootDirResource = resolveRootDirResource(rootDirResource);</span><br><span class=\"line\">\t\t\tURL rootDirUrl = rootDirResource.getURL();</span><br><span class=\"line\">\t\t\tif (equinoxResolveMethod != null &amp;&amp; rootDirUrl.getProtocol().startsWith(&quot;bundle&quot;)) &#123;</span><br><span class=\"line\">\t\t\t\tURL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl);</span><br><span class=\"line\">\t\t\t\tif (resolvedUrl != null) &#123;</span><br><span class=\"line\">\t\t\t\t\trootDirUrl = resolvedUrl;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\trootDirResource = new UrlResource(rootDirUrl);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) &#123;</span><br><span class=\"line\">\t\t\t\tresult.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) &#123;</span><br><span class=\"line\">\t\t\t\tresult.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\tresult.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(&quot;Resolved location pattern [&quot; + locationPattern + &quot;] to resources &quot; + result);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn result.toArray(new Resource[0]);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>findAllClassPathResources，获取所有classpath下的资源</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Find all class location resources with the given location via the ClassLoader.</span><br><span class=\"line\"> * Delegates to &#123;@link #doFindAllClassPathResources(String)&#125;.</span><br><span class=\"line\"> * @param location the absolute path within the classpath</span><br><span class=\"line\"> * @return the result as Resource array</span><br><span class=\"line\"> * @throws IOException in case of I/O errors</span><br><span class=\"line\"> * @see java.lang.ClassLoader#getResources</span><br><span class=\"line\"> * @see #convertClassLoaderURL</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected Resource[] findAllClassPathResources(String location) throws IOException &#123;</span><br><span class=\"line\">\tString path = location;</span><br><span class=\"line\">\tif (path.startsWith(&quot;/&quot;)) &#123;</span><br><span class=\"line\">\t\tpath = path.substring(1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSet&lt;Resource&gt; result = doFindAllClassPathResources(path);</span><br><span class=\"line\">\tif (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.trace(&quot;Resolved classpath location [&quot; + location + &quot;] to resources &quot; + result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn result.toArray(new Resource[0]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>  <strong>3.1.2.3.1.1初始化一些配置文件</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class AbstractRefreshableWebApplicationContext extends AbstractRefreshableConfigApplicationContext</span><br><span class=\"line\">\t\timplements ConfigurableWebApplicationContext, ThemeSource &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t\t/**</span><br><span class=\"line\">\t * &#123;@inheritDoc&#125;</span><br><span class=\"line\">\t * &lt;p&gt;Replace &#123;@code Servlet&#125;-related property sources.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tprotected void initPropertySources() &#123;</span><br><span class=\"line\">\t//获得环境对象</span><br><span class=\"line\">\t\tConfigurableEnvironment env = getEnvironment();</span><br><span class=\"line\">\t\tif (env instanceof ConfigurableWebEnvironment) &#123;</span><br><span class=\"line\">\t\t//加载并初始化配置source</span><br><span class=\"line\">\t\t//又跳到StandardServletEnvironment 进行3.1.2.1初始化一些配置properties</span><br><span class=\"line\">        ((ConfigurableWebEnvironment) env).initPropertySources(this.servletContext, \t\tthis.servletConfig);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>   <strong>3.1.2.3.1告诉父类去刷新内置的bean工厂。</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Tell the subclass to refresh the internal bean factory.</span><br><span class=\"line\"> * @return the fresh BeanFactory instance</span><br><span class=\"line\"> * @see #refreshBeanFactory()</span><br><span class=\"line\"> * @see #getBeanFactory()</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected ConfigurableListableBeanFactory obtainFreshBeanFactory() &#123;</span><br><span class=\"line\">\trefreshBeanFactory();</span><br><span class=\"line\">\tConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class=\"line\">\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.debug(&quot;Bean factory for &quot; + getDisplayName() + &quot;: &quot; + beanFactory);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn beanFactory;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>3.1.2.3.3准备bean工厂，包含以下几项:</strong></p>\n<ul>\n<li><p>BeanExpressionResolver(SpringEL解析器)</p>\n</li>\n<li><p>PropertyEditorRegistrar 向spring注册Java的PropertyEditor,定义bean的xml里面都是字符串那么由这个东西来转换为我们需要的类型。只有一个实现ResourceEditorRegistrar </p>\n</li>\n<li><p>设置环境注入 addBeanPostProcessor 这样可以将spring内部的一些对象注入到工厂</p>\n</li>\n<li><p>依赖解析忽略 ignoreDependencyInterface 指定哪些依赖在注入的时候应该被忽略</p>\n</li>\n<li><p>bean 伪装 有些对象不在工厂中，但是我们依然想让他被装配到工厂中 那么 registerResolvableDependency 这个装配关系存贮在一个Map&lt;Class&lt;?&gt;,Object&gt;中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">\t * Configure the factory&apos;s standard context characteristics,</span><br><span class=\"line\">\t * such as the context&apos;s ClassLoader and post-processors.</span><br><span class=\"line\">\t * @param beanFactory the BeanFactory to configure</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class=\"line\">\t\t// Tell the internal bean factory to use the context&apos;s class loader etc.</span><br><span class=\"line\">\t\tbeanFactory.setBeanClassLoader(getClassLoader());</span><br><span class=\"line\">\t\tbeanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</span><br><span class=\"line\">\t\tbeanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Configure the bean factory with context callbacks.</span><br><span class=\"line\">\t\tbeanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));</span><br><span class=\"line\">\t\tbeanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span><br><span class=\"line\">\t\tbeanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</span><br><span class=\"line\">\t\tbeanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span><br><span class=\"line\">\t\tbeanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span><br><span class=\"line\">\t\tbeanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span><br><span class=\"line\">\t\tbeanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// BeanFactory interface not registered as resolvable type in a plain factory.</span><br><span class=\"line\">\t\t// MessageSource registered (and found for autowiring) as a bean.</span><br><span class=\"line\">\t\tbeanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</span><br><span class=\"line\">\t\tbeanFactory.registerResolvableDependency(ResourceLoader.class, this);</span><br><span class=\"line\">\t\tbeanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);</span><br><span class=\"line\">\t\tbeanFactory.registerResolvableDependency(ApplicationContext.class, this);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Register early post-processor for detecting inner beans as ApplicationListeners.</span><br><span class=\"line\">\t\tbeanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Detect a LoadTimeWeaver and prepare for weaving, if found.</span><br><span class=\"line\">\t\tif (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\t\tbeanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class=\"line\">\t\t\t// Set a temporary ClassLoader for type matching.</span><br><span class=\"line\">\t\t\tbeanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Register default environment beans.</span><br><span class=\"line\">\t\t//将一些环境变量bean注册为单例对象</span><br><span class=\"line\">\t\tif (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\t\tbeanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\t\tbeanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\t\tbeanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><em>这样的话SpringCore中关于Spring容器的启动（当然我这里直接是Web容器管理Spring容器）就基本完了回头可以画下流程图 ，普通的Spring容器的启动也是一样的*</em></p>\n</li>\n</ul>"},{"title":"Tomcat启动报Warn","date":"2017-12-05T14:21:15.000Z","_content":"\n\n\n​\tTomcat启动报内存溢出的Warn记录<!--more-->\n\n\n\n​\t最近在启动项目时候出现了This is very likely to create a memory leak的Warn错误\n\n​\t记录下解决方案(这里以1g内存为例):\n\n​\t常见的内存溢出大概有三种:\n\n  *   OutOfMemoryError： Java heap space \n\n  *   OutOfMemoryError： PermGen space \n\n  *   OutOfMemoryError： unable to create new native thread. \n\n      对于前两种 在应用本身没有内存泄露的情况下 进行TomcatJvm参数配置来解决\n\n       * -Xms -Xmx -XX：PermSize -XX：MaxPermSize\n\n      最后一种需要进行调整操作系统和tomcat jvm参数同时调整\n\n      ## 第一种:堆内存溢出\n\n      Linux服务器下修改 bin目录下的catalina.sh\n\n      添加\n\n      ```\n      JAVA_OPTS='-Xms512m -Xmx1024m' \n      ```\n\n      或者\n\n      ```\n      JAVA_OPTS=\"-server -Xms800m -Xmx800m   -XX:MaxNewSize=256m\" \n      ```\n\n      或者\n\n      ```\n      CATALINA_OPTS=\"-server -Xms256m -Xmx300m\"\n      ```\n\n      Windows服务器下 在catalina.bat最前面加入\n\n      ```\n      set JAVA_OPTS=-Xms128m -Xmx350m \n      ```\n\n      或者\n\n      ```\n      set CATALINA_OPTS=-Xmx300M -Xms256M \n      ```\n\n      这JAVA_OPTS和CATALINA_OPTS的区别在于前者直接设置jvm内存后者设置的是tomcat内存\n\n      第二种解决方案\n\n      Linux服务器\n\n      ​\t修改TOMCAT_HOME/bin/catalina.sh\n\n      在“echo \"Using CATALINA_BASE: $CATALINA_BASE\"\" 上面加入以下行\n\n      ```\n      JAVA_OPTS=\"$JAVA_OPTS -server -Xms800m -Xmx800m -XX:MaxNewSize=256m\" \n      ```\n\n       ##  永久保存区域溢出\n\n​\t\tPermGen space 的全称是 Permanent Generation space, 是指内存的永久保存区域\n\n​\t\t如果webapp下使用了大量的第三方jar,大小超过了jvm默认的大小4m 就会出现这种问题\n\n​\t\t解决办法:\n\n​\t\tLinux服务器下:\n\n​\t\t在catalina.sh的第一行增加: \n\n```\nJAVA_OPTS= \n-Xms64m \n-Xmx256m \n-XX:PermSize=128M \n-XX:MaxNewSize=256m \n-XX:MaxPermSize=256m \n```\n\n​\t\t或在\"“echo \"Using CATALINA_BASE:   $CATALINA_BASE\"”\"上面加入以下行\n\n```\nJAVA_OPTS=\"-server -XX:PermSize=64M -XX:MaxPermSize=128m \n```\n\n​\t\t第三种是无法创建新的线程\n\n​\t\t\n\n<!---->","source":"_posts/Tomcat启动报Warn.md","raw":"---\ntitle: Tomcat启动报Warn\ndate: 2017-12-05 22:21:15\ntags: [Tomcat]\ncategories: [Tomcat]\n\n---\n\n\n\n​\tTomcat启动报内存溢出的Warn记录<!--more-->\n\n\n\n​\t最近在启动项目时候出现了This is very likely to create a memory leak的Warn错误\n\n​\t记录下解决方案(这里以1g内存为例):\n\n​\t常见的内存溢出大概有三种:\n\n  *   OutOfMemoryError： Java heap space \n\n  *   OutOfMemoryError： PermGen space \n\n  *   OutOfMemoryError： unable to create new native thread. \n\n      对于前两种 在应用本身没有内存泄露的情况下 进行TomcatJvm参数配置来解决\n\n       * -Xms -Xmx -XX：PermSize -XX：MaxPermSize\n\n      最后一种需要进行调整操作系统和tomcat jvm参数同时调整\n\n      ## 第一种:堆内存溢出\n\n      Linux服务器下修改 bin目录下的catalina.sh\n\n      添加\n\n      ```\n      JAVA_OPTS='-Xms512m -Xmx1024m' \n      ```\n\n      或者\n\n      ```\n      JAVA_OPTS=\"-server -Xms800m -Xmx800m   -XX:MaxNewSize=256m\" \n      ```\n\n      或者\n\n      ```\n      CATALINA_OPTS=\"-server -Xms256m -Xmx300m\"\n      ```\n\n      Windows服务器下 在catalina.bat最前面加入\n\n      ```\n      set JAVA_OPTS=-Xms128m -Xmx350m \n      ```\n\n      或者\n\n      ```\n      set CATALINA_OPTS=-Xmx300M -Xms256M \n      ```\n\n      这JAVA_OPTS和CATALINA_OPTS的区别在于前者直接设置jvm内存后者设置的是tomcat内存\n\n      第二种解决方案\n\n      Linux服务器\n\n      ​\t修改TOMCAT_HOME/bin/catalina.sh\n\n      在“echo \"Using CATALINA_BASE: $CATALINA_BASE\"\" 上面加入以下行\n\n      ```\n      JAVA_OPTS=\"$JAVA_OPTS -server -Xms800m -Xmx800m -XX:MaxNewSize=256m\" \n      ```\n\n       ##  永久保存区域溢出\n\n​\t\tPermGen space 的全称是 Permanent Generation space, 是指内存的永久保存区域\n\n​\t\t如果webapp下使用了大量的第三方jar,大小超过了jvm默认的大小4m 就会出现这种问题\n\n​\t\t解决办法:\n\n​\t\tLinux服务器下:\n\n​\t\t在catalina.sh的第一行增加: \n\n```\nJAVA_OPTS= \n-Xms64m \n-Xmx256m \n-XX:PermSize=128M \n-XX:MaxNewSize=256m \n-XX:MaxPermSize=256m \n```\n\n​\t\t或在\"“echo \"Using CATALINA_BASE:   $CATALINA_BASE\"”\"上面加入以下行\n\n```\nJAVA_OPTS=\"-server -XX:PermSize=64M -XX:MaxPermSize=128m \n```\n\n​\t\t第三种是无法创建新的线程\n\n​\t\t\n\n<!---->","slug":"Tomcat启动报Warn","published":1,"updated":"2022-09-03T07:30:55.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz85d002itwfao22qpuen","content":"<p>​    Tomcat启动报内存溢出的Warn记录<a id=\"more\"></a></p>\n<p>​    最近在启动项目时候出现了This is very likely to create a memory leak的Warn错误</p>\n<p>​    记录下解决方案(这里以1g内存为例):</p>\n<p>​    常见的内存溢出大概有三种:</p>\n<ul>\n<li><p>OutOfMemoryError： Java heap space </p>\n</li>\n<li><p>OutOfMemoryError： PermGen space </p>\n</li>\n<li><p>OutOfMemoryError： unable to create new native thread. </p>\n<p>对于前两种 在应用本身没有内存泄露的情况下 进行TomcatJvm参数配置来解决</p>\n<ul>\n<li>-Xms -Xmx -XX：PermSize -XX：MaxPermSize</li>\n</ul>\n<p>最后一种需要进行调整操作系统和tomcat jvm参数同时调整</p>\n<h2 id=\"第一种-堆内存溢出\"><a href=\"#第一种-堆内存溢出\" class=\"headerlink\" title=\"第一种:堆内存溢出\"></a>第一种:堆内存溢出</h2><p>Linux服务器下修改 bin目录下的catalina.sh</p>\n<p>添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_OPTS=&apos;-Xms512m -Xmx1024m&apos;</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_OPTS=&quot;-server -Xms800m -Xmx800m   -XX:MaxNewSize=256m&quot;</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CATALINA_OPTS=&quot;-server -Xms256m -Xmx300m&quot;</span><br></pre></td></tr></table></figure>\n\n<p>Windows服务器下 在catalina.bat最前面加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set JAVA_OPTS=-Xms128m -Xmx350m</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set CATALINA_OPTS=-Xmx300M -Xms256M</span><br></pre></td></tr></table></figure>\n\n<p>这JAVA_OPTS和CATALINA_OPTS的区别在于前者直接设置jvm内存后者设置的是tomcat内存</p>\n<p>第二种解决方案</p>\n<p>Linux服务器</p>\n<p>​    修改TOMCAT_HOME/bin/catalina.sh</p>\n<p>在“echo “Using CATALINA_BASE: $CATALINA_BASE”” 上面加入以下行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_OPTS=&quot;$JAVA_OPTS -server -Xms800m -Xmx800m -XX:MaxNewSize=256m&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"永久保存区域溢出\"><a href=\"#永久保存区域溢出\" class=\"headerlink\" title=\"永久保存区域溢出\"></a>永久保存区域溢出</h2></li>\n</ul>\n<p>​        PermGen space 的全称是 Permanent Generation space, 是指内存的永久保存区域</p>\n<p>​        如果webapp下使用了大量的第三方jar,大小超过了jvm默认的大小4m 就会出现这种问题</p>\n<p>​        解决办法:</p>\n<p>​        Linux服务器下:</p>\n<p>​        在catalina.sh的第一行增加: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_OPTS= </span><br><span class=\"line\">-Xms64m </span><br><span class=\"line\">-Xmx256m </span><br><span class=\"line\">-XX:PermSize=128M </span><br><span class=\"line\">-XX:MaxNewSize=256m </span><br><span class=\"line\">-XX:MaxPermSize=256m</span><br></pre></td></tr></table></figure>\n\n<p>​        或在”“echo “Using CATALINA_BASE:   $CATALINA_BASE”””上面加入以下行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_OPTS=&quot;-server -XX:PermSize=64M -XX:MaxPermSize=128m</span><br></pre></td></tr></table></figure>\n\n<p>​        第三种是无法创建新的线程</p>\n<p>​        </p>\n<!---->","site":{"data":{}},"excerpt":"<p>​    Tomcat启动报内存溢出的Warn记录</p>","more":"<p></p>\n<p>​    最近在启动项目时候出现了This is very likely to create a memory leak的Warn错误</p>\n<p>​    记录下解决方案(这里以1g内存为例):</p>\n<p>​    常见的内存溢出大概有三种:</p>\n<ul>\n<li><p>OutOfMemoryError： Java heap space </p>\n</li>\n<li><p>OutOfMemoryError： PermGen space </p>\n</li>\n<li><p>OutOfMemoryError： unable to create new native thread. </p>\n<p>对于前两种 在应用本身没有内存泄露的情况下 进行TomcatJvm参数配置来解决</p>\n<ul>\n<li>-Xms -Xmx -XX：PermSize -XX：MaxPermSize</li>\n</ul>\n<p>最后一种需要进行调整操作系统和tomcat jvm参数同时调整</p>\n<h2 id=\"第一种-堆内存溢出\"><a href=\"#第一种-堆内存溢出\" class=\"headerlink\" title=\"第一种:堆内存溢出\"></a>第一种:堆内存溢出</h2><p>Linux服务器下修改 bin目录下的catalina.sh</p>\n<p>添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_OPTS=&apos;-Xms512m -Xmx1024m&apos;</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_OPTS=&quot;-server -Xms800m -Xmx800m   -XX:MaxNewSize=256m&quot;</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CATALINA_OPTS=&quot;-server -Xms256m -Xmx300m&quot;</span><br></pre></td></tr></table></figure>\n\n<p>Windows服务器下 在catalina.bat最前面加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set JAVA_OPTS=-Xms128m -Xmx350m</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set CATALINA_OPTS=-Xmx300M -Xms256M</span><br></pre></td></tr></table></figure>\n\n<p>这JAVA_OPTS和CATALINA_OPTS的区别在于前者直接设置jvm内存后者设置的是tomcat内存</p>\n<p>第二种解决方案</p>\n<p>Linux服务器</p>\n<p>​    修改TOMCAT_HOME/bin/catalina.sh</p>\n<p>在“echo “Using CATALINA_BASE: $CATALINA_BASE”” 上面加入以下行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_OPTS=&quot;$JAVA_OPTS -server -Xms800m -Xmx800m -XX:MaxNewSize=256m&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"永久保存区域溢出\"><a href=\"#永久保存区域溢出\" class=\"headerlink\" title=\"永久保存区域溢出\"></a>永久保存区域溢出</h2></li>\n</ul>\n<p>​        PermGen space 的全称是 Permanent Generation space, 是指内存的永久保存区域</p>\n<p>​        如果webapp下使用了大量的第三方jar,大小超过了jvm默认的大小4m 就会出现这种问题</p>\n<p>​        解决办法:</p>\n<p>​        Linux服务器下:</p>\n<p>​        在catalina.sh的第一行增加: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_OPTS= </span><br><span class=\"line\">-Xms64m </span><br><span class=\"line\">-Xmx256m </span><br><span class=\"line\">-XX:PermSize=128M </span><br><span class=\"line\">-XX:MaxNewSize=256m </span><br><span class=\"line\">-XX:MaxPermSize=256m</span><br></pre></td></tr></table></figure>\n\n<p>​        或在”“echo “Using CATALINA_BASE:   $CATALINA_BASE”””上面加入以下行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_OPTS=&quot;-server -XX:PermSize=64M -XX:MaxPermSize=128m</span><br></pre></td></tr></table></figure>\n\n<p>​        第三种是无法创建新的线程</p>\n<p>​        </p>\n<!---->"},{"title":"Tomcat优化简谈","date":"2017-11-22T14:29:39.000Z","_content":"\n简单谈下Tomcat的配置优化<!--more-->\n\n> 网上流传的tomcat优化配置,记录下\n\n- 配置tomcat管理员账户\n\n  这里的tomcat 就以虚拟机上的tomcat 为例,版本为8.0.45\n\n  在conf/tomcat-users.xml下添加用户\n\n  tomcat 目录如下:\n\n  ```\n  drwxr-xr-x. 2 root root  4096 8月   9 04:10 bin\n  drwxr-xr-x. 2 root root  4096 6月  27 04:09 conf\n  drwxr-xr-x. 2 root root  4096 8月   9 04:10 lib\n  -rw-r--r--. 1 root root 57011 6月  27 04:09 LICENSE\n  drwxr-xr-x. 2 root root     6 6月  27 04:06 logs\n  -rw-r--r--. 1 root root  1444 6月  27 04:09 NOTICE\n  -rw-r--r--. 1 root root  6741 6月  27 04:09 RELEASE-NOTES\n  -rw-r--r--. 1 root root 16195 6月  27 04:09 RUNNING.txt\n  drwxr-xr-x. 2 root root    29 8月   9 04:10 temp\n  drwxr-xr-x. 7 root root    76 6月  27 04:08 webapps\n  drwxr-xr-x. 2 root root     6 6月  27 04:06 work\n  ```\n\n  ```\n  /usr/local/soft/tomcat-common/conf\n  [root@localhost conf]# ll\n  总用量 216\n  -rw-------. 1 root root  13688 6月  27 04:09 catalina.policy\n  -rw-------. 1 root root   7299 6月  27 04:09 catalina.properties\n  -rw-------. 1 root root   1577 6月  27 04:09 context.xml\n  -rw-------. 1 root root   3387 6月  27 04:09 logging.properties\n  -rw-------. 1 root root   6458 6月  27 04:09 server.xml\n  -rw-------. 1 root root   2164 6月  27 04:09 tomcat-users.xml\n  -rw-------. 1 root root   2634 6月  27 04:09 tomcat-users.xsd\n  -rw-------. 1 root root 168496 6月  27 04:09 web.xml\n  ```\n\n  ```\n   <?xml version='1.0' encoding='utf-8'?>\n     <!--\n       Licensed to the Apache Software Foundation (ASF) under one or more\n       contributor license agreements.  See the NOTICE file distributed with\n       this work for additional information regarding copyright ownership.\n       The ASF licenses this file to You under the Apache License, Version 2.0\n       (the \"License\"); you may not use this file except in compliance with\n      the License.  You may obtain a copy of the License at\n    \n          http://www.apache.org/licenses/LICENSE-2.0\n    \n      Unless required by applicable law or agreed to in writing, software\n      distributed under the License is distributed on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      See the License for the specific language governing permissions and\n      limitations under the License.\n    -->\n    <tomcat-users xmlns=\"http://tomcat.apache.org/xml\"\n                  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                  xsi:schemaLocation=\"http://tomcat.apache.org/xml tomcat-users.xsd\"\n                  version=\"1.0\">\n    <!--\n      NOTE:  By default, no user is included in the \"manager-gui\" role required\n      to operate the \"/manager/html\" web application.  If you wish to use this app,\n      you must define such a user - the username and password are arbitrary. It is\n      strongly recommended that you do NOT use one of the users in the commented out\n      section below since they are intended for use with the examples web\n      application.\n    -->\n    <!--\n      NOTE:  The sample user and role entries below are intended for use with the\n      examples web application. They are wrapped in a comment and thus are ignored\n      when reading this file. If you wish to configure these users for use with the\n      examples web application, do not forget to remove the <!.. ..> that surrounds\n      them. You will also need to set the passwords to something appropriate.\n    -->\n    <!--\n      <role rolename=\"tomcat\"/>\n      <role rolename=\"role1\"/>\n      <user username=\"tomcat\" password=\"<must-be-changed>\" roles=\"tomcat\"/>\n      <user username=\"both\" password=\"<must-be-changed>\" roles=\"tomcat,role1\"/>\n      <user username=\"role1\" password=\"<must-be-changed>\" roles=\"role1\"/>\n    -->\n    </tomcat-users>\n  ```\n\n  ```\n  <role rolename=\"manager\"/>\n  <role rolename=\"manager-gui\"/>\n  <role rolename=\"admin\"/>\n  <role rolename=\"admin-gui\"/>\n  <user username=\"admin\" password=\"tomcat\" roles=\"admin-gui,admin,manager-gui,manager\"/>\n\n  ```\n\n  现在启动tomcat ,登录查看信息\n\n  进入界面后点击右侧**ManagerApp**  **HostManager ** **ServerStatus**\n\n\n- tomcat 的三种运行模式\n\n  - bio\n\n    默认的模式,性能非常低下,没有经过任何优化处理和支持\n\n  - nio\n\n    nio(new I/O),是Java SE 1.4 及 后续版本提供的一种新的I/O操作方式(即java.nio包及其子包).\n\n    java nio是一个基于缓冲区 并能提供非阻塞I/O操作的JavaApi,因此nio也被看成是non-blockingI/O的\n\n    缩写.它拥有比传统I/O操作(bio)更好的并发运行性能\n\n  - apr\n\n    安装起来最困难,但是从操作系统级别来解决异步的IO问题,大幅度的提高性能\n\n- 启动NIO模式\n\n  - 修改server.xml里的Connector节点,修改protocol为org.apache.coyote.http11.Http11NioProtocol \n\n    ```\n    [root@localhost tomcat-common]# cd conf\n    [root@localhost conf]# vim server.xml\n    ```\n\n    修改前\n\n    ```\n      <Connector port=\"8080\" protocol=\"HTTP/1.1\"\n                    connectionTimeout=\"20000\"\n                     redirectPort=\"8443\" />\n    ```\n\n    修改后\n\n    ```\n    <Connector port=\"8080\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n                     connectionTimeout=\"20000\"\n                     redirectPort=\"8443\" />\n    ```\n\n- 执行器(线程池)\n\n  - 开启线程池\n\n    配置,解开这段注释\n\n    ```\n    <Executor name=\"tomcatThreadPool\" namePrefix=\"catalina-exec-\"\n            maxThreads=\"150\" minSpareThreads=\"4\"/>\n    ```\n\n    修改Connector节点\n\n    ```\n    <Connector port=\"8080\" executor=\"tomcatThreadPool\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n                    connectionTimeout=\"20000\"\n                    redirectPort=\"8443\" />\n    ```\n\n    重新启动\n\n  - 参数说明\n\n    ![](.Tomcat优化简谈/参数说明.png)\n\n  - 最佳实践\n\n    ```\n    <Executor name=\"tomcatThreadPool\" namePrefix=\"catalina-exec-\"\n            maxThreads=\"800\" minSpareThreads=\"100\" maxQueueSize=\"100\" prestartminSpareThreads=\"true\"/>\n    ```\n\n- 连接器(Connector)\n\n  Connector 是Tomcat接收请求的入口,每个Connector有自己专属的监听端口\n\n  Connector 有两种:HTTP Connector 和AJP Connector\n\n  - 连接器的通用属性(注意高亮部分)\n\n    \n\n    | 属性                  | 描述                                       |\n    | --------------------- | :-----------------------------------------|\n    | allowTrace            | A boolean value whichcan be used to enable \t\t\t\t\t\t\t   or disable the TRACE HTTP method. If not specified, this attribute is set to false.如果需要服务器能够处理用户的HAED/TRACE请求，这个值应该设置为true，默认值是false |\n    | asyncTimeOut          | The default timeout forasynchronous requests in milliseconds. If not specified, this attribute is setto 10000 (10 seconds) 默认超不时候以毫秒为单位的异步恳求。若是没有指定，该属性被设置为10000（10秒） |\n    | enableLookUps         |                                                              |\n    | maxHeaderCount        | The maximum number of headers in a request that are allowed by the container. Arequest that contains more headers than the specified limit will be rejected. Avalue of less than 0 means no limit. If not specified, a default of 100 is used.容器允许的请求头字段的最大数目。请求中包含比指定的限制更多的头字段将被拒绝。值小于0表示没有限制。如果没有指定，默认设置为100 |\n    | maxparameterCount     | The maximum number of parameter and value pairs (GET plus POST) which will beautomatically parsed by the container. Parameter and value pairs beyond thislimit will be ignored. A value of less than 0 means no limit. If not specified,a default of 10000 is used. Note that FailedRequestFilter filtercan be used to reject requests that hit thelimit.将被容器自动解析的最大数量的参数和值对（GET加上POST）。参数值对超出此限制将被忽略。值小于0表示没有限制。如果没有指定，默认为10000。请注意， FailedRequestFilter 过滤器可以用来拒绝达到了极限值的请求 |\n    | maxPostSize           | 将被容器以FORMURL参数形式处理的最大长度（以字节为单位）的POST。通过设置此属性的值小于或等于0可以禁用该限制。如果没有指定，该属性被设置为2097152（2兆字节） |\n    | maxSavePostSize       | 将被容器在FORM或CLIENT-CERT认证中保存/缓冲的POST的最大尺寸（以字节为单位）。对于这两种类型的身份验证，在用户身份验证之 前，POST将被保存/缓冲。对于POST CLIENT-CERT认证，处理该请求的SSL握手和缓冲清空期间，POST将被缓存。对于Form认证，POST将被保存，同时用户将被重定向到登陆 表单。POST将被一直保留直到用户成功认证或者认证请求关联的会话超时。将此属性设置为-1可以禁用此限制。将此属性设置为0，POST数据在身份验证 过程中将不被保存。如果没有指定，该属性设置为4096(4千字节) |\n    | parseBodyMethods      | 以逗号分隔的HTTP方法列表，通过方法列表，等同于POST方法，request 正文将被解析成请求参数。这在RESTful应用程序要支持以POST式的语义解析PUT请求中是非常有用的。需要注意的是设置其他值（不是POST）会导致Tomcat的行为违反servlet规范的目的。在这里为了符合HTTP规范明确禁止HTTP方法TRACE。默认值是POST |\n    | port                  | TheTCP port number on which this Connector will create a server socket and awaitincoming connections. Your operating system will allow only one serverapplication to listen to a particular port number on a particular IP address.If the special value of 0 (zero) is used, then Tomcat will select a free portat random to use for this connector. This is typically only useful in embeddedand testing applications.TCP端口号，连接器利用该端口号将创建一个服务器套接字，并等待传入的连接。你的操作系统将只允许一个服务器应用程序在一个特定的IP地址侦听特定的端口号。如果使用特殊值0（零），则Tomcat将为连接器随机选择一个空闲的端口。这是通常只用在嵌入式和测试应用程序 |\n    | protocol              | TheTCP port number on which this Connector will create a server socket and awaitincoming connections. Your operating system will allow only one serverapplication to listen to a particular port number on a particular IP address.If the special value of 0 (zero) is used, then Tomcat will select a free portat random to use for this connector. This is typically only useful in embeddedand testing applications.TCP端口号，连接器利用该端口号将创建一个服务器套接字，并等待传入的连接。你的操作系统将只允许一个服务器应用程序在一个特定的IP地址侦听特定的端口号。如果使用特殊值0（零），则Tomcat将为连接器随机选择一个空闲的端口。这是通常只用在嵌入式和测试应用程序 |\n    | proxyName             | 如果这个连接正在使用的代理服务器配置，配置该属性指定的服务器的名称，可以调用request.getServerName（）返回。有关更多信息，请参见代理支持. |\n    | proxyPort             | 如果这个连接正在使用的代理服务器配置，配置该属性指定服务器端口，可以调用request.getServerPort（）返回。有关更多信息，请参见代理支持 |\n    | redirectPort          | 如果该连接器支持非SSL请求，并且接收到的请求为满足安全约束需要SSL传输， Catalina 将自动将请求重定向到指定的端口号 |\n    | scheme                | 如果你想调用request.isSecure（）收到此连接器的请求返回true，请该该属性设置为true。您希望SSL连接器或非SSL连接器接收数据通过一个SSL加速器，像加密卡，SSL设备，甚至一个web服务器。默认值是false |\n    | URIEncoding           | 这将指定使用的字符编码，来解码URI字符。如果没有指定，ISO-88591将被使用 |\n    | useBodyEncodignForURI | 这指定是否应该用于URI查询参数，而不是使用URIEncoding contentType中指定的编码。此设置兼容性Tomcat 4.1.x版（该版在contentType中指定编码，或者使用request.setCharacterEncoding的方法显式设置（参数为 URL传来的值）。默认值false。 |\n    | xpoweredBy            | 将此属性设置为true会导致Tomcat支持使用Servlet规范的通知，（在规范中推荐使用头字段）。默认值是假的 |\n    | useIPVHosts           | 将该属性设置为true会导致Tomcat使用收到请求的IP地址，来确定将请求发送到哪个主机。默认值是false |\n\n    **ToBeContinue**\n\n","source":"_posts/Tomcat优化简谈.md","raw":"---\ntitle: Tomcat优化简谈\ndate: 2017-11-22 22:29:39\ntags: [Linux,Tomcat]\ncategories: [Linux,Tomcat]\n---\n\n简单谈下Tomcat的配置优化<!--more-->\n\n> 网上流传的tomcat优化配置,记录下\n\n- 配置tomcat管理员账户\n\n  这里的tomcat 就以虚拟机上的tomcat 为例,版本为8.0.45\n\n  在conf/tomcat-users.xml下添加用户\n\n  tomcat 目录如下:\n\n  ```\n  drwxr-xr-x. 2 root root  4096 8月   9 04:10 bin\n  drwxr-xr-x. 2 root root  4096 6月  27 04:09 conf\n  drwxr-xr-x. 2 root root  4096 8月   9 04:10 lib\n  -rw-r--r--. 1 root root 57011 6月  27 04:09 LICENSE\n  drwxr-xr-x. 2 root root     6 6月  27 04:06 logs\n  -rw-r--r--. 1 root root  1444 6月  27 04:09 NOTICE\n  -rw-r--r--. 1 root root  6741 6月  27 04:09 RELEASE-NOTES\n  -rw-r--r--. 1 root root 16195 6月  27 04:09 RUNNING.txt\n  drwxr-xr-x. 2 root root    29 8月   9 04:10 temp\n  drwxr-xr-x. 7 root root    76 6月  27 04:08 webapps\n  drwxr-xr-x. 2 root root     6 6月  27 04:06 work\n  ```\n\n  ```\n  /usr/local/soft/tomcat-common/conf\n  [root@localhost conf]# ll\n  总用量 216\n  -rw-------. 1 root root  13688 6月  27 04:09 catalina.policy\n  -rw-------. 1 root root   7299 6月  27 04:09 catalina.properties\n  -rw-------. 1 root root   1577 6月  27 04:09 context.xml\n  -rw-------. 1 root root   3387 6月  27 04:09 logging.properties\n  -rw-------. 1 root root   6458 6月  27 04:09 server.xml\n  -rw-------. 1 root root   2164 6月  27 04:09 tomcat-users.xml\n  -rw-------. 1 root root   2634 6月  27 04:09 tomcat-users.xsd\n  -rw-------. 1 root root 168496 6月  27 04:09 web.xml\n  ```\n\n  ```\n   <?xml version='1.0' encoding='utf-8'?>\n     <!--\n       Licensed to the Apache Software Foundation (ASF) under one or more\n       contributor license agreements.  See the NOTICE file distributed with\n       this work for additional information regarding copyright ownership.\n       The ASF licenses this file to You under the Apache License, Version 2.0\n       (the \"License\"); you may not use this file except in compliance with\n      the License.  You may obtain a copy of the License at\n    \n          http://www.apache.org/licenses/LICENSE-2.0\n    \n      Unless required by applicable law or agreed to in writing, software\n      distributed under the License is distributed on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      See the License for the specific language governing permissions and\n      limitations under the License.\n    -->\n    <tomcat-users xmlns=\"http://tomcat.apache.org/xml\"\n                  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                  xsi:schemaLocation=\"http://tomcat.apache.org/xml tomcat-users.xsd\"\n                  version=\"1.0\">\n    <!--\n      NOTE:  By default, no user is included in the \"manager-gui\" role required\n      to operate the \"/manager/html\" web application.  If you wish to use this app,\n      you must define such a user - the username and password are arbitrary. It is\n      strongly recommended that you do NOT use one of the users in the commented out\n      section below since they are intended for use with the examples web\n      application.\n    -->\n    <!--\n      NOTE:  The sample user and role entries below are intended for use with the\n      examples web application. They are wrapped in a comment and thus are ignored\n      when reading this file. If you wish to configure these users for use with the\n      examples web application, do not forget to remove the <!.. ..> that surrounds\n      them. You will also need to set the passwords to something appropriate.\n    -->\n    <!--\n      <role rolename=\"tomcat\"/>\n      <role rolename=\"role1\"/>\n      <user username=\"tomcat\" password=\"<must-be-changed>\" roles=\"tomcat\"/>\n      <user username=\"both\" password=\"<must-be-changed>\" roles=\"tomcat,role1\"/>\n      <user username=\"role1\" password=\"<must-be-changed>\" roles=\"role1\"/>\n    -->\n    </tomcat-users>\n  ```\n\n  ```\n  <role rolename=\"manager\"/>\n  <role rolename=\"manager-gui\"/>\n  <role rolename=\"admin\"/>\n  <role rolename=\"admin-gui\"/>\n  <user username=\"admin\" password=\"tomcat\" roles=\"admin-gui,admin,manager-gui,manager\"/>\n\n  ```\n\n  现在启动tomcat ,登录查看信息\n\n  进入界面后点击右侧**ManagerApp**  **HostManager ** **ServerStatus**\n\n\n- tomcat 的三种运行模式\n\n  - bio\n\n    默认的模式,性能非常低下,没有经过任何优化处理和支持\n\n  - nio\n\n    nio(new I/O),是Java SE 1.4 及 后续版本提供的一种新的I/O操作方式(即java.nio包及其子包).\n\n    java nio是一个基于缓冲区 并能提供非阻塞I/O操作的JavaApi,因此nio也被看成是non-blockingI/O的\n\n    缩写.它拥有比传统I/O操作(bio)更好的并发运行性能\n\n  - apr\n\n    安装起来最困难,但是从操作系统级别来解决异步的IO问题,大幅度的提高性能\n\n- 启动NIO模式\n\n  - 修改server.xml里的Connector节点,修改protocol为org.apache.coyote.http11.Http11NioProtocol \n\n    ```\n    [root@localhost tomcat-common]# cd conf\n    [root@localhost conf]# vim server.xml\n    ```\n\n    修改前\n\n    ```\n      <Connector port=\"8080\" protocol=\"HTTP/1.1\"\n                    connectionTimeout=\"20000\"\n                     redirectPort=\"8443\" />\n    ```\n\n    修改后\n\n    ```\n    <Connector port=\"8080\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n                     connectionTimeout=\"20000\"\n                     redirectPort=\"8443\" />\n    ```\n\n- 执行器(线程池)\n\n  - 开启线程池\n\n    配置,解开这段注释\n\n    ```\n    <Executor name=\"tomcatThreadPool\" namePrefix=\"catalina-exec-\"\n            maxThreads=\"150\" minSpareThreads=\"4\"/>\n    ```\n\n    修改Connector节点\n\n    ```\n    <Connector port=\"8080\" executor=\"tomcatThreadPool\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n                    connectionTimeout=\"20000\"\n                    redirectPort=\"8443\" />\n    ```\n\n    重新启动\n\n  - 参数说明\n\n    ![](.Tomcat优化简谈/参数说明.png)\n\n  - 最佳实践\n\n    ```\n    <Executor name=\"tomcatThreadPool\" namePrefix=\"catalina-exec-\"\n            maxThreads=\"800\" minSpareThreads=\"100\" maxQueueSize=\"100\" prestartminSpareThreads=\"true\"/>\n    ```\n\n- 连接器(Connector)\n\n  Connector 是Tomcat接收请求的入口,每个Connector有自己专属的监听端口\n\n  Connector 有两种:HTTP Connector 和AJP Connector\n\n  - 连接器的通用属性(注意高亮部分)\n\n    \n\n    | 属性                  | 描述                                       |\n    | --------------------- | :-----------------------------------------|\n    | allowTrace            | A boolean value whichcan be used to enable \t\t\t\t\t\t\t   or disable the TRACE HTTP method. If not specified, this attribute is set to false.如果需要服务器能够处理用户的HAED/TRACE请求，这个值应该设置为true，默认值是false |\n    | asyncTimeOut          | The default timeout forasynchronous requests in milliseconds. If not specified, this attribute is setto 10000 (10 seconds) 默认超不时候以毫秒为单位的异步恳求。若是没有指定，该属性被设置为10000（10秒） |\n    | enableLookUps         |                                                              |\n    | maxHeaderCount        | The maximum number of headers in a request that are allowed by the container. Arequest that contains more headers than the specified limit will be rejected. Avalue of less than 0 means no limit. If not specified, a default of 100 is used.容器允许的请求头字段的最大数目。请求中包含比指定的限制更多的头字段将被拒绝。值小于0表示没有限制。如果没有指定，默认设置为100 |\n    | maxparameterCount     | The maximum number of parameter and value pairs (GET plus POST) which will beautomatically parsed by the container. Parameter and value pairs beyond thislimit will be ignored. A value of less than 0 means no limit. If not specified,a default of 10000 is used. Note that FailedRequestFilter filtercan be used to reject requests that hit thelimit.将被容器自动解析的最大数量的参数和值对（GET加上POST）。参数值对超出此限制将被忽略。值小于0表示没有限制。如果没有指定，默认为10000。请注意， FailedRequestFilter 过滤器可以用来拒绝达到了极限值的请求 |\n    | maxPostSize           | 将被容器以FORMURL参数形式处理的最大长度（以字节为单位）的POST。通过设置此属性的值小于或等于0可以禁用该限制。如果没有指定，该属性被设置为2097152（2兆字节） |\n    | maxSavePostSize       | 将被容器在FORM或CLIENT-CERT认证中保存/缓冲的POST的最大尺寸（以字节为单位）。对于这两种类型的身份验证，在用户身份验证之 前，POST将被保存/缓冲。对于POST CLIENT-CERT认证，处理该请求的SSL握手和缓冲清空期间，POST将被缓存。对于Form认证，POST将被保存，同时用户将被重定向到登陆 表单。POST将被一直保留直到用户成功认证或者认证请求关联的会话超时。将此属性设置为-1可以禁用此限制。将此属性设置为0，POST数据在身份验证 过程中将不被保存。如果没有指定，该属性设置为4096(4千字节) |\n    | parseBodyMethods      | 以逗号分隔的HTTP方法列表，通过方法列表，等同于POST方法，request 正文将被解析成请求参数。这在RESTful应用程序要支持以POST式的语义解析PUT请求中是非常有用的。需要注意的是设置其他值（不是POST）会导致Tomcat的行为违反servlet规范的目的。在这里为了符合HTTP规范明确禁止HTTP方法TRACE。默认值是POST |\n    | port                  | TheTCP port number on which this Connector will create a server socket and awaitincoming connections. Your operating system will allow only one serverapplication to listen to a particular port number on a particular IP address.If the special value of 0 (zero) is used, then Tomcat will select a free portat random to use for this connector. This is typically only useful in embeddedand testing applications.TCP端口号，连接器利用该端口号将创建一个服务器套接字，并等待传入的连接。你的操作系统将只允许一个服务器应用程序在一个特定的IP地址侦听特定的端口号。如果使用特殊值0（零），则Tomcat将为连接器随机选择一个空闲的端口。这是通常只用在嵌入式和测试应用程序 |\n    | protocol              | TheTCP port number on which this Connector will create a server socket and awaitincoming connections. Your operating system will allow only one serverapplication to listen to a particular port number on a particular IP address.If the special value of 0 (zero) is used, then Tomcat will select a free portat random to use for this connector. This is typically only useful in embeddedand testing applications.TCP端口号，连接器利用该端口号将创建一个服务器套接字，并等待传入的连接。你的操作系统将只允许一个服务器应用程序在一个特定的IP地址侦听特定的端口号。如果使用特殊值0（零），则Tomcat将为连接器随机选择一个空闲的端口。这是通常只用在嵌入式和测试应用程序 |\n    | proxyName             | 如果这个连接正在使用的代理服务器配置，配置该属性指定的服务器的名称，可以调用request.getServerName（）返回。有关更多信息，请参见代理支持. |\n    | proxyPort             | 如果这个连接正在使用的代理服务器配置，配置该属性指定服务器端口，可以调用request.getServerPort（）返回。有关更多信息，请参见代理支持 |\n    | redirectPort          | 如果该连接器支持非SSL请求，并且接收到的请求为满足安全约束需要SSL传输， Catalina 将自动将请求重定向到指定的端口号 |\n    | scheme                | 如果你想调用request.isSecure（）收到此连接器的请求返回true，请该该属性设置为true。您希望SSL连接器或非SSL连接器接收数据通过一个SSL加速器，像加密卡，SSL设备，甚至一个web服务器。默认值是false |\n    | URIEncoding           | 这将指定使用的字符编码，来解码URI字符。如果没有指定，ISO-88591将被使用 |\n    | useBodyEncodignForURI | 这指定是否应该用于URI查询参数，而不是使用URIEncoding contentType中指定的编码。此设置兼容性Tomcat 4.1.x版（该版在contentType中指定编码，或者使用request.setCharacterEncoding的方法显式设置（参数为 URL传来的值）。默认值false。 |\n    | xpoweredBy            | 将此属性设置为true会导致Tomcat支持使用Servlet规范的通知，（在规范中推荐使用头字段）。默认值是假的 |\n    | useIPVHosts           | 将该属性设置为true会导致Tomcat使用收到请求的IP地址，来确定将请求发送到哪个主机。默认值是false |\n\n    **ToBeContinue**\n\n","slug":"Tomcat优化简谈","published":1,"updated":"2022-09-03T07:30:55.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz85f002mtwfaeygpc15r","content":"<p>简单谈下Tomcat的配置优化<a id=\"more\"></a></p>\n<blockquote>\n<p>网上流传的tomcat优化配置,记录下</p>\n</blockquote>\n<ul>\n<li><p>配置tomcat管理员账户</p>\n<p>这里的tomcat 就以虚拟机上的tomcat 为例,版本为8.0.45</p>\n<p>在conf/tomcat-users.xml下添加用户</p>\n<p>tomcat 目录如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x. 2 root root  4096 8月   9 04:10 bin</span><br><span class=\"line\">drwxr-xr-x. 2 root root  4096 6月  27 04:09 conf</span><br><span class=\"line\">drwxr-xr-x. 2 root root  4096 8月   9 04:10 lib</span><br><span class=\"line\">-rw-r--r--. 1 root root 57011 6月  27 04:09 LICENSE</span><br><span class=\"line\">drwxr-xr-x. 2 root root     6 6月  27 04:06 logs</span><br><span class=\"line\">-rw-r--r--. 1 root root  1444 6月  27 04:09 NOTICE</span><br><span class=\"line\">-rw-r--r--. 1 root root  6741 6月  27 04:09 RELEASE-NOTES</span><br><span class=\"line\">-rw-r--r--. 1 root root 16195 6月  27 04:09 RUNNING.txt</span><br><span class=\"line\">drwxr-xr-x. 2 root root    29 8月   9 04:10 temp</span><br><span class=\"line\">drwxr-xr-x. 7 root root    76 6月  27 04:08 webapps</span><br><span class=\"line\">drwxr-xr-x. 2 root root     6 6月  27 04:06 work</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/soft/tomcat-common/conf</span><br><span class=\"line\">[root@localhost conf]# ll</span><br><span class=\"line\">总用量 216</span><br><span class=\"line\">-rw-------. 1 root root  13688 6月  27 04:09 catalina.policy</span><br><span class=\"line\">-rw-------. 1 root root   7299 6月  27 04:09 catalina.properties</span><br><span class=\"line\">-rw-------. 1 root root   1577 6月  27 04:09 context.xml</span><br><span class=\"line\">-rw-------. 1 root root   3387 6月  27 04:09 logging.properties</span><br><span class=\"line\">-rw-------. 1 root root   6458 6月  27 04:09 server.xml</span><br><span class=\"line\">-rw-------. 1 root root   2164 6月  27 04:09 tomcat-users.xml</span><br><span class=\"line\">-rw-------. 1 root root   2634 6月  27 04:09 tomcat-users.xsd</span><br><span class=\"line\">-rw-------. 1 root root 168496 6月  27 04:09 web.xml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&gt;</span><br><span class=\"line\">  &lt;!--</span><br><span class=\"line\">    Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class=\"line\">    contributor license agreements.  See the NOTICE file distributed with</span><br><span class=\"line\">    this work for additional information regarding copyright ownership.</span><br><span class=\"line\">    The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class=\"line\">    (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class=\"line\">   the License.  You may obtain a copy of the License at</span><br><span class=\"line\"> </span><br><span class=\"line\">       http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\"> </span><br><span class=\"line\">   Unless required by applicable law or agreed to in writing, software</span><br><span class=\"line\">   distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class=\"line\">   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"line\">   See the License for the specific language governing permissions and</span><br><span class=\"line\">   limitations under the License.</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\"> &lt;tomcat-users xmlns=&quot;http://tomcat.apache.org/xml&quot;</span><br><span class=\"line\">               xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">               xsi:schemaLocation=&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span><br><span class=\"line\">               version=&quot;1.0&quot;&gt;</span><br><span class=\"line\"> &lt;!--</span><br><span class=\"line\">   NOTE:  By default, no user is included in the &quot;manager-gui&quot; role required</span><br><span class=\"line\">   to operate the &quot;/manager/html&quot; web application.  If you wish to use this app,</span><br><span class=\"line\">   you must define such a user - the username and password are arbitrary. It is</span><br><span class=\"line\">   strongly recommended that you do NOT use one of the users in the commented out</span><br><span class=\"line\">   section below since they are intended for use with the examples web</span><br><span class=\"line\">   application.</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\"> &lt;!--</span><br><span class=\"line\">   NOTE:  The sample user and role entries below are intended for use with the</span><br><span class=\"line\">   examples web application. They are wrapped in a comment and thus are ignored</span><br><span class=\"line\">   when reading this file. If you wish to configure these users for use with the</span><br><span class=\"line\">   examples web application, do not forget to remove the &lt;!.. ..&gt; that surrounds</span><br><span class=\"line\">   them. You will also need to set the passwords to something appropriate.</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\"> &lt;!--</span><br><span class=\"line\">   &lt;role rolename=&quot;tomcat&quot;/&gt;</span><br><span class=\"line\">   &lt;role rolename=&quot;role1&quot;/&gt;</span><br><span class=\"line\">   &lt;user username=&quot;tomcat&quot; password=&quot;&lt;must-be-changed&gt;&quot; roles=&quot;tomcat&quot;/&gt;</span><br><span class=\"line\">   &lt;user username=&quot;both&quot; password=&quot;&lt;must-be-changed&gt;&quot; roles=&quot;tomcat,role1&quot;/&gt;</span><br><span class=\"line\">   &lt;user username=&quot;role1&quot; password=&quot;&lt;must-be-changed&gt;&quot; roles=&quot;role1&quot;/&gt;</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\"> &lt;/tomcat-users&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;role rolename=&quot;manager&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;manager-gui&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;admin&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;admin-gui&quot;/&gt;</span><br><span class=\"line\">&lt;user username=&quot;admin&quot; password=&quot;tomcat&quot; roles=&quot;admin-gui,admin,manager-gui,manager&quot;/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>现在启动tomcat ,登录查看信息</p>\n<p>进入界面后点击右侧<strong>ManagerApp</strong>  <strong>HostManager ** **ServerStatus</strong></p>\n</li>\n</ul>\n<ul>\n<li><p>tomcat 的三种运行模式</p>\n<ul>\n<li><p>bio</p>\n<p>默认的模式,性能非常低下,没有经过任何优化处理和支持</p>\n</li>\n<li><p>nio</p>\n<p>nio(new I/O),是Java SE 1.4 及 后续版本提供的一种新的I/O操作方式(即java.nio包及其子包).</p>\n<p>java nio是一个基于缓冲区 并能提供非阻塞I/O操作的JavaApi,因此nio也被看成是non-blockingI/O的</p>\n<p>缩写.它拥有比传统I/O操作(bio)更好的并发运行性能</p>\n</li>\n<li><p>apr</p>\n<p>安装起来最困难,但是从操作系统级别来解决异步的IO问题,大幅度的提高性能</p>\n</li>\n</ul>\n</li>\n<li><p>启动NIO模式</p>\n<ul>\n<li><p>修改server.xml里的Connector节点,修改protocol为org.apache.coyote.http11.Http11NioProtocol </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost tomcat-common]# cd conf</span><br><span class=\"line\">[root@localhost conf]# vim server.xml</span><br></pre></td></tr></table></figure>\n\n<p>修改前</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class=\"line\">              connectionTimeout=&quot;20000&quot;</span><br><span class=\"line\">               redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>修改后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=&quot;8080&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span><br><span class=\"line\">                 connectionTimeout=&quot;20000&quot;</span><br><span class=\"line\">                 redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>执行器(线程池)</p>\n<ul>\n<li><p>开启线程池</p>\n<p>配置,解开这段注释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Executor name=&quot;tomcatThreadPool&quot; namePrefix=&quot;catalina-exec-&quot;</span><br><span class=\"line\">        maxThreads=&quot;150&quot; minSpareThreads=&quot;4&quot;/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>修改Connector节点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=&quot;8080&quot; executor=&quot;tomcatThreadPool&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span><br><span class=\"line\">                connectionTimeout=&quot;20000&quot;</span><br><span class=\"line\">                redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>重新启动</p>\n</li>\n<li><p>参数说明</p>\n<p><img src=\"/2017/11/22/Tomcat优化简谈/.Tomcat%E4%BC%98%E5%8C%96%E7%AE%80%E8%B0%88/%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E.png\" alt></p>\n</li>\n<li><p>最佳实践</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Executor name=&quot;tomcatThreadPool&quot; namePrefix=&quot;catalina-exec-&quot;</span><br><span class=\"line\">        maxThreads=&quot;800&quot; minSpareThreads=&quot;100&quot; maxQueueSize=&quot;100&quot; prestartminSpareThreads=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>连接器(Connector)</p>\n<p>Connector 是Tomcat接收请求的入口,每个Connector有自己专属的监听端口</p>\n<p>Connector 有两种:HTTP Connector 和AJP Connector</p>\n<ul>\n<li>连接器的通用属性(注意高亮部分)</li>\n</ul>\n</li>\n</ul>\n<pre><code>| 属性                  | 描述                                       |\n| --------------------- | :-----------------------------------------|\n| allowTrace            | A boolean value whichcan be used to enable                                or disable the TRACE HTTP method. If not specified, this attribute is set to false.如果需要服务器能够处理用户的HAED/TRACE请求，这个值应该设置为true，默认值是false |\n| asyncTimeOut          | The default timeout forasynchronous requests in milliseconds. If not specified, this attribute is setto 10000 (10 seconds) 默认超不时候以毫秒为单位的异步恳求。若是没有指定，该属性被设置为10000（10秒） |\n| enableLookUps         |                                                              |\n| maxHeaderCount        | The maximum number of headers in a request that are allowed by the container. Arequest that contains more headers than the specified limit will be rejected. Avalue of less than 0 means no limit. If not specified, a default of 100 is used.容器允许的请求头字段的最大数目。请求中包含比指定的限制更多的头字段将被拒绝。值小于0表示没有限制。如果没有指定，默认设置为100 |\n| maxparameterCount     | The maximum number of parameter and value pairs (GET plus POST) which will beautomatically parsed by the container. Parameter and value pairs beyond thislimit will be ignored. A value of less than 0 means no limit. If not specified,a default of 10000 is used. Note that FailedRequestFilter filtercan be used to reject requests that hit thelimit.将被容器自动解析的最大数量的参数和值对（GET加上POST）。参数值对超出此限制将被忽略。值小于0表示没有限制。如果没有指定，默认为10000。请注意， FailedRequestFilter 过滤器可以用来拒绝达到了极限值的请求 |\n| maxPostSize           | 将被容器以FORMURL参数形式处理的最大长度（以字节为单位）的POST。通过设置此属性的值小于或等于0可以禁用该限制。如果没有指定，该属性被设置为2097152（2兆字节） |\n| maxSavePostSize       | 将被容器在FORM或CLIENT-CERT认证中保存/缓冲的POST的最大尺寸（以字节为单位）。对于这两种类型的身份验证，在用户身份验证之 前，POST将被保存/缓冲。对于POST CLIENT-CERT认证，处理该请求的SSL握手和缓冲清空期间，POST将被缓存。对于Form认证，POST将被保存，同时用户将被重定向到登陆 表单。POST将被一直保留直到用户成功认证或者认证请求关联的会话超时。将此属性设置为-1可以禁用此限制。将此属性设置为0，POST数据在身份验证 过程中将不被保存。如果没有指定，该属性设置为4096(4千字节) |\n| parseBodyMethods      | 以逗号分隔的HTTP方法列表，通过方法列表，等同于POST方法，request 正文将被解析成请求参数。这在RESTful应用程序要支持以POST式的语义解析PUT请求中是非常有用的。需要注意的是设置其他值（不是POST）会导致Tomcat的行为违反servlet规范的目的。在这里为了符合HTTP规范明确禁止HTTP方法TRACE。默认值是POST |\n| port                  | TheTCP port number on which this Connector will create a server socket and awaitincoming connections. Your operating system will allow only one serverapplication to listen to a particular port number on a particular IP address.If the special value of 0 (zero) is used, then Tomcat will select a free portat random to use for this connector. This is typically only useful in embeddedand testing applications.TCP端口号，连接器利用该端口号将创建一个服务器套接字，并等待传入的连接。你的操作系统将只允许一个服务器应用程序在一个特定的IP地址侦听特定的端口号。如果使用特殊值0（零），则Tomcat将为连接器随机选择一个空闲的端口。这是通常只用在嵌入式和测试应用程序 |\n| protocol              | TheTCP port number on which this Connector will create a server socket and awaitincoming connections. Your operating system will allow only one serverapplication to listen to a particular port number on a particular IP address.If the special value of 0 (zero) is used, then Tomcat will select a free portat random to use for this connector. This is typically only useful in embeddedand testing applications.TCP端口号，连接器利用该端口号将创建一个服务器套接字，并等待传入的连接。你的操作系统将只允许一个服务器应用程序在一个特定的IP地址侦听特定的端口号。如果使用特殊值0（零），则Tomcat将为连接器随机选择一个空闲的端口。这是通常只用在嵌入式和测试应用程序 |\n| proxyName             | 如果这个连接正在使用的代理服务器配置，配置该属性指定的服务器的名称，可以调用request.getServerName（）返回。有关更多信息，请参见代理支持. |\n| proxyPort             | 如果这个连接正在使用的代理服务器配置，配置该属性指定服务器端口，可以调用request.getServerPort（）返回。有关更多信息，请参见代理支持 |\n| redirectPort          | 如果该连接器支持非SSL请求，并且接收到的请求为满足安全约束需要SSL传输， Catalina 将自动将请求重定向到指定的端口号 |\n| scheme                | 如果你想调用request.isSecure（）收到此连接器的请求返回true，请该该属性设置为true。您希望SSL连接器或非SSL连接器接收数据通过一个SSL加速器，像加密卡，SSL设备，甚至一个web服务器。默认值是false |\n| URIEncoding           | 这将指定使用的字符编码，来解码URI字符。如果没有指定，ISO-88591将被使用 |\n| useBodyEncodignForURI | 这指定是否应该用于URI查询参数，而不是使用URIEncoding contentType中指定的编码。此设置兼容性Tomcat 4.1.x版（该版在contentType中指定编码，或者使用request.setCharacterEncoding的方法显式设置（参数为 URL传来的值）。默认值false。 |\n| xpoweredBy            | 将此属性设置为true会导致Tomcat支持使用Servlet规范的通知，（在规范中推荐使用头字段）。默认值是假的 |\n| useIPVHosts           | 将该属性设置为true会导致Tomcat使用收到请求的IP地址，来确定将请求发送到哪个主机。默认值是false |\n\n**ToBeContinue**</code></pre>","site":{"data":{}},"excerpt":"<p>简单谈下Tomcat的配置优化</p>","more":"<p></p>\n<blockquote>\n<p>网上流传的tomcat优化配置,记录下</p>\n</blockquote>\n<ul>\n<li><p>配置tomcat管理员账户</p>\n<p>这里的tomcat 就以虚拟机上的tomcat 为例,版本为8.0.45</p>\n<p>在conf/tomcat-users.xml下添加用户</p>\n<p>tomcat 目录如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x. 2 root root  4096 8月   9 04:10 bin</span><br><span class=\"line\">drwxr-xr-x. 2 root root  4096 6月  27 04:09 conf</span><br><span class=\"line\">drwxr-xr-x. 2 root root  4096 8月   9 04:10 lib</span><br><span class=\"line\">-rw-r--r--. 1 root root 57011 6月  27 04:09 LICENSE</span><br><span class=\"line\">drwxr-xr-x. 2 root root     6 6月  27 04:06 logs</span><br><span class=\"line\">-rw-r--r--. 1 root root  1444 6月  27 04:09 NOTICE</span><br><span class=\"line\">-rw-r--r--. 1 root root  6741 6月  27 04:09 RELEASE-NOTES</span><br><span class=\"line\">-rw-r--r--. 1 root root 16195 6月  27 04:09 RUNNING.txt</span><br><span class=\"line\">drwxr-xr-x. 2 root root    29 8月   9 04:10 temp</span><br><span class=\"line\">drwxr-xr-x. 7 root root    76 6月  27 04:08 webapps</span><br><span class=\"line\">drwxr-xr-x. 2 root root     6 6月  27 04:06 work</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/soft/tomcat-common/conf</span><br><span class=\"line\">[root@localhost conf]# ll</span><br><span class=\"line\">总用量 216</span><br><span class=\"line\">-rw-------. 1 root root  13688 6月  27 04:09 catalina.policy</span><br><span class=\"line\">-rw-------. 1 root root   7299 6月  27 04:09 catalina.properties</span><br><span class=\"line\">-rw-------. 1 root root   1577 6月  27 04:09 context.xml</span><br><span class=\"line\">-rw-------. 1 root root   3387 6月  27 04:09 logging.properties</span><br><span class=\"line\">-rw-------. 1 root root   6458 6月  27 04:09 server.xml</span><br><span class=\"line\">-rw-------. 1 root root   2164 6月  27 04:09 tomcat-users.xml</span><br><span class=\"line\">-rw-------. 1 root root   2634 6月  27 04:09 tomcat-users.xsd</span><br><span class=\"line\">-rw-------. 1 root root 168496 6月  27 04:09 web.xml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&gt;</span><br><span class=\"line\">  &lt;!--</span><br><span class=\"line\">    Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class=\"line\">    contributor license agreements.  See the NOTICE file distributed with</span><br><span class=\"line\">    this work for additional information regarding copyright ownership.</span><br><span class=\"line\">    The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class=\"line\">    (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class=\"line\">   the License.  You may obtain a copy of the License at</span><br><span class=\"line\"> </span><br><span class=\"line\">       http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\"> </span><br><span class=\"line\">   Unless required by applicable law or agreed to in writing, software</span><br><span class=\"line\">   distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class=\"line\">   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"line\">   See the License for the specific language governing permissions and</span><br><span class=\"line\">   limitations under the License.</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\"> &lt;tomcat-users xmlns=&quot;http://tomcat.apache.org/xml&quot;</span><br><span class=\"line\">               xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">               xsi:schemaLocation=&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span><br><span class=\"line\">               version=&quot;1.0&quot;&gt;</span><br><span class=\"line\"> &lt;!--</span><br><span class=\"line\">   NOTE:  By default, no user is included in the &quot;manager-gui&quot; role required</span><br><span class=\"line\">   to operate the &quot;/manager/html&quot; web application.  If you wish to use this app,</span><br><span class=\"line\">   you must define such a user - the username and password are arbitrary. It is</span><br><span class=\"line\">   strongly recommended that you do NOT use one of the users in the commented out</span><br><span class=\"line\">   section below since they are intended for use with the examples web</span><br><span class=\"line\">   application.</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\"> &lt;!--</span><br><span class=\"line\">   NOTE:  The sample user and role entries below are intended for use with the</span><br><span class=\"line\">   examples web application. They are wrapped in a comment and thus are ignored</span><br><span class=\"line\">   when reading this file. If you wish to configure these users for use with the</span><br><span class=\"line\">   examples web application, do not forget to remove the &lt;!.. ..&gt; that surrounds</span><br><span class=\"line\">   them. You will also need to set the passwords to something appropriate.</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\"> &lt;!--</span><br><span class=\"line\">   &lt;role rolename=&quot;tomcat&quot;/&gt;</span><br><span class=\"line\">   &lt;role rolename=&quot;role1&quot;/&gt;</span><br><span class=\"line\">   &lt;user username=&quot;tomcat&quot; password=&quot;&lt;must-be-changed&gt;&quot; roles=&quot;tomcat&quot;/&gt;</span><br><span class=\"line\">   &lt;user username=&quot;both&quot; password=&quot;&lt;must-be-changed&gt;&quot; roles=&quot;tomcat,role1&quot;/&gt;</span><br><span class=\"line\">   &lt;user username=&quot;role1&quot; password=&quot;&lt;must-be-changed&gt;&quot; roles=&quot;role1&quot;/&gt;</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\"> &lt;/tomcat-users&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;role rolename=&quot;manager&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;manager-gui&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;admin&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;admin-gui&quot;/&gt;</span><br><span class=\"line\">&lt;user username=&quot;admin&quot; password=&quot;tomcat&quot; roles=&quot;admin-gui,admin,manager-gui,manager&quot;/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>现在启动tomcat ,登录查看信息</p>\n<p>进入界面后点击右侧<strong>ManagerApp</strong>  <strong>HostManager ** **ServerStatus</strong></p>\n</li>\n</ul>\n<ul>\n<li><p>tomcat 的三种运行模式</p>\n<ul>\n<li><p>bio</p>\n<p>默认的模式,性能非常低下,没有经过任何优化处理和支持</p>\n</li>\n<li><p>nio</p>\n<p>nio(new I/O),是Java SE 1.4 及 后续版本提供的一种新的I/O操作方式(即java.nio包及其子包).</p>\n<p>java nio是一个基于缓冲区 并能提供非阻塞I/O操作的JavaApi,因此nio也被看成是non-blockingI/O的</p>\n<p>缩写.它拥有比传统I/O操作(bio)更好的并发运行性能</p>\n</li>\n<li><p>apr</p>\n<p>安装起来最困难,但是从操作系统级别来解决异步的IO问题,大幅度的提高性能</p>\n</li>\n</ul>\n</li>\n<li><p>启动NIO模式</p>\n<ul>\n<li><p>修改server.xml里的Connector节点,修改protocol为org.apache.coyote.http11.Http11NioProtocol </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost tomcat-common]# cd conf</span><br><span class=\"line\">[root@localhost conf]# vim server.xml</span><br></pre></td></tr></table></figure>\n\n<p>修改前</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class=\"line\">              connectionTimeout=&quot;20000&quot;</span><br><span class=\"line\">               redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>修改后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=&quot;8080&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span><br><span class=\"line\">                 connectionTimeout=&quot;20000&quot;</span><br><span class=\"line\">                 redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>执行器(线程池)</p>\n<ul>\n<li><p>开启线程池</p>\n<p>配置,解开这段注释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Executor name=&quot;tomcatThreadPool&quot; namePrefix=&quot;catalina-exec-&quot;</span><br><span class=\"line\">        maxThreads=&quot;150&quot; minSpareThreads=&quot;4&quot;/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>修改Connector节点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=&quot;8080&quot; executor=&quot;tomcatThreadPool&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span><br><span class=\"line\">                connectionTimeout=&quot;20000&quot;</span><br><span class=\"line\">                redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>重新启动</p>\n</li>\n<li><p>参数说明</p>\n<p><img src=\"/2017/11/22/Tomcat优化简谈/.Tomcat%E4%BC%98%E5%8C%96%E7%AE%80%E8%B0%88/%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E.png\" alt></p>\n</li>\n<li><p>最佳实践</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Executor name=&quot;tomcatThreadPool&quot; namePrefix=&quot;catalina-exec-&quot;</span><br><span class=\"line\">        maxThreads=&quot;800&quot; minSpareThreads=&quot;100&quot; maxQueueSize=&quot;100&quot; prestartminSpareThreads=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>连接器(Connector)</p>\n<p>Connector 是Tomcat接收请求的入口,每个Connector有自己专属的监听端口</p>\n<p>Connector 有两种:HTTP Connector 和AJP Connector</p>\n<ul>\n<li>连接器的通用属性(注意高亮部分)</li>\n</ul>\n</li>\n</ul>\n<pre><code>| 属性                  | 描述                                       |\n| --------------------- | :-----------------------------------------|\n| allowTrace            | A boolean value whichcan be used to enable                                or disable the TRACE HTTP method. If not specified, this attribute is set to false.如果需要服务器能够处理用户的HAED/TRACE请求，这个值应该设置为true，默认值是false |\n| asyncTimeOut          | The default timeout forasynchronous requests in milliseconds. If not specified, this attribute is setto 10000 (10 seconds) 默认超不时候以毫秒为单位的异步恳求。若是没有指定，该属性被设置为10000（10秒） |\n| enableLookUps         |                                                              |\n| maxHeaderCount        | The maximum number of headers in a request that are allowed by the container. Arequest that contains more headers than the specified limit will be rejected. Avalue of less than 0 means no limit. If not specified, a default of 100 is used.容器允许的请求头字段的最大数目。请求中包含比指定的限制更多的头字段将被拒绝。值小于0表示没有限制。如果没有指定，默认设置为100 |\n| maxparameterCount     | The maximum number of parameter and value pairs (GET plus POST) which will beautomatically parsed by the container. Parameter and value pairs beyond thislimit will be ignored. A value of less than 0 means no limit. If not specified,a default of 10000 is used. Note that FailedRequestFilter filtercan be used to reject requests that hit thelimit.将被容器自动解析的最大数量的参数和值对（GET加上POST）。参数值对超出此限制将被忽略。值小于0表示没有限制。如果没有指定，默认为10000。请注意， FailedRequestFilter 过滤器可以用来拒绝达到了极限值的请求 |\n| maxPostSize           | 将被容器以FORMURL参数形式处理的最大长度（以字节为单位）的POST。通过设置此属性的值小于或等于0可以禁用该限制。如果没有指定，该属性被设置为2097152（2兆字节） |\n| maxSavePostSize       | 将被容器在FORM或CLIENT-CERT认证中保存/缓冲的POST的最大尺寸（以字节为单位）。对于这两种类型的身份验证，在用户身份验证之 前，POST将被保存/缓冲。对于POST CLIENT-CERT认证，处理该请求的SSL握手和缓冲清空期间，POST将被缓存。对于Form认证，POST将被保存，同时用户将被重定向到登陆 表单。POST将被一直保留直到用户成功认证或者认证请求关联的会话超时。将此属性设置为-1可以禁用此限制。将此属性设置为0，POST数据在身份验证 过程中将不被保存。如果没有指定，该属性设置为4096(4千字节) |\n| parseBodyMethods      | 以逗号分隔的HTTP方法列表，通过方法列表，等同于POST方法，request 正文将被解析成请求参数。这在RESTful应用程序要支持以POST式的语义解析PUT请求中是非常有用的。需要注意的是设置其他值（不是POST）会导致Tomcat的行为违反servlet规范的目的。在这里为了符合HTTP规范明确禁止HTTP方法TRACE。默认值是POST |\n| port                  | TheTCP port number on which this Connector will create a server socket and awaitincoming connections. Your operating system will allow only one serverapplication to listen to a particular port number on a particular IP address.If the special value of 0 (zero) is used, then Tomcat will select a free portat random to use for this connector. This is typically only useful in embeddedand testing applications.TCP端口号，连接器利用该端口号将创建一个服务器套接字，并等待传入的连接。你的操作系统将只允许一个服务器应用程序在一个特定的IP地址侦听特定的端口号。如果使用特殊值0（零），则Tomcat将为连接器随机选择一个空闲的端口。这是通常只用在嵌入式和测试应用程序 |\n| protocol              | TheTCP port number on which this Connector will create a server socket and awaitincoming connections. Your operating system will allow only one serverapplication to listen to a particular port number on a particular IP address.If the special value of 0 (zero) is used, then Tomcat will select a free portat random to use for this connector. This is typically only useful in embeddedand testing applications.TCP端口号，连接器利用该端口号将创建一个服务器套接字，并等待传入的连接。你的操作系统将只允许一个服务器应用程序在一个特定的IP地址侦听特定的端口号。如果使用特殊值0（零），则Tomcat将为连接器随机选择一个空闲的端口。这是通常只用在嵌入式和测试应用程序 |\n| proxyName             | 如果这个连接正在使用的代理服务器配置，配置该属性指定的服务器的名称，可以调用request.getServerName（）返回。有关更多信息，请参见代理支持. |\n| proxyPort             | 如果这个连接正在使用的代理服务器配置，配置该属性指定服务器端口，可以调用request.getServerPort（）返回。有关更多信息，请参见代理支持 |\n| redirectPort          | 如果该连接器支持非SSL请求，并且接收到的请求为满足安全约束需要SSL传输， Catalina 将自动将请求重定向到指定的端口号 |\n| scheme                | 如果你想调用request.isSecure（）收到此连接器的请求返回true，请该该属性设置为true。您希望SSL连接器或非SSL连接器接收数据通过一个SSL加速器，像加密卡，SSL设备，甚至一个web服务器。默认值是false |\n| URIEncoding           | 这将指定使用的字符编码，来解码URI字符。如果没有指定，ISO-88591将被使用 |\n| useBodyEncodignForURI | 这指定是否应该用于URI查询参数，而不是使用URIEncoding contentType中指定的编码。此设置兼容性Tomcat 4.1.x版（该版在contentType中指定编码，或者使用request.setCharacterEncoding的方法显式设置（参数为 URL传来的值）。默认值false。 |\n| xpoweredBy            | 将此属性设置为true会导致Tomcat支持使用Servlet规范的通知，（在规范中推荐使用头字段）。默认值是假的 |\n| useIPVHosts           | 将该属性设置为true会导致Tomcat使用收到请求的IP地址，来确定将请求发送到哪个主机。默认值是false |\n\n**ToBeContinue**</code></pre>"},{"title":"Ubuntu搭建nextcloud","date":"2017-11-18T16:25:59.000Z","_content":"\n在linux服务器上搭建私有云<!--more-->\n\n\n\n## 配置LAMP 环境\n\n- 更新软件列表\n\n  ```\n  sudo apt update\n  ```\n\n- 执行软件更新\n\n  ```\n  sudo apt -y upgrade\n  ```\n\n- 安装apache\n\n  ` sudo apt -y upgrade`  \n\n- 安装MariaDB \n\n  `  sudo apt install mariadb-server`  \n\n\n- 安装PHP7.0\n\n  ` sudo apt install libapache2-mod-php7.0`  \n\n- 安装PHP扩展 \n\n  `php7.0-gd php7.0-json php7.0-mysql php7.0-curl php7.0-mbstringphp7.0-intl php7.0-mcrypt php-imagick php7.0-xml php7.0-zip ` \n\n## 安装 nextCloud\n\n- 下载源码包 \n\n\n- 访问官网下载 <https://nextcloud.com/changelog/> 当前最新版本 12.0.3\n\n  ​ `wget https://download.nextcloud.com/server/releases/nextcloud-12.0.3.tar.bz2 `\n\n- 解压源码包 \n\n  ` \ttar jxf nextcloud-12.0.3.tar.bz2 ` \n\n- 复制源代码到web服务器目录\n\n  `sudo cp -r nextcloud /var/www/`\n\n- 设置nextcloud目录权限  \n\n  ` sudo chown -R www-data:www-data /var/www/nextcloud`\n\n## 配置apache虚拟主机\n\n- 创建nexcloud.conf 虚拟主机配置文件\n\n\n- 在域名管理平台新增一条A记录 指向服务器公网ip \n\n- 让虚拟机生效\n\n  ` sudo nano /etc/apache2/sites-available/nextcloud.conf`\n\n  将一下信息粘贴到配置文件\n\n  ```xml\n    ServerName d.spacexplore.xyz\n      DocumentRoot /var/www/nextcloud/\n      <Directory /var/www/nextcloud/>\n\n        Options +FollowSymlinks\n        AllowOverride All\n        \n        <IfModule mod_dav.c>\n          Dav off\n        </IfModule>\n        \n        SetEnv HOME /var/www/nextcloud\n        SetEnv HTTP_HOME /var/www/nextcloud\n      </Directory>\n    RewriteEngine on\n    RewriteCond %{SERVER_NAME} =d.spacexplore.xyz\n    RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]\n    </VirtualHost>\n  ```\n\n- 让虚拟主机生效\n\n  ```shell\n   sudo a2ensite nextcloud.conf\n  ```\n\n- 启用必要的apache模块\n\n  ```\n  sudo a2enmod rewrite headers env dir mime ssl\n  ```\n\n- 重启 apache 服务器\n\n  ```\n   sudo service apache2 restart\n  ```\n\n## mariaDB数据库设置\n\n* 数据库初始化 \n\n  - 通过命令对数据库做安全初始化设置\n\n    ```\n    sudo mysql_secure_installation\n    ```\n\n  - 创建nextcloud 数据库账号密码\n\n    ```\n    sudo mysql -uroot;\n    CREATE DATABASE 'nextcloud';\n    CREATE USER 'nextcloud'@'localhost' IDENTIFIED BY 'password';\n    GRANT ALL PRIVILEGES ON nextcloud.* TO'nextcloud'@'localhost';\n    flush privileges;\n    exit;\n    ```\n\n* 初始化nextcloud\n\n  - 在浏览器中访问绑定的域名进行nextcloud初始化操作,暂不记录\n\n## 启用ssl安全连接\n\n* 安装certbot\n\n  - 添加 certbot PPA软件源 \n\n    ```\n    sudo add-apt-repository -y ppa:certbot/certbo\n    ```\n\n  - 刷新软件列表\n\n    ```\n    sudo apt update\t\n    ```\n\n* 安装apache的certbot\n\n  ```\n  sudo apt install python-certbot-apache  \n  ```\n\n\n- 获取ssl证书\n\n- 运行certbot程序 \n\n  ```\n  sudo certbot --apache\n  ```\n\n- 提示输入email接收通知和重置秘钥\n\n  ```\n   Enter email address (used for urgent renewal and security notices) (Enter 'c' to\n   cancel):test@torchtree.com\n  ```\n\n- 询问是否接收用户协议\n\n  ```\n      Please read the Terms of Service at\n      https://letsencrypt.org/documents/LE-SA-v1.1.1-August-1-2016.pdf. You must agree\n      in order to register with the ACME server at\n      https://acme-v01.api.letsencrypt.org/directory\n      -------------------------------------------------------------------------------\n      (A)gree/(C)ancel: A\n  ```\n\n- 询问是否愿意分享email 否\n\n  ```\n   \t-------------------------------------------------------------------------------\n      Would you be willing to share your email address with the Electronic Frontier\n      Foundation, a founding partner of the Let's Encrypt project and the non-profit\n      organization that develops Certbot? We'd like to send you email about EFF and\n      our work to encrypt the web, protect its users and defend digital rights.\n      -------------------------------------------------------------------------------\n      (Y)es/(N)o: N\n  ```\n\n- 询问为哪个域名获取ssl证书 1\n\n  ```\n   \tWhich names would you like to activate HTTPS for?\n      -------------------------------------------------------------------------------\n      1: d.spacexplore.xyz\n      -------------------------------------------------------------------------------\n      Select the appropriate numbers separated by commas and/or spaces, or leave input\n      blank to select all options shown (Enter 'c' to cancel):1\n  ```\n\n- 询问使用模式 secure \n\n  ```\n      Please choose whether HTTPS access is required or optional.\n      -------------------------------------------------------------------------------\n      1: Easy - Allow both HTTP and HTTPS access to these sites\n      2: Secure - Make all requests redirect to secure HTTPS access\n      -------------------------------------------------------------------------------\n      Select the appropriate number [1-2] then [enter] (press 'c' to cancel): 2\n  ```\n\n\n## 修改owncloud 上传文件存储目录 \n\n>  如上所示 已经创建好了nextcloud应用\n\n> 那么已经创建好了应用,需要进行更改文件存储位置\n\n* 停止web服务 即将apache服务器停止 \n\n  ```\n   service apache2 stop\n  ```\n\n*  查看config/config.php文件中已有的datadirectory 如(/var/www/nextcloud/data)\n\n  ```\n  root@SkyEyE:/var/www/nextcloud/config# vim config.php\n  ```\n\n    当然我这里配置文件已经修改了\n\n  ```\n  <?php\n    $CONFIG = array (\n      'instanceid' => 'oclvivd8451p',\n      'passwordsalt' => 'kukoaeTPA0rbukretD7I0G1IIfIb0e',\n      'secret' => 'QoVb9IEJPAom7kZTzMsIzXmAMGiMYciuZLEfDRUSX/rmC5xA',\n      'trusted_domains' =>\n      array (\n\n        0 => 'd.spacexplore.xyz',\n      ),\n      'datadirectory' => '/mnt/bs/nextcloud/data',\n      'overwrite.cli.url' => 'http://d.spacexplore.xyz',\n      'dbtype' => 'mysql',\n      'version' => '12.0.3.3',\n      'dbname' => 'nextcloud',\n      'dbhost' => 'localhost:3306',\n      'dbport' => '',\n      'dbtableprefix' => 'oc_',\n      'dbuser' => 'XXXXXX',\n      'dbpassword' => 'XXXXXXX',\n      'installed' => true,\n    );\n\n  ```\n\n*  修改 config/config,php 文件中的datadirectory (/xxx/xxx)\n\n* 将/var/www/nextcloud/data 目录下的所有文件移动到新的 /mnt/bs/data/ 目录下\n\n*  修改  /mnt/bs/data/目录所属的组及用户与原 /var/www/nextcloud/data 目录相同, 例如将所属组和用户都修改为www\n\n  ```\n  chown -R www-data:www-data /media/usbdisk/ocdata\n  ```\n\n*  启动apache服务器 进行管理界面查看 试上传一个文件 进入linux系统查看上传的文件是否在新的存储目录\n\n  ```\n  service apache2 start\n  ```\n\n  ​","source":"_posts/Ubuntu搭建nextcloud.md","raw":"---\ntitle: Ubuntu搭建nextcloud\ndate: 2017-11-19 00:25:59\ntags: [Linux]\ncategories: [Linux]\n---\n\n在linux服务器上搭建私有云<!--more-->\n\n\n\n## 配置LAMP 环境\n\n- 更新软件列表\n\n  ```\n  sudo apt update\n  ```\n\n- 执行软件更新\n\n  ```\n  sudo apt -y upgrade\n  ```\n\n- 安装apache\n\n  ` sudo apt -y upgrade`  \n\n- 安装MariaDB \n\n  `  sudo apt install mariadb-server`  \n\n\n- 安装PHP7.0\n\n  ` sudo apt install libapache2-mod-php7.0`  \n\n- 安装PHP扩展 \n\n  `php7.0-gd php7.0-json php7.0-mysql php7.0-curl php7.0-mbstringphp7.0-intl php7.0-mcrypt php-imagick php7.0-xml php7.0-zip ` \n\n## 安装 nextCloud\n\n- 下载源码包 \n\n\n- 访问官网下载 <https://nextcloud.com/changelog/> 当前最新版本 12.0.3\n\n  ​ `wget https://download.nextcloud.com/server/releases/nextcloud-12.0.3.tar.bz2 `\n\n- 解压源码包 \n\n  ` \ttar jxf nextcloud-12.0.3.tar.bz2 ` \n\n- 复制源代码到web服务器目录\n\n  `sudo cp -r nextcloud /var/www/`\n\n- 设置nextcloud目录权限  \n\n  ` sudo chown -R www-data:www-data /var/www/nextcloud`\n\n## 配置apache虚拟主机\n\n- 创建nexcloud.conf 虚拟主机配置文件\n\n\n- 在域名管理平台新增一条A记录 指向服务器公网ip \n\n- 让虚拟机生效\n\n  ` sudo nano /etc/apache2/sites-available/nextcloud.conf`\n\n  将一下信息粘贴到配置文件\n\n  ```xml\n    ServerName d.spacexplore.xyz\n      DocumentRoot /var/www/nextcloud/\n      <Directory /var/www/nextcloud/>\n\n        Options +FollowSymlinks\n        AllowOverride All\n        \n        <IfModule mod_dav.c>\n          Dav off\n        </IfModule>\n        \n        SetEnv HOME /var/www/nextcloud\n        SetEnv HTTP_HOME /var/www/nextcloud\n      </Directory>\n    RewriteEngine on\n    RewriteCond %{SERVER_NAME} =d.spacexplore.xyz\n    RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]\n    </VirtualHost>\n  ```\n\n- 让虚拟主机生效\n\n  ```shell\n   sudo a2ensite nextcloud.conf\n  ```\n\n- 启用必要的apache模块\n\n  ```\n  sudo a2enmod rewrite headers env dir mime ssl\n  ```\n\n- 重启 apache 服务器\n\n  ```\n   sudo service apache2 restart\n  ```\n\n## mariaDB数据库设置\n\n* 数据库初始化 \n\n  - 通过命令对数据库做安全初始化设置\n\n    ```\n    sudo mysql_secure_installation\n    ```\n\n  - 创建nextcloud 数据库账号密码\n\n    ```\n    sudo mysql -uroot;\n    CREATE DATABASE 'nextcloud';\n    CREATE USER 'nextcloud'@'localhost' IDENTIFIED BY 'password';\n    GRANT ALL PRIVILEGES ON nextcloud.* TO'nextcloud'@'localhost';\n    flush privileges;\n    exit;\n    ```\n\n* 初始化nextcloud\n\n  - 在浏览器中访问绑定的域名进行nextcloud初始化操作,暂不记录\n\n## 启用ssl安全连接\n\n* 安装certbot\n\n  - 添加 certbot PPA软件源 \n\n    ```\n    sudo add-apt-repository -y ppa:certbot/certbo\n    ```\n\n  - 刷新软件列表\n\n    ```\n    sudo apt update\t\n    ```\n\n* 安装apache的certbot\n\n  ```\n  sudo apt install python-certbot-apache  \n  ```\n\n\n- 获取ssl证书\n\n- 运行certbot程序 \n\n  ```\n  sudo certbot --apache\n  ```\n\n- 提示输入email接收通知和重置秘钥\n\n  ```\n   Enter email address (used for urgent renewal and security notices) (Enter 'c' to\n   cancel):test@torchtree.com\n  ```\n\n- 询问是否接收用户协议\n\n  ```\n      Please read the Terms of Service at\n      https://letsencrypt.org/documents/LE-SA-v1.1.1-August-1-2016.pdf. You must agree\n      in order to register with the ACME server at\n      https://acme-v01.api.letsencrypt.org/directory\n      -------------------------------------------------------------------------------\n      (A)gree/(C)ancel: A\n  ```\n\n- 询问是否愿意分享email 否\n\n  ```\n   \t-------------------------------------------------------------------------------\n      Would you be willing to share your email address with the Electronic Frontier\n      Foundation, a founding partner of the Let's Encrypt project and the non-profit\n      organization that develops Certbot? We'd like to send you email about EFF and\n      our work to encrypt the web, protect its users and defend digital rights.\n      -------------------------------------------------------------------------------\n      (Y)es/(N)o: N\n  ```\n\n- 询问为哪个域名获取ssl证书 1\n\n  ```\n   \tWhich names would you like to activate HTTPS for?\n      -------------------------------------------------------------------------------\n      1: d.spacexplore.xyz\n      -------------------------------------------------------------------------------\n      Select the appropriate numbers separated by commas and/or spaces, or leave input\n      blank to select all options shown (Enter 'c' to cancel):1\n  ```\n\n- 询问使用模式 secure \n\n  ```\n      Please choose whether HTTPS access is required or optional.\n      -------------------------------------------------------------------------------\n      1: Easy - Allow both HTTP and HTTPS access to these sites\n      2: Secure - Make all requests redirect to secure HTTPS access\n      -------------------------------------------------------------------------------\n      Select the appropriate number [1-2] then [enter] (press 'c' to cancel): 2\n  ```\n\n\n## 修改owncloud 上传文件存储目录 \n\n>  如上所示 已经创建好了nextcloud应用\n\n> 那么已经创建好了应用,需要进行更改文件存储位置\n\n* 停止web服务 即将apache服务器停止 \n\n  ```\n   service apache2 stop\n  ```\n\n*  查看config/config.php文件中已有的datadirectory 如(/var/www/nextcloud/data)\n\n  ```\n  root@SkyEyE:/var/www/nextcloud/config# vim config.php\n  ```\n\n    当然我这里配置文件已经修改了\n\n  ```\n  <?php\n    $CONFIG = array (\n      'instanceid' => 'oclvivd8451p',\n      'passwordsalt' => 'kukoaeTPA0rbukretD7I0G1IIfIb0e',\n      'secret' => 'QoVb9IEJPAom7kZTzMsIzXmAMGiMYciuZLEfDRUSX/rmC5xA',\n      'trusted_domains' =>\n      array (\n\n        0 => 'd.spacexplore.xyz',\n      ),\n      'datadirectory' => '/mnt/bs/nextcloud/data',\n      'overwrite.cli.url' => 'http://d.spacexplore.xyz',\n      'dbtype' => 'mysql',\n      'version' => '12.0.3.3',\n      'dbname' => 'nextcloud',\n      'dbhost' => 'localhost:3306',\n      'dbport' => '',\n      'dbtableprefix' => 'oc_',\n      'dbuser' => 'XXXXXX',\n      'dbpassword' => 'XXXXXXX',\n      'installed' => true,\n    );\n\n  ```\n\n*  修改 config/config,php 文件中的datadirectory (/xxx/xxx)\n\n* 将/var/www/nextcloud/data 目录下的所有文件移动到新的 /mnt/bs/data/ 目录下\n\n*  修改  /mnt/bs/data/目录所属的组及用户与原 /var/www/nextcloud/data 目录相同, 例如将所属组和用户都修改为www\n\n  ```\n  chown -R www-data:www-data /media/usbdisk/ocdata\n  ```\n\n*  启动apache服务器 进行管理界面查看 试上传一个文件 进入linux系统查看上传的文件是否在新的存储目录\n\n  ```\n  service apache2 start\n  ```\n\n  ​","slug":"Ubuntu搭建nextcloud","published":1,"updated":"2022-09-03T07:30:55.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz85i002otwfanht0rpsw","content":"<p>在linux服务器上搭建私有云<a id=\"more\"></a></p>\n<h2 id=\"配置LAMP-环境\"><a href=\"#配置LAMP-环境\" class=\"headerlink\" title=\"配置LAMP 环境\"></a>配置LAMP 环境</h2><ul>\n<li><p>更新软件列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行软件更新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt -y upgrade</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装apache</p>\n<p><code>sudo apt -y upgrade</code>  </p>\n</li>\n<li><p>安装MariaDB </p>\n<p><code>sudo apt install mariadb-server</code>  </p>\n</li>\n</ul>\n<ul>\n<li><p>安装PHP7.0</p>\n<p><code>sudo apt install libapache2-mod-php7.0</code>  </p>\n</li>\n<li><p>安装PHP扩展 </p>\n<p><code>php7.0-gd php7.0-json php7.0-mysql php7.0-curl php7.0-mbstringphp7.0-intl php7.0-mcrypt php-imagick php7.0-xml php7.0-zip</code> </p>\n</li>\n</ul>\n<h2 id=\"安装-nextCloud\"><a href=\"#安装-nextCloud\" class=\"headerlink\" title=\"安装 nextCloud\"></a>安装 nextCloud</h2><ul>\n<li>下载源码包 </li>\n</ul>\n<ul>\n<li><p>访问官网下载 <a href=\"https://nextcloud.com/changelog/\" target=\"_blank\" rel=\"noopener\">https://nextcloud.com/changelog/</a> 当前最新版本 12.0.3</p>\n<p>​ <code>wget https://download.nextcloud.com/server/releases/nextcloud-12.0.3.tar.bz2</code></p>\n</li>\n<li><p>解压源码包 </p>\n<p><code>tar jxf nextcloud-12.0.3.tar.bz2</code> </p>\n</li>\n<li><p>复制源代码到web服务器目录</p>\n<p><code>sudo cp -r nextcloud /var/www/</code></p>\n</li>\n<li><p>设置nextcloud目录权限  </p>\n<p><code>sudo chown -R www-data:www-data /var/www/nextcloud</code></p>\n</li>\n</ul>\n<h2 id=\"配置apache虚拟主机\"><a href=\"#配置apache虚拟主机\" class=\"headerlink\" title=\"配置apache虚拟主机\"></a>配置apache虚拟主机</h2><ul>\n<li>创建nexcloud.conf 虚拟主机配置文件</li>\n</ul>\n<ul>\n<li><p>在域名管理平台新增一条A记录 指向服务器公网ip </p>\n</li>\n<li><p>让虚拟机生效</p>\n<p><code>sudo nano /etc/apache2/sites-available/nextcloud.conf</code></p>\n<p>将一下信息粘贴到配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServerName d.spacexplore.xyz</span><br><span class=\"line\">  DocumentRoot /var/www/nextcloud/</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Directory</span> /<span class=\"attr\">var</span>/<span class=\"attr\">www</span>/<span class=\"attr\">nextcloud</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Options +FollowSymlinks</span><br><span class=\"line\">    AllowOverride All</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">IfModule</span> <span class=\"attr\">mod_dav.c</span>&gt;</span></span><br><span class=\"line\">      Dav off</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">IfModule</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    SetEnv HOME /var/www/nextcloud</span><br><span class=\"line\">    SetEnv HTTP_HOME /var/www/nextcloud</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Directory</span>&gt;</span></span><br><span class=\"line\">RewriteEngine on</span><br><span class=\"line\">RewriteCond %&#123;SERVER_NAME&#125; =d.spacexplore.xyz</span><br><span class=\"line\">RewriteRule ^ https://%&#123;SERVER_NAME&#125;%&#123;REQUEST_URI&#125; [END,NE,R=permanent]</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">VirtualHost</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>让虚拟主机生效</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2ensite nextcloud.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启用必要的apache模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2enmod rewrite headers env dir mime ssl</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启 apache 服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"mariaDB数据库设置\"><a href=\"#mariaDB数据库设置\" class=\"headerlink\" title=\"mariaDB数据库设置\"></a>mariaDB数据库设置</h2><ul>\n<li><p>数据库初始化 </p>\n<ul>\n<li><p>通过命令对数据库做安全初始化设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建nextcloud 数据库账号密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mysql -uroot;</span><br><span class=\"line\">CREATE DATABASE &apos;nextcloud&apos;;</span><br><span class=\"line\">CREATE USER &apos;nextcloud&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;password&apos;;</span><br><span class=\"line\">GRANT ALL PRIVILEGES ON nextcloud.* TO&apos;nextcloud&apos;@&apos;localhost&apos;;</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\">exit;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>初始化nextcloud</p>\n<ul>\n<li>在浏览器中访问绑定的域名进行nextcloud初始化操作,暂不记录</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"启用ssl安全连接\"><a href=\"#启用ssl安全连接\" class=\"headerlink\" title=\"启用ssl安全连接\"></a>启用ssl安全连接</h2><ul>\n<li><p>安装certbot</p>\n<ul>\n<li><p>添加 certbot PPA软件源 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository -y ppa:certbot/certbo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>刷新软件列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>安装apache的certbot</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python-certbot-apache</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>获取ssl证书</p>\n</li>\n<li><p>运行certbot程序 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --apache</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提示输入email接收通知和重置秘钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter email address (used for urgent renewal and security notices) (Enter &apos;c&apos; to</span><br><span class=\"line\">cancel):test@torchtree.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>询问是否接收用户协议</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please read the Terms of Service at</span><br><span class=\"line\">https://letsencrypt.org/documents/LE-SA-v1.1.1-August-1-2016.pdf. You must agree</span><br><span class=\"line\">in order to register with the ACME server at</span><br><span class=\"line\">https://acme-v01.api.letsencrypt.org/directory</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">(A)gree/(C)ancel: A</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>询问是否愿意分享email 否</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">  Would you be willing to share your email address with the Electronic Frontier</span><br><span class=\"line\">  Foundation, a founding partner of the Let&apos;s Encrypt project and the non-profit</span><br><span class=\"line\">  organization that develops Certbot? We&apos;d like to send you email about EFF and</span><br><span class=\"line\">  our work to encrypt the web, protect its users and defend digital rights.</span><br><span class=\"line\">  -------------------------------------------------------------------------------</span><br><span class=\"line\">  (Y)es/(N)o: N</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>询问为哪个域名获取ssl证书 1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Which names would you like to activate HTTPS for?</span><br><span class=\"line\">  -------------------------------------------------------------------------------</span><br><span class=\"line\">  1: d.spacexplore.xyz</span><br><span class=\"line\">  -------------------------------------------------------------------------------</span><br><span class=\"line\">  Select the appropriate numbers separated by commas and/or spaces, or leave input</span><br><span class=\"line\">  blank to select all options shown (Enter &apos;c&apos; to cancel):1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>询问使用模式 secure </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please choose whether HTTPS access is required or optional.</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">1: Easy - Allow both HTTP and HTTPS access to these sites</span><br><span class=\"line\">2: Secure - Make all requests redirect to secure HTTPS access</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Select the appropriate number [1-2] then [enter] (press &apos;c&apos; to cancel): 2</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"修改owncloud-上传文件存储目录\"><a href=\"#修改owncloud-上传文件存储目录\" class=\"headerlink\" title=\"修改owncloud 上传文件存储目录\"></a>修改owncloud 上传文件存储目录</h2><blockquote>\n<p> 如上所示 已经创建好了nextcloud应用</p>\n</blockquote>\n<blockquote>\n<p>那么已经创建好了应用,需要进行更改文件存储位置</p>\n</blockquote>\n<ul>\n<li><p>停止web服务 即将apache服务器停止 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service apache2 stop</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看config/config.php文件中已有的datadirectory 如(/var/www/nextcloud/data)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@SkyEyE:/var/www/nextcloud/config# vim config.php</span><br></pre></td></tr></table></figure>\n\n<p> 当然我这里配置文件已经修改了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">  $CONFIG = array (</span><br><span class=\"line\">    &apos;instanceid&apos; =&gt; &apos;oclvivd8451p&apos;,</span><br><span class=\"line\">    &apos;passwordsalt&apos; =&gt; &apos;kukoaeTPA0rbukretD7I0G1IIfIb0e&apos;,</span><br><span class=\"line\">    &apos;secret&apos; =&gt; &apos;QoVb9IEJPAom7kZTzMsIzXmAMGiMYciuZLEfDRUSX/rmC5xA&apos;,</span><br><span class=\"line\">    &apos;trusted_domains&apos; =&gt;</span><br><span class=\"line\">    array (</span><br><span class=\"line\"></span><br><span class=\"line\">      0 =&gt; &apos;d.spacexplore.xyz&apos;,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    &apos;datadirectory&apos; =&gt; &apos;/mnt/bs/nextcloud/data&apos;,</span><br><span class=\"line\">    &apos;overwrite.cli.url&apos; =&gt; &apos;http://d.spacexplore.xyz&apos;,</span><br><span class=\"line\">    &apos;dbtype&apos; =&gt; &apos;mysql&apos;,</span><br><span class=\"line\">    &apos;version&apos; =&gt; &apos;12.0.3.3&apos;,</span><br><span class=\"line\">    &apos;dbname&apos; =&gt; &apos;nextcloud&apos;,</span><br><span class=\"line\">    &apos;dbhost&apos; =&gt; &apos;localhost:3306&apos;,</span><br><span class=\"line\">    &apos;dbport&apos; =&gt; &apos;&apos;,</span><br><span class=\"line\">    &apos;dbtableprefix&apos; =&gt; &apos;oc_&apos;,</span><br><span class=\"line\">    &apos;dbuser&apos; =&gt; &apos;XXXXXX&apos;,</span><br><span class=\"line\">    &apos;dbpassword&apos; =&gt; &apos;XXXXXXX&apos;,</span><br><span class=\"line\">    &apos;installed&apos; =&gt; true,</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改 config/config,php 文件中的datadirectory (/xxx/xxx)</p>\n</li>\n<li><p>将/var/www/nextcloud/data 目录下的所有文件移动到新的 /mnt/bs/data/ 目录下</p>\n</li>\n<li><p>修改  /mnt/bs/data/目录所属的组及用户与原 /var/www/nextcloud/data 目录相同, 例如将所属组和用户都修改为www</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R www-data:www-data /media/usbdisk/ocdata</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动apache服务器 进行管理界面查看 试上传一个文件 进入linux系统查看上传的文件是否在新的存储目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service apache2 start</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在linux服务器上搭建私有云</p>","more":"<p></p>\n<h2 id=\"配置LAMP-环境\"><a href=\"#配置LAMP-环境\" class=\"headerlink\" title=\"配置LAMP 环境\"></a>配置LAMP 环境</h2><ul>\n<li><p>更新软件列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行软件更新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt -y upgrade</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装apache</p>\n<p><code>sudo apt -y upgrade</code>  </p>\n</li>\n<li><p>安装MariaDB </p>\n<p><code>sudo apt install mariadb-server</code>  </p>\n</li>\n</ul>\n<ul>\n<li><p>安装PHP7.0</p>\n<p><code>sudo apt install libapache2-mod-php7.0</code>  </p>\n</li>\n<li><p>安装PHP扩展 </p>\n<p><code>php7.0-gd php7.0-json php7.0-mysql php7.0-curl php7.0-mbstringphp7.0-intl php7.0-mcrypt php-imagick php7.0-xml php7.0-zip</code> </p>\n</li>\n</ul>\n<h2 id=\"安装-nextCloud\"><a href=\"#安装-nextCloud\" class=\"headerlink\" title=\"安装 nextCloud\"></a>安装 nextCloud</h2><ul>\n<li>下载源码包 </li>\n</ul>\n<ul>\n<li><p>访问官网下载 <a href=\"https://nextcloud.com/changelog/\" target=\"_blank\" rel=\"noopener\">https://nextcloud.com/changelog/</a> 当前最新版本 12.0.3</p>\n<p>​ <code>wget https://download.nextcloud.com/server/releases/nextcloud-12.0.3.tar.bz2</code></p>\n</li>\n<li><p>解压源码包 </p>\n<p><code>tar jxf nextcloud-12.0.3.tar.bz2</code> </p>\n</li>\n<li><p>复制源代码到web服务器目录</p>\n<p><code>sudo cp -r nextcloud /var/www/</code></p>\n</li>\n<li><p>设置nextcloud目录权限  </p>\n<p><code>sudo chown -R www-data:www-data /var/www/nextcloud</code></p>\n</li>\n</ul>\n<h2 id=\"配置apache虚拟主机\"><a href=\"#配置apache虚拟主机\" class=\"headerlink\" title=\"配置apache虚拟主机\"></a>配置apache虚拟主机</h2><ul>\n<li>创建nexcloud.conf 虚拟主机配置文件</li>\n</ul>\n<ul>\n<li><p>在域名管理平台新增一条A记录 指向服务器公网ip </p>\n</li>\n<li><p>让虚拟机生效</p>\n<p><code>sudo nano /etc/apache2/sites-available/nextcloud.conf</code></p>\n<p>将一下信息粘贴到配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServerName d.spacexplore.xyz</span><br><span class=\"line\">  DocumentRoot /var/www/nextcloud/</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Directory</span> /<span class=\"attr\">var</span>/<span class=\"attr\">www</span>/<span class=\"attr\">nextcloud</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Options +FollowSymlinks</span><br><span class=\"line\">    AllowOverride All</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">IfModule</span> <span class=\"attr\">mod_dav.c</span>&gt;</span></span><br><span class=\"line\">      Dav off</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">IfModule</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    SetEnv HOME /var/www/nextcloud</span><br><span class=\"line\">    SetEnv HTTP_HOME /var/www/nextcloud</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Directory</span>&gt;</span></span><br><span class=\"line\">RewriteEngine on</span><br><span class=\"line\">RewriteCond %&#123;SERVER_NAME&#125; =d.spacexplore.xyz</span><br><span class=\"line\">RewriteRule ^ https://%&#123;SERVER_NAME&#125;%&#123;REQUEST_URI&#125; [END,NE,R=permanent]</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">VirtualHost</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>让虚拟主机生效</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2ensite nextcloud.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启用必要的apache模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2enmod rewrite headers env dir mime ssl</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启 apache 服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"mariaDB数据库设置\"><a href=\"#mariaDB数据库设置\" class=\"headerlink\" title=\"mariaDB数据库设置\"></a>mariaDB数据库设置</h2><ul>\n<li><p>数据库初始化 </p>\n<ul>\n<li><p>通过命令对数据库做安全初始化设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建nextcloud 数据库账号密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mysql -uroot;</span><br><span class=\"line\">CREATE DATABASE &apos;nextcloud&apos;;</span><br><span class=\"line\">CREATE USER &apos;nextcloud&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;password&apos;;</span><br><span class=\"line\">GRANT ALL PRIVILEGES ON nextcloud.* TO&apos;nextcloud&apos;@&apos;localhost&apos;;</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\">exit;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>初始化nextcloud</p>\n<ul>\n<li>在浏览器中访问绑定的域名进行nextcloud初始化操作,暂不记录</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"启用ssl安全连接\"><a href=\"#启用ssl安全连接\" class=\"headerlink\" title=\"启用ssl安全连接\"></a>启用ssl安全连接</h2><ul>\n<li><p>安装certbot</p>\n<ul>\n<li><p>添加 certbot PPA软件源 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository -y ppa:certbot/certbo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>刷新软件列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>安装apache的certbot</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python-certbot-apache</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>获取ssl证书</p>\n</li>\n<li><p>运行certbot程序 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --apache</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提示输入email接收通知和重置秘钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter email address (used for urgent renewal and security notices) (Enter &apos;c&apos; to</span><br><span class=\"line\">cancel):test@torchtree.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>询问是否接收用户协议</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please read the Terms of Service at</span><br><span class=\"line\">https://letsencrypt.org/documents/LE-SA-v1.1.1-August-1-2016.pdf. You must agree</span><br><span class=\"line\">in order to register with the ACME server at</span><br><span class=\"line\">https://acme-v01.api.letsencrypt.org/directory</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">(A)gree/(C)ancel: A</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>询问是否愿意分享email 否</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">  Would you be willing to share your email address with the Electronic Frontier</span><br><span class=\"line\">  Foundation, a founding partner of the Let&apos;s Encrypt project and the non-profit</span><br><span class=\"line\">  organization that develops Certbot? We&apos;d like to send you email about EFF and</span><br><span class=\"line\">  our work to encrypt the web, protect its users and defend digital rights.</span><br><span class=\"line\">  -------------------------------------------------------------------------------</span><br><span class=\"line\">  (Y)es/(N)o: N</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>询问为哪个域名获取ssl证书 1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Which names would you like to activate HTTPS for?</span><br><span class=\"line\">  -------------------------------------------------------------------------------</span><br><span class=\"line\">  1: d.spacexplore.xyz</span><br><span class=\"line\">  -------------------------------------------------------------------------------</span><br><span class=\"line\">  Select the appropriate numbers separated by commas and/or spaces, or leave input</span><br><span class=\"line\">  blank to select all options shown (Enter &apos;c&apos; to cancel):1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>询问使用模式 secure </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please choose whether HTTPS access is required or optional.</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">1: Easy - Allow both HTTP and HTTPS access to these sites</span><br><span class=\"line\">2: Secure - Make all requests redirect to secure HTTPS access</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Select the appropriate number [1-2] then [enter] (press &apos;c&apos; to cancel): 2</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"修改owncloud-上传文件存储目录\"><a href=\"#修改owncloud-上传文件存储目录\" class=\"headerlink\" title=\"修改owncloud 上传文件存储目录\"></a>修改owncloud 上传文件存储目录</h2><blockquote>\n<p> 如上所示 已经创建好了nextcloud应用</p>\n</blockquote>\n<blockquote>\n<p>那么已经创建好了应用,需要进行更改文件存储位置</p>\n</blockquote>\n<ul>\n<li><p>停止web服务 即将apache服务器停止 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service apache2 stop</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看config/config.php文件中已有的datadirectory 如(/var/www/nextcloud/data)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@SkyEyE:/var/www/nextcloud/config# vim config.php</span><br></pre></td></tr></table></figure>\n\n<p> 当然我这里配置文件已经修改了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">  $CONFIG = array (</span><br><span class=\"line\">    &apos;instanceid&apos; =&gt; &apos;oclvivd8451p&apos;,</span><br><span class=\"line\">    &apos;passwordsalt&apos; =&gt; &apos;kukoaeTPA0rbukretD7I0G1IIfIb0e&apos;,</span><br><span class=\"line\">    &apos;secret&apos; =&gt; &apos;QoVb9IEJPAom7kZTzMsIzXmAMGiMYciuZLEfDRUSX/rmC5xA&apos;,</span><br><span class=\"line\">    &apos;trusted_domains&apos; =&gt;</span><br><span class=\"line\">    array (</span><br><span class=\"line\"></span><br><span class=\"line\">      0 =&gt; &apos;d.spacexplore.xyz&apos;,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    &apos;datadirectory&apos; =&gt; &apos;/mnt/bs/nextcloud/data&apos;,</span><br><span class=\"line\">    &apos;overwrite.cli.url&apos; =&gt; &apos;http://d.spacexplore.xyz&apos;,</span><br><span class=\"line\">    &apos;dbtype&apos; =&gt; &apos;mysql&apos;,</span><br><span class=\"line\">    &apos;version&apos; =&gt; &apos;12.0.3.3&apos;,</span><br><span class=\"line\">    &apos;dbname&apos; =&gt; &apos;nextcloud&apos;,</span><br><span class=\"line\">    &apos;dbhost&apos; =&gt; &apos;localhost:3306&apos;,</span><br><span class=\"line\">    &apos;dbport&apos; =&gt; &apos;&apos;,</span><br><span class=\"line\">    &apos;dbtableprefix&apos; =&gt; &apos;oc_&apos;,</span><br><span class=\"line\">    &apos;dbuser&apos; =&gt; &apos;XXXXXX&apos;,</span><br><span class=\"line\">    &apos;dbpassword&apos; =&gt; &apos;XXXXXXX&apos;,</span><br><span class=\"line\">    &apos;installed&apos; =&gt; true,</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改 config/config,php 文件中的datadirectory (/xxx/xxx)</p>\n</li>\n<li><p>将/var/www/nextcloud/data 目录下的所有文件移动到新的 /mnt/bs/data/ 目录下</p>\n</li>\n<li><p>修改  /mnt/bs/data/目录所属的组及用户与原 /var/www/nextcloud/data 目录相同, 例如将所属组和用户都修改为www</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R www-data:www-data /media/usbdisk/ocdata</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动apache服务器 进行管理界面查看 试上传一个文件 进入linux系统查看上传的文件是否在新的存储目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service apache2 start</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n</ul>"},{"title":"Win10安装配置MongoDb","date":"2018-03-10T04:30:04.000Z","_content":"\n​\tWin10下安装配置MongoDb的记录,省的用的时候找不到<!--more-->\n\n *  下载安装mongdodb,使用版本为3.6.3\n\n    ```\n    https://downloads.mongodb.com/win32/mongodb-win32-x86_64-enterprise-windows-64-3.6.3-signed.msi?_ga=2.244974149.1141576444.1520604797-212568712.1520604797\n    ```\n\n* 安装完成后目录为：D:\\Tools\\Mongo3.6.3\n\n  在Mongo3.6.3下创建data文件夹，\n\n  data文件夹下创建db和log两个文件夹，\n\n  其中log文件夹中创建一个mongodb.log\n\n  在Mongo3.6.3 目录下创建mongodb.config 内容如下\n\n  ```\n  dbpath=D:\\Tools\\Mongo3.6.3\\data\\db\n  logpath=D:\\Tools\\Mongo3.6.3\\data\\log\\mongodb.log\n  logappend=true\n  auth=false\n  ```\n\n* 编辑环境变量\n\n  将D:\\Tools\\Mongo3.6.3\\bin 加入到PATH变量中\n\n* 注册为windows服务\n\n  按WIN+X进入菜单，选择以管理员方式的powershell，进入D:\\Tools\\Mongo3.6.3\\bin目录，\n\n  执行命令：\n\n  ```\n  .\\mongod --config D:\\Tools\\Mongo3.6.3\\mongodb.config --serviceName MongoDB --install\n  ```\n\n  执行完毕 按WIN+R输入services.msc 查看MongoDB是否存在，\n\n  在powershell中执行命令\n\n  ```\n  PS D:\\Tools\\Mongo3.6.3\\bin> net start MongoDB\n  MongoDB 服务正在启动 .\n  MongoDB 服务已经启动成功。\n  PS D:\\Tools\\Mongo3.6.3\\bin>\n  ```\n\n  大功告成！\n\n*  配置mongodb用户密码\n\n    进入powershell 输入mogo登陆到mongodb\n\n    ```\n    use admin\n    db.createUser({user:\"andy\",pwd:\"123456\",roles:[{role:\"root\",db:\"admin\"}]})\n    ```\n\n    如果想要开启验证那么就把config文件中的auth=false改为true，就开启密码验证了，修改完config中的内容需要进行重启服务\n\n    ​\n\n    ​","source":"_posts/Win10安装配置MongoDb.md","raw":"---\ntitle: Win10安装配置MongoDb\ndate: 2018-03-10 12:30:04\ncategories: [MongoDB]\ntags: [MongoDB]\n---\n\n​\tWin10下安装配置MongoDb的记录,省的用的时候找不到<!--more-->\n\n *  下载安装mongdodb,使用版本为3.6.3\n\n    ```\n    https://downloads.mongodb.com/win32/mongodb-win32-x86_64-enterprise-windows-64-3.6.3-signed.msi?_ga=2.244974149.1141576444.1520604797-212568712.1520604797\n    ```\n\n* 安装完成后目录为：D:\\Tools\\Mongo3.6.3\n\n  在Mongo3.6.3下创建data文件夹，\n\n  data文件夹下创建db和log两个文件夹，\n\n  其中log文件夹中创建一个mongodb.log\n\n  在Mongo3.6.3 目录下创建mongodb.config 内容如下\n\n  ```\n  dbpath=D:\\Tools\\Mongo3.6.3\\data\\db\n  logpath=D:\\Tools\\Mongo3.6.3\\data\\log\\mongodb.log\n  logappend=true\n  auth=false\n  ```\n\n* 编辑环境变量\n\n  将D:\\Tools\\Mongo3.6.3\\bin 加入到PATH变量中\n\n* 注册为windows服务\n\n  按WIN+X进入菜单，选择以管理员方式的powershell，进入D:\\Tools\\Mongo3.6.3\\bin目录，\n\n  执行命令：\n\n  ```\n  .\\mongod --config D:\\Tools\\Mongo3.6.3\\mongodb.config --serviceName MongoDB --install\n  ```\n\n  执行完毕 按WIN+R输入services.msc 查看MongoDB是否存在，\n\n  在powershell中执行命令\n\n  ```\n  PS D:\\Tools\\Mongo3.6.3\\bin> net start MongoDB\n  MongoDB 服务正在启动 .\n  MongoDB 服务已经启动成功。\n  PS D:\\Tools\\Mongo3.6.3\\bin>\n  ```\n\n  大功告成！\n\n*  配置mongodb用户密码\n\n    进入powershell 输入mogo登陆到mongodb\n\n    ```\n    use admin\n    db.createUser({user:\"andy\",pwd:\"123456\",roles:[{role:\"root\",db:\"admin\"}]})\n    ```\n\n    如果想要开启验证那么就把config文件中的auth=false改为true，就开启密码验证了，修改完config中的内容需要进行重启服务\n\n    ​\n\n    ​","slug":"Win10安装配置MongoDb","published":1,"updated":"2022-09-03T07:30:55.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz85l002rtwfayuiczcem","content":"<p>​    Win10下安装配置MongoDb的记录,省的用的时候找不到<a id=\"more\"></a></p>\n<ul>\n<li><p>下载安装mongdodb,使用版本为3.6.3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://downloads.mongodb.com/win32/mongodb-win32-x86_64-enterprise-windows-64-3.6.3-signed.msi?_ga=2.244974149.1141576444.1520604797-212568712.1520604797</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<ul>\n<li><p>安装完成后目录为：D:\\Tools\\Mongo3.6.3</p>\n<p>在Mongo3.6.3下创建data文件夹，</p>\n<p>data文件夹下创建db和log两个文件夹，</p>\n<p>其中log文件夹中创建一个mongodb.log</p>\n<p>在Mongo3.6.3 目录下创建mongodb.config 内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbpath=D:\\Tools\\Mongo3.6.3\\data\\db</span><br><span class=\"line\">logpath=D:\\Tools\\Mongo3.6.3\\data\\log\\mongodb.log</span><br><span class=\"line\">logappend=true</span><br><span class=\"line\">auth=false</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑环境变量</p>\n<p>将D:\\Tools\\Mongo3.6.3\\bin 加入到PATH变量中</p>\n</li>\n<li><p>注册为windows服务</p>\n<p>按WIN+X进入菜单，选择以管理员方式的powershell，进入D:\\Tools\\Mongo3.6.3\\bin目录，</p>\n<p>执行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\mongod --config D:\\Tools\\Mongo3.6.3\\mongodb.config --serviceName MongoDB --install</span><br></pre></td></tr></table></figure>\n\n<p>执行完毕 按WIN+R输入services.msc 查看MongoDB是否存在，</p>\n<p>在powershell中执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS D:\\Tools\\Mongo3.6.3\\bin&gt; net start MongoDB</span><br><span class=\"line\">MongoDB 服务正在启动 .</span><br><span class=\"line\">MongoDB 服务已经启动成功。</span><br><span class=\"line\">PS D:\\Tools\\Mongo3.6.3\\bin&gt;</span><br></pre></td></tr></table></figure>\n\n<p>大功告成！</p>\n</li>\n<li><p>配置mongodb用户密码</p>\n<p> 进入powershell 输入mogo登陆到mongodb</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\">db.createUser(&#123;user:&quot;andy&quot;,pwd:&quot;123456&quot;,roles:[&#123;role:&quot;root&quot;,db:&quot;admin&quot;&#125;]&#125;)</span><br></pre></td></tr></table></figure>\n\n<p> 如果想要开启验证那么就把config文件中的auth=false改为true，就开启密码验证了，修改完config中的内容需要进行重启服务</p>\n<p> ​</p>\n<p> ​</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>​    Win10下安装配置MongoDb的记录,省的用的时候找不到</p>","more":"<p></p>\n<ul>\n<li><p>下载安装mongdodb,使用版本为3.6.3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://downloads.mongodb.com/win32/mongodb-win32-x86_64-enterprise-windows-64-3.6.3-signed.msi?_ga=2.244974149.1141576444.1520604797-212568712.1520604797</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<ul>\n<li><p>安装完成后目录为：D:\\Tools\\Mongo3.6.3</p>\n<p>在Mongo3.6.3下创建data文件夹，</p>\n<p>data文件夹下创建db和log两个文件夹，</p>\n<p>其中log文件夹中创建一个mongodb.log</p>\n<p>在Mongo3.6.3 目录下创建mongodb.config 内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbpath=D:\\Tools\\Mongo3.6.3\\data\\db</span><br><span class=\"line\">logpath=D:\\Tools\\Mongo3.6.3\\data\\log\\mongodb.log</span><br><span class=\"line\">logappend=true</span><br><span class=\"line\">auth=false</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑环境变量</p>\n<p>将D:\\Tools\\Mongo3.6.3\\bin 加入到PATH变量中</p>\n</li>\n<li><p>注册为windows服务</p>\n<p>按WIN+X进入菜单，选择以管理员方式的powershell，进入D:\\Tools\\Mongo3.6.3\\bin目录，</p>\n<p>执行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\mongod --config D:\\Tools\\Mongo3.6.3\\mongodb.config --serviceName MongoDB --install</span><br></pre></td></tr></table></figure>\n\n<p>执行完毕 按WIN+R输入services.msc 查看MongoDB是否存在，</p>\n<p>在powershell中执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS D:\\Tools\\Mongo3.6.3\\bin&gt; net start MongoDB</span><br><span class=\"line\">MongoDB 服务正在启动 .</span><br><span class=\"line\">MongoDB 服务已经启动成功。</span><br><span class=\"line\">PS D:\\Tools\\Mongo3.6.3\\bin&gt;</span><br></pre></td></tr></table></figure>\n\n<p>大功告成！</p>\n</li>\n<li><p>配置mongodb用户密码</p>\n<p> 进入powershell 输入mogo登陆到mongodb</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use admin</span><br><span class=\"line\">db.createUser(&#123;user:&quot;andy&quot;,pwd:&quot;123456&quot;,roles:[&#123;role:&quot;root&quot;,db:&quot;admin&quot;&#125;]&#125;)</span><br></pre></td></tr></table></figure>\n\n<p> 如果想要开启验证那么就把config文件中的auth=false改为true，就开启密码验证了，修改完config中的内容需要进行重启服务</p>\n<p> ​</p>\n<p> ​</p>\n</li>\n</ul>"},{"title":"codis集群记录","date":"2017-12-04T14:45:53.000Z","_content":"","source":"_posts/codis集群记录.md","raw":"---\ntitle: codis集群记录\ndate: 2017-12-04 22:45:53\ntags:\n---\n","slug":"codis集群记录","published":1,"updated":"2022-09-03T07:30:55.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz85p002ttwfakmfcxrlt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"canal配置搭建","date":"2018-07-05T16:08:43.000Z","_content":"\nCanal搭建配置及代码客户端了解下<!--more-->开始想写的时候，canal的版本还是1.0.2x,现在已经1.1.0了，所以要做什么事情要尽快。\n\n### 环境概述：\n\n* linux系统版本：Ubuntu16.04 \n* java版本：1.8.0_171\n* zk版本: 3.4.12\n* mysql版本：5.7.22 (**这个就不安装了**)\n* canal版本：1.1.0\n* kafka版本：2.11\n* maven版本：3.5.4\n* git 版本: 2.7.4\n\n### 安装git\n\n* 使用apt-get安装\n\n  ```\n  apt-get update -y\n  apt-get install -y git\n  ```\n\n### 安装maven\n\n* 下载\n\n  ```\n  wget http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz\n  tar -zxvf apache-maven-3.5.4-bin.tar.gz -C maven\n  ```\n\n* 配置环境变量\n\n  ```\n  vim /etc/profile\n  ```\n\n  ```\n  JAVA_HOME=/data/soft/jdk1.8.0_171\n  JAVA_BIN=/data/soft/jdk1.8.0_171/bin\n  PATH=$JAVA_HOME/bin:$PATH:$JSTORM_HOME/bin:$ZOOKEEPER_HOME/bin\n  ZOOKEEPER_HOME=/data/soft/zookeeper-3.4.12\n  CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$ZOOKEEPER_HOME/lib\n  JSTORM_HOME=/data/soft/jstorm-2.2.1\n  ##MAVEN start\n  MAVEN_HOME=/data/soft/maven\n  export MAVEN_HOME\n  export PATH=${PATH}:${MAVEN_HOME}/bin\n  ##MAVEN end\n  export ZOOKEEPER_HOME\n  export JAVA_HOME\n  export PATH\n  export CLASSPATH\n  export JSTORM_HOME\n  ```\n\n  上面是我的环境变量配置文件,修改完后进行source\n\n  ```\n  source /etc/profile\n  ```\n\n  ```\n  mvn -version\n  \n  Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-18T02:33:14+08:00)\n  Maven home: /data/soft/maven\n  Java version: 1.8.0_171, vendor: Oracle Corporation, runtime: /data/soft/jdk1.8.0_171/jre\n  Default locale: en_US, platform encoding: UTF-8\n  OS name: \"linux\", version: \"4.4.0-127-generic\", arch: \"amd64\", family: \"unix\"\n  ```\n\n  安装成功\n\n### 安装zookeeper\n\n* 下载,安装zookeeper\n\n  ```\n  wget http://archive.apache.org/dist/zookeeper/zookeeper-3.4.12/zookeeper-3.4.12.tar.gz\n  tar -zxvf zookeeper-3.4.12 -C zookeeper\n  cd /data/soft/zookeeper/conf\n  cp  zoo_sample.cfg   zoo_sample.cfg.bak\n  mv  zoo_sample.cfg zoo.cfg\n  vim zoo.cfg\n  ```\n\n  ```\n  # The number of milliseconds of each tick\n  tickTime=2000\n  # The number of ticks that the initial \n  # synchronization phase can take\n  initLimit=10\n  # The number of ticks that can pass between \n  # sending a request and getting an acknowledgement\n  syncLimit=5\n  # the directory where the snapshot is stored.\n  # do not use /tmp for storage, /tmp here is just \n  # example sakes.\n  ##修改这里，如果没有就添加这行\n  dataDir=/data/soft/zookeeper/data\n  # the port at which the clients will connect\n  clientPort=2181\n  # the maximum number of client connections.\n  # increase this if you need to handle more clients\n  #maxClientCnxns=60\n  #\n  # Be sure to read the maintenance section of the \n  # administrator guide before turning on autopurge.\n  #\n  # http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance\n  #\n  # The number of snapshots to retain in dataDir\n  #autopurge.snapRetainCount=3\n  # Purge task interval in hours\n  # Set to \"0\" to disable auto purge feature\n  #autopurge.purgeInterval=1\n  ##添加日志目录\n  dataLogDir=/data/soft/zookeeper-3.4.5/logs\n  ```\n\n* 启动 zookeeper\n\n  ```\n  cd /data/soft/zookeeper\n  ./bin/zkServer.sh start ./conf/zoo.cfg\n  ```\n\n* 安装 zkui\n\n  * 下载\n\n    ```\n    git clone https://github.com/DeemOpen/zkui.git\n    ```\n\n  * 修改配置文件\n\n    ```\n    cd /data/soft/zkui\n    vim config.cfg\n    ```\n\n    将下面的进行修改\n\n    ```\n    serverPort=9090     #指定端口\n    zkServer=192.168.1.110:2181\n    sessionTimeout=300000\n    ```\n\n  * 进行maven编译生成war包\n\n    ```\n    cd /data/soft/zkui\n    mvn clean install\n    ```\n\n  * 启动\n\n    ```\n    nohup java -jar target/zkui-2.0-SNAPSHOT-jar-with-dependencies.jar & \n    ```\n\n  * 访问\n\n    默认密码为 admin/manager appconfig/appconfig ,在cfg文件中可以配置，appconfig为只读权限中户\n\n    ```\n    http://127.0.0.1:9090/\n    ```\n\n### Mysql配置\n\n * 配置开启binlog\n\n   本机使用apt-get安装的mysql\n\n   列出所有的 my.cnf 文件 \n\n   ```\n   locate my.cnf\n   \n   /etc/alternatives/my.cnf\n   /etc/mysql/my.cnf\n   /etc/mysql/my.cnf.fallback\n   /var/lib/docker/aufs/diff/46b0e64a8cd2c560c66b86b89918ef4ca60c761b87ba166b52b32d1f94191d09/etc/alternatives/my.cnf\n   /var/lib/docker/aufs/diff/46b0e64a8cd2c560c66b86b89918ef4ca60c761b87ba166b52b32d1f94191d09/etc/mysql/my.cnf\n   /var/lib/docker/aufs/diff/46b0e64a8cd2c560c66b86b89918ef4ca60c761b87ba166b52b32d1f94191d09/etc/mysql/my.cnf.fallback\n   /var/lib/docker/aufs/diff/46b0e64a8cd2c560c66b86b89918ef4ca60c761b87ba166b52b32d1f94191d09/var/lib/dpkg/alternatives/my.cnf\n   /var/lib/docker/aufs/diff/d07cc37ba4daa1bba8e1cefb641912781ad304503ce4c3818d3cbf4c17b0587e/etc/mysql/my.cnf\n   /var/lib/dpkg/alternatives/my.cnf\n   ```\n\n   查看是否使用了指定目录的 my.cnf\n\n   ```\n   ps aux|grep mysql|grep 'my.cnf'\n   ```\n\n   显然没有,那么查看mysql使用的配置文件\n\n   ```\n   mysql --help|grep 'my.cnf'\n   \n   /etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf \n   ```\n\n   挨个查看文件。使用的是 `` /etc/mysql/my.cnf``\n\n   ```\n   vim  /etc/mysql/my.cnf\n   \n   # The MySQL database server configuration file.\n   #\n   # You can copy this to one of:\n   # - \"/etc/mysql/my.cnf\" to set global options,\n   # - \"~/.my.cnf\" to set user-specific options.\n   # \n   # One can use all long options that the program supports.\n   # Run program with --help to get a list of available options and with\n   # --print-defaults to see which it would actually understand and use.\n   #\n   # For explanations see\n   # http://dev.mysql.com/doc/mysql/en/server-system-variables.html\n   \n   #\n   # * IMPORTANT: Additional settings that can override those from this file!\n   #   The files must end with '.cnf', otherwise they'll be ignored.\n   #\n   \n   !includedir /etc/mysql/conf.d/\n   !includedir /etc/mysql/mysql.conf.d/\n   ```\n\n   查看 ``/etc/mysql/conf.d/`` 和``/etc/mysql/mysql.conf.d/`` 目录\n\n   ```\n   root@VM-0-17-ubuntu:/data/soft/zkui# cd /etc/mysql/mysql.conf.d/\n   root@VM-0-17-ubuntu:/etc/mysql/mysql.conf.d# ls\n   mysqld.cnf  mysqld_safe_syslog.cnf\n   root@VM-0-17-ubuntu:/etc/mysql/mysql.conf.d# vim mysqld.cnf\n   ```\n\n   在这里，那么在[mysqld]下面加入配置\n\n   ```\n   [mysqld]\n   ##canal config\n   log-bin=mysql-bin #添加这一行就ok\n   binlog-format=ROW #选择row模式\n   server_id=1 #配置mysql replaction需要定义，不能和canal的slaveId重复,这个在1.1.0里面已经不用设置\n   ```\n\n   重启\n\n   ```\n   service mysql restart\n   ```\n\n    * 创建canal使用的mysql账号\n\n      ```\n      CREATE USER canal IDENTIFIED BY 'canal';  \n      GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'canal'@'%';\n      -- GRANT ALL PRIVILEGES ON *.* TO 'canal'@'%' ;\n      FLUSH PRIVILEGES;\n      ```\n\n### Canal安装配置\n\n* 下载\n\n  我们下载``canal.deployer-1.1.0.tar.gz ``,先不配置kafka.\n\n  ```\n  https://github.com/alibaba/canal/releases\n  ```\n\n  ```\n  tar -zxvf canal.deployer-1.1.0.tar.gz -C canal-1.1.0\n  ```\n\n* 修改配置\n\n  * 修改canal.properties，这个是全局的配置\n\n    ```\n    cd  canal-1.1.0/conf\n    \n    vim canal.properties\n    ```\n\n    ```\n    ################################################\n    #########               common argument         ############# \n    #################################################\n    canal.id= 1\n    ##这里可以指定ip，但是本人在腾讯云上不配置的时候，读取到的是腾讯云的内网ip\n    canal.ip=\n    ##canal的端口\n    canal.port=11111\n    canal.metrics.pull.port=11112\n    ##zookeeper的IP要配置，多个用逗号隔开\n    canal.zkServers=127.0.0.1:2181\n    # flush data to zk\n    canal.zookeeper.flush.period = 1000\n    canal.withoutNetty = false\n    # flush meta cursor/parse position to file\n    canal.file.data.dir = ${canal.conf.dir}\n    canal.file.flush.period = 1000\n    ## memory store RingBuffer size, should be Math.pow(2,n)\n    canal.instance.memory.buffer.size = 16384\n    ## memory store RingBuffer used memory unit size , default 1kb\n    canal.instance.memory.buffer.memunit = 1024 \n    ## meory store gets mode used MEMSIZE or ITEMSIZE\n    canal.instance.memory.batch.mode = MEMSIZE\n    \n    ## detecing config\n    canal.instance.detecting.enable = false\n    #canal.instance.detecting.sql = insert into retl.xdual values(1,now()) on duplicate \t# \tkey update x=now()\n    canal.instance.detecting.sql = select 1\n    canal.instance.detecting.interval.time = 3\n    canal.instance.detecting.retry.threshold = 3\n    canal.instance.detecting.heartbeatHaEnable = false\n    \n    # support maximum transaction size, more than the size of the transaction will be \t\t# cut into multiple transactions delivery\n    canal.instance.transaction.size =  1024\n    # mysql fallback connected to new master should fallback times\n    canal.instance.fallbackIntervalInSeconds = 60\n    \n    # network config\n    canal.instance.network.receiveBufferSize = 16384\n    canal.instance.network.sendBufferSize = 16384\n    canal.instance.network.soTimeout = 30\n    # binlog filter config\n    canal.instance.filter.druid.ddl = true\n    canal.instance.filter.query.dcl = false\n    canal.instance.filter.query.dml = false\n    canal.instance.filter.query.ddl = false\n    canal.instance.filter.table.error = false\n    canal.instance.filter.rows = false\n    canal.instance.filter.transaction.entry = false\n    \n    # binlog format/image check\n    canal.instance.binlog.format = ROW,STATEMENT,MIXED \n    canal.instance.binlog.image = FULL,MINIMAL,NOBLOB\n    \n    # binlog ddl isolation\n    canal.instance.get.ddl.isolation = false\n    \n    # parallel parser config \n    ##单核cpu的机器上下面这个参数设置为true会报错，官方is解释说这是个bug，如果单核机器跑就设置false\n    canal.instance.parser.parallel = true\n    ## concurrent thread number, default 60% available processors, suggest not to exceed Runtime.getRuntime().availableProcessors()\n    #canal.instance.parser.parallelThreadSize = 16\n    ## disruptor ringbuffer size, must be power of 2\n    canal.instance.parser.parallelBufferSize = 256\n    \n    # table meta tsdb info 这个是1.1.0新加的目前不知道这是干嘛的，好像是存metadata的\n    canal.instance.tsdb.enable=true\n    canal.instance.tsdb.dir=${canal.file.data.dir:../conf}/${canal.instance.destination:}\n    canal.instance.tsdb.url=jdbc:h2:${canal.instance.tsdb.dir}/h2;CACHE_SIZE=1000;MODE=MYSQL;\n    canal.instance.tsdb.dbUsername=canal\n    canal.instance.tsdb.dbPassword=8Kvk,\"qlm-%<#h\n    \n    # rds oss binlog account\n    canal.instance.rds.accesskey =\n    canal.instance.rds.secretkey =\n    \n    #################################################\n    #########               destinations            ############# \n    #################################################\n    ## 多个example在此处进行配置,\n    canal.destinations= example\n    # conf root dir\n    canal.conf.dir = ../conf\n    # auto scan instance dir add/remove and start/stop instance\n    canal.auto.scan = true\n    canal.auto.scan.interval = 5\n    \n    canal.instance.tsdb.spring.xml=classpath:spring/tsdb/h2-tsdb.xml\n    #canal.instance.tsdb.spring.xml=classpath:spring/tsdb/mysql-tsdb.xml\n    \n    canal.instance.global.mode = spring \n    canal.instance.global.lazy = false\n    #canal.instance.global.manager.address = 127.0.0.1:1099\n    #canal.instance.global.spring.xml = classpath:spring/memory-instance.xml\n    #canal.instance.global.spring.xml = classpath:spring/file-instance.xml\n    ##我们使用zk实现ha 那么用下面这个spring的模式\n    canal.instance.global.spring.xml = classpath:spring/default-instance.xml\n    ```\n\n  * 修改 instance.properties\n\n    ```\n    vim /data/soft/canal-1.1.0/conf/example/instance.properties\n    ```\n\n    ```\n    \n    #################################################\n    ## mysql serverId , v1.0.26+ will autoGen \n    # canal.instance.mysql.slaveId=0\n    \n    # enable gtid use true/false 这个是新加的特性\n    canal.instance.gtidon=false\n    \n    # position info 配置要伪装的mysql的地址\n    canal.instance.master.address=127.0.0.1:3306\n    ##canal.instance.master.journal.name +  canal.instance.master.position :  精确指定一个 ##binlog 位点，进行启动\n    canal.instance.master.journal.name=\n    canal.instance.master.position=\n    ##canal.instance.master.timestamp :  指定一个时间戳，canal 会自动遍历 mysql binlog，找到对##应时间戳的 binlog 位点后，进行启动\n    canal.instance.master.timestamp=\n    canal.instance.master.gtid=\n    \n    # rds oss binlog\n    canal.instance.rds.accesskey=\n    canal.instance.rds.secretkey=\n    canal.instance.rds.instanceId=\n    \n    # table meta tsdb info\n    canal.instance.tsdb.enable=true\n    ##匹配\n    #canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/skyeye\n    #canal.instance.tsdb.dbUsername=canal\n    #canal.instance.tsdb.dbPassword=8Kvk,\"qlm-%<#h\n    \n    #canal.instance.standby.address =\n    #canal.instance.standby.journal.name =\n    #canal.instance.standby.position = \n    #canal.instance.standby.timestamp =\n    #canal.instance.standby.gtid=\n    \n    # username/password\n    ##配置为自己的数据库的账号和密码。\n    canal.instance.dbUsername=canal\n    canal.instance.dbPassword=8Kvk,\"qlm-%<#h\n    ##代表数据库的编码方式对应到 java 中的编码类型，比如 UTF-8，GBK , ISO-8859-1\n    canal.instance.connectionCharset=UTF-8\n    \n    # table regex 1.1.0去掉了默认db的设置只能用正则去过滤。\n    canal.instance.filter.regex=skyeye\\\\..*\n    # table black regex\n    canal.instance.filter.black.regex=\n    #################################################\n    ```\n\n* 启动和停止\n\n  * 启动\n\n    ```\n    cd /data/soft/canal-1.1.0/bin\n    \n    ./startup.sh\n    ```\n\n  * 日志查看 ,canal目录为服务的日志，example里为节点实例日志\n\n    ```\n    cd /data/soft/canal-1.1.0/logs\n    ll\n    drwxrwxrwx 4 root root 4096 Sep 17 15:59 ./\n    drwxr-xr-x 6 root root 4096 Sep 17 15:32 ../\n    drwxr-xr-x 3 root root 4096 Sep 18 11:02 canal/\n    drwxr-xr-x 3 root root 4096 Sep 18 09:45 example/\n    ```\n\n  * 停止\n\n    ```\n    ./stop.sh\n    ```\n\n#### TODO:joy:今天就到这里吧。下次补充Kafka\n\n[]: https://github.com/alibaba/canal/wiki\t\"canal官档\"\n\n","source":"_posts/canal配置搭建.md","raw":"---\ntitle: canal配置搭建\ndate: 2018-07-06 00:08:43\ntags: [中间件]\ncategories: [中间件]\n---\n\nCanal搭建配置及代码客户端了解下<!--more-->开始想写的时候，canal的版本还是1.0.2x,现在已经1.1.0了，所以要做什么事情要尽快。\n\n### 环境概述：\n\n* linux系统版本：Ubuntu16.04 \n* java版本：1.8.0_171\n* zk版本: 3.4.12\n* mysql版本：5.7.22 (**这个就不安装了**)\n* canal版本：1.1.0\n* kafka版本：2.11\n* maven版本：3.5.4\n* git 版本: 2.7.4\n\n### 安装git\n\n* 使用apt-get安装\n\n  ```\n  apt-get update -y\n  apt-get install -y git\n  ```\n\n### 安装maven\n\n* 下载\n\n  ```\n  wget http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz\n  tar -zxvf apache-maven-3.5.4-bin.tar.gz -C maven\n  ```\n\n* 配置环境变量\n\n  ```\n  vim /etc/profile\n  ```\n\n  ```\n  JAVA_HOME=/data/soft/jdk1.8.0_171\n  JAVA_BIN=/data/soft/jdk1.8.0_171/bin\n  PATH=$JAVA_HOME/bin:$PATH:$JSTORM_HOME/bin:$ZOOKEEPER_HOME/bin\n  ZOOKEEPER_HOME=/data/soft/zookeeper-3.4.12\n  CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$ZOOKEEPER_HOME/lib\n  JSTORM_HOME=/data/soft/jstorm-2.2.1\n  ##MAVEN start\n  MAVEN_HOME=/data/soft/maven\n  export MAVEN_HOME\n  export PATH=${PATH}:${MAVEN_HOME}/bin\n  ##MAVEN end\n  export ZOOKEEPER_HOME\n  export JAVA_HOME\n  export PATH\n  export CLASSPATH\n  export JSTORM_HOME\n  ```\n\n  上面是我的环境变量配置文件,修改完后进行source\n\n  ```\n  source /etc/profile\n  ```\n\n  ```\n  mvn -version\n  \n  Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-18T02:33:14+08:00)\n  Maven home: /data/soft/maven\n  Java version: 1.8.0_171, vendor: Oracle Corporation, runtime: /data/soft/jdk1.8.0_171/jre\n  Default locale: en_US, platform encoding: UTF-8\n  OS name: \"linux\", version: \"4.4.0-127-generic\", arch: \"amd64\", family: \"unix\"\n  ```\n\n  安装成功\n\n### 安装zookeeper\n\n* 下载,安装zookeeper\n\n  ```\n  wget http://archive.apache.org/dist/zookeeper/zookeeper-3.4.12/zookeeper-3.4.12.tar.gz\n  tar -zxvf zookeeper-3.4.12 -C zookeeper\n  cd /data/soft/zookeeper/conf\n  cp  zoo_sample.cfg   zoo_sample.cfg.bak\n  mv  zoo_sample.cfg zoo.cfg\n  vim zoo.cfg\n  ```\n\n  ```\n  # The number of milliseconds of each tick\n  tickTime=2000\n  # The number of ticks that the initial \n  # synchronization phase can take\n  initLimit=10\n  # The number of ticks that can pass between \n  # sending a request and getting an acknowledgement\n  syncLimit=5\n  # the directory where the snapshot is stored.\n  # do not use /tmp for storage, /tmp here is just \n  # example sakes.\n  ##修改这里，如果没有就添加这行\n  dataDir=/data/soft/zookeeper/data\n  # the port at which the clients will connect\n  clientPort=2181\n  # the maximum number of client connections.\n  # increase this if you need to handle more clients\n  #maxClientCnxns=60\n  #\n  # Be sure to read the maintenance section of the \n  # administrator guide before turning on autopurge.\n  #\n  # http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance\n  #\n  # The number of snapshots to retain in dataDir\n  #autopurge.snapRetainCount=3\n  # Purge task interval in hours\n  # Set to \"0\" to disable auto purge feature\n  #autopurge.purgeInterval=1\n  ##添加日志目录\n  dataLogDir=/data/soft/zookeeper-3.4.5/logs\n  ```\n\n* 启动 zookeeper\n\n  ```\n  cd /data/soft/zookeeper\n  ./bin/zkServer.sh start ./conf/zoo.cfg\n  ```\n\n* 安装 zkui\n\n  * 下载\n\n    ```\n    git clone https://github.com/DeemOpen/zkui.git\n    ```\n\n  * 修改配置文件\n\n    ```\n    cd /data/soft/zkui\n    vim config.cfg\n    ```\n\n    将下面的进行修改\n\n    ```\n    serverPort=9090     #指定端口\n    zkServer=192.168.1.110:2181\n    sessionTimeout=300000\n    ```\n\n  * 进行maven编译生成war包\n\n    ```\n    cd /data/soft/zkui\n    mvn clean install\n    ```\n\n  * 启动\n\n    ```\n    nohup java -jar target/zkui-2.0-SNAPSHOT-jar-with-dependencies.jar & \n    ```\n\n  * 访问\n\n    默认密码为 admin/manager appconfig/appconfig ,在cfg文件中可以配置，appconfig为只读权限中户\n\n    ```\n    http://127.0.0.1:9090/\n    ```\n\n### Mysql配置\n\n * 配置开启binlog\n\n   本机使用apt-get安装的mysql\n\n   列出所有的 my.cnf 文件 \n\n   ```\n   locate my.cnf\n   \n   /etc/alternatives/my.cnf\n   /etc/mysql/my.cnf\n   /etc/mysql/my.cnf.fallback\n   /var/lib/docker/aufs/diff/46b0e64a8cd2c560c66b86b89918ef4ca60c761b87ba166b52b32d1f94191d09/etc/alternatives/my.cnf\n   /var/lib/docker/aufs/diff/46b0e64a8cd2c560c66b86b89918ef4ca60c761b87ba166b52b32d1f94191d09/etc/mysql/my.cnf\n   /var/lib/docker/aufs/diff/46b0e64a8cd2c560c66b86b89918ef4ca60c761b87ba166b52b32d1f94191d09/etc/mysql/my.cnf.fallback\n   /var/lib/docker/aufs/diff/46b0e64a8cd2c560c66b86b89918ef4ca60c761b87ba166b52b32d1f94191d09/var/lib/dpkg/alternatives/my.cnf\n   /var/lib/docker/aufs/diff/d07cc37ba4daa1bba8e1cefb641912781ad304503ce4c3818d3cbf4c17b0587e/etc/mysql/my.cnf\n   /var/lib/dpkg/alternatives/my.cnf\n   ```\n\n   查看是否使用了指定目录的 my.cnf\n\n   ```\n   ps aux|grep mysql|grep 'my.cnf'\n   ```\n\n   显然没有,那么查看mysql使用的配置文件\n\n   ```\n   mysql --help|grep 'my.cnf'\n   \n   /etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf \n   ```\n\n   挨个查看文件。使用的是 `` /etc/mysql/my.cnf``\n\n   ```\n   vim  /etc/mysql/my.cnf\n   \n   # The MySQL database server configuration file.\n   #\n   # You can copy this to one of:\n   # - \"/etc/mysql/my.cnf\" to set global options,\n   # - \"~/.my.cnf\" to set user-specific options.\n   # \n   # One can use all long options that the program supports.\n   # Run program with --help to get a list of available options and with\n   # --print-defaults to see which it would actually understand and use.\n   #\n   # For explanations see\n   # http://dev.mysql.com/doc/mysql/en/server-system-variables.html\n   \n   #\n   # * IMPORTANT: Additional settings that can override those from this file!\n   #   The files must end with '.cnf', otherwise they'll be ignored.\n   #\n   \n   !includedir /etc/mysql/conf.d/\n   !includedir /etc/mysql/mysql.conf.d/\n   ```\n\n   查看 ``/etc/mysql/conf.d/`` 和``/etc/mysql/mysql.conf.d/`` 目录\n\n   ```\n   root@VM-0-17-ubuntu:/data/soft/zkui# cd /etc/mysql/mysql.conf.d/\n   root@VM-0-17-ubuntu:/etc/mysql/mysql.conf.d# ls\n   mysqld.cnf  mysqld_safe_syslog.cnf\n   root@VM-0-17-ubuntu:/etc/mysql/mysql.conf.d# vim mysqld.cnf\n   ```\n\n   在这里，那么在[mysqld]下面加入配置\n\n   ```\n   [mysqld]\n   ##canal config\n   log-bin=mysql-bin #添加这一行就ok\n   binlog-format=ROW #选择row模式\n   server_id=1 #配置mysql replaction需要定义，不能和canal的slaveId重复,这个在1.1.0里面已经不用设置\n   ```\n\n   重启\n\n   ```\n   service mysql restart\n   ```\n\n    * 创建canal使用的mysql账号\n\n      ```\n      CREATE USER canal IDENTIFIED BY 'canal';  \n      GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'canal'@'%';\n      -- GRANT ALL PRIVILEGES ON *.* TO 'canal'@'%' ;\n      FLUSH PRIVILEGES;\n      ```\n\n### Canal安装配置\n\n* 下载\n\n  我们下载``canal.deployer-1.1.0.tar.gz ``,先不配置kafka.\n\n  ```\n  https://github.com/alibaba/canal/releases\n  ```\n\n  ```\n  tar -zxvf canal.deployer-1.1.0.tar.gz -C canal-1.1.0\n  ```\n\n* 修改配置\n\n  * 修改canal.properties，这个是全局的配置\n\n    ```\n    cd  canal-1.1.0/conf\n    \n    vim canal.properties\n    ```\n\n    ```\n    ################################################\n    #########               common argument         ############# \n    #################################################\n    canal.id= 1\n    ##这里可以指定ip，但是本人在腾讯云上不配置的时候，读取到的是腾讯云的内网ip\n    canal.ip=\n    ##canal的端口\n    canal.port=11111\n    canal.metrics.pull.port=11112\n    ##zookeeper的IP要配置，多个用逗号隔开\n    canal.zkServers=127.0.0.1:2181\n    # flush data to zk\n    canal.zookeeper.flush.period = 1000\n    canal.withoutNetty = false\n    # flush meta cursor/parse position to file\n    canal.file.data.dir = ${canal.conf.dir}\n    canal.file.flush.period = 1000\n    ## memory store RingBuffer size, should be Math.pow(2,n)\n    canal.instance.memory.buffer.size = 16384\n    ## memory store RingBuffer used memory unit size , default 1kb\n    canal.instance.memory.buffer.memunit = 1024 \n    ## meory store gets mode used MEMSIZE or ITEMSIZE\n    canal.instance.memory.batch.mode = MEMSIZE\n    \n    ## detecing config\n    canal.instance.detecting.enable = false\n    #canal.instance.detecting.sql = insert into retl.xdual values(1,now()) on duplicate \t# \tkey update x=now()\n    canal.instance.detecting.sql = select 1\n    canal.instance.detecting.interval.time = 3\n    canal.instance.detecting.retry.threshold = 3\n    canal.instance.detecting.heartbeatHaEnable = false\n    \n    # support maximum transaction size, more than the size of the transaction will be \t\t# cut into multiple transactions delivery\n    canal.instance.transaction.size =  1024\n    # mysql fallback connected to new master should fallback times\n    canal.instance.fallbackIntervalInSeconds = 60\n    \n    # network config\n    canal.instance.network.receiveBufferSize = 16384\n    canal.instance.network.sendBufferSize = 16384\n    canal.instance.network.soTimeout = 30\n    # binlog filter config\n    canal.instance.filter.druid.ddl = true\n    canal.instance.filter.query.dcl = false\n    canal.instance.filter.query.dml = false\n    canal.instance.filter.query.ddl = false\n    canal.instance.filter.table.error = false\n    canal.instance.filter.rows = false\n    canal.instance.filter.transaction.entry = false\n    \n    # binlog format/image check\n    canal.instance.binlog.format = ROW,STATEMENT,MIXED \n    canal.instance.binlog.image = FULL,MINIMAL,NOBLOB\n    \n    # binlog ddl isolation\n    canal.instance.get.ddl.isolation = false\n    \n    # parallel parser config \n    ##单核cpu的机器上下面这个参数设置为true会报错，官方is解释说这是个bug，如果单核机器跑就设置false\n    canal.instance.parser.parallel = true\n    ## concurrent thread number, default 60% available processors, suggest not to exceed Runtime.getRuntime().availableProcessors()\n    #canal.instance.parser.parallelThreadSize = 16\n    ## disruptor ringbuffer size, must be power of 2\n    canal.instance.parser.parallelBufferSize = 256\n    \n    # table meta tsdb info 这个是1.1.0新加的目前不知道这是干嘛的，好像是存metadata的\n    canal.instance.tsdb.enable=true\n    canal.instance.tsdb.dir=${canal.file.data.dir:../conf}/${canal.instance.destination:}\n    canal.instance.tsdb.url=jdbc:h2:${canal.instance.tsdb.dir}/h2;CACHE_SIZE=1000;MODE=MYSQL;\n    canal.instance.tsdb.dbUsername=canal\n    canal.instance.tsdb.dbPassword=8Kvk,\"qlm-%<#h\n    \n    # rds oss binlog account\n    canal.instance.rds.accesskey =\n    canal.instance.rds.secretkey =\n    \n    #################################################\n    #########               destinations            ############# \n    #################################################\n    ## 多个example在此处进行配置,\n    canal.destinations= example\n    # conf root dir\n    canal.conf.dir = ../conf\n    # auto scan instance dir add/remove and start/stop instance\n    canal.auto.scan = true\n    canal.auto.scan.interval = 5\n    \n    canal.instance.tsdb.spring.xml=classpath:spring/tsdb/h2-tsdb.xml\n    #canal.instance.tsdb.spring.xml=classpath:spring/tsdb/mysql-tsdb.xml\n    \n    canal.instance.global.mode = spring \n    canal.instance.global.lazy = false\n    #canal.instance.global.manager.address = 127.0.0.1:1099\n    #canal.instance.global.spring.xml = classpath:spring/memory-instance.xml\n    #canal.instance.global.spring.xml = classpath:spring/file-instance.xml\n    ##我们使用zk实现ha 那么用下面这个spring的模式\n    canal.instance.global.spring.xml = classpath:spring/default-instance.xml\n    ```\n\n  * 修改 instance.properties\n\n    ```\n    vim /data/soft/canal-1.1.0/conf/example/instance.properties\n    ```\n\n    ```\n    \n    #################################################\n    ## mysql serverId , v1.0.26+ will autoGen \n    # canal.instance.mysql.slaveId=0\n    \n    # enable gtid use true/false 这个是新加的特性\n    canal.instance.gtidon=false\n    \n    # position info 配置要伪装的mysql的地址\n    canal.instance.master.address=127.0.0.1:3306\n    ##canal.instance.master.journal.name +  canal.instance.master.position :  精确指定一个 ##binlog 位点，进行启动\n    canal.instance.master.journal.name=\n    canal.instance.master.position=\n    ##canal.instance.master.timestamp :  指定一个时间戳，canal 会自动遍历 mysql binlog，找到对##应时间戳的 binlog 位点后，进行启动\n    canal.instance.master.timestamp=\n    canal.instance.master.gtid=\n    \n    # rds oss binlog\n    canal.instance.rds.accesskey=\n    canal.instance.rds.secretkey=\n    canal.instance.rds.instanceId=\n    \n    # table meta tsdb info\n    canal.instance.tsdb.enable=true\n    ##匹配\n    #canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/skyeye\n    #canal.instance.tsdb.dbUsername=canal\n    #canal.instance.tsdb.dbPassword=8Kvk,\"qlm-%<#h\n    \n    #canal.instance.standby.address =\n    #canal.instance.standby.journal.name =\n    #canal.instance.standby.position = \n    #canal.instance.standby.timestamp =\n    #canal.instance.standby.gtid=\n    \n    # username/password\n    ##配置为自己的数据库的账号和密码。\n    canal.instance.dbUsername=canal\n    canal.instance.dbPassword=8Kvk,\"qlm-%<#h\n    ##代表数据库的编码方式对应到 java 中的编码类型，比如 UTF-8，GBK , ISO-8859-1\n    canal.instance.connectionCharset=UTF-8\n    \n    # table regex 1.1.0去掉了默认db的设置只能用正则去过滤。\n    canal.instance.filter.regex=skyeye\\\\..*\n    # table black regex\n    canal.instance.filter.black.regex=\n    #################################################\n    ```\n\n* 启动和停止\n\n  * 启动\n\n    ```\n    cd /data/soft/canal-1.1.0/bin\n    \n    ./startup.sh\n    ```\n\n  * 日志查看 ,canal目录为服务的日志，example里为节点实例日志\n\n    ```\n    cd /data/soft/canal-1.1.0/logs\n    ll\n    drwxrwxrwx 4 root root 4096 Sep 17 15:59 ./\n    drwxr-xr-x 6 root root 4096 Sep 17 15:32 ../\n    drwxr-xr-x 3 root root 4096 Sep 18 11:02 canal/\n    drwxr-xr-x 3 root root 4096 Sep 18 09:45 example/\n    ```\n\n  * 停止\n\n    ```\n    ./stop.sh\n    ```\n\n#### TODO:joy:今天就到这里吧。下次补充Kafka\n\n[]: https://github.com/alibaba/canal/wiki\t\"canal官档\"\n\n","slug":"canal配置搭建","published":1,"updated":"2022-09-03T07:30:55.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz85u002ytwfazdju9cdm","content":"<p>Canal搭建配置及代码客户端了解下<a id=\"more\"></a>开始想写的时候，canal的版本还是1.0.2x,现在已经1.1.0了，所以要做什么事情要尽快。</p>\n<h3 id=\"环境概述：\"><a href=\"#环境概述：\" class=\"headerlink\" title=\"环境概述：\"></a>环境概述：</h3><ul>\n<li>linux系统版本：Ubuntu16.04 </li>\n<li>java版本：1.8.0_171</li>\n<li>zk版本: 3.4.12</li>\n<li>mysql版本：5.7.22 (<strong>这个就不安装了</strong>)</li>\n<li>canal版本：1.1.0</li>\n<li>kafka版本：2.11</li>\n<li>maven版本：3.5.4</li>\n<li>git 版本: 2.7.4</li>\n</ul>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><ul>\n<li><p>使用apt-get安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update -y</span><br><span class=\"line\">apt-get install -y git</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"安装maven\"><a href=\"#安装maven\" class=\"headerlink\" title=\"安装maven\"></a>安装maven</h3><ul>\n<li><p>下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz</span><br><span class=\"line\">tar -zxvf apache-maven-3.5.4-bin.tar.gz -C maven</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME=/data/soft/jdk1.8.0_171</span><br><span class=\"line\">JAVA_BIN=/data/soft/jdk1.8.0_171/bin</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH:$JSTORM_HOME/bin:$ZOOKEEPER_HOME/bin</span><br><span class=\"line\">ZOOKEEPER_HOME=/data/soft/zookeeper-3.4.12</span><br><span class=\"line\">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$ZOOKEEPER_HOME/lib</span><br><span class=\"line\">JSTORM_HOME=/data/soft/jstorm-2.2.1</span><br><span class=\"line\">##MAVEN start</span><br><span class=\"line\">MAVEN_HOME=/data/soft/maven</span><br><span class=\"line\">export MAVEN_HOME</span><br><span class=\"line\">export PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin</span><br><span class=\"line\">##MAVEN end</span><br><span class=\"line\">export ZOOKEEPER_HOME</span><br><span class=\"line\">export JAVA_HOME</span><br><span class=\"line\">export PATH</span><br><span class=\"line\">export CLASSPATH</span><br><span class=\"line\">export JSTORM_HOME</span><br></pre></td></tr></table></figure>\n\n<p>上面是我的环境变量配置文件,修改完后进行source</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -version</span><br><span class=\"line\"></span><br><span class=\"line\">Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-18T02:33:14+08:00)</span><br><span class=\"line\">Maven home: /data/soft/maven</span><br><span class=\"line\">Java version: 1.8.0_171, vendor: Oracle Corporation, runtime: /data/soft/jdk1.8.0_171/jre</span><br><span class=\"line\">Default locale: en_US, platform encoding: UTF-8</span><br><span class=\"line\">OS name: &quot;linux&quot;, version: &quot;4.4.0-127-generic&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br></pre></td></tr></table></figure>\n\n<p>安装成功</p>\n</li>\n</ul>\n<h3 id=\"安装zookeeper\"><a href=\"#安装zookeeper\" class=\"headerlink\" title=\"安装zookeeper\"></a>安装zookeeper</h3><ul>\n<li><p>下载,安装zookeeper</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://archive.apache.org/dist/zookeeper/zookeeper-3.4.12/zookeeper-3.4.12.tar.gz</span><br><span class=\"line\">tar -zxvf zookeeper-3.4.12 -C zookeeper</span><br><span class=\"line\">cd /data/soft/zookeeper/conf</span><br><span class=\"line\">cp  zoo_sample.cfg   zoo_sample.cfg.bak</span><br><span class=\"line\">mv  zoo_sample.cfg zoo.cfg</span><br><span class=\"line\">vim zoo.cfg</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># The number of milliseconds of each tick</span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\"># The number of ticks that the initial </span><br><span class=\"line\"># synchronization phase can take</span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\"># The number of ticks that can pass between </span><br><span class=\"line\"># sending a request and getting an acknowledgement</span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\"># the directory where the snapshot is stored.</span><br><span class=\"line\"># do not use /tmp for storage, /tmp here is just </span><br><span class=\"line\"># example sakes.</span><br><span class=\"line\">##修改这里，如果没有就添加这行</span><br><span class=\"line\">dataDir=/data/soft/zookeeper/data</span><br><span class=\"line\"># the port at which the clients will connect</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\"># the maximum number of client connections.</span><br><span class=\"line\"># increase this if you need to handle more clients</span><br><span class=\"line\">#maxClientCnxns=60</span><br><span class=\"line\">#</span><br><span class=\"line\"># Be sure to read the maintenance section of the </span><br><span class=\"line\"># administrator guide before turning on autopurge.</span><br><span class=\"line\">#</span><br><span class=\"line\"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class=\"line\">#</span><br><span class=\"line\"># The number of snapshots to retain in dataDir</span><br><span class=\"line\">#autopurge.snapRetainCount=3</span><br><span class=\"line\"># Purge task interval in hours</span><br><span class=\"line\"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class=\"line\">#autopurge.purgeInterval=1</span><br><span class=\"line\">##添加日志目录</span><br><span class=\"line\">dataLogDir=/data/soft/zookeeper-3.4.5/logs</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动 zookeeper</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/zookeeper</span><br><span class=\"line\">./bin/zkServer.sh start ./conf/zoo.cfg</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 zkui</p>\n<ul>\n<li><p>下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/DeemOpen/zkui.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/zkui</span><br><span class=\"line\">vim config.cfg</span><br></pre></td></tr></table></figure>\n\n<p>将下面的进行修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serverPort=9090     #指定端口</span><br><span class=\"line\">zkServer=192.168.1.110:2181</span><br><span class=\"line\">sessionTimeout=300000</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进行maven编译生成war包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/zkui</span><br><span class=\"line\">mvn clean install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup java -jar target/zkui-2.0-SNAPSHOT-jar-with-dependencies.jar &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>访问</p>\n<p>默认密码为 admin/manager appconfig/appconfig ,在cfg文件中可以配置，appconfig为只读权限中户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:9090/</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Mysql配置\"><a href=\"#Mysql配置\" class=\"headerlink\" title=\"Mysql配置\"></a>Mysql配置</h3><ul>\n<li><p>配置开启binlog</p>\n<p>本机使用apt-get安装的mysql</p>\n<p>列出所有的 my.cnf 文件 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">locate my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/alternatives/my.cnf</span><br><span class=\"line\">/etc/mysql/my.cnf</span><br><span class=\"line\">/etc/mysql/my.cnf.fallback</span><br><span class=\"line\">/var/lib/docker/aufs/diff/46b0e64a8cd2c560c66b86b89918ef4ca60c761b87ba166b52b32d1f94191d09/etc/alternatives/my.cnf</span><br><span class=\"line\">/var/lib/docker/aufs/diff/46b0e64a8cd2c560c66b86b89918ef4ca60c761b87ba166b52b32d1f94191d09/etc/mysql/my.cnf</span><br><span class=\"line\">/var/lib/docker/aufs/diff/46b0e64a8cd2c560c66b86b89918ef4ca60c761b87ba166b52b32d1f94191d09/etc/mysql/my.cnf.fallback</span><br><span class=\"line\">/var/lib/docker/aufs/diff/46b0e64a8cd2c560c66b86b89918ef4ca60c761b87ba166b52b32d1f94191d09/var/lib/dpkg/alternatives/my.cnf</span><br><span class=\"line\">/var/lib/docker/aufs/diff/d07cc37ba4daa1bba8e1cefb641912781ad304503ce4c3818d3cbf4c17b0587e/etc/mysql/my.cnf</span><br><span class=\"line\">/var/lib/dpkg/alternatives/my.cnf</span><br></pre></td></tr></table></figure>\n\n<p>查看是否使用了指定目录的 my.cnf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux|grep mysql|grep &apos;my.cnf&apos;</span><br></pre></td></tr></table></figure>\n\n<p>显然没有,那么查看mysql使用的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql --help|grep &apos;my.cnf&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf</span><br></pre></td></tr></table></figure>\n\n<p>挨个查看文件。使用的是 <code>/etc/mysql/my.cnf</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim  /etc/mysql/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\"># The MySQL database server configuration file.</span><br><span class=\"line\">#</span><br><span class=\"line\"># You can copy this to one of:</span><br><span class=\"line\"># - &quot;/etc/mysql/my.cnf&quot; to set global options,</span><br><span class=\"line\"># - &quot;~/.my.cnf&quot; to set user-specific options.</span><br><span class=\"line\"># </span><br><span class=\"line\"># One can use all long options that the program supports.</span><br><span class=\"line\"># Run program with --help to get a list of available options and with</span><br><span class=\"line\"># --print-defaults to see which it would actually understand and use.</span><br><span class=\"line\">#</span><br><span class=\"line\"># For explanations see</span><br><span class=\"line\"># http://dev.mysql.com/doc/mysql/en/server-system-variables.html</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\"># * IMPORTANT: Additional settings that can override those from this file!</span><br><span class=\"line\">#   The files must end with &apos;.cnf&apos;, otherwise they&apos;ll be ignored.</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\">!includedir /etc/mysql/conf.d/</span><br><span class=\"line\">!includedir /etc/mysql/mysql.conf.d/</span><br></pre></td></tr></table></figure>\n\n<p>查看 <code>/etc/mysql/conf.d/</code> 和<code>/etc/mysql/mysql.conf.d/</code> 目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-0-17-ubuntu:/data/soft/zkui# cd /etc/mysql/mysql.conf.d/</span><br><span class=\"line\">root@VM-0-17-ubuntu:/etc/mysql/mysql.conf.d# ls</span><br><span class=\"line\">mysqld.cnf  mysqld_safe_syslog.cnf</span><br><span class=\"line\">root@VM-0-17-ubuntu:/etc/mysql/mysql.conf.d# vim mysqld.cnf</span><br></pre></td></tr></table></figure>\n\n<p>在这里，那么在[mysqld]下面加入配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">##canal config</span><br><span class=\"line\">log-bin=mysql-bin #添加这一行就ok</span><br><span class=\"line\">binlog-format=ROW #选择row模式</span><br><span class=\"line\">server_id=1 #配置mysql replaction需要定义，不能和canal的slaveId重复,这个在1.1.0里面已经不用设置</span><br></pre></td></tr></table></figure>\n\n<p>重启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysql restart</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>创建canal使用的mysql账号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER canal IDENTIFIED BY &apos;canal&apos;;  </span><br><span class=\"line\">GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &apos;canal&apos;@&apos;%&apos;;</span><br><span class=\"line\">-- GRANT ALL PRIVILEGES ON *.* TO &apos;canal&apos;@&apos;%&apos; ;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Canal安装配置\"><a href=\"#Canal安装配置\" class=\"headerlink\" title=\"Canal安装配置\"></a>Canal安装配置</h3><ul>\n<li><p>下载</p>\n<p>我们下载<code>canal.deployer-1.1.0.tar.gz</code>,先不配置kafka.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/alibaba/canal/releases</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf canal.deployer-1.1.0.tar.gz -C canal-1.1.0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置</p>\n<ul>\n<li><p>修改canal.properties，这个是全局的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd  canal-1.1.0/conf</span><br><span class=\"line\"></span><br><span class=\"line\">vim canal.properties</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">################################################</span><br><span class=\"line\">#########               common argument         ############# </span><br><span class=\"line\">#################################################</span><br><span class=\"line\">canal.id= 1</span><br><span class=\"line\">##这里可以指定ip，但是本人在腾讯云上不配置的时候，读取到的是腾讯云的内网ip</span><br><span class=\"line\">canal.ip=</span><br><span class=\"line\">##canal的端口</span><br><span class=\"line\">canal.port=11111</span><br><span class=\"line\">canal.metrics.pull.port=11112</span><br><span class=\"line\">##zookeeper的IP要配置，多个用逗号隔开</span><br><span class=\"line\">canal.zkServers=127.0.0.1:2181</span><br><span class=\"line\"># flush data to zk</span><br><span class=\"line\">canal.zookeeper.flush.period = 1000</span><br><span class=\"line\">canal.withoutNetty = false</span><br><span class=\"line\"># flush meta cursor/parse position to file</span><br><span class=\"line\">canal.file.data.dir = $&#123;canal.conf.dir&#125;</span><br><span class=\"line\">canal.file.flush.period = 1000</span><br><span class=\"line\">## memory store RingBuffer size, should be Math.pow(2,n)</span><br><span class=\"line\">canal.instance.memory.buffer.size = 16384</span><br><span class=\"line\">## memory store RingBuffer used memory unit size , default 1kb</span><br><span class=\"line\">canal.instance.memory.buffer.memunit = 1024 </span><br><span class=\"line\">## meory store gets mode used MEMSIZE or ITEMSIZE</span><br><span class=\"line\">canal.instance.memory.batch.mode = MEMSIZE</span><br><span class=\"line\"></span><br><span class=\"line\">## detecing config</span><br><span class=\"line\">canal.instance.detecting.enable = false</span><br><span class=\"line\">#canal.instance.detecting.sql = insert into retl.xdual values(1,now()) on duplicate \t# \tkey update x=now()</span><br><span class=\"line\">canal.instance.detecting.sql = select 1</span><br><span class=\"line\">canal.instance.detecting.interval.time = 3</span><br><span class=\"line\">canal.instance.detecting.retry.threshold = 3</span><br><span class=\"line\">canal.instance.detecting.heartbeatHaEnable = false</span><br><span class=\"line\"></span><br><span class=\"line\"># support maximum transaction size, more than the size of the transaction will be \t\t# cut into multiple transactions delivery</span><br><span class=\"line\">canal.instance.transaction.size =  1024</span><br><span class=\"line\"># mysql fallback connected to new master should fallback times</span><br><span class=\"line\">canal.instance.fallbackIntervalInSeconds = 60</span><br><span class=\"line\"></span><br><span class=\"line\"># network config</span><br><span class=\"line\">canal.instance.network.receiveBufferSize = 16384</span><br><span class=\"line\">canal.instance.network.sendBufferSize = 16384</span><br><span class=\"line\">canal.instance.network.soTimeout = 30</span><br><span class=\"line\"># binlog filter config</span><br><span class=\"line\">canal.instance.filter.druid.ddl = true</span><br><span class=\"line\">canal.instance.filter.query.dcl = false</span><br><span class=\"line\">canal.instance.filter.query.dml = false</span><br><span class=\"line\">canal.instance.filter.query.ddl = false</span><br><span class=\"line\">canal.instance.filter.table.error = false</span><br><span class=\"line\">canal.instance.filter.rows = false</span><br><span class=\"line\">canal.instance.filter.transaction.entry = false</span><br><span class=\"line\"></span><br><span class=\"line\"># binlog format/image check</span><br><span class=\"line\">canal.instance.binlog.format = ROW,STATEMENT,MIXED </span><br><span class=\"line\">canal.instance.binlog.image = FULL,MINIMAL,NOBLOB</span><br><span class=\"line\"></span><br><span class=\"line\"># binlog ddl isolation</span><br><span class=\"line\">canal.instance.get.ddl.isolation = false</span><br><span class=\"line\"></span><br><span class=\"line\"># parallel parser config </span><br><span class=\"line\">##单核cpu的机器上下面这个参数设置为true会报错，官方is解释说这是个bug，如果单核机器跑就设置false</span><br><span class=\"line\">canal.instance.parser.parallel = true</span><br><span class=\"line\">## concurrent thread number, default 60% available processors, suggest not to exceed Runtime.getRuntime().availableProcessors()</span><br><span class=\"line\">#canal.instance.parser.parallelThreadSize = 16</span><br><span class=\"line\">## disruptor ringbuffer size, must be power of 2</span><br><span class=\"line\">canal.instance.parser.parallelBufferSize = 256</span><br><span class=\"line\"></span><br><span class=\"line\"># table meta tsdb info 这个是1.1.0新加的目前不知道这是干嘛的，好像是存metadata的</span><br><span class=\"line\">canal.instance.tsdb.enable=true</span><br><span class=\"line\">canal.instance.tsdb.dir=$&#123;canal.file.data.dir:../conf&#125;/$&#123;canal.instance.destination:&#125;</span><br><span class=\"line\">canal.instance.tsdb.url=jdbc:h2:$&#123;canal.instance.tsdb.dir&#125;/h2;CACHE_SIZE=1000;MODE=MYSQL;</span><br><span class=\"line\">canal.instance.tsdb.dbUsername=canal</span><br><span class=\"line\">canal.instance.tsdb.dbPassword=8Kvk,&quot;qlm-%&lt;#h</span><br><span class=\"line\"></span><br><span class=\"line\"># rds oss binlog account</span><br><span class=\"line\">canal.instance.rds.accesskey =</span><br><span class=\"line\">canal.instance.rds.secretkey =</span><br><span class=\"line\"></span><br><span class=\"line\">#################################################</span><br><span class=\"line\">#########               destinations            ############# </span><br><span class=\"line\">#################################################</span><br><span class=\"line\">## 多个example在此处进行配置,</span><br><span class=\"line\">canal.destinations= example</span><br><span class=\"line\"># conf root dir</span><br><span class=\"line\">canal.conf.dir = ../conf</span><br><span class=\"line\"># auto scan instance dir add/remove and start/stop instance</span><br><span class=\"line\">canal.auto.scan = true</span><br><span class=\"line\">canal.auto.scan.interval = 5</span><br><span class=\"line\"></span><br><span class=\"line\">canal.instance.tsdb.spring.xml=classpath:spring/tsdb/h2-tsdb.xml</span><br><span class=\"line\">#canal.instance.tsdb.spring.xml=classpath:spring/tsdb/mysql-tsdb.xml</span><br><span class=\"line\"></span><br><span class=\"line\">canal.instance.global.mode = spring </span><br><span class=\"line\">canal.instance.global.lazy = false</span><br><span class=\"line\">#canal.instance.global.manager.address = 127.0.0.1:1099</span><br><span class=\"line\">#canal.instance.global.spring.xml = classpath:spring/memory-instance.xml</span><br><span class=\"line\">#canal.instance.global.spring.xml = classpath:spring/file-instance.xml</span><br><span class=\"line\">##我们使用zk实现ha 那么用下面这个spring的模式</span><br><span class=\"line\">canal.instance.global.spring.xml = classpath:spring/default-instance.xml</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改 instance.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /data/soft/canal-1.1.0/conf/example/instance.properties</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#################################################</span><br><span class=\"line\">## mysql serverId , v1.0.26+ will autoGen </span><br><span class=\"line\"># canal.instance.mysql.slaveId=0</span><br><span class=\"line\"></span><br><span class=\"line\"># enable gtid use true/false 这个是新加的特性</span><br><span class=\"line\">canal.instance.gtidon=false</span><br><span class=\"line\"></span><br><span class=\"line\"># position info 配置要伪装的mysql的地址</span><br><span class=\"line\">canal.instance.master.address=127.0.0.1:3306</span><br><span class=\"line\">##canal.instance.master.journal.name +  canal.instance.master.position :  精确指定一个 ##binlog 位点，进行启动</span><br><span class=\"line\">canal.instance.master.journal.name=</span><br><span class=\"line\">canal.instance.master.position=</span><br><span class=\"line\">##canal.instance.master.timestamp :  指定一个时间戳，canal 会自动遍历 mysql binlog，找到对##应时间戳的 binlog 位点后，进行启动</span><br><span class=\"line\">canal.instance.master.timestamp=</span><br><span class=\"line\">canal.instance.master.gtid=</span><br><span class=\"line\"></span><br><span class=\"line\"># rds oss binlog</span><br><span class=\"line\">canal.instance.rds.accesskey=</span><br><span class=\"line\">canal.instance.rds.secretkey=</span><br><span class=\"line\">canal.instance.rds.instanceId=</span><br><span class=\"line\"></span><br><span class=\"line\"># table meta tsdb info</span><br><span class=\"line\">canal.instance.tsdb.enable=true</span><br><span class=\"line\">##匹配</span><br><span class=\"line\">#canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/skyeye</span><br><span class=\"line\">#canal.instance.tsdb.dbUsername=canal</span><br><span class=\"line\">#canal.instance.tsdb.dbPassword=8Kvk,&quot;qlm-%&lt;#h</span><br><span class=\"line\"></span><br><span class=\"line\">#canal.instance.standby.address =</span><br><span class=\"line\">#canal.instance.standby.journal.name =</span><br><span class=\"line\">#canal.instance.standby.position = </span><br><span class=\"line\">#canal.instance.standby.timestamp =</span><br><span class=\"line\">#canal.instance.standby.gtid=</span><br><span class=\"line\"></span><br><span class=\"line\"># username/password</span><br><span class=\"line\">##配置为自己的数据库的账号和密码。</span><br><span class=\"line\">canal.instance.dbUsername=canal</span><br><span class=\"line\">canal.instance.dbPassword=8Kvk,&quot;qlm-%&lt;#h</span><br><span class=\"line\">##代表数据库的编码方式对应到 java 中的编码类型，比如 UTF-8，GBK , ISO-8859-1</span><br><span class=\"line\">canal.instance.connectionCharset=UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\"># table regex 1.1.0去掉了默认db的设置只能用正则去过滤。</span><br><span class=\"line\">canal.instance.filter.regex=skyeye\\\\..*</span><br><span class=\"line\"># table black regex</span><br><span class=\"line\">canal.instance.filter.black.regex=</span><br><span class=\"line\">#################################################</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>启动和停止</p>\n<ul>\n<li><p>启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/canal-1.1.0/bin</span><br><span class=\"line\"></span><br><span class=\"line\">./startup.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>日志查看 ,canal目录为服务的日志，example里为节点实例日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/canal-1.1.0/logs</span><br><span class=\"line\">ll</span><br><span class=\"line\">drwxrwxrwx 4 root root 4096 Sep 17 15:59 ./</span><br><span class=\"line\">drwxr-xr-x 6 root root 4096 Sep 17 15:32 ../</span><br><span class=\"line\">drwxr-xr-x 3 root root 4096 Sep 18 11:02 canal/</span><br><span class=\"line\">drwxr-xr-x 3 root root 4096 Sep 18 09:45 example/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>停止</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./stop.sh</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"TODO-joy-今天就到这里吧。下次补充Kafka\"><a href=\"#TODO-joy-今天就到这里吧。下次补充Kafka\" class=\"headerlink\" title=\"TODO:joy:今天就到这里吧。下次补充Kafka\"></a>TODO:joy:今天就到这里吧。下次补充Kafka</h4><p>[]: <a href=\"https://github.com/alibaba/canal/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/canal/wiki</a>    “canal官档”</p>\n","site":{"data":{}},"excerpt":"<p>Canal搭建配置及代码客户端了解下</p>","more":"开始想写的时候，canal的版本还是1.0.2x,现在已经1.1.0了，所以要做什么事情要尽快。<p></p>\n<h3 id=\"环境概述：\"><a href=\"#环境概述：\" class=\"headerlink\" title=\"环境概述：\"></a>环境概述：</h3><ul>\n<li>linux系统版本：Ubuntu16.04 </li>\n<li>java版本：1.8.0_171</li>\n<li>zk版本: 3.4.12</li>\n<li>mysql版本：5.7.22 (<strong>这个就不安装了</strong>)</li>\n<li>canal版本：1.1.0</li>\n<li>kafka版本：2.11</li>\n<li>maven版本：3.5.4</li>\n<li>git 版本: 2.7.4</li>\n</ul>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><ul>\n<li><p>使用apt-get安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update -y</span><br><span class=\"line\">apt-get install -y git</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"安装maven\"><a href=\"#安装maven\" class=\"headerlink\" title=\"安装maven\"></a>安装maven</h3><ul>\n<li><p>下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz</span><br><span class=\"line\">tar -zxvf apache-maven-3.5.4-bin.tar.gz -C maven</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME=/data/soft/jdk1.8.0_171</span><br><span class=\"line\">JAVA_BIN=/data/soft/jdk1.8.0_171/bin</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH:$JSTORM_HOME/bin:$ZOOKEEPER_HOME/bin</span><br><span class=\"line\">ZOOKEEPER_HOME=/data/soft/zookeeper-3.4.12</span><br><span class=\"line\">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$ZOOKEEPER_HOME/lib</span><br><span class=\"line\">JSTORM_HOME=/data/soft/jstorm-2.2.1</span><br><span class=\"line\">##MAVEN start</span><br><span class=\"line\">MAVEN_HOME=/data/soft/maven</span><br><span class=\"line\">export MAVEN_HOME</span><br><span class=\"line\">export PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin</span><br><span class=\"line\">##MAVEN end</span><br><span class=\"line\">export ZOOKEEPER_HOME</span><br><span class=\"line\">export JAVA_HOME</span><br><span class=\"line\">export PATH</span><br><span class=\"line\">export CLASSPATH</span><br><span class=\"line\">export JSTORM_HOME</span><br></pre></td></tr></table></figure>\n\n<p>上面是我的环境变量配置文件,修改完后进行source</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -version</span><br><span class=\"line\"></span><br><span class=\"line\">Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-18T02:33:14+08:00)</span><br><span class=\"line\">Maven home: /data/soft/maven</span><br><span class=\"line\">Java version: 1.8.0_171, vendor: Oracle Corporation, runtime: /data/soft/jdk1.8.0_171/jre</span><br><span class=\"line\">Default locale: en_US, platform encoding: UTF-8</span><br><span class=\"line\">OS name: &quot;linux&quot;, version: &quot;4.4.0-127-generic&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br></pre></td></tr></table></figure>\n\n<p>安装成功</p>\n</li>\n</ul>\n<h3 id=\"安装zookeeper\"><a href=\"#安装zookeeper\" class=\"headerlink\" title=\"安装zookeeper\"></a>安装zookeeper</h3><ul>\n<li><p>下载,安装zookeeper</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://archive.apache.org/dist/zookeeper/zookeeper-3.4.12/zookeeper-3.4.12.tar.gz</span><br><span class=\"line\">tar -zxvf zookeeper-3.4.12 -C zookeeper</span><br><span class=\"line\">cd /data/soft/zookeeper/conf</span><br><span class=\"line\">cp  zoo_sample.cfg   zoo_sample.cfg.bak</span><br><span class=\"line\">mv  zoo_sample.cfg zoo.cfg</span><br><span class=\"line\">vim zoo.cfg</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># The number of milliseconds of each tick</span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\"># The number of ticks that the initial </span><br><span class=\"line\"># synchronization phase can take</span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\"># The number of ticks that can pass between </span><br><span class=\"line\"># sending a request and getting an acknowledgement</span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\"># the directory where the snapshot is stored.</span><br><span class=\"line\"># do not use /tmp for storage, /tmp here is just </span><br><span class=\"line\"># example sakes.</span><br><span class=\"line\">##修改这里，如果没有就添加这行</span><br><span class=\"line\">dataDir=/data/soft/zookeeper/data</span><br><span class=\"line\"># the port at which the clients will connect</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\"># the maximum number of client connections.</span><br><span class=\"line\"># increase this if you need to handle more clients</span><br><span class=\"line\">#maxClientCnxns=60</span><br><span class=\"line\">#</span><br><span class=\"line\"># Be sure to read the maintenance section of the </span><br><span class=\"line\"># administrator guide before turning on autopurge.</span><br><span class=\"line\">#</span><br><span class=\"line\"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class=\"line\">#</span><br><span class=\"line\"># The number of snapshots to retain in dataDir</span><br><span class=\"line\">#autopurge.snapRetainCount=3</span><br><span class=\"line\"># Purge task interval in hours</span><br><span class=\"line\"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class=\"line\">#autopurge.purgeInterval=1</span><br><span class=\"line\">##添加日志目录</span><br><span class=\"line\">dataLogDir=/data/soft/zookeeper-3.4.5/logs</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动 zookeeper</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/zookeeper</span><br><span class=\"line\">./bin/zkServer.sh start ./conf/zoo.cfg</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 zkui</p>\n<ul>\n<li><p>下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/DeemOpen/zkui.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/zkui</span><br><span class=\"line\">vim config.cfg</span><br></pre></td></tr></table></figure>\n\n<p>将下面的进行修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serverPort=9090     #指定端口</span><br><span class=\"line\">zkServer=192.168.1.110:2181</span><br><span class=\"line\">sessionTimeout=300000</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进行maven编译生成war包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/zkui</span><br><span class=\"line\">mvn clean install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup java -jar target/zkui-2.0-SNAPSHOT-jar-with-dependencies.jar &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>访问</p>\n<p>默认密码为 admin/manager appconfig/appconfig ,在cfg文件中可以配置，appconfig为只读权限中户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:9090/</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Mysql配置\"><a href=\"#Mysql配置\" class=\"headerlink\" title=\"Mysql配置\"></a>Mysql配置</h3><ul>\n<li><p>配置开启binlog</p>\n<p>本机使用apt-get安装的mysql</p>\n<p>列出所有的 my.cnf 文件 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">locate my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/alternatives/my.cnf</span><br><span class=\"line\">/etc/mysql/my.cnf</span><br><span class=\"line\">/etc/mysql/my.cnf.fallback</span><br><span class=\"line\">/var/lib/docker/aufs/diff/46b0e64a8cd2c560c66b86b89918ef4ca60c761b87ba166b52b32d1f94191d09/etc/alternatives/my.cnf</span><br><span class=\"line\">/var/lib/docker/aufs/diff/46b0e64a8cd2c560c66b86b89918ef4ca60c761b87ba166b52b32d1f94191d09/etc/mysql/my.cnf</span><br><span class=\"line\">/var/lib/docker/aufs/diff/46b0e64a8cd2c560c66b86b89918ef4ca60c761b87ba166b52b32d1f94191d09/etc/mysql/my.cnf.fallback</span><br><span class=\"line\">/var/lib/docker/aufs/diff/46b0e64a8cd2c560c66b86b89918ef4ca60c761b87ba166b52b32d1f94191d09/var/lib/dpkg/alternatives/my.cnf</span><br><span class=\"line\">/var/lib/docker/aufs/diff/d07cc37ba4daa1bba8e1cefb641912781ad304503ce4c3818d3cbf4c17b0587e/etc/mysql/my.cnf</span><br><span class=\"line\">/var/lib/dpkg/alternatives/my.cnf</span><br></pre></td></tr></table></figure>\n\n<p>查看是否使用了指定目录的 my.cnf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux|grep mysql|grep &apos;my.cnf&apos;</span><br></pre></td></tr></table></figure>\n\n<p>显然没有,那么查看mysql使用的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql --help|grep &apos;my.cnf&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf</span><br></pre></td></tr></table></figure>\n\n<p>挨个查看文件。使用的是 <code>/etc/mysql/my.cnf</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim  /etc/mysql/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\"># The MySQL database server configuration file.</span><br><span class=\"line\">#</span><br><span class=\"line\"># You can copy this to one of:</span><br><span class=\"line\"># - &quot;/etc/mysql/my.cnf&quot; to set global options,</span><br><span class=\"line\"># - &quot;~/.my.cnf&quot; to set user-specific options.</span><br><span class=\"line\"># </span><br><span class=\"line\"># One can use all long options that the program supports.</span><br><span class=\"line\"># Run program with --help to get a list of available options and with</span><br><span class=\"line\"># --print-defaults to see which it would actually understand and use.</span><br><span class=\"line\">#</span><br><span class=\"line\"># For explanations see</span><br><span class=\"line\"># http://dev.mysql.com/doc/mysql/en/server-system-variables.html</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\"># * IMPORTANT: Additional settings that can override those from this file!</span><br><span class=\"line\">#   The files must end with &apos;.cnf&apos;, otherwise they&apos;ll be ignored.</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\">!includedir /etc/mysql/conf.d/</span><br><span class=\"line\">!includedir /etc/mysql/mysql.conf.d/</span><br></pre></td></tr></table></figure>\n\n<p>查看 <code>/etc/mysql/conf.d/</code> 和<code>/etc/mysql/mysql.conf.d/</code> 目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-0-17-ubuntu:/data/soft/zkui# cd /etc/mysql/mysql.conf.d/</span><br><span class=\"line\">root@VM-0-17-ubuntu:/etc/mysql/mysql.conf.d# ls</span><br><span class=\"line\">mysqld.cnf  mysqld_safe_syslog.cnf</span><br><span class=\"line\">root@VM-0-17-ubuntu:/etc/mysql/mysql.conf.d# vim mysqld.cnf</span><br></pre></td></tr></table></figure>\n\n<p>在这里，那么在[mysqld]下面加入配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">##canal config</span><br><span class=\"line\">log-bin=mysql-bin #添加这一行就ok</span><br><span class=\"line\">binlog-format=ROW #选择row模式</span><br><span class=\"line\">server_id=1 #配置mysql replaction需要定义，不能和canal的slaveId重复,这个在1.1.0里面已经不用设置</span><br></pre></td></tr></table></figure>\n\n<p>重启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysql restart</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>创建canal使用的mysql账号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER canal IDENTIFIED BY &apos;canal&apos;;  </span><br><span class=\"line\">GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &apos;canal&apos;@&apos;%&apos;;</span><br><span class=\"line\">-- GRANT ALL PRIVILEGES ON *.* TO &apos;canal&apos;@&apos;%&apos; ;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Canal安装配置\"><a href=\"#Canal安装配置\" class=\"headerlink\" title=\"Canal安装配置\"></a>Canal安装配置</h3><ul>\n<li><p>下载</p>\n<p>我们下载<code>canal.deployer-1.1.0.tar.gz</code>,先不配置kafka.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/alibaba/canal/releases</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf canal.deployer-1.1.0.tar.gz -C canal-1.1.0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置</p>\n<ul>\n<li><p>修改canal.properties，这个是全局的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd  canal-1.1.0/conf</span><br><span class=\"line\"></span><br><span class=\"line\">vim canal.properties</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">################################################</span><br><span class=\"line\">#########               common argument         ############# </span><br><span class=\"line\">#################################################</span><br><span class=\"line\">canal.id= 1</span><br><span class=\"line\">##这里可以指定ip，但是本人在腾讯云上不配置的时候，读取到的是腾讯云的内网ip</span><br><span class=\"line\">canal.ip=</span><br><span class=\"line\">##canal的端口</span><br><span class=\"line\">canal.port=11111</span><br><span class=\"line\">canal.metrics.pull.port=11112</span><br><span class=\"line\">##zookeeper的IP要配置，多个用逗号隔开</span><br><span class=\"line\">canal.zkServers=127.0.0.1:2181</span><br><span class=\"line\"># flush data to zk</span><br><span class=\"line\">canal.zookeeper.flush.period = 1000</span><br><span class=\"line\">canal.withoutNetty = false</span><br><span class=\"line\"># flush meta cursor/parse position to file</span><br><span class=\"line\">canal.file.data.dir = $&#123;canal.conf.dir&#125;</span><br><span class=\"line\">canal.file.flush.period = 1000</span><br><span class=\"line\">## memory store RingBuffer size, should be Math.pow(2,n)</span><br><span class=\"line\">canal.instance.memory.buffer.size = 16384</span><br><span class=\"line\">## memory store RingBuffer used memory unit size , default 1kb</span><br><span class=\"line\">canal.instance.memory.buffer.memunit = 1024 </span><br><span class=\"line\">## meory store gets mode used MEMSIZE or ITEMSIZE</span><br><span class=\"line\">canal.instance.memory.batch.mode = MEMSIZE</span><br><span class=\"line\"></span><br><span class=\"line\">## detecing config</span><br><span class=\"line\">canal.instance.detecting.enable = false</span><br><span class=\"line\">#canal.instance.detecting.sql = insert into retl.xdual values(1,now()) on duplicate \t# \tkey update x=now()</span><br><span class=\"line\">canal.instance.detecting.sql = select 1</span><br><span class=\"line\">canal.instance.detecting.interval.time = 3</span><br><span class=\"line\">canal.instance.detecting.retry.threshold = 3</span><br><span class=\"line\">canal.instance.detecting.heartbeatHaEnable = false</span><br><span class=\"line\"></span><br><span class=\"line\"># support maximum transaction size, more than the size of the transaction will be \t\t# cut into multiple transactions delivery</span><br><span class=\"line\">canal.instance.transaction.size =  1024</span><br><span class=\"line\"># mysql fallback connected to new master should fallback times</span><br><span class=\"line\">canal.instance.fallbackIntervalInSeconds = 60</span><br><span class=\"line\"></span><br><span class=\"line\"># network config</span><br><span class=\"line\">canal.instance.network.receiveBufferSize = 16384</span><br><span class=\"line\">canal.instance.network.sendBufferSize = 16384</span><br><span class=\"line\">canal.instance.network.soTimeout = 30</span><br><span class=\"line\"># binlog filter config</span><br><span class=\"line\">canal.instance.filter.druid.ddl = true</span><br><span class=\"line\">canal.instance.filter.query.dcl = false</span><br><span class=\"line\">canal.instance.filter.query.dml = false</span><br><span class=\"line\">canal.instance.filter.query.ddl = false</span><br><span class=\"line\">canal.instance.filter.table.error = false</span><br><span class=\"line\">canal.instance.filter.rows = false</span><br><span class=\"line\">canal.instance.filter.transaction.entry = false</span><br><span class=\"line\"></span><br><span class=\"line\"># binlog format/image check</span><br><span class=\"line\">canal.instance.binlog.format = ROW,STATEMENT,MIXED </span><br><span class=\"line\">canal.instance.binlog.image = FULL,MINIMAL,NOBLOB</span><br><span class=\"line\"></span><br><span class=\"line\"># binlog ddl isolation</span><br><span class=\"line\">canal.instance.get.ddl.isolation = false</span><br><span class=\"line\"></span><br><span class=\"line\"># parallel parser config </span><br><span class=\"line\">##单核cpu的机器上下面这个参数设置为true会报错，官方is解释说这是个bug，如果单核机器跑就设置false</span><br><span class=\"line\">canal.instance.parser.parallel = true</span><br><span class=\"line\">## concurrent thread number, default 60% available processors, suggest not to exceed Runtime.getRuntime().availableProcessors()</span><br><span class=\"line\">#canal.instance.parser.parallelThreadSize = 16</span><br><span class=\"line\">## disruptor ringbuffer size, must be power of 2</span><br><span class=\"line\">canal.instance.parser.parallelBufferSize = 256</span><br><span class=\"line\"></span><br><span class=\"line\"># table meta tsdb info 这个是1.1.0新加的目前不知道这是干嘛的，好像是存metadata的</span><br><span class=\"line\">canal.instance.tsdb.enable=true</span><br><span class=\"line\">canal.instance.tsdb.dir=$&#123;canal.file.data.dir:../conf&#125;/$&#123;canal.instance.destination:&#125;</span><br><span class=\"line\">canal.instance.tsdb.url=jdbc:h2:$&#123;canal.instance.tsdb.dir&#125;/h2;CACHE_SIZE=1000;MODE=MYSQL;</span><br><span class=\"line\">canal.instance.tsdb.dbUsername=canal</span><br><span class=\"line\">canal.instance.tsdb.dbPassword=8Kvk,&quot;qlm-%&lt;#h</span><br><span class=\"line\"></span><br><span class=\"line\"># rds oss binlog account</span><br><span class=\"line\">canal.instance.rds.accesskey =</span><br><span class=\"line\">canal.instance.rds.secretkey =</span><br><span class=\"line\"></span><br><span class=\"line\">#################################################</span><br><span class=\"line\">#########               destinations            ############# </span><br><span class=\"line\">#################################################</span><br><span class=\"line\">## 多个example在此处进行配置,</span><br><span class=\"line\">canal.destinations= example</span><br><span class=\"line\"># conf root dir</span><br><span class=\"line\">canal.conf.dir = ../conf</span><br><span class=\"line\"># auto scan instance dir add/remove and start/stop instance</span><br><span class=\"line\">canal.auto.scan = true</span><br><span class=\"line\">canal.auto.scan.interval = 5</span><br><span class=\"line\"></span><br><span class=\"line\">canal.instance.tsdb.spring.xml=classpath:spring/tsdb/h2-tsdb.xml</span><br><span class=\"line\">#canal.instance.tsdb.spring.xml=classpath:spring/tsdb/mysql-tsdb.xml</span><br><span class=\"line\"></span><br><span class=\"line\">canal.instance.global.mode = spring </span><br><span class=\"line\">canal.instance.global.lazy = false</span><br><span class=\"line\">#canal.instance.global.manager.address = 127.0.0.1:1099</span><br><span class=\"line\">#canal.instance.global.spring.xml = classpath:spring/memory-instance.xml</span><br><span class=\"line\">#canal.instance.global.spring.xml = classpath:spring/file-instance.xml</span><br><span class=\"line\">##我们使用zk实现ha 那么用下面这个spring的模式</span><br><span class=\"line\">canal.instance.global.spring.xml = classpath:spring/default-instance.xml</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改 instance.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /data/soft/canal-1.1.0/conf/example/instance.properties</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#################################################</span><br><span class=\"line\">## mysql serverId , v1.0.26+ will autoGen </span><br><span class=\"line\"># canal.instance.mysql.slaveId=0</span><br><span class=\"line\"></span><br><span class=\"line\"># enable gtid use true/false 这个是新加的特性</span><br><span class=\"line\">canal.instance.gtidon=false</span><br><span class=\"line\"></span><br><span class=\"line\"># position info 配置要伪装的mysql的地址</span><br><span class=\"line\">canal.instance.master.address=127.0.0.1:3306</span><br><span class=\"line\">##canal.instance.master.journal.name +  canal.instance.master.position :  精确指定一个 ##binlog 位点，进行启动</span><br><span class=\"line\">canal.instance.master.journal.name=</span><br><span class=\"line\">canal.instance.master.position=</span><br><span class=\"line\">##canal.instance.master.timestamp :  指定一个时间戳，canal 会自动遍历 mysql binlog，找到对##应时间戳的 binlog 位点后，进行启动</span><br><span class=\"line\">canal.instance.master.timestamp=</span><br><span class=\"line\">canal.instance.master.gtid=</span><br><span class=\"line\"></span><br><span class=\"line\"># rds oss binlog</span><br><span class=\"line\">canal.instance.rds.accesskey=</span><br><span class=\"line\">canal.instance.rds.secretkey=</span><br><span class=\"line\">canal.instance.rds.instanceId=</span><br><span class=\"line\"></span><br><span class=\"line\"># table meta tsdb info</span><br><span class=\"line\">canal.instance.tsdb.enable=true</span><br><span class=\"line\">##匹配</span><br><span class=\"line\">#canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/skyeye</span><br><span class=\"line\">#canal.instance.tsdb.dbUsername=canal</span><br><span class=\"line\">#canal.instance.tsdb.dbPassword=8Kvk,&quot;qlm-%&lt;#h</span><br><span class=\"line\"></span><br><span class=\"line\">#canal.instance.standby.address =</span><br><span class=\"line\">#canal.instance.standby.journal.name =</span><br><span class=\"line\">#canal.instance.standby.position = </span><br><span class=\"line\">#canal.instance.standby.timestamp =</span><br><span class=\"line\">#canal.instance.standby.gtid=</span><br><span class=\"line\"></span><br><span class=\"line\"># username/password</span><br><span class=\"line\">##配置为自己的数据库的账号和密码。</span><br><span class=\"line\">canal.instance.dbUsername=canal</span><br><span class=\"line\">canal.instance.dbPassword=8Kvk,&quot;qlm-%&lt;#h</span><br><span class=\"line\">##代表数据库的编码方式对应到 java 中的编码类型，比如 UTF-8，GBK , ISO-8859-1</span><br><span class=\"line\">canal.instance.connectionCharset=UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\"># table regex 1.1.0去掉了默认db的设置只能用正则去过滤。</span><br><span class=\"line\">canal.instance.filter.regex=skyeye\\\\..*</span><br><span class=\"line\"># table black regex</span><br><span class=\"line\">canal.instance.filter.black.regex=</span><br><span class=\"line\">#################################################</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>启动和停止</p>\n<ul>\n<li><p>启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/canal-1.1.0/bin</span><br><span class=\"line\"></span><br><span class=\"line\">./startup.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>日志查看 ,canal目录为服务的日志，example里为节点实例日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/canal-1.1.0/logs</span><br><span class=\"line\">ll</span><br><span class=\"line\">drwxrwxrwx 4 root root 4096 Sep 17 15:59 ./</span><br><span class=\"line\">drwxr-xr-x 6 root root 4096 Sep 17 15:32 ../</span><br><span class=\"line\">drwxr-xr-x 3 root root 4096 Sep 18 11:02 canal/</span><br><span class=\"line\">drwxr-xr-x 3 root root 4096 Sep 18 09:45 example/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>停止</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./stop.sh</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"TODO-joy-今天就到这里吧。下次补充Kafka\"><a href=\"#TODO-joy-今天就到这里吧。下次补充Kafka\" class=\"headerlink\" title=\"TODO:joy:今天就到这里吧。下次补充Kafka\"></a>TODO:joy:今天就到这里吧。下次补充Kafka</h4><p>[]: <a href=\"https://github.com/alibaba/canal/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/canal/wiki</a>    “canal官档”</p>"},{"title":"git简单记录","date":"2018-10-02T17:12:11.000Z","_content":"\n git了解下<!--more-->\n\n### git配置\n\n* 用户信息编辑\n\n  如果用了``--global``选项，那么配置文件就是更改的位于用户主目录下，就是全局配置。如果在特定项目中想使用其他的用户名和邮箱地址，只要去掉``--global``就可以了，新的配置保存在当前项目的``./git/config``文件中。\n\n  ```\n  git config --global user.name \"andy\"\n  git config --global user.email xxx#gmail.com\n  ```\n\n* 查看配置信息\n\n  ```\n  git config --list\n  ```\n\n  ````\n  core.symlinks=false\n  core.autocrlf=true\n  core.fscache=true\n  color.diff=auto\n  color.status=auto\n  color.branch=auto\n  color.interactive=true\n  help.format=html\n  rebase.autosquash=true\n  http.sslcainfo=D:/Tools/Git/mingw64/ssl/certs/ca-bundle.crt\n  http.sslbackend=openssl\n  diff.astextplain.textconv=astextplain\n  filter.lfs.clean=git-lfs clean -- %f\n  filter.lfs.smudge=git-lfs smudge -- %f\n  filter.lfs.process=git-lfs filter-process\n  filter.lfs.required=true\n  credential.helper=manager\n  user.name=xxxx\n  user.email=xxxx@xxx.com\n  core.repositoryformatversion=0\n  core.filemode=false\n  core.bare=false\n  core.logallrefupdates=true\n  ````\n\n* 查看某个环境变量的设定\n\n  ````\n  git config user.name\n  ````\n\n* help命令\n\n  ```\n  git hepl command\n  ```\n\n### git基础\n\n* git创建项目\n\n  * 在新的项目的根目录下执行命令\n\n    ```\n    git init\n    Initialized empty Git repository in E:/sourcetree/test_1/.git/\n    ```\n\n  * 将项目中的文件加入版本控制\n\n    ````\n    git add *.java\n    git add readme.md\n    ````\n\n* git 克隆项目\n\n  ```\n  git clone git://xxxxxx  yourNewProjectName\n  ```\n\n* 记录每次更新到仓库\n\n  * 查看文件状态\n\n    ```\n    git status\n    ```\n\n*  **gitignore 文件编辑**\n\n  我们可以在项目的根目录下创建一个gitignore文件来管理\n\n  * **所有空行或者以注释符号 `＃` 开头的行都会被 Git 忽略。**\n  * **可以使用标准的 glob 模式匹配。**\n  * **匹配模式最后跟反斜杠（`/`）说明要忽略的是目录。**\n  * **要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（`!`）取反。**\n\n  ```\n  # 此为注释 – 将被 Git 忽略\n  # 忽略所有 .a 结尾的文件\n  *.a\n  # 但 lib.a 除外\n  !lib.a\n  # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\n  /TODO\n  # 忽略 build/ 目录下的所有文件\n  build/\n  # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\n  doc/*.txt\n  # 忽略 doc/ 目录下所有扩展名为 txt 的文件\n  doc/**/*.txt\n  ```\n\n* 查看已暂存和未暂存的更新\n\n  * git diff\n\n    git diff 查看当前文件和暂存区的快照区别\n\n    ```\n    git diff\n    ```\n\n    若要看**已经暂存起来的文件和上次提交时的快照之间的差异**，可以用 `git diff --cached` 命令 \n\n    现在可以用``git diff --staged``来替代--catched\n\n* 提交git commit\n\n  跳过add 将所有的文件都提交的话那么使用``git commit -a``\n\n* 从git中一处某个文件\n\n  从已经加入跟踪文件清单中移除某个文件，其实是从暂存区移除\n\n  使用``git rm``，这样就可以从版本控制中去除，并连带从工作目录中删除指定的文件，以后这个文件就再也不会出现在文件清单中了\n\n  从跟踪清单中去除的话 使用``git rm --cached xxx`` xxx 可以为reg模式\n\n* 移动文件,重命名\n\n  使用 ``git mv``\n\n  ```\n  git mv file_from file_to\n  ```\n\n* 查看日志\n\n  ````\n  git log\n  ````\n\n  使用 -p 来显示每次提交的内容差异，用-nums来显示最近几次更新\n\n  ```\n  git log -p -3\n  ```\n\n  使用 `--word-diff`  来显示具体的内容的差异变化历史\n\n  ```\n  git log -p -3 --word--diff\n  ```\n\n* 撤销操作\n\n  如果有漏提交的文件，那么使用以下命令进行重新提交\n\n  ```\n  git commit --amend\n  ```\n\n* 取消已经暂存的文件\n\n  如果有暂存的文件不想暂存了\n\n  ```\n  git reset HEAD xxxx\n  ```\n\n* 取消对文件的修改\n\n  ```\n   git checkout [<options>] <branch>\n   or\n   git checkout [<options>] [<branch>] -- <file>...\n  ```\n\n* 远程仓库操作\n\n  ```\n  git remote\n  ```\n\n  查看具体的克隆版本\n\n  ```\n  git remote -v\n  ```\n\n  抓取远程仓库有但是本地仓库没有的\n\n  ```\n  git fetch <branch>\n  ```\n\n* 推送数据到远程仓库\n\n  ```\n  git push [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=<git-receive-pack>]\n  \t   [--repo=<repository>] [-f | --force] [-d | --delete] [--prune] [-v | --verbose]\n  \t   [-u | --set-upstream] [--push-option=<string>]\n  \t   [--[no-]signed|--signed=(true|false|if-asked)]\n  \t   [--force-with-lease[=<refname>[:<expect>]]]\n  \t   [--no-verify] [<repository> [<refspec>…]]\n  ```\n\n* 查看远程仓库信息\n\n  ```\n  git remote show branch\n  ```\n\n* 远程仓库的删除和重命名\n\n  重命名\n\n  ```\n  git remote rename <old> <new>\n  ```\n\n  删除\n\n  ```\n  git remote remove <name>\n  ```\n\n* 打标签\n\n  ```\n  git tag [-a | -s | -u <keyid>] [-f] [-m <msg> | -F <file>] [-e]\n  \t<tagname> [<commit> | <object>]\n  git tag -d <tagname>…\n  git tag [-n[<num>]] -l [--contains <commit>] [--no-contains <commit>]\n  \t[--points-at <object>] [--column[=<options>] | --no-column]\n  \t[--create-reflog] [--sort=<key>] [--format=<format>]\n  \t[--[no-]merged [<commit>]] [<pattern>…]\n  git tag -v [--format=<format>] <tagname>…\n  ```\n\n  显示当前所有的标签\n\n  ```\n  git tag\n  ```\n\n  创建一个含附注类型的标签 使用-a(意思为 `annotated`  ) -m意思为标签的说明\n\n  ```\n  git tag -a v0.1 -m 'first-version'\n  ```\n\n  签署标签 \n\n  如果有私钥的话 可以用GPG来签署标签 只需要把-a改为-s 意为signed\n\n  **轻量级标签**\n\n  简单的标签，直接给出标签名字就行了\n\n  ```\n  git tag v0.2\n  ```\n\n  验证标签\n\n  ```\n  git tag -v [tag-name]\n  ```\n\n  ```\n  $ git tag -v v0.1\n  object 064d37a19d91f61f74269995433ff13d9ebdc958\n  type commit\n  tag v0.1\n  tagger andreby42 <38912428@qq.com> 1538508038 +0800\n  \n  first-version\n  error: no signature found\n  ```\n\n  当然我这里没有签名\n\n  **一次推送所有本地新增标签到远程**\n\n  ```\n  git push brach --tags\n  ```\n\n* \n\n\n\n\n\n\n\n","source":"_posts/git简单记录.md","raw":"---\ntitle: git简单记录\ndate: 2018-10-03 01:12:11\ntags: [git]\ncategories: [git]\n---\n\n git了解下<!--more-->\n\n### git配置\n\n* 用户信息编辑\n\n  如果用了``--global``选项，那么配置文件就是更改的位于用户主目录下，就是全局配置。如果在特定项目中想使用其他的用户名和邮箱地址，只要去掉``--global``就可以了，新的配置保存在当前项目的``./git/config``文件中。\n\n  ```\n  git config --global user.name \"andy\"\n  git config --global user.email xxx#gmail.com\n  ```\n\n* 查看配置信息\n\n  ```\n  git config --list\n  ```\n\n  ````\n  core.symlinks=false\n  core.autocrlf=true\n  core.fscache=true\n  color.diff=auto\n  color.status=auto\n  color.branch=auto\n  color.interactive=true\n  help.format=html\n  rebase.autosquash=true\n  http.sslcainfo=D:/Tools/Git/mingw64/ssl/certs/ca-bundle.crt\n  http.sslbackend=openssl\n  diff.astextplain.textconv=astextplain\n  filter.lfs.clean=git-lfs clean -- %f\n  filter.lfs.smudge=git-lfs smudge -- %f\n  filter.lfs.process=git-lfs filter-process\n  filter.lfs.required=true\n  credential.helper=manager\n  user.name=xxxx\n  user.email=xxxx@xxx.com\n  core.repositoryformatversion=0\n  core.filemode=false\n  core.bare=false\n  core.logallrefupdates=true\n  ````\n\n* 查看某个环境变量的设定\n\n  ````\n  git config user.name\n  ````\n\n* help命令\n\n  ```\n  git hepl command\n  ```\n\n### git基础\n\n* git创建项目\n\n  * 在新的项目的根目录下执行命令\n\n    ```\n    git init\n    Initialized empty Git repository in E:/sourcetree/test_1/.git/\n    ```\n\n  * 将项目中的文件加入版本控制\n\n    ````\n    git add *.java\n    git add readme.md\n    ````\n\n* git 克隆项目\n\n  ```\n  git clone git://xxxxxx  yourNewProjectName\n  ```\n\n* 记录每次更新到仓库\n\n  * 查看文件状态\n\n    ```\n    git status\n    ```\n\n*  **gitignore 文件编辑**\n\n  我们可以在项目的根目录下创建一个gitignore文件来管理\n\n  * **所有空行或者以注释符号 `＃` 开头的行都会被 Git 忽略。**\n  * **可以使用标准的 glob 模式匹配。**\n  * **匹配模式最后跟反斜杠（`/`）说明要忽略的是目录。**\n  * **要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（`!`）取反。**\n\n  ```\n  # 此为注释 – 将被 Git 忽略\n  # 忽略所有 .a 结尾的文件\n  *.a\n  # 但 lib.a 除外\n  !lib.a\n  # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\n  /TODO\n  # 忽略 build/ 目录下的所有文件\n  build/\n  # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\n  doc/*.txt\n  # 忽略 doc/ 目录下所有扩展名为 txt 的文件\n  doc/**/*.txt\n  ```\n\n* 查看已暂存和未暂存的更新\n\n  * git diff\n\n    git diff 查看当前文件和暂存区的快照区别\n\n    ```\n    git diff\n    ```\n\n    若要看**已经暂存起来的文件和上次提交时的快照之间的差异**，可以用 `git diff --cached` 命令 \n\n    现在可以用``git diff --staged``来替代--catched\n\n* 提交git commit\n\n  跳过add 将所有的文件都提交的话那么使用``git commit -a``\n\n* 从git中一处某个文件\n\n  从已经加入跟踪文件清单中移除某个文件，其实是从暂存区移除\n\n  使用``git rm``，这样就可以从版本控制中去除，并连带从工作目录中删除指定的文件，以后这个文件就再也不会出现在文件清单中了\n\n  从跟踪清单中去除的话 使用``git rm --cached xxx`` xxx 可以为reg模式\n\n* 移动文件,重命名\n\n  使用 ``git mv``\n\n  ```\n  git mv file_from file_to\n  ```\n\n* 查看日志\n\n  ````\n  git log\n  ````\n\n  使用 -p 来显示每次提交的内容差异，用-nums来显示最近几次更新\n\n  ```\n  git log -p -3\n  ```\n\n  使用 `--word-diff`  来显示具体的内容的差异变化历史\n\n  ```\n  git log -p -3 --word--diff\n  ```\n\n* 撤销操作\n\n  如果有漏提交的文件，那么使用以下命令进行重新提交\n\n  ```\n  git commit --amend\n  ```\n\n* 取消已经暂存的文件\n\n  如果有暂存的文件不想暂存了\n\n  ```\n  git reset HEAD xxxx\n  ```\n\n* 取消对文件的修改\n\n  ```\n   git checkout [<options>] <branch>\n   or\n   git checkout [<options>] [<branch>] -- <file>...\n  ```\n\n* 远程仓库操作\n\n  ```\n  git remote\n  ```\n\n  查看具体的克隆版本\n\n  ```\n  git remote -v\n  ```\n\n  抓取远程仓库有但是本地仓库没有的\n\n  ```\n  git fetch <branch>\n  ```\n\n* 推送数据到远程仓库\n\n  ```\n  git push [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=<git-receive-pack>]\n  \t   [--repo=<repository>] [-f | --force] [-d | --delete] [--prune] [-v | --verbose]\n  \t   [-u | --set-upstream] [--push-option=<string>]\n  \t   [--[no-]signed|--signed=(true|false|if-asked)]\n  \t   [--force-with-lease[=<refname>[:<expect>]]]\n  \t   [--no-verify] [<repository> [<refspec>…]]\n  ```\n\n* 查看远程仓库信息\n\n  ```\n  git remote show branch\n  ```\n\n* 远程仓库的删除和重命名\n\n  重命名\n\n  ```\n  git remote rename <old> <new>\n  ```\n\n  删除\n\n  ```\n  git remote remove <name>\n  ```\n\n* 打标签\n\n  ```\n  git tag [-a | -s | -u <keyid>] [-f] [-m <msg> | -F <file>] [-e]\n  \t<tagname> [<commit> | <object>]\n  git tag -d <tagname>…\n  git tag [-n[<num>]] -l [--contains <commit>] [--no-contains <commit>]\n  \t[--points-at <object>] [--column[=<options>] | --no-column]\n  \t[--create-reflog] [--sort=<key>] [--format=<format>]\n  \t[--[no-]merged [<commit>]] [<pattern>…]\n  git tag -v [--format=<format>] <tagname>…\n  ```\n\n  显示当前所有的标签\n\n  ```\n  git tag\n  ```\n\n  创建一个含附注类型的标签 使用-a(意思为 `annotated`  ) -m意思为标签的说明\n\n  ```\n  git tag -a v0.1 -m 'first-version'\n  ```\n\n  签署标签 \n\n  如果有私钥的话 可以用GPG来签署标签 只需要把-a改为-s 意为signed\n\n  **轻量级标签**\n\n  简单的标签，直接给出标签名字就行了\n\n  ```\n  git tag v0.2\n  ```\n\n  验证标签\n\n  ```\n  git tag -v [tag-name]\n  ```\n\n  ```\n  $ git tag -v v0.1\n  object 064d37a19d91f61f74269995433ff13d9ebdc958\n  type commit\n  tag v0.1\n  tagger andreby42 <38912428@qq.com> 1538508038 +0800\n  \n  first-version\n  error: no signature found\n  ```\n\n  当然我这里没有签名\n\n  **一次推送所有本地新增标签到远程**\n\n  ```\n  git push brach --tags\n  ```\n\n* \n\n\n\n\n\n\n\n","slug":"git简单记录","published":1,"updated":"2022-09-03T07:30:55.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz85w0031twfattgbz3ow","content":"<p> git了解下<a id=\"more\"></a></p>\n<h3 id=\"git配置\"><a href=\"#git配置\" class=\"headerlink\" title=\"git配置\"></a>git配置</h3><ul>\n<li><p>用户信息编辑</p>\n<p>如果用了<code>--global</code>选项，那么配置文件就是更改的位于用户主目录下，就是全局配置。如果在特定项目中想使用其他的用户名和邮箱地址，只要去掉<code>--global</code>就可以了，新的配置保存在当前项目的<code>./git/config</code>文件中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;andy&quot;</span><br><span class=\"line\">git config --global user.email xxx#gmail.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看配置信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">core.symlinks=false</span><br><span class=\"line\">core.autocrlf=true</span><br><span class=\"line\">core.fscache=true</span><br><span class=\"line\">color.diff=auto</span><br><span class=\"line\">color.status=auto</span><br><span class=\"line\">color.branch=auto</span><br><span class=\"line\">color.interactive=true</span><br><span class=\"line\">help.format=html</span><br><span class=\"line\">rebase.autosquash=true</span><br><span class=\"line\">http.sslcainfo=D:/Tools/Git/mingw64/ssl/certs/ca-bundle.crt</span><br><span class=\"line\">http.sslbackend=openssl</span><br><span class=\"line\">diff.astextplain.textconv=astextplain</span><br><span class=\"line\">filter.lfs.clean=git-lfs clean -- %f</span><br><span class=\"line\">filter.lfs.smudge=git-lfs smudge -- %f</span><br><span class=\"line\">filter.lfs.process=git-lfs filter-process</span><br><span class=\"line\">filter.lfs.required=true</span><br><span class=\"line\">credential.helper=manager</span><br><span class=\"line\">user.name=xxxx</span><br><span class=\"line\">user.email=xxxx@xxx.com</span><br><span class=\"line\">core.repositoryformatversion=0</span><br><span class=\"line\">core.filemode=false</span><br><span class=\"line\">core.bare=false</span><br><span class=\"line\">core.logallrefupdates=true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看某个环境变量的设定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>help命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git hepl command</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"git基础\"><a href=\"#git基础\" class=\"headerlink\" title=\"git基础\"></a>git基础</h3><ul>\n<li><p>git创建项目</p>\n<ul>\n<li><p>在新的项目的根目录下执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">Initialized empty Git repository in E:/sourcetree/test_1/.git/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将项目中的文件加入版本控制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add *.java</span><br><span class=\"line\">git add readme.md</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>git 克隆项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git://xxxxxx  yourNewProjectName</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>记录每次更新到仓库</p>\n<ul>\n<li><p>查看文件状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong>gitignore 文件编辑</strong></p>\n<p>我们可以在项目的根目录下创建一个gitignore文件来管理</p>\n<ul>\n<li><strong>所有空行或者以注释符号 <code>＃</code> 开头的行都会被 Git 忽略。</strong></li>\n<li><strong>可以使用标准的 glob 模式匹配。</strong></li>\n<li><strong>匹配模式最后跟反斜杠（<code>/</code>）说明要忽略的是目录。</strong></li>\n<li><strong>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（<code>!</code>）取反。</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 此为注释 – 将被 Git 忽略</span><br><span class=\"line\"># 忽略所有 .a 结尾的文件</span><br><span class=\"line\">*.a</span><br><span class=\"line\"># 但 lib.a 除外</span><br><span class=\"line\">!lib.a</span><br><span class=\"line\"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span><br><span class=\"line\">/TODO</span><br><span class=\"line\"># 忽略 build/ 目录下的所有文件</span><br><span class=\"line\">build/</span><br><span class=\"line\"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br><span class=\"line\">doc/*.txt</span><br><span class=\"line\"># 忽略 doc/ 目录下所有扩展名为 txt 的文件</span><br><span class=\"line\">doc/**/*.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看已暂存和未暂存的更新</p>\n<ul>\n<li><p>git diff</p>\n<p>git diff 查看当前文件和暂存区的快照区别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n\n<p>若要看<strong>已经暂存起来的文件和上次提交时的快照之间的差异</strong>，可以用 <code>git diff --cached</code> 命令 </p>\n<p>现在可以用<code>git diff --staged</code>来替代–catched</p>\n</li>\n</ul>\n</li>\n<li><p>提交git commit</p>\n<p>跳过add 将所有的文件都提交的话那么使用<code>git commit -a</code></p>\n</li>\n<li><p>从git中一处某个文件</p>\n<p>从已经加入跟踪文件清单中移除某个文件，其实是从暂存区移除</p>\n<p>使用<code>git rm</code>，这样就可以从版本控制中去除，并连带从工作目录中删除指定的文件，以后这个文件就再也不会出现在文件清单中了</p>\n<p>从跟踪清单中去除的话 使用<code>git rm --cached xxx</code> xxx 可以为reg模式</p>\n</li>\n<li><p>移动文件,重命名</p>\n<p>使用 <code>git mv</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git mv file_from file_to</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n\n<p>使用 -p 来显示每次提交的内容差异，用-nums来显示最近几次更新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -p -3</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>--word-diff</code>  来显示具体的内容的差异变化历史</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -p -3 --word--diff</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>撤销操作</p>\n<p>如果有漏提交的文件，那么使用以下命令进行重新提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取消已经暂存的文件</p>\n<p>如果有暂存的文件不想暂存了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD xxxx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取消对文件的修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout [&lt;options&gt;] &lt;branch&gt;</span><br><span class=\"line\">or</span><br><span class=\"line\">git checkout [&lt;options&gt;] [&lt;branch&gt;] -- &lt;file&gt;...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>远程仓库操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br></pre></td></tr></table></figure>\n\n<p>查看具体的克隆版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n\n<p>抓取远程仓库有但是本地仓库没有的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送数据到远程仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=&lt;git-receive-pack&gt;]</span><br><span class=\"line\">\t   [--repo=&lt;repository&gt;] [-f | --force] [-d | --delete] [--prune] [-v | --verbose]</span><br><span class=\"line\">\t   [-u | --set-upstream] [--push-option=&lt;string&gt;]</span><br><span class=\"line\">\t   [--[no-]signed|--signed=(true|false|if-asked)]</span><br><span class=\"line\">\t   [--force-with-lease[=&lt;refname&gt;[:&lt;expect&gt;]]]</span><br><span class=\"line\">\t   [--no-verify] [&lt;repository&gt; [&lt;refspec&gt;…]]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看远程仓库信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote show branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>远程仓库的删除和重命名</p>\n<p>重命名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rename &lt;old&gt; &lt;new&gt;</span><br></pre></td></tr></table></figure>\n\n<p>删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote remove &lt;name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag [-a | -s | -u &lt;keyid&gt;] [-f] [-m &lt;msg&gt; | -F &lt;file&gt;] [-e]</span><br><span class=\"line\">\t&lt;tagname&gt; [&lt;commit&gt; | &lt;object&gt;]</span><br><span class=\"line\">git tag -d &lt;tagname&gt;…</span><br><span class=\"line\">git tag [-n[&lt;num&gt;]] -l [--contains &lt;commit&gt;] [--no-contains &lt;commit&gt;]</span><br><span class=\"line\">\t[--points-at &lt;object&gt;] [--column[=&lt;options&gt;] | --no-column]</span><br><span class=\"line\">\t[--create-reflog] [--sort=&lt;key&gt;] [--format=&lt;format&gt;]</span><br><span class=\"line\">\t[--[no-]merged [&lt;commit&gt;]] [&lt;pattern&gt;…]</span><br><span class=\"line\">git tag -v [--format=&lt;format&gt;] &lt;tagname&gt;…</span><br></pre></td></tr></table></figure>\n\n<p>显示当前所有的标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure>\n\n<p>创建一个含附注类型的标签 使用-a(意思为 <code>annotated</code>  ) -m意思为标签的说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v0.1 -m &apos;first-version&apos;</span><br></pre></td></tr></table></figure>\n\n<p>签署标签 </p>\n<p>如果有私钥的话 可以用GPG来签署标签 只需要把-a改为-s 意为signed</p>\n<p><strong>轻量级标签</strong></p>\n<p>简单的标签，直接给出标签名字就行了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v0.2</span><br></pre></td></tr></table></figure>\n\n<p>验证标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -v [tag-name]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -v v0.1</span><br><span class=\"line\">object 064d37a19d91f61f74269995433ff13d9ebdc958</span><br><span class=\"line\">type commit</span><br><span class=\"line\">tag v0.1</span><br><span class=\"line\">tagger andreby42 &lt;38912428@qq.com&gt; 1538508038 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">first-version</span><br><span class=\"line\">error: no signature found</span><br></pre></td></tr></table></figure>\n\n<p>当然我这里没有签名</p>\n<p><strong>一次推送所有本地新增标签到远程</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push brach --tags</span><br></pre></td></tr></table></figure>\n</li>\n<li></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p> git了解下</p>","more":"<p></p>\n<h3 id=\"git配置\"><a href=\"#git配置\" class=\"headerlink\" title=\"git配置\"></a>git配置</h3><ul>\n<li><p>用户信息编辑</p>\n<p>如果用了<code>--global</code>选项，那么配置文件就是更改的位于用户主目录下，就是全局配置。如果在特定项目中想使用其他的用户名和邮箱地址，只要去掉<code>--global</code>就可以了，新的配置保存在当前项目的<code>./git/config</code>文件中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;andy&quot;</span><br><span class=\"line\">git config --global user.email xxx#gmail.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看配置信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">core.symlinks=false</span><br><span class=\"line\">core.autocrlf=true</span><br><span class=\"line\">core.fscache=true</span><br><span class=\"line\">color.diff=auto</span><br><span class=\"line\">color.status=auto</span><br><span class=\"line\">color.branch=auto</span><br><span class=\"line\">color.interactive=true</span><br><span class=\"line\">help.format=html</span><br><span class=\"line\">rebase.autosquash=true</span><br><span class=\"line\">http.sslcainfo=D:/Tools/Git/mingw64/ssl/certs/ca-bundle.crt</span><br><span class=\"line\">http.sslbackend=openssl</span><br><span class=\"line\">diff.astextplain.textconv=astextplain</span><br><span class=\"line\">filter.lfs.clean=git-lfs clean -- %f</span><br><span class=\"line\">filter.lfs.smudge=git-lfs smudge -- %f</span><br><span class=\"line\">filter.lfs.process=git-lfs filter-process</span><br><span class=\"line\">filter.lfs.required=true</span><br><span class=\"line\">credential.helper=manager</span><br><span class=\"line\">user.name=xxxx</span><br><span class=\"line\">user.email=xxxx@xxx.com</span><br><span class=\"line\">core.repositoryformatversion=0</span><br><span class=\"line\">core.filemode=false</span><br><span class=\"line\">core.bare=false</span><br><span class=\"line\">core.logallrefupdates=true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看某个环境变量的设定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>help命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git hepl command</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"git基础\"><a href=\"#git基础\" class=\"headerlink\" title=\"git基础\"></a>git基础</h3><ul>\n<li><p>git创建项目</p>\n<ul>\n<li><p>在新的项目的根目录下执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">Initialized empty Git repository in E:/sourcetree/test_1/.git/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将项目中的文件加入版本控制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add *.java</span><br><span class=\"line\">git add readme.md</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>git 克隆项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git://xxxxxx  yourNewProjectName</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>记录每次更新到仓库</p>\n<ul>\n<li><p>查看文件状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong>gitignore 文件编辑</strong></p>\n<p>我们可以在项目的根目录下创建一个gitignore文件来管理</p>\n<ul>\n<li><strong>所有空行或者以注释符号 <code>＃</code> 开头的行都会被 Git 忽略。</strong></li>\n<li><strong>可以使用标准的 glob 模式匹配。</strong></li>\n<li><strong>匹配模式最后跟反斜杠（<code>/</code>）说明要忽略的是目录。</strong></li>\n<li><strong>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（<code>!</code>）取反。</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 此为注释 – 将被 Git 忽略</span><br><span class=\"line\"># 忽略所有 .a 结尾的文件</span><br><span class=\"line\">*.a</span><br><span class=\"line\"># 但 lib.a 除外</span><br><span class=\"line\">!lib.a</span><br><span class=\"line\"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span><br><span class=\"line\">/TODO</span><br><span class=\"line\"># 忽略 build/ 目录下的所有文件</span><br><span class=\"line\">build/</span><br><span class=\"line\"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br><span class=\"line\">doc/*.txt</span><br><span class=\"line\"># 忽略 doc/ 目录下所有扩展名为 txt 的文件</span><br><span class=\"line\">doc/**/*.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看已暂存和未暂存的更新</p>\n<ul>\n<li><p>git diff</p>\n<p>git diff 查看当前文件和暂存区的快照区别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n\n<p>若要看<strong>已经暂存起来的文件和上次提交时的快照之间的差异</strong>，可以用 <code>git diff --cached</code> 命令 </p>\n<p>现在可以用<code>git diff --staged</code>来替代–catched</p>\n</li>\n</ul>\n</li>\n<li><p>提交git commit</p>\n<p>跳过add 将所有的文件都提交的话那么使用<code>git commit -a</code></p>\n</li>\n<li><p>从git中一处某个文件</p>\n<p>从已经加入跟踪文件清单中移除某个文件，其实是从暂存区移除</p>\n<p>使用<code>git rm</code>，这样就可以从版本控制中去除，并连带从工作目录中删除指定的文件，以后这个文件就再也不会出现在文件清单中了</p>\n<p>从跟踪清单中去除的话 使用<code>git rm --cached xxx</code> xxx 可以为reg模式</p>\n</li>\n<li><p>移动文件,重命名</p>\n<p>使用 <code>git mv</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git mv file_from file_to</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n\n<p>使用 -p 来显示每次提交的内容差异，用-nums来显示最近几次更新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -p -3</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>--word-diff</code>  来显示具体的内容的差异变化历史</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -p -3 --word--diff</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>撤销操作</p>\n<p>如果有漏提交的文件，那么使用以下命令进行重新提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取消已经暂存的文件</p>\n<p>如果有暂存的文件不想暂存了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD xxxx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取消对文件的修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout [&lt;options&gt;] &lt;branch&gt;</span><br><span class=\"line\">or</span><br><span class=\"line\">git checkout [&lt;options&gt;] [&lt;branch&gt;] -- &lt;file&gt;...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>远程仓库操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br></pre></td></tr></table></figure>\n\n<p>查看具体的克隆版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n\n<p>抓取远程仓库有但是本地仓库没有的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送数据到远程仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=&lt;git-receive-pack&gt;]</span><br><span class=\"line\">\t   [--repo=&lt;repository&gt;] [-f | --force] [-d | --delete] [--prune] [-v | --verbose]</span><br><span class=\"line\">\t   [-u | --set-upstream] [--push-option=&lt;string&gt;]</span><br><span class=\"line\">\t   [--[no-]signed|--signed=(true|false|if-asked)]</span><br><span class=\"line\">\t   [--force-with-lease[=&lt;refname&gt;[:&lt;expect&gt;]]]</span><br><span class=\"line\">\t   [--no-verify] [&lt;repository&gt; [&lt;refspec&gt;…]]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看远程仓库信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote show branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>远程仓库的删除和重命名</p>\n<p>重命名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rename &lt;old&gt; &lt;new&gt;</span><br></pre></td></tr></table></figure>\n\n<p>删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote remove &lt;name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag [-a | -s | -u &lt;keyid&gt;] [-f] [-m &lt;msg&gt; | -F &lt;file&gt;] [-e]</span><br><span class=\"line\">\t&lt;tagname&gt; [&lt;commit&gt; | &lt;object&gt;]</span><br><span class=\"line\">git tag -d &lt;tagname&gt;…</span><br><span class=\"line\">git tag [-n[&lt;num&gt;]] -l [--contains &lt;commit&gt;] [--no-contains &lt;commit&gt;]</span><br><span class=\"line\">\t[--points-at &lt;object&gt;] [--column[=&lt;options&gt;] | --no-column]</span><br><span class=\"line\">\t[--create-reflog] [--sort=&lt;key&gt;] [--format=&lt;format&gt;]</span><br><span class=\"line\">\t[--[no-]merged [&lt;commit&gt;]] [&lt;pattern&gt;…]</span><br><span class=\"line\">git tag -v [--format=&lt;format&gt;] &lt;tagname&gt;…</span><br></pre></td></tr></table></figure>\n\n<p>显示当前所有的标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure>\n\n<p>创建一个含附注类型的标签 使用-a(意思为 <code>annotated</code>  ) -m意思为标签的说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v0.1 -m &apos;first-version&apos;</span><br></pre></td></tr></table></figure>\n\n<p>签署标签 </p>\n<p>如果有私钥的话 可以用GPG来签署标签 只需要把-a改为-s 意为signed</p>\n<p><strong>轻量级标签</strong></p>\n<p>简单的标签，直接给出标签名字就行了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v0.2</span><br></pre></td></tr></table></figure>\n\n<p>验证标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -v [tag-name]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -v v0.1</span><br><span class=\"line\">object 064d37a19d91f61f74269995433ff13d9ebdc958</span><br><span class=\"line\">type commit</span><br><span class=\"line\">tag v0.1</span><br><span class=\"line\">tagger andreby42 &lt;38912428@qq.com&gt; 1538508038 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">first-version</span><br><span class=\"line\">error: no signature found</span><br></pre></td></tr></table></figure>\n\n<p>当然我这里没有签名</p>\n<p><strong>一次推送所有本地新增标签到远程</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push brach --tags</span><br></pre></td></tr></table></figure>\n</li>\n<li></li>\n</ul>"},{"title":"Hello","date":"2017-07-29T17:42:02.000Z","_content":"\n这个博客的功能是<!--more-->只为了记录一些东西,博主脑子不好使不愿意记那些零碎东西","source":"_posts/hello.md","raw":"---\ntitle: Hello\ndate: 2017-07-30 01:42:02\ntags: [随记]\ncategories: [随记]\n---\n\n这个博客的功能是<!--more-->只为了记录一些东西,博主脑子不好使不愿意记那些零碎东西","slug":"hello","published":1,"updated":"2022-09-03T07:30:55.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz85z0035twfau0g4j5em","content":"<p>这个博客的功能是<a id=\"more\"></a>只为了记录一些东西,博主脑子不好使不愿意记那些零碎东西</p>\n","site":{"data":{}},"excerpt":"<p>这个博客的功能是</p>","more":"只为了记录一些东西,博主脑子不好使不愿意记那些零碎东西<p></p>"},{"title":"hexo命令小记","date":"2017-11-18T15:21:48.000Z","_content":"\nhexo简单命令<!--more-->\n\n- hexo n \"文章名\":发布文章\n- hexo clean\n- hexo g\n- hexo d\n\n","source":"_posts/hexo命令小记.md","raw":"---\ntitle: hexo命令小记\ndate: 2017-11-18 23:21:48\ncategories: [随记]\ntags: [随记]\n---\n\nhexo简单命令<!--more-->\n\n- hexo n \"文章名\":发布文章\n- hexo clean\n- hexo g\n- hexo d\n\n","slug":"hexo命令小记","published":1,"updated":"2022-09-03T07:30:55.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz8610037twfag3j5epec","content":"<p>hexo简单命令<a id=\"more\"></a></p>\n<ul>\n<li>hexo n “文章名”:发布文章</li>\n<li>hexo clean</li>\n<li>hexo g</li>\n<li>hexo d</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>hexo简单命令</p>","more":"<p></p>\n<ul>\n<li>hexo n “文章名”:发布文章</li>\n<li>hexo clean</li>\n<li>hexo g</li>\n<li>hexo d</li>\n</ul>"},{"title":"rust-mod与pub与引用模块","date":"2018-07-16T12:28:32.000Z","_content":"\nRust-mod与pub与引用模块<!--more-->\n\n了解rust项目的工程构建对于以后构建项目或者阅读项目代码有非常重要的意义。\n\n#### 创建crate\n\n我们将通过使用 Cargo 创建一个新项目来开始我们的模块之旅，不过这次不再创建一个二进制 crate，而是创建一个库 crate：**一个其他人可以作为依赖导入的项目**。\n\n 那么如何创建一个crate 呢：\n\n```\ncargo new \"crate_name\" --lib\n```\n\n注意这里是--lib,创建好的crate里面是没有main.rs的，只有src/lib.rs\n\n结构目录如下：\n\n```\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd-----        2018/7/16     21:32                network\n-a----        2018/7/16     21:56             66 commonclient.rs\n-a----        2018/7/16     22:04            175 lib.rs\n-a----        2018/7/16     22:20            156 main.rs\n```\n\nlib.rs为crate communicator的顶层声明里面声明了他的子类mod（commonclient,network)\n\n```\n pub mod network;\n //在顶层父级中进行生命commonclient这个module\n pub mod commonclient;\n    fn connect (){\n        println!(\"internet connect u  & I \" );\n    } \n```\n\ncommonclient作为一个独立的mod 没有子module,声明在lib中，就无需在自己的文件中声明了。\n\n```\npub fn connect() {\n   println!(\"common client connect\");\n}\n```\n\nnetwork作为一个拥有自己的子module的mod，声明在lib中，目录与lib同级，自己的子mod声明在network/mod.rs中\n\n```\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-a----        2018/7/16     21:32             62 client.rs\n-a----        2018/7/16     21:15            109 mod.rs\n-a----        2018/7/16     20:59             49 server.rs\n```\n\n```ru&amp;#39;s&amp;#39;t\npub mod client;\npub mod  server;\n fn connection(){\n     println!(\"this is  a cliet-server mod\" );\n }\n```\n\n#### 模块文件系统的规则:\n\n* **如果一个叫做 `foo` 的模块没有子模块，应该将 `foo` 的声明放入叫做 *foo.rs* 的文件中。 **\n* **如果一个叫做 `foo` 的模块有子模块，应该将 `foo` 的声明放入叫做 `foo/mod.rs`文件中 **\n\n#### pub控制可见性\n\n* **如果一个项是公有的，它能被任何父模块访问 **\n\n* **如果一个项是私有的，它能被其直接父模块及其任何子模块访问 **\n\n#### 引用不同模块中的名字\n\n* ib.rs同级的目录下创建一个main.rs,在里面写入\n\n  ```\n  extern crate communicator;\n  ```\n\n  在每个mod的声明前加入pub,保证用到的mod是可见 包括要引用的函数也是pub的，调用如下：\n\n  ```\n  extern crate communicator;\n  \n  fn main() {\n      communicator::network::client::connect();\n            communicator::commonclient::connect();\n  }\n  ```\n\n  这样的话使用全限定名的话会导致非常冗长，那么使用别的办法进行简化\n\n* **使用`use`来导入作用域**\n\n  ```\n  // extern crate communicator;\n  use communicator::network::client;\n  \n  fn main() {\n     client::connect();\n          //   communicator::commonclient::connect();\n  }\n  \n  ```\n\n* **使用glob将所有名称引入作用域**\n\n  其他语言中比如java中也有类似的引用，那么这样就可以一下子引入改crate中的所有，官方的程序设计一书是这么说的``请保守的使用 glob：它们是方便的，但是也可能会引入多于预期的内容从而导致命名冲突。 ``\n\n  如java中的\n\n  ```\n  import java.util.*;\n  ```\n\n  rust中这么干\n\n  ```\n  use communicator::*;\n  ```\n\n* **使用super访问父类模块**\n\n  tests 这个mod 在起初创建这个crate的时候就存在在lib.rs中，整个的模块结构为：\n\n  ```\n  communicator\n   ├── commonclient\n   ├── network\n   |   └── client\n   |   └──server\n   └── tests\n  ```\n\n  那么 我们在lib.rs中改写这个testsmod 来做test，\n\n  使用` use super::commonclient ` 获得要引用的mod ，**此处的super指的就是当前mod tests的父模块就是communicator**\n\n  ```\n  \n      #[cfg(test)]\n      mod tests {\n          use super::commonclient;\n          #[test]\n          fn it_works() {\n              commonclient::connect();\n          }\n  \n      }\n  ```\n\n  \n\n\n\n\n\n\n\n\n\n","source":"_posts/rust-mod与pub与引用模块.md","raw":"---\ntitle: rust-mod与pub与引用模块\ndate: 2018-07-16 20:28:32\ntags: [Rust]\ncategories: [Rust]\n---\n\nRust-mod与pub与引用模块<!--more-->\n\n了解rust项目的工程构建对于以后构建项目或者阅读项目代码有非常重要的意义。\n\n#### 创建crate\n\n我们将通过使用 Cargo 创建一个新项目来开始我们的模块之旅，不过这次不再创建一个二进制 crate，而是创建一个库 crate：**一个其他人可以作为依赖导入的项目**。\n\n 那么如何创建一个crate 呢：\n\n```\ncargo new \"crate_name\" --lib\n```\n\n注意这里是--lib,创建好的crate里面是没有main.rs的，只有src/lib.rs\n\n结构目录如下：\n\n```\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd-----        2018/7/16     21:32                network\n-a----        2018/7/16     21:56             66 commonclient.rs\n-a----        2018/7/16     22:04            175 lib.rs\n-a----        2018/7/16     22:20            156 main.rs\n```\n\nlib.rs为crate communicator的顶层声明里面声明了他的子类mod（commonclient,network)\n\n```\n pub mod network;\n //在顶层父级中进行生命commonclient这个module\n pub mod commonclient;\n    fn connect (){\n        println!(\"internet connect u  & I \" );\n    } \n```\n\ncommonclient作为一个独立的mod 没有子module,声明在lib中，就无需在自己的文件中声明了。\n\n```\npub fn connect() {\n   println!(\"common client connect\");\n}\n```\n\nnetwork作为一个拥有自己的子module的mod，声明在lib中，目录与lib同级，自己的子mod声明在network/mod.rs中\n\n```\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-a----        2018/7/16     21:32             62 client.rs\n-a----        2018/7/16     21:15            109 mod.rs\n-a----        2018/7/16     20:59             49 server.rs\n```\n\n```ru&amp;#39;s&amp;#39;t\npub mod client;\npub mod  server;\n fn connection(){\n     println!(\"this is  a cliet-server mod\" );\n }\n```\n\n#### 模块文件系统的规则:\n\n* **如果一个叫做 `foo` 的模块没有子模块，应该将 `foo` 的声明放入叫做 *foo.rs* 的文件中。 **\n* **如果一个叫做 `foo` 的模块有子模块，应该将 `foo` 的声明放入叫做 `foo/mod.rs`文件中 **\n\n#### pub控制可见性\n\n* **如果一个项是公有的，它能被任何父模块访问 **\n\n* **如果一个项是私有的，它能被其直接父模块及其任何子模块访问 **\n\n#### 引用不同模块中的名字\n\n* ib.rs同级的目录下创建一个main.rs,在里面写入\n\n  ```\n  extern crate communicator;\n  ```\n\n  在每个mod的声明前加入pub,保证用到的mod是可见 包括要引用的函数也是pub的，调用如下：\n\n  ```\n  extern crate communicator;\n  \n  fn main() {\n      communicator::network::client::connect();\n            communicator::commonclient::connect();\n  }\n  ```\n\n  这样的话使用全限定名的话会导致非常冗长，那么使用别的办法进行简化\n\n* **使用`use`来导入作用域**\n\n  ```\n  // extern crate communicator;\n  use communicator::network::client;\n  \n  fn main() {\n     client::connect();\n          //   communicator::commonclient::connect();\n  }\n  \n  ```\n\n* **使用glob将所有名称引入作用域**\n\n  其他语言中比如java中也有类似的引用，那么这样就可以一下子引入改crate中的所有，官方的程序设计一书是这么说的``请保守的使用 glob：它们是方便的，但是也可能会引入多于预期的内容从而导致命名冲突。 ``\n\n  如java中的\n\n  ```\n  import java.util.*;\n  ```\n\n  rust中这么干\n\n  ```\n  use communicator::*;\n  ```\n\n* **使用super访问父类模块**\n\n  tests 这个mod 在起初创建这个crate的时候就存在在lib.rs中，整个的模块结构为：\n\n  ```\n  communicator\n   ├── commonclient\n   ├── network\n   |   └── client\n   |   └──server\n   └── tests\n  ```\n\n  那么 我们在lib.rs中改写这个testsmod 来做test，\n\n  使用` use super::commonclient ` 获得要引用的mod ，**此处的super指的就是当前mod tests的父模块就是communicator**\n\n  ```\n  \n      #[cfg(test)]\n      mod tests {\n          use super::commonclient;\n          #[test]\n          fn it_works() {\n              commonclient::connect();\n          }\n  \n      }\n  ```\n\n  \n\n\n\n\n\n\n\n\n\n","slug":"rust-mod与pub与引用模块","published":1,"updated":"2022-09-03T07:30:55.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz865003btwfaxyal61rf","content":"<p>Rust-mod与pub与引用模块<a id=\"more\"></a></p>\n<p>了解rust项目的工程构建对于以后构建项目或者阅读项目代码有非常重要的意义。</p>\n<h4 id=\"创建crate\"><a href=\"#创建crate\" class=\"headerlink\" title=\"创建crate\"></a>创建crate</h4><p>我们将通过使用 Cargo 创建一个新项目来开始我们的模块之旅，不过这次不再创建一个二进制 crate，而是创建一个库 crate：<strong>一个其他人可以作为依赖导入的项目</strong>。</p>\n<p> 那么如何创建一个crate 呢：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo new &quot;crate_name&quot; --lib</span><br></pre></td></tr></table></figure>\n\n<p>注意这里是–lib,创建好的crate里面是没有main.rs的，只有src/lib.rs</p>\n<p>结构目录如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Mode                LastWriteTime         Length Name</span><br><span class=\"line\">----                -------------         ------ ----</span><br><span class=\"line\">d-----        2018/7/16     21:32                network</span><br><span class=\"line\">-a----        2018/7/16     21:56             66 commonclient.rs</span><br><span class=\"line\">-a----        2018/7/16     22:04            175 lib.rs</span><br><span class=\"line\">-a----        2018/7/16     22:20            156 main.rs</span><br></pre></td></tr></table></figure>\n\n<p>lib.rs为crate communicator的顶层声明里面声明了他的子类mod（commonclient,network)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pub mod network;</span><br><span class=\"line\">//在顶层父级中进行生命commonclient这个module</span><br><span class=\"line\">pub mod commonclient;</span><br><span class=\"line\">   fn connect ()&#123;</span><br><span class=\"line\">       println!(&quot;internet connect u  &amp; I &quot; );</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>commonclient作为一个独立的mod 没有子module,声明在lib中，就无需在自己的文件中声明了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pub fn connect() &#123;</span><br><span class=\"line\">   println!(&quot;common client connect&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>network作为一个拥有自己的子module的mod，声明在lib中，目录与lib同级，自己的子mod声明在network/mod.rs中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mode                LastWriteTime         Length Name</span><br><span class=\"line\">----                -------------         ------ ----</span><br><span class=\"line\">-a----        2018/7/16     21:32             62 client.rs</span><br><span class=\"line\">-a----        2018/7/16     21:15            109 mod.rs</span><br><span class=\"line\">-a----        2018/7/16     20:59             49 server.rs</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pub mod client;</span><br><span class=\"line\">pub mod  server;</span><br><span class=\"line\"> fn connection()&#123;</span><br><span class=\"line\">     println!(&quot;this is  a cliet-server mod&quot; );</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模块文件系统的规则\"><a href=\"#模块文件系统的规则\" class=\"headerlink\" title=\"模块文件系统的规则:\"></a>模块文件系统的规则:</h4><ul>\n<li><em>*如果一个叫做 <code>foo</code> 的模块没有子模块，应该将 <code>foo</code> 的声明放入叫做 *foo.rs</em> 的文件中。 **</li>\n<li>*<em>如果一个叫做 <code>foo</code> 的模块有子模块，应该将 <code>foo</code> 的声明放入叫做 <code>foo/mod.rs</code>文件中 *</em></li>\n</ul>\n<h4 id=\"pub控制可见性\"><a href=\"#pub控制可见性\" class=\"headerlink\" title=\"pub控制可见性\"></a>pub控制可见性</h4><ul>\n<li><p>*<em>如果一个项是公有的，它能被任何父模块访问 *</em></p>\n</li>\n<li><p>*<em>如果一个项是私有的，它能被其直接父模块及其任何子模块访问 *</em></p>\n</li>\n</ul>\n<h4 id=\"引用不同模块中的名字\"><a href=\"#引用不同模块中的名字\" class=\"headerlink\" title=\"引用不同模块中的名字\"></a>引用不同模块中的名字</h4><ul>\n<li><p>ib.rs同级的目录下创建一个main.rs,在里面写入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern crate communicator;</span><br></pre></td></tr></table></figure>\n\n<p>在每个mod的声明前加入pub,保证用到的mod是可见 包括要引用的函数也是pub的，调用如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern crate communicator;</span><br><span class=\"line\"></span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    communicator::network::client::connect();</span><br><span class=\"line\">          communicator::commonclient::connect();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话使用全限定名的话会导致非常冗长，那么使用别的办法进行简化</p>\n</li>\n<li><p><strong>使用<code>use</code>来导入作用域</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// extern crate communicator;</span><br><span class=\"line\">use communicator::network::client;</span><br><span class=\"line\"></span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   client::connect();</span><br><span class=\"line\">        //   communicator::commonclient::connect();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用glob将所有名称引入作用域</strong></p>\n<p>其他语言中比如java中也有类似的引用，那么这样就可以一下子引入改crate中的所有，官方的程序设计一书是这么说的<code>请保守的使用 glob：它们是方便的，但是也可能会引入多于预期的内容从而导致命名冲突。</code></p>\n<p>如java中的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.*;</span><br></pre></td></tr></table></figure>\n\n<p>rust中这么干</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use communicator::*;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用super访问父类模块</strong></p>\n<p>tests 这个mod 在起初创建这个crate的时候就存在在lib.rs中，整个的模块结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">communicator</span><br><span class=\"line\"> ├── commonclient</span><br><span class=\"line\"> ├── network</span><br><span class=\"line\"> |   └── client</span><br><span class=\"line\"> |   └──server</span><br><span class=\"line\"> └── tests</span><br></pre></td></tr></table></figure>\n\n<p>那么 我们在lib.rs中改写这个testsmod 来做test，</p>\n<p>使用<code>use super::commonclient</code> 获得要引用的mod ，<strong>此处的super指的就是当前mod tests的父模块就是communicator</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\">#[cfg(test)]</span><br><span class=\"line\">mod tests &#123;</span><br><span class=\"line\">    use super::commonclient;</span><br><span class=\"line\">    #[test]</span><br><span class=\"line\">    fn it_works() &#123;</span><br><span class=\"line\">        commonclient::connect();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Rust-mod与pub与引用模块</p>","more":"<p></p>\n<p>了解rust项目的工程构建对于以后构建项目或者阅读项目代码有非常重要的意义。</p>\n<h4 id=\"创建crate\"><a href=\"#创建crate\" class=\"headerlink\" title=\"创建crate\"></a>创建crate</h4><p>我们将通过使用 Cargo 创建一个新项目来开始我们的模块之旅，不过这次不再创建一个二进制 crate，而是创建一个库 crate：<strong>一个其他人可以作为依赖导入的项目</strong>。</p>\n<p> 那么如何创建一个crate 呢：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo new &quot;crate_name&quot; --lib</span><br></pre></td></tr></table></figure>\n\n<p>注意这里是–lib,创建好的crate里面是没有main.rs的，只有src/lib.rs</p>\n<p>结构目录如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Mode                LastWriteTime         Length Name</span><br><span class=\"line\">----                -------------         ------ ----</span><br><span class=\"line\">d-----        2018/7/16     21:32                network</span><br><span class=\"line\">-a----        2018/7/16     21:56             66 commonclient.rs</span><br><span class=\"line\">-a----        2018/7/16     22:04            175 lib.rs</span><br><span class=\"line\">-a----        2018/7/16     22:20            156 main.rs</span><br></pre></td></tr></table></figure>\n\n<p>lib.rs为crate communicator的顶层声明里面声明了他的子类mod（commonclient,network)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pub mod network;</span><br><span class=\"line\">//在顶层父级中进行生命commonclient这个module</span><br><span class=\"line\">pub mod commonclient;</span><br><span class=\"line\">   fn connect ()&#123;</span><br><span class=\"line\">       println!(&quot;internet connect u  &amp; I &quot; );</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>commonclient作为一个独立的mod 没有子module,声明在lib中，就无需在自己的文件中声明了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pub fn connect() &#123;</span><br><span class=\"line\">   println!(&quot;common client connect&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>network作为一个拥有自己的子module的mod，声明在lib中，目录与lib同级，自己的子mod声明在network/mod.rs中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mode                LastWriteTime         Length Name</span><br><span class=\"line\">----                -------------         ------ ----</span><br><span class=\"line\">-a----        2018/7/16     21:32             62 client.rs</span><br><span class=\"line\">-a----        2018/7/16     21:15            109 mod.rs</span><br><span class=\"line\">-a----        2018/7/16     20:59             49 server.rs</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pub mod client;</span><br><span class=\"line\">pub mod  server;</span><br><span class=\"line\"> fn connection()&#123;</span><br><span class=\"line\">     println!(&quot;this is  a cliet-server mod&quot; );</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模块文件系统的规则\"><a href=\"#模块文件系统的规则\" class=\"headerlink\" title=\"模块文件系统的规则:\"></a>模块文件系统的规则:</h4><ul>\n<li><em>*如果一个叫做 <code>foo</code> 的模块没有子模块，应该将 <code>foo</code> 的声明放入叫做 *foo.rs</em> 的文件中。 **</li>\n<li>*<em>如果一个叫做 <code>foo</code> 的模块有子模块，应该将 <code>foo</code> 的声明放入叫做 <code>foo/mod.rs</code>文件中 *</em></li>\n</ul>\n<h4 id=\"pub控制可见性\"><a href=\"#pub控制可见性\" class=\"headerlink\" title=\"pub控制可见性\"></a>pub控制可见性</h4><ul>\n<li><p>*<em>如果一个项是公有的，它能被任何父模块访问 *</em></p>\n</li>\n<li><p>*<em>如果一个项是私有的，它能被其直接父模块及其任何子模块访问 *</em></p>\n</li>\n</ul>\n<h4 id=\"引用不同模块中的名字\"><a href=\"#引用不同模块中的名字\" class=\"headerlink\" title=\"引用不同模块中的名字\"></a>引用不同模块中的名字</h4><ul>\n<li><p>ib.rs同级的目录下创建一个main.rs,在里面写入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern crate communicator;</span><br></pre></td></tr></table></figure>\n\n<p>在每个mod的声明前加入pub,保证用到的mod是可见 包括要引用的函数也是pub的，调用如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern crate communicator;</span><br><span class=\"line\"></span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    communicator::network::client::connect();</span><br><span class=\"line\">          communicator::commonclient::connect();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话使用全限定名的话会导致非常冗长，那么使用别的办法进行简化</p>\n</li>\n<li><p><strong>使用<code>use</code>来导入作用域</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// extern crate communicator;</span><br><span class=\"line\">use communicator::network::client;</span><br><span class=\"line\"></span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   client::connect();</span><br><span class=\"line\">        //   communicator::commonclient::connect();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用glob将所有名称引入作用域</strong></p>\n<p>其他语言中比如java中也有类似的引用，那么这样就可以一下子引入改crate中的所有，官方的程序设计一书是这么说的<code>请保守的使用 glob：它们是方便的，但是也可能会引入多于预期的内容从而导致命名冲突。</code></p>\n<p>如java中的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.*;</span><br></pre></td></tr></table></figure>\n\n<p>rust中这么干</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use communicator::*;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用super访问父类模块</strong></p>\n<p>tests 这个mod 在起初创建这个crate的时候就存在在lib.rs中，整个的模块结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">communicator</span><br><span class=\"line\"> ├── commonclient</span><br><span class=\"line\"> ├── network</span><br><span class=\"line\"> |   └── client</span><br><span class=\"line\"> |   └──server</span><br><span class=\"line\"> └── tests</span><br></pre></td></tr></table></figure>\n\n<p>那么 我们在lib.rs中改写这个testsmod 来做test，</p>\n<p>使用<code>use super::commonclient</code> 获得要引用的mod ，<strong>此处的super指的就是当前mod tests的父模块就是communicator</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\">#[cfg(test)]</span><br><span class=\"line\">mod tests &#123;</span><br><span class=\"line\">    use super::commonclient;</span><br><span class=\"line\">    #[test]</span><br><span class=\"line\">    fn it_works() &#123;</span><br><span class=\"line\">        commonclient::connect();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n</li>\n</ul>"},{"title":"rust-variablesAndType","date":"2019-08-01T16:03:18.000Z","_content":"\n变量与类型<!--more-->\n\n* rust变量必须先声明后使用，所有的变量必须初始化\n\n  ` let varibales:i32=42`\n\n* rust中声明的变量默认是只读的 如果想要变量是可写的即可改变的\n\n  ```\n  let mut y=5;\n   y=6;\n  ```\n\n* 变量遮蔽，相同名称变量 后面的变量会将前面的变量这笔起来，当我们想复用一个变量名的时候就很有用，可以通过变量遮蔽实现不同类型的变量的重新绑定\n\n  ````\n  fn main(){\n   let x=\"hello\";\n   println!(\"{}\"，x);\n   //下面的x将上面的x进行遮蔽 如果没有let 那么下面的声明就是对x的重新赋值\n   let x=6;\n   println!(\"{}\",x);\n  }\n  ````\n\n  ```\n  fn main(){\n   let mut v= Vec::new();\n   \n   v.push(1);\n   \n   //从这里往下v成了只读变量 可读写变量v已经被遮蔽了,同样 如果一个不可变变量 也可以通过变量遮蔽将其变为 //可变变量\n   let v=v;\n   println!(\"{}\",v);\n  }\n  ```\n\n* 类型推导,rust可以从变量生命的语句中获取信息进行类型推导，还可以通过上下文进行推导\n\n  自动类型推导和动态类型系统是两码事，rust是静态类型语言即 **一个变量的类型必须在编译阶段就确定，且无法改变，只是在某些时候不需要在源码中显式写出来而已**\n\n* 类型别名\n\n  可以使用type关键字 给同一个类型其别名（type alias）\n\n  ```\n  type Age =u32;\n  \n  fn grow(age:Age ,year:u32){\n  \tage+year;\n  }\n  ```\n\n* 静态变量\n\n  rust使用static关键字进行声明静态变量，rust中唯一的声明全局变量的方法\n\n  ```\n  static GLOBAL_COUNTER:i32=0\t\n  ```\n\n  * 全局变量必须在声明的时候马上初始化\n  * 全局变量的初始化必须是编译期可以确定的常量，不能包括执行期才能确定的表达式或语句或函数调用\n  * 带有mut修饰的全局变量 在使用的时候必须使用unsafe关键字\n\n  ```\n  static mut COUNTER_2:i32=3;\n  \n  unsafe{\n  \tCOUNTER_2=6;\n  \tprintln!(\"{}\"，COUNTER);\n  }\n  ```\n\n* 常量\n\n  使用const关键字生命常量\n\n  常量是常量，故不能使用mut进行修饰\n\n  ```\n  const GLOBAL：i32=12;\n  ```\n\n* bool基本数据类型\n\n  & | 与&& ||\n\n  ```\n  fn man(){\n  \tlet x=true;\n  \tlet y:bool=false;\n  }\n  ```\n\n* char 类型\n\n  可以描述任何一个符合unicode标准的字符值在代码中单个字符字面量使用单引号进行包围,占据的空间是4个字节。对一ASCII字符其实只需要占用一个字节，rust中可以使用一个字母b在字符或字符串前表示这个字面量存储在u8类型数组中，这样占用空间比char类型的数组要小一些\n\n  ```\n  let love ='a';\n  let x:u8=1;\n  let y:u8=b'A';\n  ```\n\n* 整数类型\n\n  rust中的数字类型分为整数类型与浮点数类型，各种整数类型之间的主要区分特征是：有符号/无符号及占据空间大小\n\n  **如果一个变量是有符号的那么他的最高位的那个bit就是符号位，表示该数为正值还是负值。如果一个变量是无符号类型，那么他的最高位和其他位一样表示该数的大小。**\n\n  如一个byte(8bit)的数据来说，如果存的是无符号数，那么它的表达范围是0-255,如果存的是有符号数，那么表达的范围是-128-127。\n\n  isize与usize在不同的系统上的占据的空间不一致\n\n* 浮点类型\n\n  按占据空间大小分 分f32与f64\n\n* 指针类型\n\n  * Box<T> 指向类型T 拥有所有权 可以释放内存\n  * &T 指向T类型的借用指针，也称引用，无权释放内存 无权修改写数据\n  * & mut T 指向类型T的mut 借用指针 无权释放内存，可以修改数据\n  * *const T 指向T类型 的只读裸指针 没有生命周期信息 无权修改数据\n  * ×mut T 指向类型T的可读写裸指针 没有生命周期 可以写数据\n\n*  类型转换\n\n  使用as进行类型间的转换注意只适用与合理的类型转换。\n\n* 复合类型\n\n  * tuple\n  * struct\n  * enum\n  * tuple struct\n\n* 类型递归定义 \n\n  rust允许递归定义\n\n  直接嵌套是不行的，那么使用指针进行间接引用就好了\n\n  ```\n  struct Recursive{\n  \tdata:i32\n  \trec:Box<Recursive>\n  }\n  ```\n\n  \n","source":"_posts/rust-variablesAndType.md","raw":"---\ntitle: rust-variablesAndType\ndate: 2019-08-02 00:03:18\ntags: [Rust]\ncategories: [Rust]\n\n---\n\n变量与类型<!--more-->\n\n* rust变量必须先声明后使用，所有的变量必须初始化\n\n  ` let varibales:i32=42`\n\n* rust中声明的变量默认是只读的 如果想要变量是可写的即可改变的\n\n  ```\n  let mut y=5;\n   y=6;\n  ```\n\n* 变量遮蔽，相同名称变量 后面的变量会将前面的变量这笔起来，当我们想复用一个变量名的时候就很有用，可以通过变量遮蔽实现不同类型的变量的重新绑定\n\n  ````\n  fn main(){\n   let x=\"hello\";\n   println!(\"{}\"，x);\n   //下面的x将上面的x进行遮蔽 如果没有let 那么下面的声明就是对x的重新赋值\n   let x=6;\n   println!(\"{}\",x);\n  }\n  ````\n\n  ```\n  fn main(){\n   let mut v= Vec::new();\n   \n   v.push(1);\n   \n   //从这里往下v成了只读变量 可读写变量v已经被遮蔽了,同样 如果一个不可变变量 也可以通过变量遮蔽将其变为 //可变变量\n   let v=v;\n   println!(\"{}\",v);\n  }\n  ```\n\n* 类型推导,rust可以从变量生命的语句中获取信息进行类型推导，还可以通过上下文进行推导\n\n  自动类型推导和动态类型系统是两码事，rust是静态类型语言即 **一个变量的类型必须在编译阶段就确定，且无法改变，只是在某些时候不需要在源码中显式写出来而已**\n\n* 类型别名\n\n  可以使用type关键字 给同一个类型其别名（type alias）\n\n  ```\n  type Age =u32;\n  \n  fn grow(age:Age ,year:u32){\n  \tage+year;\n  }\n  ```\n\n* 静态变量\n\n  rust使用static关键字进行声明静态变量，rust中唯一的声明全局变量的方法\n\n  ```\n  static GLOBAL_COUNTER:i32=0\t\n  ```\n\n  * 全局变量必须在声明的时候马上初始化\n  * 全局变量的初始化必须是编译期可以确定的常量，不能包括执行期才能确定的表达式或语句或函数调用\n  * 带有mut修饰的全局变量 在使用的时候必须使用unsafe关键字\n\n  ```\n  static mut COUNTER_2:i32=3;\n  \n  unsafe{\n  \tCOUNTER_2=6;\n  \tprintln!(\"{}\"，COUNTER);\n  }\n  ```\n\n* 常量\n\n  使用const关键字生命常量\n\n  常量是常量，故不能使用mut进行修饰\n\n  ```\n  const GLOBAL：i32=12;\n  ```\n\n* bool基本数据类型\n\n  & | 与&& ||\n\n  ```\n  fn man(){\n  \tlet x=true;\n  \tlet y:bool=false;\n  }\n  ```\n\n* char 类型\n\n  可以描述任何一个符合unicode标准的字符值在代码中单个字符字面量使用单引号进行包围,占据的空间是4个字节。对一ASCII字符其实只需要占用一个字节，rust中可以使用一个字母b在字符或字符串前表示这个字面量存储在u8类型数组中，这样占用空间比char类型的数组要小一些\n\n  ```\n  let love ='a';\n  let x:u8=1;\n  let y:u8=b'A';\n  ```\n\n* 整数类型\n\n  rust中的数字类型分为整数类型与浮点数类型，各种整数类型之间的主要区分特征是：有符号/无符号及占据空间大小\n\n  **如果一个变量是有符号的那么他的最高位的那个bit就是符号位，表示该数为正值还是负值。如果一个变量是无符号类型，那么他的最高位和其他位一样表示该数的大小。**\n\n  如一个byte(8bit)的数据来说，如果存的是无符号数，那么它的表达范围是0-255,如果存的是有符号数，那么表达的范围是-128-127。\n\n  isize与usize在不同的系统上的占据的空间不一致\n\n* 浮点类型\n\n  按占据空间大小分 分f32与f64\n\n* 指针类型\n\n  * Box<T> 指向类型T 拥有所有权 可以释放内存\n  * &T 指向T类型的借用指针，也称引用，无权释放内存 无权修改写数据\n  * & mut T 指向类型T的mut 借用指针 无权释放内存，可以修改数据\n  * *const T 指向T类型 的只读裸指针 没有生命周期信息 无权修改数据\n  * ×mut T 指向类型T的可读写裸指针 没有生命周期 可以写数据\n\n*  类型转换\n\n  使用as进行类型间的转换注意只适用与合理的类型转换。\n\n* 复合类型\n\n  * tuple\n  * struct\n  * enum\n  * tuple struct\n\n* 类型递归定义 \n\n  rust允许递归定义\n\n  直接嵌套是不行的，那么使用指针进行间接引用就好了\n\n  ```\n  struct Recursive{\n  \tdata:i32\n  \trec:Box<Recursive>\n  }\n  ```\n\n  \n","slug":"rust-variablesAndType","published":1,"updated":"2022-09-03T07:30:55.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz869003dtwfabmelu7dl","content":"<p>变量与类型<a id=\"more\"></a></p>\n<ul>\n<li><p>rust变量必须先声明后使用，所有的变量必须初始化</p>\n<p><code>let varibales:i32=42</code></p>\n</li>\n<li><p>rust中声明的变量默认是只读的 如果想要变量是可写的即可改变的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let mut y=5;</span><br><span class=\"line\"> y=6;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>变量遮蔽，相同名称变量 后面的变量会将前面的变量这笔起来，当我们想复用一个变量名的时候就很有用，可以通过变量遮蔽实现不同类型的变量的重新绑定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main()&#123;</span><br><span class=\"line\"> let x=&quot;hello&quot;;</span><br><span class=\"line\"> println!(&quot;&#123;&#125;&quot;，x);</span><br><span class=\"line\"> //下面的x将上面的x进行遮蔽 如果没有let 那么下面的声明就是对x的重新赋值</span><br><span class=\"line\"> let x=6;</span><br><span class=\"line\"> println!(&quot;&#123;&#125;&quot;,x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main()&#123;</span><br><span class=\"line\"> let mut v= Vec::new();</span><br><span class=\"line\"> </span><br><span class=\"line\"> v.push(1);</span><br><span class=\"line\"> </span><br><span class=\"line\"> //从这里往下v成了只读变量 可读写变量v已经被遮蔽了,同样 如果一个不可变变量 也可以通过变量遮蔽将其变为 //可变变量</span><br><span class=\"line\"> let v=v;</span><br><span class=\"line\"> println!(&quot;&#123;&#125;&quot;,v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>类型推导,rust可以从变量生命的语句中获取信息进行类型推导，还可以通过上下文进行推导</p>\n<p>自动类型推导和动态类型系统是两码事，rust是静态类型语言即 <strong>一个变量的类型必须在编译阶段就确定，且无法改变，只是在某些时候不需要在源码中显式写出来而已</strong></p>\n</li>\n<li><p>类型别名</p>\n<p>可以使用type关键字 给同一个类型其别名（type alias）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Age =u32;</span><br><span class=\"line\"></span><br><span class=\"line\">fn grow(age:Age ,year:u32)&#123;</span><br><span class=\"line\">\tage+year;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>静态变量</p>\n<p>rust使用static关键字进行声明静态变量，rust中唯一的声明全局变量的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static GLOBAL_COUNTER:i32=0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>全局变量必须在声明的时候马上初始化</li>\n<li>全局变量的初始化必须是编译期可以确定的常量，不能包括执行期才能确定的表达式或语句或函数调用</li>\n<li>带有mut修饰的全局变量 在使用的时候必须使用unsafe关键字</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static mut COUNTER_2:i32=3;</span><br><span class=\"line\"></span><br><span class=\"line\">unsafe&#123;</span><br><span class=\"line\">\tCOUNTER_2=6;</span><br><span class=\"line\">\tprintln!(&quot;&#123;&#125;&quot;，COUNTER);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常量</p>\n<p>使用const关键字生命常量</p>\n<p>常量是常量，故不能使用mut进行修饰</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const GLOBAL：i32=12;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>bool基本数据类型</p>\n<p>&amp; | 与&amp;&amp; ||</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn man()&#123;</span><br><span class=\"line\">\tlet x=true;</span><br><span class=\"line\">\tlet y:bool=false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>char 类型</p>\n<p>可以描述任何一个符合unicode标准的字符值在代码中单个字符字面量使用单引号进行包围,占据的空间是4个字节。对一ASCII字符其实只需要占用一个字节，rust中可以使用一个字母b在字符或字符串前表示这个字面量存储在u8类型数组中，这样占用空间比char类型的数组要小一些</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let love =&apos;a&apos;;</span><br><span class=\"line\">let x:u8=1;</span><br><span class=\"line\">let y:u8=b&apos;A&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>整数类型</p>\n<p>rust中的数字类型分为整数类型与浮点数类型，各种整数类型之间的主要区分特征是：有符号/无符号及占据空间大小</p>\n<p><strong>如果一个变量是有符号的那么他的最高位的那个bit就是符号位，表示该数为正值还是负值。如果一个变量是无符号类型，那么他的最高位和其他位一样表示该数的大小。</strong></p>\n<p>如一个byte(8bit)的数据来说，如果存的是无符号数，那么它的表达范围是0-255,如果存的是有符号数，那么表达的范围是-128-127。</p>\n<p>isize与usize在不同的系统上的占据的空间不一致</p>\n</li>\n<li><p>浮点类型</p>\n<p>按占据空间大小分 分f32与f64</p>\n</li>\n<li><p>指针类型</p>\n<ul>\n<li>Box<t> 指向类型T 拥有所有权 可以释放内存</t></li>\n<li>&amp;T 指向T类型的借用指针，也称引用，无权释放内存 无权修改写数据</li>\n<li>&amp; mut T 指向类型T的mut 借用指针 无权释放内存，可以修改数据</li>\n<li>*const T 指向T类型 的只读裸指针 没有生命周期信息 无权修改数据</li>\n<li>×mut T 指向类型T的可读写裸指针 没有生命周期 可以写数据</li>\n</ul>\n</li>\n<li><p>类型转换</p>\n<p>使用as进行类型间的转换注意只适用与合理的类型转换。</p>\n</li>\n<li><p>复合类型</p>\n<ul>\n<li>tuple</li>\n<li>struct</li>\n<li>enum</li>\n<li>tuple struct</li>\n</ul>\n</li>\n<li><p>类型递归定义 </p>\n<p>rust允许递归定义</p>\n<p>直接嵌套是不行的，那么使用指针进行间接引用就好了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Recursive&#123;</span><br><span class=\"line\">\tdata:i32</span><br><span class=\"line\">\trec:Box&lt;Recursive&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>变量与类型</p>","more":"<p></p>\n<ul>\n<li><p>rust变量必须先声明后使用，所有的变量必须初始化</p>\n<p><code>let varibales:i32=42</code></p>\n</li>\n<li><p>rust中声明的变量默认是只读的 如果想要变量是可写的即可改变的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let mut y=5;</span><br><span class=\"line\"> y=6;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>变量遮蔽，相同名称变量 后面的变量会将前面的变量这笔起来，当我们想复用一个变量名的时候就很有用，可以通过变量遮蔽实现不同类型的变量的重新绑定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main()&#123;</span><br><span class=\"line\"> let x=&quot;hello&quot;;</span><br><span class=\"line\"> println!(&quot;&#123;&#125;&quot;，x);</span><br><span class=\"line\"> //下面的x将上面的x进行遮蔽 如果没有let 那么下面的声明就是对x的重新赋值</span><br><span class=\"line\"> let x=6;</span><br><span class=\"line\"> println!(&quot;&#123;&#125;&quot;,x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main()&#123;</span><br><span class=\"line\"> let mut v= Vec::new();</span><br><span class=\"line\"> </span><br><span class=\"line\"> v.push(1);</span><br><span class=\"line\"> </span><br><span class=\"line\"> //从这里往下v成了只读变量 可读写变量v已经被遮蔽了,同样 如果一个不可变变量 也可以通过变量遮蔽将其变为 //可变变量</span><br><span class=\"line\"> let v=v;</span><br><span class=\"line\"> println!(&quot;&#123;&#125;&quot;,v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>类型推导,rust可以从变量生命的语句中获取信息进行类型推导，还可以通过上下文进行推导</p>\n<p>自动类型推导和动态类型系统是两码事，rust是静态类型语言即 <strong>一个变量的类型必须在编译阶段就确定，且无法改变，只是在某些时候不需要在源码中显式写出来而已</strong></p>\n</li>\n<li><p>类型别名</p>\n<p>可以使用type关键字 给同一个类型其别名（type alias）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Age =u32;</span><br><span class=\"line\"></span><br><span class=\"line\">fn grow(age:Age ,year:u32)&#123;</span><br><span class=\"line\">\tage+year;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>静态变量</p>\n<p>rust使用static关键字进行声明静态变量，rust中唯一的声明全局变量的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static GLOBAL_COUNTER:i32=0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>全局变量必须在声明的时候马上初始化</li>\n<li>全局变量的初始化必须是编译期可以确定的常量，不能包括执行期才能确定的表达式或语句或函数调用</li>\n<li>带有mut修饰的全局变量 在使用的时候必须使用unsafe关键字</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static mut COUNTER_2:i32=3;</span><br><span class=\"line\"></span><br><span class=\"line\">unsafe&#123;</span><br><span class=\"line\">\tCOUNTER_2=6;</span><br><span class=\"line\">\tprintln!(&quot;&#123;&#125;&quot;，COUNTER);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常量</p>\n<p>使用const关键字生命常量</p>\n<p>常量是常量，故不能使用mut进行修饰</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const GLOBAL：i32=12;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>bool基本数据类型</p>\n<p>&amp; | 与&amp;&amp; ||</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn man()&#123;</span><br><span class=\"line\">\tlet x=true;</span><br><span class=\"line\">\tlet y:bool=false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>char 类型</p>\n<p>可以描述任何一个符合unicode标准的字符值在代码中单个字符字面量使用单引号进行包围,占据的空间是4个字节。对一ASCII字符其实只需要占用一个字节，rust中可以使用一个字母b在字符或字符串前表示这个字面量存储在u8类型数组中，这样占用空间比char类型的数组要小一些</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let love =&apos;a&apos;;</span><br><span class=\"line\">let x:u8=1;</span><br><span class=\"line\">let y:u8=b&apos;A&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>整数类型</p>\n<p>rust中的数字类型分为整数类型与浮点数类型，各种整数类型之间的主要区分特征是：有符号/无符号及占据空间大小</p>\n<p><strong>如果一个变量是有符号的那么他的最高位的那个bit就是符号位，表示该数为正值还是负值。如果一个变量是无符号类型，那么他的最高位和其他位一样表示该数的大小。</strong></p>\n<p>如一个byte(8bit)的数据来说，如果存的是无符号数，那么它的表达范围是0-255,如果存的是有符号数，那么表达的范围是-128-127。</p>\n<p>isize与usize在不同的系统上的占据的空间不一致</p>\n</li>\n<li><p>浮点类型</p>\n<p>按占据空间大小分 分f32与f64</p>\n</li>\n<li><p>指针类型</p>\n<ul>\n<li>Box<t> 指向类型T 拥有所有权 可以释放内存</t></li>\n<li>&amp;T 指向T类型的借用指针，也称引用，无权释放内存 无权修改写数据</li>\n<li>&amp; mut T 指向类型T的mut 借用指针 无权释放内存，可以修改数据</li>\n<li>*const T 指向T类型 的只读裸指针 没有生命周期信息 无权修改数据</li>\n<li>×mut T 指向类型T的可读写裸指针 没有生命周期 可以写数据</li>\n</ul>\n</li>\n<li><p>类型转换</p>\n<p>使用as进行类型间的转换注意只适用与合理的类型转换。</p>\n</li>\n<li><p>复合类型</p>\n<ul>\n<li>tuple</li>\n<li>struct</li>\n<li>enum</li>\n<li>tuple struct</li>\n</ul>\n</li>\n<li><p>类型递归定义 </p>\n<p>rust允许递归定义</p>\n<p>直接嵌套是不行的，那么使用指针进行间接引用就好了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Recursive&#123;</span><br><span class=\"line\">\tdata:i32</span><br><span class=\"line\">\trec:Box&lt;Recursive&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>"},{"title":"tomcat-native和APR","date":"2018-02-25T16:48:53.000Z","_content":"\nTomcat开启Apr及Tomcat-native提高性能<!--more-->\n\n### 安装JDK及tomcat8\n\ntomcat8原生支持nio 这里以8.0.50版本为例,jdk以1.7为例,linux系统以CentOS-7-x86_64-Minimal-1708为例\n\n```JAVA_HOME=/data/soft/jdk1.7.0_80\nJAVA_HOME=/data/soft/jdk1.7.0_80\nPATH=JAVA_HOME/bin:PATH\nCLASSPATH=.:JAVA_HOME/lib/dt.jar:JAVA_HOME/lib/tools.jar\nexport JAVA_HOME\nexport PATH\nexport CLASSPATH\n```\n\n### 查看Openssl并更新\n\n* 查看openssl版本\n\n  ```\n  openssl version\n  ```\n\n  如果版本低于1.0.2那么需要进行升级\n\n* 升级openssl\n\n  这里就升级为最新版\n\n  The latest stable version is the 1.1.0 series 这是官方的note lts版本为1.0.2版本\n\n  ```\n  wget https://www.openssl.org/source/openssl-1.1.0g.tar.gz\n  tar -zxvf openssl-1.1.0g.tar.gz\n  cd openssl-1.1.0g\n  ./config --prefix=/usr/local/openssl\n  make && make install    \n  //进行备份\n  mv /usr/bin/openssl /usr/bin/openssl.bak\n  mv /usr/include/openssl /usr/include/openssl.bak\n  //做新的软连接\n  ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl    \n  ln -s /usr/local/openssl/include/openssl /usr/include/openssl\n\n  echo \"/usr/local/openssl/lib\">>/etc/ld.so.conf    \n  ldconfig -v \n  openssl version\n  ```\n\n  ​\n\n### 安装APR\n\n```\nyum install apr-devel openssl-devel  \n```\n\n如果你的tomcat版本高的话 在安装native 时候会提示你你的apr版本必须高于1.46还是多少 但是yum源的版本又过低\n\n这时你需要进行手动下载apr 并进行安装\n\n```\nyum -y install libtool\nyum -y install autoconf\nwget http://archive.apache.org/dist/apr/apr-1.6.3.tar.gz\ncd apr-1.6.3.tar.gz\n./configure --prefix=/usr/apr\nmake\nmake install\n```\n\n\n\n### 安装编译native\n\n *  进入tomcat的bin目录下\n\n    ```\n    cd /data/soft/tomcat-8.0.50/bin/\n    ```\n\n* 解压tomcat-native\n\n  ```\n  tar -zxvf tomcat-native-1.2.16-src/\t\t\n  ```\n\n* 进行编译安装\n\n  ```\n  ./configure --with-apr=/usr/bin/apr-1-config --with-java-home=/data/soft/jdk1.7.0_80 --with-ssl=yes\n  ```\n\n  ```\n  make && make install\n  ```\n\n  安装完成后会提示:\n\n  ```\n  Libraries have been installed in: \n  /usr/local/apr/lib\n  ```\n\n* 修改环境变量\n\n  ```\n  export LD_LIBRARY_PATH=/usr/local/apr/lib \n  ```\n\n  ```\n  source /etc/profile\n  ```\n\n* 修改tomcat环境变量\n\n  在tomat的bin目录下的catalina.sh中添加:\n\n  ```\n  CATALINA_OPTS=\"-Djava.library.path=/usr/local/apr/lib\"\n  ```\n\n  加在文件最前面 加在JAVA_OPTS后\n\n* 修改server.xml\n\n  把原来的配置需要进行注释或者修改\n\n  ```\n  <!--enableLookups=”false” 来关闭 DNS 反向查询提升性能-->\n    <Connector executor=\"tomcatThreadPool\"\n                 port=\"8080\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n                 URIEncoding=\"UTF-8\" enableLookups=\"false\" acceptCount=\"50\"\n                 connectionTimeout=\"1000\" maxKeepAliveRequests=\"250\"\n                 redirectPort=\"8443\" />\n                 \n      <Executor name=\"tomcatThreadPool\" namePrefix=\"catalina-exec-\"\n          maxThreads=\"500\" minSpareThreads=\"25\"\n          maxIdleTime=\"4000\"/>\n          <!--如果用不到SSL，则需要关闭，on改为off,否则启动时会报错-->\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"off\" /> \n  ```\n\n  具体的参数调优可参照之前\n\n### 启动并查看日志\n\n当日志中打印:\n\n```\n26-Feb-2018 08:44:16.121 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [\"http-apr-8080\"]\n26-Feb-2018 08:44:16.155 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [\"ajp-apr-8009\"]\n26-Feb-2018 08:44:16.184 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 4630 ms\n```\n\n表示APR已经起作用了!","source":"_posts/tomcat-native和APR.md","raw":"---\ntitle: tomcat-native和APR\ndate: 2018-02-26 00:48:53\ntags: [Tomcat]\ncategories: [Tomcat]\n---\n\nTomcat开启Apr及Tomcat-native提高性能<!--more-->\n\n### 安装JDK及tomcat8\n\ntomcat8原生支持nio 这里以8.0.50版本为例,jdk以1.7为例,linux系统以CentOS-7-x86_64-Minimal-1708为例\n\n```JAVA_HOME=/data/soft/jdk1.7.0_80\nJAVA_HOME=/data/soft/jdk1.7.0_80\nPATH=JAVA_HOME/bin:PATH\nCLASSPATH=.:JAVA_HOME/lib/dt.jar:JAVA_HOME/lib/tools.jar\nexport JAVA_HOME\nexport PATH\nexport CLASSPATH\n```\n\n### 查看Openssl并更新\n\n* 查看openssl版本\n\n  ```\n  openssl version\n  ```\n\n  如果版本低于1.0.2那么需要进行升级\n\n* 升级openssl\n\n  这里就升级为最新版\n\n  The latest stable version is the 1.1.0 series 这是官方的note lts版本为1.0.2版本\n\n  ```\n  wget https://www.openssl.org/source/openssl-1.1.0g.tar.gz\n  tar -zxvf openssl-1.1.0g.tar.gz\n  cd openssl-1.1.0g\n  ./config --prefix=/usr/local/openssl\n  make && make install    \n  //进行备份\n  mv /usr/bin/openssl /usr/bin/openssl.bak\n  mv /usr/include/openssl /usr/include/openssl.bak\n  //做新的软连接\n  ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl    \n  ln -s /usr/local/openssl/include/openssl /usr/include/openssl\n\n  echo \"/usr/local/openssl/lib\">>/etc/ld.so.conf    \n  ldconfig -v \n  openssl version\n  ```\n\n  ​\n\n### 安装APR\n\n```\nyum install apr-devel openssl-devel  \n```\n\n如果你的tomcat版本高的话 在安装native 时候会提示你你的apr版本必须高于1.46还是多少 但是yum源的版本又过低\n\n这时你需要进行手动下载apr 并进行安装\n\n```\nyum -y install libtool\nyum -y install autoconf\nwget http://archive.apache.org/dist/apr/apr-1.6.3.tar.gz\ncd apr-1.6.3.tar.gz\n./configure --prefix=/usr/apr\nmake\nmake install\n```\n\n\n\n### 安装编译native\n\n *  进入tomcat的bin目录下\n\n    ```\n    cd /data/soft/tomcat-8.0.50/bin/\n    ```\n\n* 解压tomcat-native\n\n  ```\n  tar -zxvf tomcat-native-1.2.16-src/\t\t\n  ```\n\n* 进行编译安装\n\n  ```\n  ./configure --with-apr=/usr/bin/apr-1-config --with-java-home=/data/soft/jdk1.7.0_80 --with-ssl=yes\n  ```\n\n  ```\n  make && make install\n  ```\n\n  安装完成后会提示:\n\n  ```\n  Libraries have been installed in: \n  /usr/local/apr/lib\n  ```\n\n* 修改环境变量\n\n  ```\n  export LD_LIBRARY_PATH=/usr/local/apr/lib \n  ```\n\n  ```\n  source /etc/profile\n  ```\n\n* 修改tomcat环境变量\n\n  在tomat的bin目录下的catalina.sh中添加:\n\n  ```\n  CATALINA_OPTS=\"-Djava.library.path=/usr/local/apr/lib\"\n  ```\n\n  加在文件最前面 加在JAVA_OPTS后\n\n* 修改server.xml\n\n  把原来的配置需要进行注释或者修改\n\n  ```\n  <!--enableLookups=”false” 来关闭 DNS 反向查询提升性能-->\n    <Connector executor=\"tomcatThreadPool\"\n                 port=\"8080\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n                 URIEncoding=\"UTF-8\" enableLookups=\"false\" acceptCount=\"50\"\n                 connectionTimeout=\"1000\" maxKeepAliveRequests=\"250\"\n                 redirectPort=\"8443\" />\n                 \n      <Executor name=\"tomcatThreadPool\" namePrefix=\"catalina-exec-\"\n          maxThreads=\"500\" minSpareThreads=\"25\"\n          maxIdleTime=\"4000\"/>\n          <!--如果用不到SSL，则需要关闭，on改为off,否则启动时会报错-->\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"off\" /> \n  ```\n\n  具体的参数调优可参照之前\n\n### 启动并查看日志\n\n当日志中打印:\n\n```\n26-Feb-2018 08:44:16.121 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [\"http-apr-8080\"]\n26-Feb-2018 08:44:16.155 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [\"ajp-apr-8009\"]\n26-Feb-2018 08:44:16.184 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 4630 ms\n```\n\n表示APR已经起作用了!","slug":"tomcat-native和APR","published":1,"updated":"2022-09-03T07:30:55.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz86c003htwfar1tbshfo","content":"<p>Tomcat开启Apr及Tomcat-native提高性能<a id=\"more\"></a></p>\n<h3 id=\"安装JDK及tomcat8\"><a href=\"#安装JDK及tomcat8\" class=\"headerlink\" title=\"安装JDK及tomcat8\"></a>安装JDK及tomcat8</h3><p>tomcat8原生支持nio 这里以8.0.50版本为例,jdk以1.7为例,linux系统以CentOS-7-x86_64-Minimal-1708为例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME=/data/soft/jdk1.7.0_80</span><br><span class=\"line\">PATH=JAVA_HOME/bin:PATH</span><br><span class=\"line\">CLASSPATH=.:JAVA_HOME/lib/dt.jar:JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export JAVA_HOME</span><br><span class=\"line\">export PATH</span><br><span class=\"line\">export CLASSPATH</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看Openssl并更新\"><a href=\"#查看Openssl并更新\" class=\"headerlink\" title=\"查看Openssl并更新\"></a>查看Openssl并更新</h3><ul>\n<li><p>查看openssl版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl version</span><br></pre></td></tr></table></figure>\n\n<p>如果版本低于1.0.2那么需要进行升级</p>\n</li>\n<li><p>升级openssl</p>\n<p>这里就升级为最新版</p>\n<p>The latest stable version is the 1.1.0 series 这是官方的note lts版本为1.0.2版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.openssl.org/source/openssl-1.1.0g.tar.gz</span><br><span class=\"line\">tar -zxvf openssl-1.1.0g.tar.gz</span><br><span class=\"line\">cd openssl-1.1.0g</span><br><span class=\"line\">./config --prefix=/usr/local/openssl</span><br><span class=\"line\">make &amp;&amp; make install    </span><br><span class=\"line\">//进行备份</span><br><span class=\"line\">mv /usr/bin/openssl /usr/bin/openssl.bak</span><br><span class=\"line\">mv /usr/include/openssl /usr/include/openssl.bak</span><br><span class=\"line\">//做新的软连接</span><br><span class=\"line\">ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl    </span><br><span class=\"line\">ln -s /usr/local/openssl/include/openssl /usr/include/openssl</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;/usr/local/openssl/lib&quot;&gt;&gt;/etc/ld.so.conf    </span><br><span class=\"line\">ldconfig -v </span><br><span class=\"line\">openssl version</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n</ul>\n<h3 id=\"安装APR\"><a href=\"#安装APR\" class=\"headerlink\" title=\"安装APR\"></a>安装APR</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install apr-devel openssl-devel</span><br></pre></td></tr></table></figure>\n\n<p>如果你的tomcat版本高的话 在安装native 时候会提示你你的apr版本必须高于1.46还是多少 但是yum源的版本又过低</p>\n<p>这时你需要进行手动下载apr 并进行安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install libtool</span><br><span class=\"line\">yum -y install autoconf</span><br><span class=\"line\">wget http://archive.apache.org/dist/apr/apr-1.6.3.tar.gz</span><br><span class=\"line\">cd apr-1.6.3.tar.gz</span><br><span class=\"line\">./configure --prefix=/usr/apr</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装编译native\"><a href=\"#安装编译native\" class=\"headerlink\" title=\"安装编译native\"></a>安装编译native</h3><ul>\n<li><p>进入tomcat的bin目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/tomcat-8.0.50/bin/</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<ul>\n<li><p>解压tomcat-native</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf tomcat-native-1.2.16-src/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进行编译安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --with-apr=/usr/bin/apr-1-config --with-java-home=/data/soft/jdk1.7.0_80 --with-ssl=yes</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后会提示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Libraries have been installed in: </span><br><span class=\"line\">/usr/local/apr/lib</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export LD_LIBRARY_PATH=/usr/local/apr/lib</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改tomcat环境变量</p>\n<p>在tomat的bin目录下的catalina.sh中添加:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CATALINA_OPTS=&quot;-Djava.library.path=/usr/local/apr/lib&quot;</span><br></pre></td></tr></table></figure>\n\n<p>加在文件最前面 加在JAVA_OPTS后</p>\n</li>\n<li><p>修改server.xml</p>\n<p>把原来的配置需要进行注释或者修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--enableLookups=”false” 来关闭 DNS 反向查询提升性能--&gt;</span><br><span class=\"line\">  &lt;Connector executor=&quot;tomcatThreadPool&quot;</span><br><span class=\"line\">               port=&quot;8080&quot; protocol=&quot;org.apache.coyote.http11.Http11AprProtocol&quot;</span><br><span class=\"line\">               URIEncoding=&quot;UTF-8&quot; enableLookups=&quot;false&quot; acceptCount=&quot;50&quot;</span><br><span class=\"line\">               connectionTimeout=&quot;1000&quot; maxKeepAliveRequests=&quot;250&quot;</span><br><span class=\"line\">               redirectPort=&quot;8443&quot; /&gt;</span><br><span class=\"line\">               </span><br><span class=\"line\">    &lt;Executor name=&quot;tomcatThreadPool&quot; namePrefix=&quot;catalina-exec-&quot;</span><br><span class=\"line\">        maxThreads=&quot;500&quot; minSpareThreads=&quot;25&quot;</span><br><span class=\"line\">        maxIdleTime=&quot;4000&quot;/&gt;</span><br><span class=\"line\">        &lt;!--如果用不到SSL，则需要关闭，on改为off,否则启动时会报错--&gt;</span><br><span class=\"line\">&lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;off&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>具体的参数调优可参照之前</p>\n</li>\n</ul>\n<h3 id=\"启动并查看日志\"><a href=\"#启动并查看日志\" class=\"headerlink\" title=\"启动并查看日志\"></a>启动并查看日志</h3><p>当日志中打印:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">26-Feb-2018 08:44:16.121 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [&quot;http-apr-8080&quot;]</span><br><span class=\"line\">26-Feb-2018 08:44:16.155 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [&quot;ajp-apr-8009&quot;]</span><br><span class=\"line\">26-Feb-2018 08:44:16.184 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 4630 ms</span><br></pre></td></tr></table></figure>\n\n<p>表示APR已经起作用了!</p>\n","site":{"data":{}},"excerpt":"<p>Tomcat开启Apr及Tomcat-native提高性能</p>","more":"<p></p>\n<h3 id=\"安装JDK及tomcat8\"><a href=\"#安装JDK及tomcat8\" class=\"headerlink\" title=\"安装JDK及tomcat8\"></a>安装JDK及tomcat8</h3><p>tomcat8原生支持nio 这里以8.0.50版本为例,jdk以1.7为例,linux系统以CentOS-7-x86_64-Minimal-1708为例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME=/data/soft/jdk1.7.0_80</span><br><span class=\"line\">PATH=JAVA_HOME/bin:PATH</span><br><span class=\"line\">CLASSPATH=.:JAVA_HOME/lib/dt.jar:JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export JAVA_HOME</span><br><span class=\"line\">export PATH</span><br><span class=\"line\">export CLASSPATH</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看Openssl并更新\"><a href=\"#查看Openssl并更新\" class=\"headerlink\" title=\"查看Openssl并更新\"></a>查看Openssl并更新</h3><ul>\n<li><p>查看openssl版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl version</span><br></pre></td></tr></table></figure>\n\n<p>如果版本低于1.0.2那么需要进行升级</p>\n</li>\n<li><p>升级openssl</p>\n<p>这里就升级为最新版</p>\n<p>The latest stable version is the 1.1.0 series 这是官方的note lts版本为1.0.2版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.openssl.org/source/openssl-1.1.0g.tar.gz</span><br><span class=\"line\">tar -zxvf openssl-1.1.0g.tar.gz</span><br><span class=\"line\">cd openssl-1.1.0g</span><br><span class=\"line\">./config --prefix=/usr/local/openssl</span><br><span class=\"line\">make &amp;&amp; make install    </span><br><span class=\"line\">//进行备份</span><br><span class=\"line\">mv /usr/bin/openssl /usr/bin/openssl.bak</span><br><span class=\"line\">mv /usr/include/openssl /usr/include/openssl.bak</span><br><span class=\"line\">//做新的软连接</span><br><span class=\"line\">ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl    </span><br><span class=\"line\">ln -s /usr/local/openssl/include/openssl /usr/include/openssl</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;/usr/local/openssl/lib&quot;&gt;&gt;/etc/ld.so.conf    </span><br><span class=\"line\">ldconfig -v </span><br><span class=\"line\">openssl version</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n</ul>\n<h3 id=\"安装APR\"><a href=\"#安装APR\" class=\"headerlink\" title=\"安装APR\"></a>安装APR</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install apr-devel openssl-devel</span><br></pre></td></tr></table></figure>\n\n<p>如果你的tomcat版本高的话 在安装native 时候会提示你你的apr版本必须高于1.46还是多少 但是yum源的版本又过低</p>\n<p>这时你需要进行手动下载apr 并进行安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install libtool</span><br><span class=\"line\">yum -y install autoconf</span><br><span class=\"line\">wget http://archive.apache.org/dist/apr/apr-1.6.3.tar.gz</span><br><span class=\"line\">cd apr-1.6.3.tar.gz</span><br><span class=\"line\">./configure --prefix=/usr/apr</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装编译native\"><a href=\"#安装编译native\" class=\"headerlink\" title=\"安装编译native\"></a>安装编译native</h3><ul>\n<li><p>进入tomcat的bin目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/soft/tomcat-8.0.50/bin/</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<ul>\n<li><p>解压tomcat-native</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf tomcat-native-1.2.16-src/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进行编译安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --with-apr=/usr/bin/apr-1-config --with-java-home=/data/soft/jdk1.7.0_80 --with-ssl=yes</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后会提示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Libraries have been installed in: </span><br><span class=\"line\">/usr/local/apr/lib</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export LD_LIBRARY_PATH=/usr/local/apr/lib</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改tomcat环境变量</p>\n<p>在tomat的bin目录下的catalina.sh中添加:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CATALINA_OPTS=&quot;-Djava.library.path=/usr/local/apr/lib&quot;</span><br></pre></td></tr></table></figure>\n\n<p>加在文件最前面 加在JAVA_OPTS后</p>\n</li>\n<li><p>修改server.xml</p>\n<p>把原来的配置需要进行注释或者修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--enableLookups=”false” 来关闭 DNS 反向查询提升性能--&gt;</span><br><span class=\"line\">  &lt;Connector executor=&quot;tomcatThreadPool&quot;</span><br><span class=\"line\">               port=&quot;8080&quot; protocol=&quot;org.apache.coyote.http11.Http11AprProtocol&quot;</span><br><span class=\"line\">               URIEncoding=&quot;UTF-8&quot; enableLookups=&quot;false&quot; acceptCount=&quot;50&quot;</span><br><span class=\"line\">               connectionTimeout=&quot;1000&quot; maxKeepAliveRequests=&quot;250&quot;</span><br><span class=\"line\">               redirectPort=&quot;8443&quot; /&gt;</span><br><span class=\"line\">               </span><br><span class=\"line\">    &lt;Executor name=&quot;tomcatThreadPool&quot; namePrefix=&quot;catalina-exec-&quot;</span><br><span class=\"line\">        maxThreads=&quot;500&quot; minSpareThreads=&quot;25&quot;</span><br><span class=\"line\">        maxIdleTime=&quot;4000&quot;/&gt;</span><br><span class=\"line\">        &lt;!--如果用不到SSL，则需要关闭，on改为off,否则启动时会报错--&gt;</span><br><span class=\"line\">&lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;off&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>具体的参数调优可参照之前</p>\n</li>\n</ul>\n<h3 id=\"启动并查看日志\"><a href=\"#启动并查看日志\" class=\"headerlink\" title=\"启动并查看日志\"></a>启动并查看日志</h3><p>当日志中打印:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">26-Feb-2018 08:44:16.121 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [&quot;http-apr-8080&quot;]</span><br><span class=\"line\">26-Feb-2018 08:44:16.155 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [&quot;ajp-apr-8009&quot;]</span><br><span class=\"line\">26-Feb-2018 08:44:16.184 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 4630 ms</span><br></pre></td></tr></table></figure>\n\n<p>表示APR已经起作用了!</p>"},{"title":"zookeeper模拟集群搭建","date":"2019-09-14T02:56:37.000Z","_content":"\nzookeeper集群搭建<!--more-->\n\n### 下载 安装\n\n`wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.12/zookeeper-3.4.12.tar.gz`\n\n` tar -zxvf zookeeper-3.4.12.tar.gz`\n\n```\nvim /etc/profile\nexport ZOOKEEPER_HOME=/data/soft/zookeeper-3.4.12\nexport PATH=.:$HADOOP_HOME/bin:$ZOOKEEPER_HOME/bin:$JAVA_HOME/bin:$PATH\n\n#修改配置文件\n# The number of milliseconds of each tick\ntickTime=2000\n# The number of ticks that the initial \n# synchronization phase can take\ninitLimit=10\n# The number of ticks that can pass between \n# sending a request and getting an acknowledgement\nsyncLimit=5\n# the directory where the snapshot is stored.\n# do not use /tmp for storage, /tmp here is just \n# example sakes.\ndataDir=/data/soft/zk/data\ndataLogDir=/data/soft/zk/dataLog \n# the port at which the clients will connect\nclientPort=2181\n\nserver.1=localhost:2887:3887\nserver.2=localhost:2888:3888\nserver.3=localhost:2889:3889\n# the maximum number of client connections.\n# increase this if you need to handle more clients\n#maxClientCnxns=60\n#\n# Be sure to read the maintenance section of the \n# administrator guide before turning on autopurge.\n#\n# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance\n#\n# The number of snapshots to retain in dataDir\n#autopurge.snapRetainCount=3\n# Purge task interval in hours\n# Set to \"0\" to disable auto purge feature\n#autopurge.purgeInterval=1\n```\n\n配置文件介绍\n\n`server.A=B:C:D`\n\nA表示是几号服务器 (myid文件要在data目录下创建并在文件中写入对应的A)\n\nB表示该服务器的IP地址\n\nC表示的是这个服务器与集群中leader服务器交换信息的端口\n\nD表示leader服务器如果挂了，那么follower服务器进行选举的端口\n\n选出一个新的 Leader，而这个端口就是用来执行选举时服务器相互通信的端口。\n如果是伪集群的配置方式，由于 B 都是一样，所以不同的 Zookeeper 实例通信端口号不能一样，\n所以要给它们分配不同的端口号。\n\n* tickTime：zookeeper中使用的基本时间单位, 毫秒值。\n\n* initLimit：这个配置项是用来配置 Zookeeper 接受客户端（这里所说的客户端不是用户连接 Zookeeper 服务器的客户端，而是 Zookeeper 服务器集群中连接到 Leader 的 Follower 服务器）初始化连接时最长能忍受多少个 tickTime 时间间隔数。这里设置为5表名最长容忍时间为 5 * 2000 = 10 秒。\n* syncLimit：这个配置标识 Leader 与 Follower 之间发送消息，请求和应答时间长度，最长不能超过多少个 tickTime 的时间长度，总的时间长度就是 2 * 2000 = 4 秒。\n* dataDir 和 dataLogDir 看配置就知道干吗的了，不用解释。\n* clientPort：监听client连接的端口号，这里说的client就是连接到Zookeeper的代码程序。\n* server.{myid}={ip}:{leader服务器交换信息的端口}:{当leader服务器挂了后, 选举leader的端口}\n* maxClientCnxns：对于一个客户端的连接数限制，默认是60，这在大部分时候是足够了。但是在我们实际使用中发现，在测试环境经常超过这个数，经过调查发现有的团队将几十个应用全部部署到一台机器上，以方便测试，于是这个数字就超过了。\n  ","source":"_posts/zookeeper模拟集群搭建.md","raw":"---\ntitle: zookeeper模拟集群搭建\ndate: 2019-09-14 10:56:37\ntags: [Linux]\n---\n\nzookeeper集群搭建<!--more-->\n\n### 下载 安装\n\n`wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.12/zookeeper-3.4.12.tar.gz`\n\n` tar -zxvf zookeeper-3.4.12.tar.gz`\n\n```\nvim /etc/profile\nexport ZOOKEEPER_HOME=/data/soft/zookeeper-3.4.12\nexport PATH=.:$HADOOP_HOME/bin:$ZOOKEEPER_HOME/bin:$JAVA_HOME/bin:$PATH\n\n#修改配置文件\n# The number of milliseconds of each tick\ntickTime=2000\n# The number of ticks that the initial \n# synchronization phase can take\ninitLimit=10\n# The number of ticks that can pass between \n# sending a request and getting an acknowledgement\nsyncLimit=5\n# the directory where the snapshot is stored.\n# do not use /tmp for storage, /tmp here is just \n# example sakes.\ndataDir=/data/soft/zk/data\ndataLogDir=/data/soft/zk/dataLog \n# the port at which the clients will connect\nclientPort=2181\n\nserver.1=localhost:2887:3887\nserver.2=localhost:2888:3888\nserver.3=localhost:2889:3889\n# the maximum number of client connections.\n# increase this if you need to handle more clients\n#maxClientCnxns=60\n#\n# Be sure to read the maintenance section of the \n# administrator guide before turning on autopurge.\n#\n# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance\n#\n# The number of snapshots to retain in dataDir\n#autopurge.snapRetainCount=3\n# Purge task interval in hours\n# Set to \"0\" to disable auto purge feature\n#autopurge.purgeInterval=1\n```\n\n配置文件介绍\n\n`server.A=B:C:D`\n\nA表示是几号服务器 (myid文件要在data目录下创建并在文件中写入对应的A)\n\nB表示该服务器的IP地址\n\nC表示的是这个服务器与集群中leader服务器交换信息的端口\n\nD表示leader服务器如果挂了，那么follower服务器进行选举的端口\n\n选出一个新的 Leader，而这个端口就是用来执行选举时服务器相互通信的端口。\n如果是伪集群的配置方式，由于 B 都是一样，所以不同的 Zookeeper 实例通信端口号不能一样，\n所以要给它们分配不同的端口号。\n\n* tickTime：zookeeper中使用的基本时间单位, 毫秒值。\n\n* initLimit：这个配置项是用来配置 Zookeeper 接受客户端（这里所说的客户端不是用户连接 Zookeeper 服务器的客户端，而是 Zookeeper 服务器集群中连接到 Leader 的 Follower 服务器）初始化连接时最长能忍受多少个 tickTime 时间间隔数。这里设置为5表名最长容忍时间为 5 * 2000 = 10 秒。\n* syncLimit：这个配置标识 Leader 与 Follower 之间发送消息，请求和应答时间长度，最长不能超过多少个 tickTime 的时间长度，总的时间长度就是 2 * 2000 = 4 秒。\n* dataDir 和 dataLogDir 看配置就知道干吗的了，不用解释。\n* clientPort：监听client连接的端口号，这里说的client就是连接到Zookeeper的代码程序。\n* server.{myid}={ip}:{leader服务器交换信息的端口}:{当leader服务器挂了后, 选举leader的端口}\n* maxClientCnxns：对于一个客户端的连接数限制，默认是60，这在大部分时候是足够了。但是在我们实际使用中发现，在测试环境经常超过这个数，经过调查发现有的团队将几十个应用全部部署到一台机器上，以方便测试，于是这个数字就超过了。\n  ","slug":"zookeeper模拟集群搭建","published":1,"updated":"2022-09-03T07:30:55.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz86e003jtwfa4pang2nk","content":"<p>zookeeper集群搭建<a id=\"more\"></a></p>\n<h3 id=\"下载-安装\"><a href=\"#下载-安装\" class=\"headerlink\" title=\"下载 安装\"></a>下载 安装</h3><p><code>wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.12/zookeeper-3.4.12.tar.gz</code></p>\n<p><code>tar -zxvf zookeeper-3.4.12.tar.gz</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">export ZOOKEEPER_HOME=/data/soft/zookeeper-3.4.12</span><br><span class=\"line\">export PATH=.:$HADOOP_HOME/bin:$ZOOKEEPER_HOME/bin:$JAVA_HOME/bin:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\">#修改配置文件</span><br><span class=\"line\"># The number of milliseconds of each tick</span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\"># The number of ticks that the initial </span><br><span class=\"line\"># synchronization phase can take</span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\"># The number of ticks that can pass between </span><br><span class=\"line\"># sending a request and getting an acknowledgement</span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\"># the directory where the snapshot is stored.</span><br><span class=\"line\"># do not use /tmp for storage, /tmp here is just </span><br><span class=\"line\"># example sakes.</span><br><span class=\"line\">dataDir=/data/soft/zk/data</span><br><span class=\"line\">dataLogDir=/data/soft/zk/dataLog </span><br><span class=\"line\"># the port at which the clients will connect</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\"></span><br><span class=\"line\">server.1=localhost:2887:3887</span><br><span class=\"line\">server.2=localhost:2888:3888</span><br><span class=\"line\">server.3=localhost:2889:3889</span><br><span class=\"line\"># the maximum number of client connections.</span><br><span class=\"line\"># increase this if you need to handle more clients</span><br><span class=\"line\">#maxClientCnxns=60</span><br><span class=\"line\">#</span><br><span class=\"line\"># Be sure to read the maintenance section of the </span><br><span class=\"line\"># administrator guide before turning on autopurge.</span><br><span class=\"line\">#</span><br><span class=\"line\"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class=\"line\">#</span><br><span class=\"line\"># The number of snapshots to retain in dataDir</span><br><span class=\"line\">#autopurge.snapRetainCount=3</span><br><span class=\"line\"># Purge task interval in hours</span><br><span class=\"line\"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class=\"line\">#autopurge.purgeInterval=1</span><br></pre></td></tr></table></figure>\n\n<p>配置文件介绍</p>\n<p><code>server.A=B:C:D</code></p>\n<p>A表示是几号服务器 (myid文件要在data目录下创建并在文件中写入对应的A)</p>\n<p>B表示该服务器的IP地址</p>\n<p>C表示的是这个服务器与集群中leader服务器交换信息的端口</p>\n<p>D表示leader服务器如果挂了，那么follower服务器进行选举的端口</p>\n<p>选出一个新的 Leader，而这个端口就是用来执行选举时服务器相互通信的端口。<br>如果是伪集群的配置方式，由于 B 都是一样，所以不同的 Zookeeper 实例通信端口号不能一样，<br>所以要给它们分配不同的端口号。</p>\n<ul>\n<li><p>tickTime：zookeeper中使用的基本时间单位, 毫秒值。</p>\n</li>\n<li><p>initLimit：这个配置项是用来配置 Zookeeper 接受客户端（这里所说的客户端不是用户连接 Zookeeper 服务器的客户端，而是 Zookeeper 服务器集群中连接到 Leader 的 Follower 服务器）初始化连接时最长能忍受多少个 tickTime 时间间隔数。这里设置为5表名最长容忍时间为 5 * 2000 = 10 秒。</p>\n</li>\n<li><p>syncLimit：这个配置标识 Leader 与 Follower 之间发送消息，请求和应答时间长度，最长不能超过多少个 tickTime 的时间长度，总的时间长度就是 2 * 2000 = 4 秒。</p>\n</li>\n<li><p>dataDir 和 dataLogDir 看配置就知道干吗的了，不用解释。</p>\n</li>\n<li><p>clientPort：监听client连接的端口号，这里说的client就是连接到Zookeeper的代码程序。</p>\n</li>\n<li><p>server.{myid}={ip}:{leader服务器交换信息的端口}:{当leader服务器挂了后, 选举leader的端口}</p>\n</li>\n<li><p>maxClientCnxns：对于一个客户端的连接数限制，默认是60，这在大部分时候是足够了。但是在我们实际使用中发现，在测试环境经常超过这个数，经过调查发现有的团队将几十个应用全部部署到一台机器上，以方便测试，于是这个数字就超过了。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>zookeeper集群搭建</p>","more":"<p></p>\n<h3 id=\"下载-安装\"><a href=\"#下载-安装\" class=\"headerlink\" title=\"下载 安装\"></a>下载 安装</h3><p><code>wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.12/zookeeper-3.4.12.tar.gz</code></p>\n<p><code>tar -zxvf zookeeper-3.4.12.tar.gz</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">export ZOOKEEPER_HOME=/data/soft/zookeeper-3.4.12</span><br><span class=\"line\">export PATH=.:$HADOOP_HOME/bin:$ZOOKEEPER_HOME/bin:$JAVA_HOME/bin:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\">#修改配置文件</span><br><span class=\"line\"># The number of milliseconds of each tick</span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\"># The number of ticks that the initial </span><br><span class=\"line\"># synchronization phase can take</span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\"># The number of ticks that can pass between </span><br><span class=\"line\"># sending a request and getting an acknowledgement</span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\"># the directory where the snapshot is stored.</span><br><span class=\"line\"># do not use /tmp for storage, /tmp here is just </span><br><span class=\"line\"># example sakes.</span><br><span class=\"line\">dataDir=/data/soft/zk/data</span><br><span class=\"line\">dataLogDir=/data/soft/zk/dataLog </span><br><span class=\"line\"># the port at which the clients will connect</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\"></span><br><span class=\"line\">server.1=localhost:2887:3887</span><br><span class=\"line\">server.2=localhost:2888:3888</span><br><span class=\"line\">server.3=localhost:2889:3889</span><br><span class=\"line\"># the maximum number of client connections.</span><br><span class=\"line\"># increase this if you need to handle more clients</span><br><span class=\"line\">#maxClientCnxns=60</span><br><span class=\"line\">#</span><br><span class=\"line\"># Be sure to read the maintenance section of the </span><br><span class=\"line\"># administrator guide before turning on autopurge.</span><br><span class=\"line\">#</span><br><span class=\"line\"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class=\"line\">#</span><br><span class=\"line\"># The number of snapshots to retain in dataDir</span><br><span class=\"line\">#autopurge.snapRetainCount=3</span><br><span class=\"line\"># Purge task interval in hours</span><br><span class=\"line\"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class=\"line\">#autopurge.purgeInterval=1</span><br></pre></td></tr></table></figure>\n\n<p>配置文件介绍</p>\n<p><code>server.A=B:C:D</code></p>\n<p>A表示是几号服务器 (myid文件要在data目录下创建并在文件中写入对应的A)</p>\n<p>B表示该服务器的IP地址</p>\n<p>C表示的是这个服务器与集群中leader服务器交换信息的端口</p>\n<p>D表示leader服务器如果挂了，那么follower服务器进行选举的端口</p>\n<p>选出一个新的 Leader，而这个端口就是用来执行选举时服务器相互通信的端口。<br>如果是伪集群的配置方式，由于 B 都是一样，所以不同的 Zookeeper 实例通信端口号不能一样，<br>所以要给它们分配不同的端口号。</p>\n<ul>\n<li><p>tickTime：zookeeper中使用的基本时间单位, 毫秒值。</p>\n</li>\n<li><p>initLimit：这个配置项是用来配置 Zookeeper 接受客户端（这里所说的客户端不是用户连接 Zookeeper 服务器的客户端，而是 Zookeeper 服务器集群中连接到 Leader 的 Follower 服务器）初始化连接时最长能忍受多少个 tickTime 时间间隔数。这里设置为5表名最长容忍时间为 5 * 2000 = 10 秒。</p>\n</li>\n<li><p>syncLimit：这个配置标识 Leader 与 Follower 之间发送消息，请求和应答时间长度，最长不能超过多少个 tickTime 的时间长度，总的时间长度就是 2 * 2000 = 4 秒。</p>\n</li>\n<li><p>dataDir 和 dataLogDir 看配置就知道干吗的了，不用解释。</p>\n</li>\n<li><p>clientPort：监听client连接的端口号，这里说的client就是连接到Zookeeper的代码程序。</p>\n</li>\n<li><p>server.{myid}={ip}:{leader服务器交换信息的端口}:{当leader服务器挂了后, 选举leader的端口}</p>\n</li>\n<li><p>maxClientCnxns：对于一个客户端的连接数限制，默认是60，这在大部分时候是足够了。但是在我们实际使用中发现，在测试环境经常超过这个数，经过调查发现有的团队将几十个应用全部部署到一台机器上，以方便测试，于是这个数字就超过了。</p>\n</li>\n</ul>"},{"title":"写写高并发框架Disruptor","date":"2017-11-19T08:38:23.000Z","_content":"\n记录下高并发框架Disruptor<!--more-->","source":"_posts/写写高并发框架Disruptor.md","raw":"---\ntitle: 写写高并发框架Disruptor\ndate: 2017-11-19 16:38:23\ntags: [Java]\ncategories: [Java]\n---\n\n记录下高并发框架Disruptor<!--more-->","slug":"写写高并发框架Disruptor","published":1,"updated":"2022-09-03T07:30:55.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz86h003ntwfa8qd2g3pj","content":"<p>记录下高并发框架Disruptor<a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<p>记录下高并发框架Disruptor</p>","more":"<p></p>"},{"title":"卤牛肉","date":"2018-02-27T14:34:07.000Z","_content":"\n记录 卤牛肉<!--more-->\n\n> 结合色魔张大妈的帖子 写下\n\n### 食材\n\n\n* 主料:\n\n  牛腱750g,葱4根,姜6片\n\n* 辅料\n\n  白蔻 3g、桂皮 2 片、香叶 5 片、\n\n  八角 5 个、白芷 2 片、干辣椒 10 个、\n\n  料酒 20g、老抽 1 勺半、盐 50g、味精、糖 2 勺\n\n### 步骤\n\n* 浸泡\n\n  将牛腱放入清水中浸泡1-2小时,将其血水浸出\n\n* 腌制\n\n  晾干牛腱,用葱4根,花椒5g,姜6片,盐50g,料酒20g腌制牛肉,抓匀后蒙上保鲜膜放入冰箱冷藏一夜\n\n* 牛肉去掉香料放入盘中备用\n\n* 沸水下牛肉焯水,边焯水边去浮沫,大火煮开后,继续煮5分钟至牛肉变色,(这里众说纷纭,有说冷水焯水的,又说沸水焯水的)\n\n* 锅中放入葱4根,姜5片,白寇3g,桂皮2片,香叶5片,八角5g,白芷2片,干辣椒10个,老抽一勺半,糖两勺\n\n* 大火煮开后转小火煮1个半小时,到点继续让牛肉在锅中浸泡,等汤凉后,捞出牛肉放凉,切片即可\n\n  ​\n\n#### PS:我是喜欢不加盐的卤法,然后做蘸水,白切\n\n","source":"_posts/卤牛肉.md","raw":"---\ntitle: 卤牛肉\ndate: 2018-02-27 22:34:07\ntags: [杂技,饕餮]\ncategories: [饕餮]\n---\n\n记录 卤牛肉<!--more-->\n\n> 结合色魔张大妈的帖子 写下\n\n### 食材\n\n\n* 主料:\n\n  牛腱750g,葱4根,姜6片\n\n* 辅料\n\n  白蔻 3g、桂皮 2 片、香叶 5 片、\n\n  八角 5 个、白芷 2 片、干辣椒 10 个、\n\n  料酒 20g、老抽 1 勺半、盐 50g、味精、糖 2 勺\n\n### 步骤\n\n* 浸泡\n\n  将牛腱放入清水中浸泡1-2小时,将其血水浸出\n\n* 腌制\n\n  晾干牛腱,用葱4根,花椒5g,姜6片,盐50g,料酒20g腌制牛肉,抓匀后蒙上保鲜膜放入冰箱冷藏一夜\n\n* 牛肉去掉香料放入盘中备用\n\n* 沸水下牛肉焯水,边焯水边去浮沫,大火煮开后,继续煮5分钟至牛肉变色,(这里众说纷纭,有说冷水焯水的,又说沸水焯水的)\n\n* 锅中放入葱4根,姜5片,白寇3g,桂皮2片,香叶5片,八角5g,白芷2片,干辣椒10个,老抽一勺半,糖两勺\n\n* 大火煮开后转小火煮1个半小时,到点继续让牛肉在锅中浸泡,等汤凉后,捞出牛肉放凉,切片即可\n\n  ​\n\n#### PS:我是喜欢不加盐的卤法,然后做蘸水,白切\n\n","slug":"卤牛肉","published":1,"updated":"2022-09-03T07:30:55.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz86m003ptwfasnbubdpq","content":"<p>记录 卤牛肉<a id=\"more\"></a></p>\n<blockquote>\n<p>结合色魔张大妈的帖子 写下</p>\n</blockquote>\n<h3 id=\"食材\"><a href=\"#食材\" class=\"headerlink\" title=\"食材\"></a>食材</h3><ul>\n<li><p>主料:</p>\n<p>牛腱750g,葱4根,姜6片</p>\n</li>\n<li><p>辅料</p>\n<p>白蔻 3g、桂皮 2 片、香叶 5 片、</p>\n<p>八角 5 个、白芷 2 片、干辣椒 10 个、</p>\n<p>料酒 20g、老抽 1 勺半、盐 50g、味精、糖 2 勺</p>\n</li>\n</ul>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li><p>浸泡</p>\n<p>将牛腱放入清水中浸泡1-2小时,将其血水浸出</p>\n</li>\n<li><p>腌制</p>\n<p>晾干牛腱,用葱4根,花椒5g,姜6片,盐50g,料酒20g腌制牛肉,抓匀后蒙上保鲜膜放入冰箱冷藏一夜</p>\n</li>\n<li><p>牛肉去掉香料放入盘中备用</p>\n</li>\n<li><p>沸水下牛肉焯水,边焯水边去浮沫,大火煮开后,继续煮5分钟至牛肉变色,(这里众说纷纭,有说冷水焯水的,又说沸水焯水的)</p>\n</li>\n<li><p>锅中放入葱4根,姜5片,白寇3g,桂皮2片,香叶5片,八角5g,白芷2片,干辣椒10个,老抽一勺半,糖两勺</p>\n</li>\n<li><p>大火煮开后转小火煮1个半小时,到点继续让牛肉在锅中浸泡,等汤凉后,捞出牛肉放凉,切片即可</p>\n<p>​</p>\n</li>\n</ul>\n<h4 id=\"PS-我是喜欢不加盐的卤法-然后做蘸水-白切\"><a href=\"#PS-我是喜欢不加盐的卤法-然后做蘸水-白切\" class=\"headerlink\" title=\"PS:我是喜欢不加盐的卤法,然后做蘸水,白切\"></a>PS:我是喜欢不加盐的卤法,然后做蘸水,白切</h4>","site":{"data":{}},"excerpt":"<p>记录 卤牛肉</p>","more":"<p></p>\n<blockquote>\n<p>结合色魔张大妈的帖子 写下</p>\n</blockquote>\n<h3 id=\"食材\"><a href=\"#食材\" class=\"headerlink\" title=\"食材\"></a>食材</h3><ul>\n<li><p>主料:</p>\n<p>牛腱750g,葱4根,姜6片</p>\n</li>\n<li><p>辅料</p>\n<p>白蔻 3g、桂皮 2 片、香叶 5 片、</p>\n<p>八角 5 个、白芷 2 片、干辣椒 10 个、</p>\n<p>料酒 20g、老抽 1 勺半、盐 50g、味精、糖 2 勺</p>\n</li>\n</ul>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li><p>浸泡</p>\n<p>将牛腱放入清水中浸泡1-2小时,将其血水浸出</p>\n</li>\n<li><p>腌制</p>\n<p>晾干牛腱,用葱4根,花椒5g,姜6片,盐50g,料酒20g腌制牛肉,抓匀后蒙上保鲜膜放入冰箱冷藏一夜</p>\n</li>\n<li><p>牛肉去掉香料放入盘中备用</p>\n</li>\n<li><p>沸水下牛肉焯水,边焯水边去浮沫,大火煮开后,继续煮5分钟至牛肉变色,(这里众说纷纭,有说冷水焯水的,又说沸水焯水的)</p>\n</li>\n<li><p>锅中放入葱4根,姜5片,白寇3g,桂皮2片,香叶5片,八角5g,白芷2片,干辣椒10个,老抽一勺半,糖两勺</p>\n</li>\n<li><p>大火煮开后转小火煮1个半小时,到点继续让牛肉在锅中浸泡,等汤凉后,捞出牛肉放凉,切片即可</p>\n<p>​</p>\n</li>\n</ul>\n<h4 id=\"PS-我是喜欢不加盐的卤法-然后做蘸水-白切\"><a href=\"#PS-我是喜欢不加盐的卤法-然后做蘸水-白切\" class=\"headerlink\" title=\"PS:我是喜欢不加盐的卤法,然后做蘸水,白切\"></a>PS:我是喜欢不加盐的卤法,然后做蘸水,白切</h4>"},{"title":"数据结构之复杂度分析(一)","date":"2018-10-05T04:35:28.000Z","_content":"\n数据结构之复杂度分析(一)<!--more-->\n\n### 什么是复杂度\n\n* 数据结构和算法解决的是“如何让计算机更快时间，更省空间的去解决问题”\n* 需从执行时间和占用空间两个维度来评估数据结构和算法的性能\n* 分别用时间复杂度和空间复杂度两个概念来描述性能问题，二者统称为复杂度\n* 复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系\n\n### 为什么要进行复杂度芬西\n\n* 和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作\n\n  、指导性强的特点\n\n* 掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本\n\n### 如何进行复杂度分析\n\n* 大O标记法\n\n  * 来源\n\n    算法的执行时间与每行代码的执行次数成正比，用T(n)=O(f(n))表示，其中T(n)表示算法执行总时间，f(n)表示每行代码执行总次数，而n往往表示数据的规模\n\n  * 特点\n\n    以时间复杂度为例，由于时间复杂度描述的是算法执行时间与数据规模的增长变化趋势，所以常量阶，低阶，以及系数实际上对这种增长趋势不产生决定性影响，所以在时间复杂度分析上忽略这些项。（增长趋势考虑为无限大趋向）\n\n* **复杂度分析法则**\n\n  * **单段代码看高频：比如循环**\n  * **多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度**\n  * **嵌套代码求乘积：比如递归、多重循环等**\n  * **多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取两者复杂度相加**\n\n* 常用的复杂度级别？\n\n  * 多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式\n\n    的比例增长包括：\n\n    * O(1) 常数阶\n    * O(logn) 对数阶\n    * O(n) 线性阶\n    * O(nlogn) 线性对数阶\n    * O(n^2) 平方阶\n    * O(n^3) 立方阶\n\n  * 非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增\n\n    这类算法性能极差，包括：\n\n    * O(2^n）指数阶\n    * O(n!) 阶乘阶\n\n    \n\n[]: \t\"王争数据结构之美评论总结\"\n\n\n\n","source":"_posts/数据结构之复杂度分析-一.md","raw":"---\ntitle: 数据结构之复杂度分析(一)\ndate: 2018-10-05 12:35:28\ntags: [数据结构]\ncategories: [数据结构]\n---\n\n数据结构之复杂度分析(一)<!--more-->\n\n### 什么是复杂度\n\n* 数据结构和算法解决的是“如何让计算机更快时间，更省空间的去解决问题”\n* 需从执行时间和占用空间两个维度来评估数据结构和算法的性能\n* 分别用时间复杂度和空间复杂度两个概念来描述性能问题，二者统称为复杂度\n* 复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系\n\n### 为什么要进行复杂度芬西\n\n* 和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作\n\n  、指导性强的特点\n\n* 掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本\n\n### 如何进行复杂度分析\n\n* 大O标记法\n\n  * 来源\n\n    算法的执行时间与每行代码的执行次数成正比，用T(n)=O(f(n))表示，其中T(n)表示算法执行总时间，f(n)表示每行代码执行总次数，而n往往表示数据的规模\n\n  * 特点\n\n    以时间复杂度为例，由于时间复杂度描述的是算法执行时间与数据规模的增长变化趋势，所以常量阶，低阶，以及系数实际上对这种增长趋势不产生决定性影响，所以在时间复杂度分析上忽略这些项。（增长趋势考虑为无限大趋向）\n\n* **复杂度分析法则**\n\n  * **单段代码看高频：比如循环**\n  * **多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度**\n  * **嵌套代码求乘积：比如递归、多重循环等**\n  * **多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取两者复杂度相加**\n\n* 常用的复杂度级别？\n\n  * 多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式\n\n    的比例增长包括：\n\n    * O(1) 常数阶\n    * O(logn) 对数阶\n    * O(n) 线性阶\n    * O(nlogn) 线性对数阶\n    * O(n^2) 平方阶\n    * O(n^3) 立方阶\n\n  * 非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增\n\n    这类算法性能极差，包括：\n\n    * O(2^n）指数阶\n    * O(n!) 阶乘阶\n\n    \n\n[]: \t\"王争数据结构之美评论总结\"\n\n\n\n","slug":"数据结构之复杂度分析-一","published":1,"updated":"2022-09-03T07:30:55.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz86p003ttwfaqzwb6wtg","content":"<p>数据结构之复杂度分析(一)<a id=\"more\"></a></p>\n<h3 id=\"什么是复杂度\"><a href=\"#什么是复杂度\" class=\"headerlink\" title=\"什么是复杂度\"></a>什么是复杂度</h3><ul>\n<li>数据结构和算法解决的是“如何让计算机更快时间，更省空间的去解决问题”</li>\n<li>需从执行时间和占用空间两个维度来评估数据结构和算法的性能</li>\n<li>分别用时间复杂度和空间复杂度两个概念来描述性能问题，二者统称为复杂度</li>\n<li>复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系</li>\n</ul>\n<h3 id=\"为什么要进行复杂度芬西\"><a href=\"#为什么要进行复杂度芬西\" class=\"headerlink\" title=\"为什么要进行复杂度芬西\"></a>为什么要进行复杂度芬西</h3><ul>\n<li><p>和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作</p>\n<p>、指导性强的特点</p>\n</li>\n<li><p>掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本</p>\n</li>\n</ul>\n<h3 id=\"如何进行复杂度分析\"><a href=\"#如何进行复杂度分析\" class=\"headerlink\" title=\"如何进行复杂度分析\"></a>如何进行复杂度分析</h3><ul>\n<li><p>大O标记法</p>\n<ul>\n<li><p>来源</p>\n<p>算法的执行时间与每行代码的执行次数成正比，用T(n)=O(f(n))表示，其中T(n)表示算法执行总时间，f(n)表示每行代码执行总次数，而n往往表示数据的规模</p>\n</li>\n<li><p>特点</p>\n<p>以时间复杂度为例，由于时间复杂度描述的是算法执行时间与数据规模的增长变化趋势，所以常量阶，低阶，以及系数实际上对这种增长趋势不产生决定性影响，所以在时间复杂度分析上忽略这些项。（增长趋势考虑为无限大趋向）</p>\n</li>\n</ul>\n</li>\n<li><p><strong>复杂度分析法则</strong></p>\n<ul>\n<li><strong>单段代码看高频：比如循环</strong></li>\n<li><strong>多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度</strong></li>\n<li><strong>嵌套代码求乘积：比如递归、多重循环等</strong></li>\n<li><strong>多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取两者复杂度相加</strong></li>\n</ul>\n</li>\n<li><p>常用的复杂度级别？</p>\n<ul>\n<li><p>多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式</p>\n<p>的比例增长包括：</p>\n<ul>\n<li>O(1) 常数阶</li>\n<li>O(logn) 对数阶</li>\n<li>O(n) 线性阶</li>\n<li>O(nlogn) 线性对数阶</li>\n<li>O(n^2) 平方阶</li>\n<li>O(n^3) 立方阶</li>\n</ul>\n</li>\n<li><p>非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增</p>\n<p>这类算法性能极差，包括：</p>\n<ul>\n<li>O(2^n）指数阶</li>\n<li>O(n!) 阶乘阶</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>[]:     “王争数据结构之美评论总结”</p>\n","site":{"data":{}},"excerpt":"<p>数据结构之复杂度分析(一)</p>","more":"<p></p>\n<h3 id=\"什么是复杂度\"><a href=\"#什么是复杂度\" class=\"headerlink\" title=\"什么是复杂度\"></a>什么是复杂度</h3><ul>\n<li>数据结构和算法解决的是“如何让计算机更快时间，更省空间的去解决问题”</li>\n<li>需从执行时间和占用空间两个维度来评估数据结构和算法的性能</li>\n<li>分别用时间复杂度和空间复杂度两个概念来描述性能问题，二者统称为复杂度</li>\n<li>复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系</li>\n</ul>\n<h3 id=\"为什么要进行复杂度芬西\"><a href=\"#为什么要进行复杂度芬西\" class=\"headerlink\" title=\"为什么要进行复杂度芬西\"></a>为什么要进行复杂度芬西</h3><ul>\n<li><p>和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作</p>\n<p>、指导性强的特点</p>\n</li>\n<li><p>掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本</p>\n</li>\n</ul>\n<h3 id=\"如何进行复杂度分析\"><a href=\"#如何进行复杂度分析\" class=\"headerlink\" title=\"如何进行复杂度分析\"></a>如何进行复杂度分析</h3><ul>\n<li><p>大O标记法</p>\n<ul>\n<li><p>来源</p>\n<p>算法的执行时间与每行代码的执行次数成正比，用T(n)=O(f(n))表示，其中T(n)表示算法执行总时间，f(n)表示每行代码执行总次数，而n往往表示数据的规模</p>\n</li>\n<li><p>特点</p>\n<p>以时间复杂度为例，由于时间复杂度描述的是算法执行时间与数据规模的增长变化趋势，所以常量阶，低阶，以及系数实际上对这种增长趋势不产生决定性影响，所以在时间复杂度分析上忽略这些项。（增长趋势考虑为无限大趋向）</p>\n</li>\n</ul>\n</li>\n<li><p><strong>复杂度分析法则</strong></p>\n<ul>\n<li><strong>单段代码看高频：比如循环</strong></li>\n<li><strong>多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度</strong></li>\n<li><strong>嵌套代码求乘积：比如递归、多重循环等</strong></li>\n<li><strong>多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取两者复杂度相加</strong></li>\n</ul>\n</li>\n<li><p>常用的复杂度级别？</p>\n<ul>\n<li><p>多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式</p>\n<p>的比例增长包括：</p>\n<ul>\n<li>O(1) 常数阶</li>\n<li>O(logn) 对数阶</li>\n<li>O(n) 线性阶</li>\n<li>O(nlogn) 线性对数阶</li>\n<li>O(n^2) 平方阶</li>\n<li>O(n^3) 立方阶</li>\n</ul>\n</li>\n<li><p>非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增</p>\n<p>这类算法性能极差，包括：</p>\n<ul>\n<li>O(2^n）指数阶</li>\n<li>O(n!) 阶乘阶</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>[]:     “王争数据结构之美评论总结”</p>"},{"title":"读书随想","date":"2018-10-16T04:11:06.000Z","_content":"\n瞎写点东西<!--more-->\n\n最近半年看了不少书，也看了不少的乱七八糟的东西，了解了不少思想， 有老庄的，有马基雅维利的，有杨朱的，有功利主义的，感慨很大。\n\n 庄子这本书很好，可是老庄的思想，我感觉与孔子是大大的不同，因为孔子是那种要把自己的才华奉献给君主的人，而道家的思想更侧重于无为，老庄的思想有点消极，老庄的嘴很毒，放到当代大概是另一个王尔德吧。更像是一种出世的思想。\n\n杨朱，杨朱这个人的思想是从一部国漫了解到的，不拔一毛，不利一毫，杨子注重 贵己 重生。贵己重生大概的意思为圣人要珍重自己的生命，全性保真，而不拔一毛，不利一毫大概是既不损己以利人，与损己利人的利他主义恰恰相反，亦不损人以利己，与损人利己的行为相反，而是取中间之道，这种思想是一种理想。所谓全性保真，不为物累，就是讲 人生在世不能为财物功名道德所束缚，应该守护本真。\n\n马基雅维利，这个人的著学，是一种入世的屠龙之术。权术。更像厚黑学。所谓的马基雅维利主义讲的是利用他人达成个人目标的行为倾向。中国古代的话更类似法家的思想。\n\n彼得辛格，功利主义现代版。任何有感觉能力的动物都对避免痛苦感兴趣，都对获得快感感兴趣。每个人都算一个，没有人多于一个。也就是说任何人的快乐都不比其他人的快乐更重要，人类应该为最大多数的人的最大幸福而奋斗，讽刺的是这和杨朱庄周的思想恰恰背道。与墨子不谋而合。这更像是实用主义的超集，如何使一件事情的最终结果效益最大化，最美好。","source":"_posts/功利主义随想.md","raw":"---\ntitle: 读书随想\ndate: 2018-10-16 12:11:06\ntags: [随想]\ncategories: [随想]\n---\n\n瞎写点东西<!--more-->\n\n最近半年看了不少书，也看了不少的乱七八糟的东西，了解了不少思想， 有老庄的，有马基雅维利的，有杨朱的，有功利主义的，感慨很大。\n\n 庄子这本书很好，可是老庄的思想，我感觉与孔子是大大的不同，因为孔子是那种要把自己的才华奉献给君主的人，而道家的思想更侧重于无为，老庄的思想有点消极，老庄的嘴很毒，放到当代大概是另一个王尔德吧。更像是一种出世的思想。\n\n杨朱，杨朱这个人的思想是从一部国漫了解到的，不拔一毛，不利一毫，杨子注重 贵己 重生。贵己重生大概的意思为圣人要珍重自己的生命，全性保真，而不拔一毛，不利一毫大概是既不损己以利人，与损己利人的利他主义恰恰相反，亦不损人以利己，与损人利己的行为相反，而是取中间之道，这种思想是一种理想。所谓全性保真，不为物累，就是讲 人生在世不能为财物功名道德所束缚，应该守护本真。\n\n马基雅维利，这个人的著学，是一种入世的屠龙之术。权术。更像厚黑学。所谓的马基雅维利主义讲的是利用他人达成个人目标的行为倾向。中国古代的话更类似法家的思想。\n\n彼得辛格，功利主义现代版。任何有感觉能力的动物都对避免痛苦感兴趣，都对获得快感感兴趣。每个人都算一个，没有人多于一个。也就是说任何人的快乐都不比其他人的快乐更重要，人类应该为最大多数的人的最大幸福而奋斗，讽刺的是这和杨朱庄周的思想恰恰背道。与墨子不谋而合。这更像是实用主义的超集，如何使一件事情的最终结果效益最大化，最美好。","slug":"功利主义随想","published":1,"updated":"2022-09-03T07:30:55.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz86t003wtwfajdwjhcsc","content":"<p>瞎写点东西<a id=\"more\"></a></p>\n<p>最近半年看了不少书，也看了不少的乱七八糟的东西，了解了不少思想， 有老庄的，有马基雅维利的，有杨朱的，有功利主义的，感慨很大。</p>\n<p> 庄子这本书很好，可是老庄的思想，我感觉与孔子是大大的不同，因为孔子是那种要把自己的才华奉献给君主的人，而道家的思想更侧重于无为，老庄的思想有点消极，老庄的嘴很毒，放到当代大概是另一个王尔德吧。更像是一种出世的思想。</p>\n<p>杨朱，杨朱这个人的思想是从一部国漫了解到的，不拔一毛，不利一毫，杨子注重 贵己 重生。贵己重生大概的意思为圣人要珍重自己的生命，全性保真，而不拔一毛，不利一毫大概是既不损己以利人，与损己利人的利他主义恰恰相反，亦不损人以利己，与损人利己的行为相反，而是取中间之道，这种思想是一种理想。所谓全性保真，不为物累，就是讲 人生在世不能为财物功名道德所束缚，应该守护本真。</p>\n<p>马基雅维利，这个人的著学，是一种入世的屠龙之术。权术。更像厚黑学。所谓的马基雅维利主义讲的是利用他人达成个人目标的行为倾向。中国古代的话更类似法家的思想。</p>\n<p>彼得辛格，功利主义现代版。任何有感觉能力的动物都对避免痛苦感兴趣，都对获得快感感兴趣。每个人都算一个，没有人多于一个。也就是说任何人的快乐都不比其他人的快乐更重要，人类应该为最大多数的人的最大幸福而奋斗，讽刺的是这和杨朱庄周的思想恰恰背道。与墨子不谋而合。这更像是实用主义的超集，如何使一件事情的最终结果效益最大化，最美好。</p>\n","site":{"data":{}},"excerpt":"<p>瞎写点东西</p>","more":"<p></p>\n<p>最近半年看了不少书，也看了不少的乱七八糟的东西，了解了不少思想， 有老庄的，有马基雅维利的，有杨朱的，有功利主义的，感慨很大。</p>\n<p> 庄子这本书很好，可是老庄的思想，我感觉与孔子是大大的不同，因为孔子是那种要把自己的才华奉献给君主的人，而道家的思想更侧重于无为，老庄的思想有点消极，老庄的嘴很毒，放到当代大概是另一个王尔德吧。更像是一种出世的思想。</p>\n<p>杨朱，杨朱这个人的思想是从一部国漫了解到的，不拔一毛，不利一毫，杨子注重 贵己 重生。贵己重生大概的意思为圣人要珍重自己的生命，全性保真，而不拔一毛，不利一毫大概是既不损己以利人，与损己利人的利他主义恰恰相反，亦不损人以利己，与损人利己的行为相反，而是取中间之道，这种思想是一种理想。所谓全性保真，不为物累，就是讲 人生在世不能为财物功名道德所束缚，应该守护本真。</p>\n<p>马基雅维利，这个人的著学，是一种入世的屠龙之术。权术。更像厚黑学。所谓的马基雅维利主义讲的是利用他人达成个人目标的行为倾向。中国古代的话更类似法家的思想。</p>\n<p>彼得辛格，功利主义现代版。任何有感觉能力的动物都对避免痛苦感兴趣，都对获得快感感兴趣。每个人都算一个，没有人多于一个。也就是说任何人的快乐都不比其他人的快乐更重要，人类应该为最大多数的人的最大幸福而奋斗，讽刺的是这和杨朱庄周的思想恰恰背道。与墨子不谋而合。这更像是实用主义的超集，如何使一件事情的最终结果效益最大化，最美好。</p>"},{"title":"推论","date":"2018-12-13T06:54:26.000Z","_content":"\n瞎写<!--more-->\n\n- 信息不对称普遍存在\n  - 物质的传播速度无法超过光速信息不能脱离物质速度，故信息的传播不能超过光速\n  - 所以信息的传播会有延时，导致信息传播的不对称\n  - 可以降低延时，但是由于终端对信息的处理能力普遍存在差异，亦会导致信息不对称，前门楼子，大马猴子\n- 别人说你做过，你就是做过。\n- 接上论，发现不可避免，但是可以推迟。\n\n\n\n**所以我们要堂堂正正的光明正大的做人**","source":"_posts/推论.md","raw":"---\ntitle: 推论\ndate: 2018-12-13 14:54:26\ntags: [随想]\ncategories: [随想]\n---\n\n瞎写<!--more-->\n\n- 信息不对称普遍存在\n  - 物质的传播速度无法超过光速信息不能脱离物质速度，故信息的传播不能超过光速\n  - 所以信息的传播会有延时，导致信息传播的不对称\n  - 可以降低延时，但是由于终端对信息的处理能力普遍存在差异，亦会导致信息不对称，前门楼子，大马猴子\n- 别人说你做过，你就是做过。\n- 接上论，发现不可避免，但是可以推迟。\n\n\n\n**所以我们要堂堂正正的光明正大的做人**","slug":"推论","published":1,"updated":"2022-09-03T07:30:55.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz86v0040twfag1d9pt2m","content":"<p>瞎写<a id=\"more\"></a></p>\n<ul>\n<li>信息不对称普遍存在<ul>\n<li>物质的传播速度无法超过光速信息不能脱离物质速度，故信息的传播不能超过光速</li>\n<li>所以信息的传播会有延时，导致信息传播的不对称</li>\n<li>可以降低延时，但是由于终端对信息的处理能力普遍存在差异，亦会导致信息不对称，前门楼子，大马猴子</li>\n</ul>\n</li>\n<li>别人说你做过，你就是做过。</li>\n<li>接上论，发现不可避免，但是可以推迟。</li>\n</ul>\n<p><strong>所以我们要堂堂正正的光明正大的做人</strong></p>\n","site":{"data":{}},"excerpt":"<p>瞎写</p>","more":"<p></p>\n<ul>\n<li>信息不对称普遍存在<ul>\n<li>物质的传播速度无法超过光速信息不能脱离物质速度，故信息的传播不能超过光速</li>\n<li>所以信息的传播会有延时，导致信息传播的不对称</li>\n<li>可以降低延时，但是由于终端对信息的处理能力普遍存在差异，亦会导致信息不对称，前门楼子，大马猴子</li>\n</ul>\n</li>\n<li>别人说你做过，你就是做过。</li>\n<li>接上论，发现不可避免，但是可以推迟。</li>\n</ul>\n<p><strong>所以我们要堂堂正正的光明正大的做人</strong></p>"},{"title":"数据结构之复杂度分析(三)","date":"2018-10-05T07:11:18.000Z","_content":"\n 数据结构(三)之为什么很多编程语言中数组都从0开始编号<!--more-->\n\n\n\n### 为什么很多编程语言中数组都从0开始编号\n\n* 数组如何实现随机访问\n\n  * 数组是一种线性数据结构，用连续的存储空间存储相同类型数据\n\n    * **线性表：数组、链表、队列、栈 **\n    * **非线性表：树、图**\n\n  * 连续的内存空间、相同的数据，所以数组可以随机访问，但对数组进行删除插入，为了保证数组的连续性，就要做大量的数据搬移工作\n\n    * 数组如何实现下标随机访问，引入数组再内存中的分配图，得出寻址公式\n\n    * 纠正数组和链表的错误认识:数组的查找操作时间复杂度并不是O(1).即便是排好的数组，用二分查找，时间复杂度也是O(logn)\n\n      正确的表述：数组支持随机访问，根据下标随机访问的时间复杂度为O(1)\n\n  ​        \n\n* 低效的插入和删除\n\n  * 插入：从最好O(1) 最坏O(n) 平均O(n)\n\n  * 插入：数组若无序，插入心的元素时，可以将第K个位置元素移动到数组末尾，把新的元素插入到第k个位置元素移动到数组末尾，把新的元素，插入到第K个位置，此处复杂度为O(1).\n\n    TODO:举例说明\n\n  * 删除：从最好O(1)最坏O(n)平均O(n)\n\n  * 多次删除集中在一起，提高删除效率\n\n    记录下已经被删除的数据，每次的删除操作并不是搬移数据，只是记录数据已经被删除，当数组没有 更多的存储空间时，再出发一次真正的删除操作。即JVM标记清除垃圾回收算法。\n\n* 警惕数组的访问越界问题\n\n* 用C语言循环越界访问的例子说明访问越界的bug，此例在《C陷阱与缺陷》出现过：\n\n  如果用来编译这段程序的编译器按照内存地址递减的方式给变量分配内存，那么内存中的i将会被置为0，则为死循环永远出不去\n\n* 容器能否完全替代数组\n\n  相比于数字，java中的ArrayList封装了数组的很多操作，并支持动态扩容，一旦超过存储容量，扩容时比较消耗内存，因为涉及到内存申请和数据搬移，\n\n  数组适合的场景：\n\n  * Java ArrayList 的使用涉及装箱拆箱，有一定的性能损耗，如果特别关注性能，可以考虑数组\n  * 若数据大小事先已知，并且设计的数据操作非常简单，可以使用数组\n  * 表示多维数组适，数组往往更加直观，\n  * 业务开发容器即可，底层开发，如网络框架，性能优化，选择数组。\n\n* **为什么数组要从0开始编号，而不是从1开始呢**\n\n  * 从偏移角度理解a[0]中0为偏移量，若从1开始计数，那么会多处K-1，\n\n    增加cpu负担，为什么循环要写成 for(int i=0；i<3; i++)而不是for(int i=0;i<=2;i++).第一个直接就可以算出3-0=3，有三个数据，而后者2-0+1个数据，多处1个加法运算。这样的话多了一次运算指令。\n\n  * 一些历史原因\n\n    []: \t\"王争数据结构之美评论总结\"\n\n    \n","source":"_posts/数据结构之复杂度分析-三.md","raw":"---\ntitle: 数据结构之复杂度分析(三)\ndate: 2018-10-05 15:11:18\ntags: [数据结构]\ncategories: [数据结构]\n---\n\n 数据结构(三)之为什么很多编程语言中数组都从0开始编号<!--more-->\n\n\n\n### 为什么很多编程语言中数组都从0开始编号\n\n* 数组如何实现随机访问\n\n  * 数组是一种线性数据结构，用连续的存储空间存储相同类型数据\n\n    * **线性表：数组、链表、队列、栈 **\n    * **非线性表：树、图**\n\n  * 连续的内存空间、相同的数据，所以数组可以随机访问，但对数组进行删除插入，为了保证数组的连续性，就要做大量的数据搬移工作\n\n    * 数组如何实现下标随机访问，引入数组再内存中的分配图，得出寻址公式\n\n    * 纠正数组和链表的错误认识:数组的查找操作时间复杂度并不是O(1).即便是排好的数组，用二分查找，时间复杂度也是O(logn)\n\n      正确的表述：数组支持随机访问，根据下标随机访问的时间复杂度为O(1)\n\n  ​        \n\n* 低效的插入和删除\n\n  * 插入：从最好O(1) 最坏O(n) 平均O(n)\n\n  * 插入：数组若无序，插入心的元素时，可以将第K个位置元素移动到数组末尾，把新的元素插入到第k个位置元素移动到数组末尾，把新的元素，插入到第K个位置，此处复杂度为O(1).\n\n    TODO:举例说明\n\n  * 删除：从最好O(1)最坏O(n)平均O(n)\n\n  * 多次删除集中在一起，提高删除效率\n\n    记录下已经被删除的数据，每次的删除操作并不是搬移数据，只是记录数据已经被删除，当数组没有 更多的存储空间时，再出发一次真正的删除操作。即JVM标记清除垃圾回收算法。\n\n* 警惕数组的访问越界问题\n\n* 用C语言循环越界访问的例子说明访问越界的bug，此例在《C陷阱与缺陷》出现过：\n\n  如果用来编译这段程序的编译器按照内存地址递减的方式给变量分配内存，那么内存中的i将会被置为0，则为死循环永远出不去\n\n* 容器能否完全替代数组\n\n  相比于数字，java中的ArrayList封装了数组的很多操作，并支持动态扩容，一旦超过存储容量，扩容时比较消耗内存，因为涉及到内存申请和数据搬移，\n\n  数组适合的场景：\n\n  * Java ArrayList 的使用涉及装箱拆箱，有一定的性能损耗，如果特别关注性能，可以考虑数组\n  * 若数据大小事先已知，并且设计的数据操作非常简单，可以使用数组\n  * 表示多维数组适，数组往往更加直观，\n  * 业务开发容器即可，底层开发，如网络框架，性能优化，选择数组。\n\n* **为什么数组要从0开始编号，而不是从1开始呢**\n\n  * 从偏移角度理解a[0]中0为偏移量，若从1开始计数，那么会多处K-1，\n\n    增加cpu负担，为什么循环要写成 for(int i=0；i<3; i++)而不是for(int i=0;i<=2;i++).第一个直接就可以算出3-0=3，有三个数据，而后者2-0+1个数据，多处1个加法运算。这样的话多了一次运算指令。\n\n  * 一些历史原因\n\n    []: \t\"王争数据结构之美评论总结\"\n\n    \n","slug":"数据结构之复杂度分析-三","published":1,"updated":"2022-09-03T07:30:55.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz86x0043twfaalvr5fam","content":"<p> 数据结构(三)之为什么很多编程语言中数组都从0开始编号<a id=\"more\"></a></p>\n<h3 id=\"为什么很多编程语言中数组都从0开始编号\"><a href=\"#为什么很多编程语言中数组都从0开始编号\" class=\"headerlink\" title=\"为什么很多编程语言中数组都从0开始编号\"></a>为什么很多编程语言中数组都从0开始编号</h3><ul>\n<li><p>数组如何实现随机访问</p>\n<ul>\n<li><p>数组是一种线性数据结构，用连续的存储空间存储相同类型数据</p>\n<ul>\n<li>*<em>线性表：数组、链表、队列、栈 *</em></li>\n<li><strong>非线性表：树、图</strong></li>\n</ul>\n</li>\n<li><p>连续的内存空间、相同的数据，所以数组可以随机访问，但对数组进行删除插入，为了保证数组的连续性，就要做大量的数据搬移工作</p>\n<ul>\n<li><p>数组如何实现下标随机访问，引入数组再内存中的分配图，得出寻址公式</p>\n</li>\n<li><p>纠正数组和链表的错误认识:数组的查找操作时间复杂度并不是O(1).即便是排好的数组，用二分查找，时间复杂度也是O(logn)</p>\n<p>正确的表述：数组支持随机访问，根据下标随机访问的时间复杂度为O(1)</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>​        </p>\n</li>\n<li><p>低效的插入和删除</p>\n<ul>\n<li><p>插入：从最好O(1) 最坏O(n) 平均O(n)</p>\n</li>\n<li><p>插入：数组若无序，插入心的元素时，可以将第K个位置元素移动到数组末尾，把新的元素插入到第k个位置元素移动到数组末尾，把新的元素，插入到第K个位置，此处复杂度为O(1).</p>\n<p>TODO:举例说明</p>\n</li>\n<li><p>删除：从最好O(1)最坏O(n)平均O(n)</p>\n</li>\n<li><p>多次删除集中在一起，提高删除效率</p>\n<p>记录下已经被删除的数据，每次的删除操作并不是搬移数据，只是记录数据已经被删除，当数组没有 更多的存储空间时，再出发一次真正的删除操作。即JVM标记清除垃圾回收算法。</p>\n</li>\n</ul>\n</li>\n<li><p>警惕数组的访问越界问题</p>\n</li>\n<li><p>用C语言循环越界访问的例子说明访问越界的bug，此例在《C陷阱与缺陷》出现过：</p>\n<p>如果用来编译这段程序的编译器按照内存地址递减的方式给变量分配内存，那么内存中的i将会被置为0，则为死循环永远出不去</p>\n</li>\n<li><p>容器能否完全替代数组</p>\n<p>相比于数字，java中的ArrayList封装了数组的很多操作，并支持动态扩容，一旦超过存储容量，扩容时比较消耗内存，因为涉及到内存申请和数据搬移，</p>\n<p>数组适合的场景：</p>\n<ul>\n<li>Java ArrayList 的使用涉及装箱拆箱，有一定的性能损耗，如果特别关注性能，可以考虑数组</li>\n<li>若数据大小事先已知，并且设计的数据操作非常简单，可以使用数组</li>\n<li>表示多维数组适，数组往往更加直观，</li>\n<li>业务开发容器即可，底层开发，如网络框架，性能优化，选择数组。</li>\n</ul>\n</li>\n<li><p><strong>为什么数组要从0开始编号，而不是从1开始呢</strong></p>\n<ul>\n<li><p>从偏移角度理解a[0]中0为偏移量，若从1开始计数，那么会多处K-1，</p>\n<p>增加cpu负担，为什么循环要写成 for(int i=0；i&lt;3; i++)而不是for(int i=0;i&lt;=2;i++).第一个直接就可以算出3-0=3，有三个数据，而后者2-0+1个数据，多处1个加法运算。这样的话多了一次运算指令。</p>\n</li>\n<li><p>一些历史原因</p>\n<p>[]:     “王争数据结构之美评论总结”</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p> 数据结构(三)之为什么很多编程语言中数组都从0开始编号</p>","more":"<p></p>\n<h3 id=\"为什么很多编程语言中数组都从0开始编号\"><a href=\"#为什么很多编程语言中数组都从0开始编号\" class=\"headerlink\" title=\"为什么很多编程语言中数组都从0开始编号\"></a>为什么很多编程语言中数组都从0开始编号</h3><ul>\n<li><p>数组如何实现随机访问</p>\n<ul>\n<li><p>数组是一种线性数据结构，用连续的存储空间存储相同类型数据</p>\n<ul>\n<li>*<em>线性表：数组、链表、队列、栈 *</em></li>\n<li><strong>非线性表：树、图</strong></li>\n</ul>\n</li>\n<li><p>连续的内存空间、相同的数据，所以数组可以随机访问，但对数组进行删除插入，为了保证数组的连续性，就要做大量的数据搬移工作</p>\n<ul>\n<li><p>数组如何实现下标随机访问，引入数组再内存中的分配图，得出寻址公式</p>\n</li>\n<li><p>纠正数组和链表的错误认识:数组的查找操作时间复杂度并不是O(1).即便是排好的数组，用二分查找，时间复杂度也是O(logn)</p>\n<p>正确的表述：数组支持随机访问，根据下标随机访问的时间复杂度为O(1)</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>​        </p>\n</li>\n<li><p>低效的插入和删除</p>\n<ul>\n<li><p>插入：从最好O(1) 最坏O(n) 平均O(n)</p>\n</li>\n<li><p>插入：数组若无序，插入心的元素时，可以将第K个位置元素移动到数组末尾，把新的元素插入到第k个位置元素移动到数组末尾，把新的元素，插入到第K个位置，此处复杂度为O(1).</p>\n<p>TODO:举例说明</p>\n</li>\n<li><p>删除：从最好O(1)最坏O(n)平均O(n)</p>\n</li>\n<li><p>多次删除集中在一起，提高删除效率</p>\n<p>记录下已经被删除的数据，每次的删除操作并不是搬移数据，只是记录数据已经被删除，当数组没有 更多的存储空间时，再出发一次真正的删除操作。即JVM标记清除垃圾回收算法。</p>\n</li>\n</ul>\n</li>\n<li><p>警惕数组的访问越界问题</p>\n</li>\n<li><p>用C语言循环越界访问的例子说明访问越界的bug，此例在《C陷阱与缺陷》出现过：</p>\n<p>如果用来编译这段程序的编译器按照内存地址递减的方式给变量分配内存，那么内存中的i将会被置为0，则为死循环永远出不去</p>\n</li>\n<li><p>容器能否完全替代数组</p>\n<p>相比于数字，java中的ArrayList封装了数组的很多操作，并支持动态扩容，一旦超过存储容量，扩容时比较消耗内存，因为涉及到内存申请和数据搬移，</p>\n<p>数组适合的场景：</p>\n<ul>\n<li>Java ArrayList 的使用涉及装箱拆箱，有一定的性能损耗，如果特别关注性能，可以考虑数组</li>\n<li>若数据大小事先已知，并且设计的数据操作非常简单，可以使用数组</li>\n<li>表示多维数组适，数组往往更加直观，</li>\n<li>业务开发容器即可，底层开发，如网络框架，性能优化，选择数组。</li>\n</ul>\n</li>\n<li><p><strong>为什么数组要从0开始编号，而不是从1开始呢</strong></p>\n<ul>\n<li><p>从偏移角度理解a[0]中0为偏移量，若从1开始计数，那么会多处K-1，</p>\n<p>增加cpu负担，为什么循环要写成 for(int i=0；i&lt;3; i++)而不是for(int i=0;i&lt;=2;i++).第一个直接就可以算出3-0=3，有三个数据，而后者2-0+1个数据，多处1个加法运算。这样的话多了一次运算指令。</p>\n</li>\n<li><p>一些历史原因</p>\n<p>[]:     “王争数据结构之美评论总结”</p>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"数据结构之复杂度分析(二)","date":"2018-10-05T06:14:40.000Z","_content":"\n数据结构之复杂度分析(二)<!--more-->\n\n### 复杂度分析的四个概念\n\n* 最好情况时间复杂度：\n\n  代码在最理想情况下执行的时间复杂度\n\n* 最坏情况时间复杂度：\n\n  代码在最坏情况下执行的时间复杂度\n\n* 平均时间复杂度：\n\n  用代码在所有情况下执行的次数和加权平均值表示。\n\n* 均摊时间复杂度：\n\n  在代码执行的所有复杂情况中绝大部分是低级别的复杂度，\n\n  个别情况是高级别复杂度且发生具有时序关系时，可以将个别高级别复杂度俊涛到低级别复杂度上。基本上均摊结果就等于低级别复杂度。\n\n### 为什么要引入这四个概念\n\n* 同一段代码在不同情况下时间复杂度会出现量级差异\n* 代码复杂度在不同情况下出现量级差别时才需要区别这四种复杂度，大多数情况下，是不需要区别分析它们的。\n\n### 如何分析平均、均摊时间复杂度\n\n* 平均时间复杂度\n\n  代码在不同情况下复杂度出现量级差别，则用代码所有可能情况下执行次数甲醛平均值表示\n\n* 均摊时间复杂度：\n\n  两个条件满足时使用：\n\n  * 代码在绝大多数情况下是低级别复杂度，只有极少数情况是高级别复杂度\n  * 低级别和高级别复杂度出现具有时序规律，均摊结果一般都地狱低级别复杂度。\n\n\n[]: \t\"王争数据结构之美评论总结\"\n\n","source":"_posts/数据结构之复杂度分析-二.md","raw":"---\ntitle: 数据结构之复杂度分析(二)\ndate: 2018-10-05 14:14:40\ntags: [数据结构]\ncategories: [数据结构]\n---\n\n数据结构之复杂度分析(二)<!--more-->\n\n### 复杂度分析的四个概念\n\n* 最好情况时间复杂度：\n\n  代码在最理想情况下执行的时间复杂度\n\n* 最坏情况时间复杂度：\n\n  代码在最坏情况下执行的时间复杂度\n\n* 平均时间复杂度：\n\n  用代码在所有情况下执行的次数和加权平均值表示。\n\n* 均摊时间复杂度：\n\n  在代码执行的所有复杂情况中绝大部分是低级别的复杂度，\n\n  个别情况是高级别复杂度且发生具有时序关系时，可以将个别高级别复杂度俊涛到低级别复杂度上。基本上均摊结果就等于低级别复杂度。\n\n### 为什么要引入这四个概念\n\n* 同一段代码在不同情况下时间复杂度会出现量级差异\n* 代码复杂度在不同情况下出现量级差别时才需要区别这四种复杂度，大多数情况下，是不需要区别分析它们的。\n\n### 如何分析平均、均摊时间复杂度\n\n* 平均时间复杂度\n\n  代码在不同情况下复杂度出现量级差别，则用代码所有可能情况下执行次数甲醛平均值表示\n\n* 均摊时间复杂度：\n\n  两个条件满足时使用：\n\n  * 代码在绝大多数情况下是低级别复杂度，只有极少数情况是高级别复杂度\n  * 低级别和高级别复杂度出现具有时序规律，均摊结果一般都地狱低级别复杂度。\n\n\n[]: \t\"王争数据结构之美评论总结\"\n\n","slug":"数据结构之复杂度分析-二","published":1,"updated":"2022-09-03T07:30:55.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz8710046twfawu8e5clp","content":"<p>数据结构之复杂度分析(二)<a id=\"more\"></a></p>\n<h3 id=\"复杂度分析的四个概念\"><a href=\"#复杂度分析的四个概念\" class=\"headerlink\" title=\"复杂度分析的四个概念\"></a>复杂度分析的四个概念</h3><ul>\n<li><p>最好情况时间复杂度：</p>\n<p>代码在最理想情况下执行的时间复杂度</p>\n</li>\n<li><p>最坏情况时间复杂度：</p>\n<p>代码在最坏情况下执行的时间复杂度</p>\n</li>\n<li><p>平均时间复杂度：</p>\n<p>用代码在所有情况下执行的次数和加权平均值表示。</p>\n</li>\n<li><p>均摊时间复杂度：</p>\n<p>在代码执行的所有复杂情况中绝大部分是低级别的复杂度，</p>\n<p>个别情况是高级别复杂度且发生具有时序关系时，可以将个别高级别复杂度俊涛到低级别复杂度上。基本上均摊结果就等于低级别复杂度。</p>\n</li>\n</ul>\n<h3 id=\"为什么要引入这四个概念\"><a href=\"#为什么要引入这四个概念\" class=\"headerlink\" title=\"为什么要引入这四个概念\"></a>为什么要引入这四个概念</h3><ul>\n<li>同一段代码在不同情况下时间复杂度会出现量级差异</li>\n<li>代码复杂度在不同情况下出现量级差别时才需要区别这四种复杂度，大多数情况下，是不需要区别分析它们的。</li>\n</ul>\n<h3 id=\"如何分析平均、均摊时间复杂度\"><a href=\"#如何分析平均、均摊时间复杂度\" class=\"headerlink\" title=\"如何分析平均、均摊时间复杂度\"></a>如何分析平均、均摊时间复杂度</h3><ul>\n<li><p>平均时间复杂度</p>\n<p>代码在不同情况下复杂度出现量级差别，则用代码所有可能情况下执行次数甲醛平均值表示</p>\n</li>\n<li><p>均摊时间复杂度：</p>\n<p>两个条件满足时使用：</p>\n<ul>\n<li>代码在绝大多数情况下是低级别复杂度，只有极少数情况是高级别复杂度</li>\n<li>低级别和高级别复杂度出现具有时序规律，均摊结果一般都地狱低级别复杂度。</li>\n</ul>\n</li>\n</ul>\n<p>[]:     “王争数据结构之美评论总结”</p>\n","site":{"data":{}},"excerpt":"<p>数据结构之复杂度分析(二)</p>","more":"<p></p>\n<h3 id=\"复杂度分析的四个概念\"><a href=\"#复杂度分析的四个概念\" class=\"headerlink\" title=\"复杂度分析的四个概念\"></a>复杂度分析的四个概念</h3><ul>\n<li><p>最好情况时间复杂度：</p>\n<p>代码在最理想情况下执行的时间复杂度</p>\n</li>\n<li><p>最坏情况时间复杂度：</p>\n<p>代码在最坏情况下执行的时间复杂度</p>\n</li>\n<li><p>平均时间复杂度：</p>\n<p>用代码在所有情况下执行的次数和加权平均值表示。</p>\n</li>\n<li><p>均摊时间复杂度：</p>\n<p>在代码执行的所有复杂情况中绝大部分是低级别的复杂度，</p>\n<p>个别情况是高级别复杂度且发生具有时序关系时，可以将个别高级别复杂度俊涛到低级别复杂度上。基本上均摊结果就等于低级别复杂度。</p>\n</li>\n</ul>\n<h3 id=\"为什么要引入这四个概念\"><a href=\"#为什么要引入这四个概念\" class=\"headerlink\" title=\"为什么要引入这四个概念\"></a>为什么要引入这四个概念</h3><ul>\n<li>同一段代码在不同情况下时间复杂度会出现量级差异</li>\n<li>代码复杂度在不同情况下出现量级差别时才需要区别这四种复杂度，大多数情况下，是不需要区别分析它们的。</li>\n</ul>\n<h3 id=\"如何分析平均、均摊时间复杂度\"><a href=\"#如何分析平均、均摊时间复杂度\" class=\"headerlink\" title=\"如何分析平均、均摊时间复杂度\"></a>如何分析平均、均摊时间复杂度</h3><ul>\n<li><p>平均时间复杂度</p>\n<p>代码在不同情况下复杂度出现量级差别，则用代码所有可能情况下执行次数甲醛平均值表示</p>\n</li>\n<li><p>均摊时间复杂度：</p>\n<p>两个条件满足时使用：</p>\n<ul>\n<li>代码在绝大多数情况下是低级别复杂度，只有极少数情况是高级别复杂度</li>\n<li>低级别和高级别复杂度出现具有时序规律，均摊结果一般都地狱低级别复杂度。</li>\n</ul>\n</li>\n</ul>\n<p>[]:     “王争数据结构之美评论总结”</p>"},{"title":"老卤秘方","date":"2017-12-03T03:40:29.000Z","_content":"\n记录老卤方子<!--more-->\n\n> 网上摘录的老卤方子\n\n* 底汤材料\n\n  * 火爪两只  \n  * 筒子骨一副\n  * 干贝若干\n  * 黄酒少许\n  * 荥经砂锅(不一定用这个)\n\n* 汤底步骤\n\n  * 火爪 筒子骨干贝洗净,放入冷水锅,加少许黄酒,此处作用为焯水\n\n  * 至滚沸,保持滚沸五分钟,停火后反复冲洗干净,去除血沫,碎骨,杂质\n\n  * 将冲洗好的材料放入砂锅,注入清水,看锅大小放量\n\n  * 大火烧开,滚沸5分钟,转小火,再炖25分钟,共计半小时\n\n  * 暂时停火,将筒子骨捞出,剔去骨头上碎肉,只保留骨头,稍后骨头放入锅中继续炖\n\n  * 滤网去除表面浮油杂质,至此白汤完成,若需要可大炖,筒子骨可换为鸡骨?\n\n    ​\n\n* 卤方\n\n  * 盐\n  * 桂皮5克\n  * 姜黄5克\n  * 玉竹1克\n  * 山楂3克\n  * 红曲米5克\n  * 桂枝3克\n  * 桂丁1克\n  * 母丁香2粒\n  * 小茴香12克\n  * 八角10克\n  * 甘草片5克\n  * 草果5克\n  * 花椒15克 最好大红袍 有花椒叶最美\n  * 荜拨1粒\n  * 辛夷3克(这个我自己加的)\n  * 白芷3克(我自己加的)\n  * 香叶2克\n  * 栀子3粒\n  * 茯苓3克\n  * 五加皮2克\n  * 草寇2粒\n  * 香砂仁2克\n  * 肉蔻一粒 小点的最好\n  * 枳实1片\n  * 黄芪2克\n  * 山柰3克\n  * 陈皮3克\n  * 砂仁2克\n  * 干姜15克\n  * 良姜5克\n  * 罂粟壳1粒\n  * 大无纺布卤包一个\n  * 冰糖若干,整块最妙\n  * 带须老葱一颗\n  * 带皮老姜\n  * 若干蒜\n  * 斩大块的肥五花肉\n  * 黄酒\n\n* 二汤步骤\n\n  * 香料配好放入卤袋 ,用热水浸泡少许 去除苦味灰尘,最好水泡加白酒泡,敲碎更入味\n  * 肥五花加黄酒焯水\n  * 葱切段,姜切大片,蒜切片放入初汤\n  * 起油锅炒糖色 油不可多,冰糖敲碎\n  * 焯水完毕的五花肉洗净,放入砂锅,大火煮沸转小火,**卤制过程中,不加锅盖**\n  * 熬糖色中注意不要放入过多油不要使其颜色过甚,如果油糖分层严重,那么加适量水\n  * 糖色熬好后,分次加入卤锅,避免卤汁颜色过重\n  * 加入黄酒\n  * 滚沸10分钟后加盐调味 转小火炖两小时,如若需要可加长时间,停火\n  * 将五花捞出,骨头火爪捞出\n  * 将锅内残渣(葱姜蒜)捞出,至此一锅卤汤完成\n\n* 注意事项\n\n  * 有异味的卤物请分汤卤制\n  * 第一次配好的料包,第二次卤制时候可以抛弃不用\n  * 每次卤制完毕,须进行过滤杂质,只保留表面浮油\n  * 养卤的方式,最好每天一滚,冬季室温10度以内的话,可以2-3天一滚沸,\n  * 卤水亦可冷冻,不过最好不要这么干 伤卤\n  * 不同卤物要注意分卤\n    * 需要分汤的:内脏下水类,鸭子,蛋类,豆制品\n    * 不需要分汤的:猪肉,牛肉,鸡,鸽子\n  * 调味主要靠盐,看个人口味\n  * 味精和酱油,如若糖色未炒好,可加生抽 **千万不要加老抽,除非你做酱卤** \n  * 卤物在炖制完成后会进入冷卤浸泡阶段,记得把香料拿出再浸泡,否则会导致味道过重\n  * 老卤汤解冻,应在锅内加入少许热水,解冻须均匀,\n\n**To Be Continue**\n","source":"_posts/老卤秘方.md","raw":"---\ntitle: 老卤秘方\ndate: 2017-12-03 11:40:29\ntags: [杂技,饕餮]\ncategories: [饕餮]\n\n---\n\n记录老卤方子<!--more-->\n\n> 网上摘录的老卤方子\n\n* 底汤材料\n\n  * 火爪两只  \n  * 筒子骨一副\n  * 干贝若干\n  * 黄酒少许\n  * 荥经砂锅(不一定用这个)\n\n* 汤底步骤\n\n  * 火爪 筒子骨干贝洗净,放入冷水锅,加少许黄酒,此处作用为焯水\n\n  * 至滚沸,保持滚沸五分钟,停火后反复冲洗干净,去除血沫,碎骨,杂质\n\n  * 将冲洗好的材料放入砂锅,注入清水,看锅大小放量\n\n  * 大火烧开,滚沸5分钟,转小火,再炖25分钟,共计半小时\n\n  * 暂时停火,将筒子骨捞出,剔去骨头上碎肉,只保留骨头,稍后骨头放入锅中继续炖\n\n  * 滤网去除表面浮油杂质,至此白汤完成,若需要可大炖,筒子骨可换为鸡骨?\n\n    ​\n\n* 卤方\n\n  * 盐\n  * 桂皮5克\n  * 姜黄5克\n  * 玉竹1克\n  * 山楂3克\n  * 红曲米5克\n  * 桂枝3克\n  * 桂丁1克\n  * 母丁香2粒\n  * 小茴香12克\n  * 八角10克\n  * 甘草片5克\n  * 草果5克\n  * 花椒15克 最好大红袍 有花椒叶最美\n  * 荜拨1粒\n  * 辛夷3克(这个我自己加的)\n  * 白芷3克(我自己加的)\n  * 香叶2克\n  * 栀子3粒\n  * 茯苓3克\n  * 五加皮2克\n  * 草寇2粒\n  * 香砂仁2克\n  * 肉蔻一粒 小点的最好\n  * 枳实1片\n  * 黄芪2克\n  * 山柰3克\n  * 陈皮3克\n  * 砂仁2克\n  * 干姜15克\n  * 良姜5克\n  * 罂粟壳1粒\n  * 大无纺布卤包一个\n  * 冰糖若干,整块最妙\n  * 带须老葱一颗\n  * 带皮老姜\n  * 若干蒜\n  * 斩大块的肥五花肉\n  * 黄酒\n\n* 二汤步骤\n\n  * 香料配好放入卤袋 ,用热水浸泡少许 去除苦味灰尘,最好水泡加白酒泡,敲碎更入味\n  * 肥五花加黄酒焯水\n  * 葱切段,姜切大片,蒜切片放入初汤\n  * 起油锅炒糖色 油不可多,冰糖敲碎\n  * 焯水完毕的五花肉洗净,放入砂锅,大火煮沸转小火,**卤制过程中,不加锅盖**\n  * 熬糖色中注意不要放入过多油不要使其颜色过甚,如果油糖分层严重,那么加适量水\n  * 糖色熬好后,分次加入卤锅,避免卤汁颜色过重\n  * 加入黄酒\n  * 滚沸10分钟后加盐调味 转小火炖两小时,如若需要可加长时间,停火\n  * 将五花捞出,骨头火爪捞出\n  * 将锅内残渣(葱姜蒜)捞出,至此一锅卤汤完成\n\n* 注意事项\n\n  * 有异味的卤物请分汤卤制\n  * 第一次配好的料包,第二次卤制时候可以抛弃不用\n  * 每次卤制完毕,须进行过滤杂质,只保留表面浮油\n  * 养卤的方式,最好每天一滚,冬季室温10度以内的话,可以2-3天一滚沸,\n  * 卤水亦可冷冻,不过最好不要这么干 伤卤\n  * 不同卤物要注意分卤\n    * 需要分汤的:内脏下水类,鸭子,蛋类,豆制品\n    * 不需要分汤的:猪肉,牛肉,鸡,鸽子\n  * 调味主要靠盐,看个人口味\n  * 味精和酱油,如若糖色未炒好,可加生抽 **千万不要加老抽,除非你做酱卤** \n  * 卤物在炖制完成后会进入冷卤浸泡阶段,记得把香料拿出再浸泡,否则会导致味道过重\n  * 老卤汤解冻,应在锅内加入少许热水,解冻须均匀,\n\n**To Be Continue**\n","slug":"老卤秘方","published":1,"updated":"2022-09-03T07:30:55.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz8740049twfax3e1v4g7","content":"<p>记录老卤方子<a id=\"more\"></a></p>\n<blockquote>\n<p>网上摘录的老卤方子</p>\n</blockquote>\n<ul>\n<li><p>底汤材料</p>\n<ul>\n<li>火爪两只  </li>\n<li>筒子骨一副</li>\n<li>干贝若干</li>\n<li>黄酒少许</li>\n<li>荥经砂锅(不一定用这个)</li>\n</ul>\n</li>\n<li><p>汤底步骤</p>\n<ul>\n<li><p>火爪 筒子骨干贝洗净,放入冷水锅,加少许黄酒,此处作用为焯水</p>\n</li>\n<li><p>至滚沸,保持滚沸五分钟,停火后反复冲洗干净,去除血沫,碎骨,杂质</p>\n</li>\n<li><p>将冲洗好的材料放入砂锅,注入清水,看锅大小放量</p>\n</li>\n<li><p>大火烧开,滚沸5分钟,转小火,再炖25分钟,共计半小时</p>\n</li>\n<li><p>暂时停火,将筒子骨捞出,剔去骨头上碎肉,只保留骨头,稍后骨头放入锅中继续炖</p>\n</li>\n<li><p>滤网去除表面浮油杂质,至此白汤完成,若需要可大炖,筒子骨可换为鸡骨?</p>\n<p>​</p>\n</li>\n</ul>\n</li>\n<li><p>卤方</p>\n<ul>\n<li>盐</li>\n<li>桂皮5克</li>\n<li>姜黄5克</li>\n<li>玉竹1克</li>\n<li>山楂3克</li>\n<li>红曲米5克</li>\n<li>桂枝3克</li>\n<li>桂丁1克</li>\n<li>母丁香2粒</li>\n<li>小茴香12克</li>\n<li>八角10克</li>\n<li>甘草片5克</li>\n<li>草果5克</li>\n<li>花椒15克 最好大红袍 有花椒叶最美</li>\n<li>荜拨1粒</li>\n<li>辛夷3克(这个我自己加的)</li>\n<li>白芷3克(我自己加的)</li>\n<li>香叶2克</li>\n<li>栀子3粒</li>\n<li>茯苓3克</li>\n<li>五加皮2克</li>\n<li>草寇2粒</li>\n<li>香砂仁2克</li>\n<li>肉蔻一粒 小点的最好</li>\n<li>枳实1片</li>\n<li>黄芪2克</li>\n<li>山柰3克</li>\n<li>陈皮3克</li>\n<li>砂仁2克</li>\n<li>干姜15克</li>\n<li>良姜5克</li>\n<li>罂粟壳1粒</li>\n<li>大无纺布卤包一个</li>\n<li>冰糖若干,整块最妙</li>\n<li>带须老葱一颗</li>\n<li>带皮老姜</li>\n<li>若干蒜</li>\n<li>斩大块的肥五花肉</li>\n<li>黄酒</li>\n</ul>\n</li>\n<li><p>二汤步骤</p>\n<ul>\n<li>香料配好放入卤袋 ,用热水浸泡少许 去除苦味灰尘,最好水泡加白酒泡,敲碎更入味</li>\n<li>肥五花加黄酒焯水</li>\n<li>葱切段,姜切大片,蒜切片放入初汤</li>\n<li>起油锅炒糖色 油不可多,冰糖敲碎</li>\n<li>焯水完毕的五花肉洗净,放入砂锅,大火煮沸转小火,<strong>卤制过程中,不加锅盖</strong></li>\n<li>熬糖色中注意不要放入过多油不要使其颜色过甚,如果油糖分层严重,那么加适量水</li>\n<li>糖色熬好后,分次加入卤锅,避免卤汁颜色过重</li>\n<li>加入黄酒</li>\n<li>滚沸10分钟后加盐调味 转小火炖两小时,如若需要可加长时间,停火</li>\n<li>将五花捞出,骨头火爪捞出</li>\n<li>将锅内残渣(葱姜蒜)捞出,至此一锅卤汤完成</li>\n</ul>\n</li>\n<li><p>注意事项</p>\n<ul>\n<li>有异味的卤物请分汤卤制</li>\n<li>第一次配好的料包,第二次卤制时候可以抛弃不用</li>\n<li>每次卤制完毕,须进行过滤杂质,只保留表面浮油</li>\n<li>养卤的方式,最好每天一滚,冬季室温10度以内的话,可以2-3天一滚沸,</li>\n<li>卤水亦可冷冻,不过最好不要这么干 伤卤</li>\n<li>不同卤物要注意分卤<ul>\n<li>需要分汤的:内脏下水类,鸭子,蛋类,豆制品</li>\n<li>不需要分汤的:猪肉,牛肉,鸡,鸽子</li>\n</ul>\n</li>\n<li>调味主要靠盐,看个人口味</li>\n<li>味精和酱油,如若糖色未炒好,可加生抽 <strong>千万不要加老抽,除非你做酱卤</strong> </li>\n<li>卤物在炖制完成后会进入冷卤浸泡阶段,记得把香料拿出再浸泡,否则会导致味道过重</li>\n<li>老卤汤解冻,应在锅内加入少许热水,解冻须均匀,</li>\n</ul>\n</li>\n</ul>\n<p><strong>To Be Continue</strong></p>\n","site":{"data":{}},"excerpt":"<p>记录老卤方子</p>","more":"<p></p>\n<blockquote>\n<p>网上摘录的老卤方子</p>\n</blockquote>\n<ul>\n<li><p>底汤材料</p>\n<ul>\n<li>火爪两只  </li>\n<li>筒子骨一副</li>\n<li>干贝若干</li>\n<li>黄酒少许</li>\n<li>荥经砂锅(不一定用这个)</li>\n</ul>\n</li>\n<li><p>汤底步骤</p>\n<ul>\n<li><p>火爪 筒子骨干贝洗净,放入冷水锅,加少许黄酒,此处作用为焯水</p>\n</li>\n<li><p>至滚沸,保持滚沸五分钟,停火后反复冲洗干净,去除血沫,碎骨,杂质</p>\n</li>\n<li><p>将冲洗好的材料放入砂锅,注入清水,看锅大小放量</p>\n</li>\n<li><p>大火烧开,滚沸5分钟,转小火,再炖25分钟,共计半小时</p>\n</li>\n<li><p>暂时停火,将筒子骨捞出,剔去骨头上碎肉,只保留骨头,稍后骨头放入锅中继续炖</p>\n</li>\n<li><p>滤网去除表面浮油杂质,至此白汤完成,若需要可大炖,筒子骨可换为鸡骨?</p>\n<p>​</p>\n</li>\n</ul>\n</li>\n<li><p>卤方</p>\n<ul>\n<li>盐</li>\n<li>桂皮5克</li>\n<li>姜黄5克</li>\n<li>玉竹1克</li>\n<li>山楂3克</li>\n<li>红曲米5克</li>\n<li>桂枝3克</li>\n<li>桂丁1克</li>\n<li>母丁香2粒</li>\n<li>小茴香12克</li>\n<li>八角10克</li>\n<li>甘草片5克</li>\n<li>草果5克</li>\n<li>花椒15克 最好大红袍 有花椒叶最美</li>\n<li>荜拨1粒</li>\n<li>辛夷3克(这个我自己加的)</li>\n<li>白芷3克(我自己加的)</li>\n<li>香叶2克</li>\n<li>栀子3粒</li>\n<li>茯苓3克</li>\n<li>五加皮2克</li>\n<li>草寇2粒</li>\n<li>香砂仁2克</li>\n<li>肉蔻一粒 小点的最好</li>\n<li>枳实1片</li>\n<li>黄芪2克</li>\n<li>山柰3克</li>\n<li>陈皮3克</li>\n<li>砂仁2克</li>\n<li>干姜15克</li>\n<li>良姜5克</li>\n<li>罂粟壳1粒</li>\n<li>大无纺布卤包一个</li>\n<li>冰糖若干,整块最妙</li>\n<li>带须老葱一颗</li>\n<li>带皮老姜</li>\n<li>若干蒜</li>\n<li>斩大块的肥五花肉</li>\n<li>黄酒</li>\n</ul>\n</li>\n<li><p>二汤步骤</p>\n<ul>\n<li>香料配好放入卤袋 ,用热水浸泡少许 去除苦味灰尘,最好水泡加白酒泡,敲碎更入味</li>\n<li>肥五花加黄酒焯水</li>\n<li>葱切段,姜切大片,蒜切片放入初汤</li>\n<li>起油锅炒糖色 油不可多,冰糖敲碎</li>\n<li>焯水完毕的五花肉洗净,放入砂锅,大火煮沸转小火,<strong>卤制过程中,不加锅盖</strong></li>\n<li>熬糖色中注意不要放入过多油不要使其颜色过甚,如果油糖分层严重,那么加适量水</li>\n<li>糖色熬好后,分次加入卤锅,避免卤汁颜色过重</li>\n<li>加入黄酒</li>\n<li>滚沸10分钟后加盐调味 转小火炖两小时,如若需要可加长时间,停火</li>\n<li>将五花捞出,骨头火爪捞出</li>\n<li>将锅内残渣(葱姜蒜)捞出,至此一锅卤汤完成</li>\n</ul>\n</li>\n<li><p>注意事项</p>\n<ul>\n<li>有异味的卤物请分汤卤制</li>\n<li>第一次配好的料包,第二次卤制时候可以抛弃不用</li>\n<li>每次卤制完毕,须进行过滤杂质,只保留表面浮油</li>\n<li>养卤的方式,最好每天一滚,冬季室温10度以内的话,可以2-3天一滚沸,</li>\n<li>卤水亦可冷冻,不过最好不要这么干 伤卤</li>\n<li>不同卤物要注意分卤<ul>\n<li>需要分汤的:内脏下水类,鸭子,蛋类,豆制品</li>\n<li>不需要分汤的:猪肉,牛肉,鸡,鸽子</li>\n</ul>\n</li>\n<li>调味主要靠盐,看个人口味</li>\n<li>味精和酱油,如若糖色未炒好,可加生抽 <strong>千万不要加老抽,除非你做酱卤</strong> </li>\n<li>卤物在炖制完成后会进入冷卤浸泡阶段,记得把香料拿出再浸泡,否则会导致味道过重</li>\n<li>老卤汤解冻,应在锅内加入少许热水,解冻须均匀,</li>\n</ul>\n</li>\n</ul>\n<p><strong>To Be Continue</strong></p>"},{"title":"清单","date":"2017-12-03T04:34:43.000Z","_content":"\n记录下东西表单<!--more-->\n\n* 地下室管道风机气扇 大概110mm\n* 油烟机\n* 荥经砂器\n* 蜂蜡\n* 紫外线灯带定时器","source":"_posts/清单.md","raw":"---\ntitle: 清单\ndate: 2017-12-03 12:34:43\ntags: [清单]\ncategories: [清单]\n---\n\n记录下东西表单<!--more-->\n\n* 地下室管道风机气扇 大概110mm\n* 油烟机\n* 荥经砂器\n* 蜂蜡\n* 紫外线灯带定时器","slug":"清单","published":1,"updated":"2022-09-03T07:30:55.342Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz8db006ttwfa0mjoplf1","content":"<p>记录下东西表单<a id=\"more\"></a></p>\n<ul>\n<li>地下室管道风机气扇 大概110mm</li>\n<li>油烟机</li>\n<li>荥经砂器</li>\n<li>蜂蜡</li>\n<li>紫外线灯带定时器</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>记录下东西表单</p>","more":"<p></p>\n<ul>\n<li>地下室管道风机气扇 大概110mm</li>\n<li>油烟机</li>\n<li>荥经砂器</li>\n<li>蜂蜡</li>\n<li>紫外线灯带定时器</li>\n</ul>"},{"title":"限流防止重复提交","date":"2018-09-29T13:48:46.000Z","_content":"\n限流防止重复提交了解下<!--more-->\n\n#### JAVA做限流\n\n在之前的开发中，由于网络等各种原因出现了app端多次提交的情况，这里牵扯到了一个接口的幂等性的问题，同事使用了redis来做限流，防止重复提交。\n\n记录下。以后用的上。两种方式，一种用map去做，一种用redis去做\n\n* 定义一个注解\n\n  ```\n  package com.convergence.support;\n  \n  import java.lang.annotation.Documented;\n  import java.lang.annotation.ElementType;\n  import java.lang.annotation.Retention;\n  import java.lang.annotation.RetentionPolicy;\n  import java.lang.annotation.Target;\n  \n  import org.springframework.core.Ordered;\n  import org.springframework.core.annotation.Order;\n  \n  @Retention(RetentionPolicy.RUNTIME)\n  @Target(ElementType.METHOD)\n  @Documented\n  @Order(Ordered.HIGHEST_PRECEDENCE)\n  public @interface RequestLimit {\n  \t  /**\n       * 允许访问的次数，默认值MAX_VALUE\n       */\n      int count() default Integer.MAX_VALUE;\n  \n      /**\n       * 时间段，单位为毫秒，默认值一分钟\n       */\n      long time() default 60000;\n  \n  }\n  ```\n\n* redis的方式\n\n  * 定义切面类。进行切面操作\n\n    ```\n    package com.convergence.support.aop;\n    \n    import java.util.concurrent.TimeUnit;\n    \n    import javax.servlet.http.HttpServletRequest;\n    \n    import org.aspectj.lang.JoinPoint;\n    import org.aspectj.lang.annotation.Aspect;\n    import org.aspectj.lang.annotation.Before;\n    import org.slf4j.Logger;\n    import org.slf4j.LoggerFactory;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.data.redis.core.RedisTemplate;\n    import org.springframework.web.context.request.RequestContextHolder;\n    import org.springframework.web.context.request.ServletRequestAttributes;\n    \n    import com.convergence.support.RequestLimit;\n    import com.convergence.support.RequestLimitException;\n    import com.convergence.support.util.IpUtil;\n    @Aspect\n    public class RequestLimitAop {\n    \tprivate static final Logger logger = LoggerFactory.getLogger(RequestLimitAop.class);\n    \t@Autowired\n    \tprivate RedisTemplate redisTemplate;\n    \n    \t@Before(\"within(@org.springframework.stereotype.Controller *) && @annotation(limit)\")\n    \tpublic void requestLimit(JoinPoint joinPoint, RequestLimit limit) throws RequestLimitException {\n    \t\ttry {\n    \t\t\tObject[] args = joinPoint.getArgs();\n    \t\t\tHttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes())\n    \t\t\t\t\t.getRequest();\n    \t\t\tString ipAddress = IpUtil.getIpAddress(request);\n    \t\t\tString url = request.getRequestURL().toString();\n    \t\t\tString key = \"req_limit_\".concat(url).concat(\"_\").concat(ipAddress);\n    \t\t\tboolean checkResult = checkWithRedis(limit, key);\n    \t\t\tif (!checkResult) {\n    \t\t\t\tlogger.debug(\"requestLimited,\" + \"[用户ip:{}],[访问地址:{}]超过了限定的次数[{}]次\", ipAddress, url, limit.count());\n    \t\t\t\tthrow new RequestLimitException();\n    \t\t\t}\n    \t\t} catch (RequestLimitException e) {\n    \t\t\tthrow e;\n    \t\t}\n    \n    \t}\n    \n    \tprivate boolean checkWithRedis(RequestLimit limit, String key) {\n    \t\tlong count = redisTemplate.opsForValue().increment(key, 1);\n    \t\tif (count == 1) {\n    \t\t\tredisTemplate.expire(key, limit.time(), TimeUnit.MILLISECONDS);\n    \t\t}\n    \t\tif (count > limit.count()) {\n    \t\t\treturn false;\n    \t\t}\n    \t\treturn true;\n    \t}\n    }\n    \n    ```\n\n  * aop配置 在com.convergence.support.aop下\n\n    ```\n    package com.muse.config;\n    \n    import org.springframework.context.annotation.Bean;\n    import org.springframework.context.annotation.ComponentScan;\n    import org.springframework.context.annotation.Configuration;\n    import org.springframework.context.annotation.EnableAspectJAutoProxy;\n    \n    import com.muse.support.aop.RequestLimitAop;\n    \n    /**\n     * 开启aop 配合自定义注解 RequestLimitAop。\n     * \n     * @author andreby\n     *\n     */\n    @Configuration\n    @EnableAspectJAutoProxy\n    @ComponentScan(basePackages = { \"com.convergence.support.aop\" })\n    public class AopConfig {\n    \t@Bean\n    \tpublic RequestLimitAop requestLimitAop() {\n    \t\treturn new RequestLimitAop();\n    \t}\n    }\n    \n    \n    ```\n\n  * 异常类定义\n\n    ```\n    package com.convergence.support;\n    /**\n     * 限流异常类\n     * @author andreby\n     *\n     */\n    public class RequestLimitException extends Exception {\n    \n    \t/**\n    \t * \n    \t */\n    \tprivate static final long serialVersionUID = 1L;\n    \n    \tpublic RequestLimitException() {\n    \t\tsuper(\"HTTP请求超出设定的限制\");\n    \t}\n    \n    \t@Override\n    \tpublic StackTraceElement[] getStackTrace() {\n    \t\treturn super.getStackTrace();\n    \t}\n    \n    }\n    \n    ```\n\n  * 进行controller的访问控制\n\n    ```\n    package com.convergence.web.admin;\n    \n    import javax.servlet.http.HttpServletRequest;\n    \n    import org.springframework.stereotype.Controller;\n    import org.springframework.web.bind.annotation.RequestMapping;\n    import org.springframework.web.bind.annotation.ResponseBody;\n    \n    import com.convergence.support.RequestLimit;\n    \n    @RequestMapping(\"/aop\")\n    @Controller\n    public class AopController {\n    \n    \t@RequestMapping(value = \"/test\")\n    \t@RequestLimit(count = 2)\n    \t@ResponseBody\n    \tpublic String requestLimit(HttpServletRequest request) {\n    \t\treturn \"test\";\n    \t}\n    \n    }\n    ```\n\n\n#### Nginx做限流\n\nnginx提供两种限流方式，一种是控制速率 一种是控制并发连接数\n\n* 控制速率\n\n  * 正常限流\n\n    ngx_http_limit_req_module模块提供限制请求处理速率能力，使用了漏桶算法（leaky bucket），\n\n    下面的例子使用nginx_limit_req_zone和limit_req两个指令，限制单个ip的请求处理速率\n\n    在nginx.conf http中添加限流配置：\n\n    格式 ：limit_req_zone key zone rate\n\n  ```\n  http{\n        limit_req_zone $binary_remote_addr zone=myRateLimit:10m rate=10r/s;\n     }\n  ```\n\n  配置server，使用limit_req指令应用限流：\n\n  ```\n  server{\n      location / {\n          limit_req zone=myRateLimit;\n          proxy_pass http://my_upstream;\n      }\n  }\n  ```\n\n  * **key：** 定义限流对象，binary_remote_addr 是一种key，表示基于remote_addr（客户端IP）来做限流，\n\n    binary_的目的是压缩内存占用量。\n\n  * **zone**:定义共享内存区来存储访问信息，myRateLimit:10m 表示一个大小为10M，名字为myRateLimit的内存区域，1M能存储16000IP地址的访问信息，10M可以存储16Wip地址访问信息。**\n\n  * **rate** 用于设置最大访问速率，rate=10r/s表示每秒最多处理10个请求，Nginx实际上以毫秒为粒度来跟踪请求信息，因此10r/s实际上是限制：每100毫秒处理一个请求。这意味着，自上一个请求处理完后，若后续100毫秒内又有请求到达，将拒绝处理该请求。\n\n* 处理突发流量\n\n  上面例子限制10r/s，如果有时正常流量突然增大，超出的请求将被拒绝，无法处理突发流量。可以结合burst参数使用来解决问题\n\n  ```\n  server{\n      location / {\n          limit_req zone=myRateLimit burst=20;\n          proxy_pass http://my_upstream;\n      }\n   }\n  ```\n\n  burst可以理解为突发或者爆发，表示在超过设定的处理速率后能额外处理的请求数。当rate=10r/s时，将1s拆为10份，即每100ms可处理1个请求。\n\n  此外 burst=20,表示若同时有21个请求到达，Nginx会处理第一个请求，剩余20个请求将放入队列中，然后每隔100ms从队列中获取一个请求进行处理。若请求数大于21，将拒绝处理多余的请求，直接返回503.\n\n  不过，单独使用burst参数并不实用，假设burst=50,rate依然为10r/s，排队中的50个请求虽然每100ms会处理一个，但第50个请求却需要等待50*100ms即5s\n\n  因此 burst常常与nodelay一起使用：\n\n  ```\n  server{\n      location /{\n          limit_req zone=myRateLimit burst=20 nodelay;\n          proxy_pass http://my_upstream;\n      }\n  }\n  ```\n\n  **nodelay**针对的是burst参数，**burst=20 nodelay ** 表示这20个请求立马处理，不能延迟，相当于特事特办，不过即使这20个突发请求立马处理结束，后续来了请求也不会立马处理。burst=20 相当于缓存队列中占2-个坑，即使请求被处理了，这20个位置也只能按100ms一个来释放。\n\n* 限制链接数\n\n  nginx_http_limit_conn_module提供了限制链接数的能力，利用**limit_conn_zone和limit_conn **两个指令。\n\n  下面是官方例子：\n\n  ```\n  limit_conn_zone $binary_remote_addr zone=perip:10m;\n  limit_conn_zone $server_name zone=perserver:10m;\n  server{\n      ...\n      limit_conn perip 10;\n      limit_conn perserver 100;\n  }\n  ```\n\n  **limit_conn perip 10 **作用的key是$binary_remote_addr,表示限制单个ip同时最多能持有10个链接。\n\n  **limit_conn perserver 100**作用的key是$server_name,表示虚拟主机（server）同时能处理并发链接的总数。\n\n  **需要注意的是**：只有当**request header** 被后端server处理后，这个链接才进行计数。\n\n* 设置白名单\n\n  限流主要针对外部访问，内网访问相对安全，可以不做限流，通过设置白名单即可，那么可以利用\n\n  nginx_http_geo_module和ngx_http_map_module两个工具模块来搞定。\n\n  在nginx.conf的http部分中进行配置白名单：\n\n  ```\n  geo $limit{\n      default 1;\n      10.0.0.0/8 0；\n      192.168.0.0/24 0;\n      172.20.0.35 0;\n  }\n  map $limit $limit_key{\n      0 \"\";\n      1 $binary_remote_addr;\n  }\n  limit_req_zone $limit_key zone=myRateLimit:10m rate=10r/s;\n  ```\n\n  **geo**对于白名单（子网或ip都可以）将返回0，其他ip返回1；\n\n  **map**将$limit转换为**$limit_key**,如果是**$limit**是0（白名单），则返回空字符串，如果是1，则返回客户端实际ip\n\n  **limit_req_zone**限流的key不再使用**$binary_remote_addr**，而是使用**$limit_key**来动态获取值。如果是白名单，limit_req_zone的限流key则为空字符串，**将不会限流**；若不是白名单，将会对客户端真实ip进行限流。\n\n* 限制数据传输速度能力即下载速度\n\n  使用**nginx_http_core_module**来实现。\n\n  ```\n  location /flv/{\n      flv；\n      limit_rate_after 20m;\n      limit_rate 100k;\n  }\n  ```\n\n  这个限制是针对每个请求的，表示客户端下载前20M时不限速，后续限制100KB/S\n\n  []: https://toutiao.io/k/r9wf3f\t\"Nginx的两种限流方式\"\n\n  **TODO:JAVA map实现限流。**","source":"_posts/限流防止重复提交.md","raw":"---\ntitle: 限流防止重复提交\ndate: 2018-09-29 21:48:46\ntags: [Web]\ncategories: [限流]\n---\n\n限流防止重复提交了解下<!--more-->\n\n#### JAVA做限流\n\n在之前的开发中，由于网络等各种原因出现了app端多次提交的情况，这里牵扯到了一个接口的幂等性的问题，同事使用了redis来做限流，防止重复提交。\n\n记录下。以后用的上。两种方式，一种用map去做，一种用redis去做\n\n* 定义一个注解\n\n  ```\n  package com.convergence.support;\n  \n  import java.lang.annotation.Documented;\n  import java.lang.annotation.ElementType;\n  import java.lang.annotation.Retention;\n  import java.lang.annotation.RetentionPolicy;\n  import java.lang.annotation.Target;\n  \n  import org.springframework.core.Ordered;\n  import org.springframework.core.annotation.Order;\n  \n  @Retention(RetentionPolicy.RUNTIME)\n  @Target(ElementType.METHOD)\n  @Documented\n  @Order(Ordered.HIGHEST_PRECEDENCE)\n  public @interface RequestLimit {\n  \t  /**\n       * 允许访问的次数，默认值MAX_VALUE\n       */\n      int count() default Integer.MAX_VALUE;\n  \n      /**\n       * 时间段，单位为毫秒，默认值一分钟\n       */\n      long time() default 60000;\n  \n  }\n  ```\n\n* redis的方式\n\n  * 定义切面类。进行切面操作\n\n    ```\n    package com.convergence.support.aop;\n    \n    import java.util.concurrent.TimeUnit;\n    \n    import javax.servlet.http.HttpServletRequest;\n    \n    import org.aspectj.lang.JoinPoint;\n    import org.aspectj.lang.annotation.Aspect;\n    import org.aspectj.lang.annotation.Before;\n    import org.slf4j.Logger;\n    import org.slf4j.LoggerFactory;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.data.redis.core.RedisTemplate;\n    import org.springframework.web.context.request.RequestContextHolder;\n    import org.springframework.web.context.request.ServletRequestAttributes;\n    \n    import com.convergence.support.RequestLimit;\n    import com.convergence.support.RequestLimitException;\n    import com.convergence.support.util.IpUtil;\n    @Aspect\n    public class RequestLimitAop {\n    \tprivate static final Logger logger = LoggerFactory.getLogger(RequestLimitAop.class);\n    \t@Autowired\n    \tprivate RedisTemplate redisTemplate;\n    \n    \t@Before(\"within(@org.springframework.stereotype.Controller *) && @annotation(limit)\")\n    \tpublic void requestLimit(JoinPoint joinPoint, RequestLimit limit) throws RequestLimitException {\n    \t\ttry {\n    \t\t\tObject[] args = joinPoint.getArgs();\n    \t\t\tHttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes())\n    \t\t\t\t\t.getRequest();\n    \t\t\tString ipAddress = IpUtil.getIpAddress(request);\n    \t\t\tString url = request.getRequestURL().toString();\n    \t\t\tString key = \"req_limit_\".concat(url).concat(\"_\").concat(ipAddress);\n    \t\t\tboolean checkResult = checkWithRedis(limit, key);\n    \t\t\tif (!checkResult) {\n    \t\t\t\tlogger.debug(\"requestLimited,\" + \"[用户ip:{}],[访问地址:{}]超过了限定的次数[{}]次\", ipAddress, url, limit.count());\n    \t\t\t\tthrow new RequestLimitException();\n    \t\t\t}\n    \t\t} catch (RequestLimitException e) {\n    \t\t\tthrow e;\n    \t\t}\n    \n    \t}\n    \n    \tprivate boolean checkWithRedis(RequestLimit limit, String key) {\n    \t\tlong count = redisTemplate.opsForValue().increment(key, 1);\n    \t\tif (count == 1) {\n    \t\t\tredisTemplate.expire(key, limit.time(), TimeUnit.MILLISECONDS);\n    \t\t}\n    \t\tif (count > limit.count()) {\n    \t\t\treturn false;\n    \t\t}\n    \t\treturn true;\n    \t}\n    }\n    \n    ```\n\n  * aop配置 在com.convergence.support.aop下\n\n    ```\n    package com.muse.config;\n    \n    import org.springframework.context.annotation.Bean;\n    import org.springframework.context.annotation.ComponentScan;\n    import org.springframework.context.annotation.Configuration;\n    import org.springframework.context.annotation.EnableAspectJAutoProxy;\n    \n    import com.muse.support.aop.RequestLimitAop;\n    \n    /**\n     * 开启aop 配合自定义注解 RequestLimitAop。\n     * \n     * @author andreby\n     *\n     */\n    @Configuration\n    @EnableAspectJAutoProxy\n    @ComponentScan(basePackages = { \"com.convergence.support.aop\" })\n    public class AopConfig {\n    \t@Bean\n    \tpublic RequestLimitAop requestLimitAop() {\n    \t\treturn new RequestLimitAop();\n    \t}\n    }\n    \n    \n    ```\n\n  * 异常类定义\n\n    ```\n    package com.convergence.support;\n    /**\n     * 限流异常类\n     * @author andreby\n     *\n     */\n    public class RequestLimitException extends Exception {\n    \n    \t/**\n    \t * \n    \t */\n    \tprivate static final long serialVersionUID = 1L;\n    \n    \tpublic RequestLimitException() {\n    \t\tsuper(\"HTTP请求超出设定的限制\");\n    \t}\n    \n    \t@Override\n    \tpublic StackTraceElement[] getStackTrace() {\n    \t\treturn super.getStackTrace();\n    \t}\n    \n    }\n    \n    ```\n\n  * 进行controller的访问控制\n\n    ```\n    package com.convergence.web.admin;\n    \n    import javax.servlet.http.HttpServletRequest;\n    \n    import org.springframework.stereotype.Controller;\n    import org.springframework.web.bind.annotation.RequestMapping;\n    import org.springframework.web.bind.annotation.ResponseBody;\n    \n    import com.convergence.support.RequestLimit;\n    \n    @RequestMapping(\"/aop\")\n    @Controller\n    public class AopController {\n    \n    \t@RequestMapping(value = \"/test\")\n    \t@RequestLimit(count = 2)\n    \t@ResponseBody\n    \tpublic String requestLimit(HttpServletRequest request) {\n    \t\treturn \"test\";\n    \t}\n    \n    }\n    ```\n\n\n#### Nginx做限流\n\nnginx提供两种限流方式，一种是控制速率 一种是控制并发连接数\n\n* 控制速率\n\n  * 正常限流\n\n    ngx_http_limit_req_module模块提供限制请求处理速率能力，使用了漏桶算法（leaky bucket），\n\n    下面的例子使用nginx_limit_req_zone和limit_req两个指令，限制单个ip的请求处理速率\n\n    在nginx.conf http中添加限流配置：\n\n    格式 ：limit_req_zone key zone rate\n\n  ```\n  http{\n        limit_req_zone $binary_remote_addr zone=myRateLimit:10m rate=10r/s;\n     }\n  ```\n\n  配置server，使用limit_req指令应用限流：\n\n  ```\n  server{\n      location / {\n          limit_req zone=myRateLimit;\n          proxy_pass http://my_upstream;\n      }\n  }\n  ```\n\n  * **key：** 定义限流对象，binary_remote_addr 是一种key，表示基于remote_addr（客户端IP）来做限流，\n\n    binary_的目的是压缩内存占用量。\n\n  * **zone**:定义共享内存区来存储访问信息，myRateLimit:10m 表示一个大小为10M，名字为myRateLimit的内存区域，1M能存储16000IP地址的访问信息，10M可以存储16Wip地址访问信息。**\n\n  * **rate** 用于设置最大访问速率，rate=10r/s表示每秒最多处理10个请求，Nginx实际上以毫秒为粒度来跟踪请求信息，因此10r/s实际上是限制：每100毫秒处理一个请求。这意味着，自上一个请求处理完后，若后续100毫秒内又有请求到达，将拒绝处理该请求。\n\n* 处理突发流量\n\n  上面例子限制10r/s，如果有时正常流量突然增大，超出的请求将被拒绝，无法处理突发流量。可以结合burst参数使用来解决问题\n\n  ```\n  server{\n      location / {\n          limit_req zone=myRateLimit burst=20;\n          proxy_pass http://my_upstream;\n      }\n   }\n  ```\n\n  burst可以理解为突发或者爆发，表示在超过设定的处理速率后能额外处理的请求数。当rate=10r/s时，将1s拆为10份，即每100ms可处理1个请求。\n\n  此外 burst=20,表示若同时有21个请求到达，Nginx会处理第一个请求，剩余20个请求将放入队列中，然后每隔100ms从队列中获取一个请求进行处理。若请求数大于21，将拒绝处理多余的请求，直接返回503.\n\n  不过，单独使用burst参数并不实用，假设burst=50,rate依然为10r/s，排队中的50个请求虽然每100ms会处理一个，但第50个请求却需要等待50*100ms即5s\n\n  因此 burst常常与nodelay一起使用：\n\n  ```\n  server{\n      location /{\n          limit_req zone=myRateLimit burst=20 nodelay;\n          proxy_pass http://my_upstream;\n      }\n  }\n  ```\n\n  **nodelay**针对的是burst参数，**burst=20 nodelay ** 表示这20个请求立马处理，不能延迟，相当于特事特办，不过即使这20个突发请求立马处理结束，后续来了请求也不会立马处理。burst=20 相当于缓存队列中占2-个坑，即使请求被处理了，这20个位置也只能按100ms一个来释放。\n\n* 限制链接数\n\n  nginx_http_limit_conn_module提供了限制链接数的能力，利用**limit_conn_zone和limit_conn **两个指令。\n\n  下面是官方例子：\n\n  ```\n  limit_conn_zone $binary_remote_addr zone=perip:10m;\n  limit_conn_zone $server_name zone=perserver:10m;\n  server{\n      ...\n      limit_conn perip 10;\n      limit_conn perserver 100;\n  }\n  ```\n\n  **limit_conn perip 10 **作用的key是$binary_remote_addr,表示限制单个ip同时最多能持有10个链接。\n\n  **limit_conn perserver 100**作用的key是$server_name,表示虚拟主机（server）同时能处理并发链接的总数。\n\n  **需要注意的是**：只有当**request header** 被后端server处理后，这个链接才进行计数。\n\n* 设置白名单\n\n  限流主要针对外部访问，内网访问相对安全，可以不做限流，通过设置白名单即可，那么可以利用\n\n  nginx_http_geo_module和ngx_http_map_module两个工具模块来搞定。\n\n  在nginx.conf的http部分中进行配置白名单：\n\n  ```\n  geo $limit{\n      default 1;\n      10.0.0.0/8 0；\n      192.168.0.0/24 0;\n      172.20.0.35 0;\n  }\n  map $limit $limit_key{\n      0 \"\";\n      1 $binary_remote_addr;\n  }\n  limit_req_zone $limit_key zone=myRateLimit:10m rate=10r/s;\n  ```\n\n  **geo**对于白名单（子网或ip都可以）将返回0，其他ip返回1；\n\n  **map**将$limit转换为**$limit_key**,如果是**$limit**是0（白名单），则返回空字符串，如果是1，则返回客户端实际ip\n\n  **limit_req_zone**限流的key不再使用**$binary_remote_addr**，而是使用**$limit_key**来动态获取值。如果是白名单，limit_req_zone的限流key则为空字符串，**将不会限流**；若不是白名单，将会对客户端真实ip进行限流。\n\n* 限制数据传输速度能力即下载速度\n\n  使用**nginx_http_core_module**来实现。\n\n  ```\n  location /flv/{\n      flv；\n      limit_rate_after 20m;\n      limit_rate 100k;\n  }\n  ```\n\n  这个限制是针对每个请求的，表示客户端下载前20M时不限速，后续限制100KB/S\n\n  []: https://toutiao.io/k/r9wf3f\t\"Nginx的两种限流方式\"\n\n  **TODO:JAVA map实现限流。**","slug":"限流防止重复提交","published":1,"updated":"2022-09-03T07:30:55.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz8dl006vtwfamf6cpm1i","content":"<p>限流防止重复提交了解下<a id=\"more\"></a></p>\n<h4 id=\"JAVA做限流\"><a href=\"#JAVA做限流\" class=\"headerlink\" title=\"JAVA做限流\"></a>JAVA做限流</h4><p>在之前的开发中，由于网络等各种原因出现了app端多次提交的情况，这里牵扯到了一个接口的幂等性的问题，同事使用了redis来做限流，防止重复提交。</p>\n<p>记录下。以后用的上。两种方式，一种用map去做，一种用redis去做</p>\n<ul>\n<li><p>定义一个注解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.convergence.support;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.Documented;</span><br><span class=\"line\">import java.lang.annotation.ElementType;</span><br><span class=\"line\">import java.lang.annotation.Retention;</span><br><span class=\"line\">import java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.core.Ordered;</span><br><span class=\"line\">import org.springframework.core.annotation.Order;</span><br><span class=\"line\"></span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(ElementType.METHOD)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">@Order(Ordered.HIGHEST_PRECEDENCE)</span><br><span class=\"line\">public @interface RequestLimit &#123;</span><br><span class=\"line\">\t  /**</span><br><span class=\"line\">     * 允许访问的次数，默认值MAX_VALUE</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int count() default Integer.MAX_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 时间段，单位为毫秒，默认值一分钟</span><br><span class=\"line\">     */</span><br><span class=\"line\">    long time() default 60000;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>redis的方式</p>\n<ul>\n<li><p>定义切面类。进行切面操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.convergence.support.aop;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.aspectj.lang.JoinPoint;</span><br><span class=\"line\">import org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\">import org.aspectj.lang.annotation.Before;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\">import org.springframework.web.context.request.RequestContextHolder;</span><br><span class=\"line\">import org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.convergence.support.RequestLimit;</span><br><span class=\"line\">import com.convergence.support.RequestLimitException;</span><br><span class=\"line\">import com.convergence.support.util.IpUtil;</span><br><span class=\"line\">@Aspect</span><br><span class=\"line\">public class RequestLimitAop &#123;</span><br><span class=\"line\">\tprivate static final Logger logger = LoggerFactory.getLogger(RequestLimitAop.class);</span><br><span class=\"line\">\t@Autowired</span><br><span class=\"line\">\tprivate RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Before(&quot;within(@org.springframework.stereotype.Controller *) &amp;&amp; @annotation(limit)&quot;)</span><br><span class=\"line\">\tpublic void requestLimit(JoinPoint joinPoint, RequestLimit limit) throws RequestLimitException &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tObject[] args = joinPoint.getArgs();</span><br><span class=\"line\">\t\t\tHttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes())</span><br><span class=\"line\">\t\t\t\t\t.getRequest();</span><br><span class=\"line\">\t\t\tString ipAddress = IpUtil.getIpAddress(request);</span><br><span class=\"line\">\t\t\tString url = request.getRequestURL().toString();</span><br><span class=\"line\">\t\t\tString key = &quot;req_limit_&quot;.concat(url).concat(&quot;_&quot;).concat(ipAddress);</span><br><span class=\"line\">\t\t\tboolean checkResult = checkWithRedis(limit, key);</span><br><span class=\"line\">\t\t\tif (!checkResult) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(&quot;requestLimited,&quot; + &quot;[用户ip:&#123;&#125;],[访问地址:&#123;&#125;]超过了限定的次数[&#123;&#125;]次&quot;, ipAddress, url, limit.count());</span><br><span class=\"line\">\t\t\t\tthrow new RequestLimitException();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; catch (RequestLimitException e) &#123;</span><br><span class=\"line\">\t\t\tthrow e;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate boolean checkWithRedis(RequestLimit limit, String key) &#123;</span><br><span class=\"line\">\t\tlong count = redisTemplate.opsForValue().increment(key, 1);</span><br><span class=\"line\">\t\tif (count == 1) &#123;</span><br><span class=\"line\">\t\t\tredisTemplate.expire(key, limit.time(), TimeUnit.MILLISECONDS);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (count &gt; limit.count()) &#123;</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>aop配置 在com.convergence.support.aop下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.muse.config;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.muse.support.aop.RequestLimitAop;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 开启aop 配合自定义注解 RequestLimitAop。</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @author andreby</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableAspectJAutoProxy</span><br><span class=\"line\">@ComponentScan(basePackages = &#123; &quot;com.convergence.support.aop&quot; &#125;)</span><br><span class=\"line\">public class AopConfig &#123;</span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic RequestLimitAop requestLimitAop() &#123;</span><br><span class=\"line\">\t\treturn new RequestLimitAop();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>异常类定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.convergence.support;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 限流异常类</span><br><span class=\"line\"> * @author andreby</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class RequestLimitException extends Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate static final long serialVersionUID = 1L;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic RequestLimitException() &#123;</span><br><span class=\"line\">\t\tsuper(&quot;HTTP请求超出设定的限制&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic StackTraceElement[] getStackTrace() &#123;</span><br><span class=\"line\">\t\treturn super.getStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进行controller的访问控制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.convergence.web.admin;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.stereotype.Controller;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.convergence.support.RequestLimit;</span><br><span class=\"line\"></span><br><span class=\"line\">@RequestMapping(&quot;/aop&quot;)</span><br><span class=\"line\">@Controller</span><br><span class=\"line\">public class AopController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@RequestMapping(value = &quot;/test&quot;)</span><br><span class=\"line\">\t@RequestLimit(count = 2)</span><br><span class=\"line\">\t@ResponseBody</span><br><span class=\"line\">\tpublic String requestLimit(HttpServletRequest request) &#123;</span><br><span class=\"line\">\t\treturn &quot;test&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Nginx做限流\"><a href=\"#Nginx做限流\" class=\"headerlink\" title=\"Nginx做限流\"></a>Nginx做限流</h4><p>nginx提供两种限流方式，一种是控制速率 一种是控制并发连接数</p>\n<ul>\n<li><p>控制速率</p>\n<ul>\n<li><p>正常限流</p>\n<p>ngx_http_limit_req_module模块提供限制请求处理速率能力，使用了漏桶算法（leaky bucket），</p>\n<p>下面的例子使用nginx_limit_req_zone和limit_req两个指令，限制单个ip的请求处理速率</p>\n<p>在nginx.conf http中添加限流配置：</p>\n<p>格式 ：limit_req_zone key zone rate</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">      limit_req_zone $binary_remote_addr zone=myRateLimit:10m rate=10r/s;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置server，使用limit_req指令应用限流：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        limit_req zone=myRateLimit;</span><br><span class=\"line\">        proxy_pass http://my_upstream;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>key：</strong> 定义限流对象，binary_remote_addr 是一种key，表示基于remote_addr（客户端IP）来做限流，</p>\n<p>binary_的目的是压缩内存占用量。</p>\n</li>\n<li><p><strong>zone</strong>:定义共享内存区来存储访问信息，myRateLimit:10m 表示一个大小为10M，名字为myRateLimit的内存区域，1M能存储16000IP地址的访问信息，10M可以存储16Wip地址访问信息。**</p>\n</li>\n<li><p><strong>rate</strong> 用于设置最大访问速率，rate=10r/s表示每秒最多处理10个请求，Nginx实际上以毫秒为粒度来跟踪请求信息，因此10r/s实际上是限制：每100毫秒处理一个请求。这意味着，自上一个请求处理完后，若后续100毫秒内又有请求到达，将拒绝处理该请求。</p>\n</li>\n</ul>\n</li>\n<li><p>处理突发流量</p>\n<p>上面例子限制10r/s，如果有时正常流量突然增大，超出的请求将被拒绝，无法处理突发流量。可以结合burst参数使用来解决问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        limit_req zone=myRateLimit burst=20;</span><br><span class=\"line\">        proxy_pass http://my_upstream;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>burst可以理解为突发或者爆发，表示在超过设定的处理速率后能额外处理的请求数。当rate=10r/s时，将1s拆为10份，即每100ms可处理1个请求。</p>\n<p>此外 burst=20,表示若同时有21个请求到达，Nginx会处理第一个请求，剩余20个请求将放入队列中，然后每隔100ms从队列中获取一个请求进行处理。若请求数大于21，将拒绝处理多余的请求，直接返回503.</p>\n<p>不过，单独使用burst参数并不实用，假设burst=50,rate依然为10r/s，排队中的50个请求虽然每100ms会处理一个，但第50个请求却需要等待50*100ms即5s</p>\n<p>因此 burst常常与nodelay一起使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    location /&#123;</span><br><span class=\"line\">        limit_req zone=myRateLimit burst=20 nodelay;</span><br><span class=\"line\">        proxy_pass http://my_upstream;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>nodelay</strong>针对的是burst参数，*<em>burst=20 nodelay *</em> 表示这20个请求立马处理，不能延迟，相当于特事特办，不过即使这20个突发请求立马处理结束，后续来了请求也不会立马处理。burst=20 相当于缓存队列中占2-个坑，即使请求被处理了，这20个位置也只能按100ms一个来释放。</p>\n</li>\n<li><p>限制链接数</p>\n<p>nginx_http_limit_conn_module提供了限制链接数的能力，利用*<em>limit_conn_zone和limit_conn *</em>两个指令。</p>\n<p>下面是官方例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit_conn_zone $binary_remote_addr zone=perip:10m;</span><br><span class=\"line\">limit_conn_zone $server_name zone=perserver:10m;</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    limit_conn perip 10;</span><br><span class=\"line\">    limit_conn perserver 100;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>*<em>limit_conn perip 10 *</em>作用的key是$binary_remote_addr,表示限制单个ip同时最多能持有10个链接。</p>\n<p><strong>limit_conn perserver 100</strong>作用的key是$server_name,表示虚拟主机（server）同时能处理并发链接的总数。</p>\n<p><strong>需要注意的是</strong>：只有当<strong>request header</strong> 被后端server处理后，这个链接才进行计数。</p>\n</li>\n<li><p>设置白名单</p>\n<p>限流主要针对外部访问，内网访问相对安全，可以不做限流，通过设置白名单即可，那么可以利用</p>\n<p>nginx_http_geo_module和ngx_http_map_module两个工具模块来搞定。</p>\n<p>在nginx.conf的http部分中进行配置白名单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">geo $limit&#123;</span><br><span class=\"line\">    default 1;</span><br><span class=\"line\">    10.0.0.0/8 0；</span><br><span class=\"line\">    192.168.0.0/24 0;</span><br><span class=\"line\">    172.20.0.35 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">map $limit $limit_key&#123;</span><br><span class=\"line\">    0 &quot;&quot;;</span><br><span class=\"line\">    1 $binary_remote_addr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">limit_req_zone $limit_key zone=myRateLimit:10m rate=10r/s;</span><br></pre></td></tr></table></figure>\n\n<p><strong>geo</strong>对于白名单（子网或ip都可以）将返回0，其他ip返回1；</p>\n<p><strong>map</strong>将$limit转换为<strong>$limit_key</strong>,如果是<strong>$limit</strong>是0（白名单），则返回空字符串，如果是1，则返回客户端实际ip</p>\n<p><strong>limit_req_zone</strong>限流的key不再使用<strong>$binary_remote_addr</strong>，而是使用<strong>$limit_key</strong>来动态获取值。如果是白名单，limit_req_zone的限流key则为空字符串，<strong>将不会限流</strong>；若不是白名单，将会对客户端真实ip进行限流。</p>\n</li>\n<li><p>限制数据传输速度能力即下载速度</p>\n<p>使用<strong>nginx_http_core_module</strong>来实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /flv/&#123;</span><br><span class=\"line\">    flv；</span><br><span class=\"line\">    limit_rate_after 20m;</span><br><span class=\"line\">    limit_rate 100k;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个限制是针对每个请求的，表示客户端下载前20M时不限速，后续限制100KB/S</p>\n<p>[]: <a href=\"https://toutiao.io/k/r9wf3f\" target=\"_blank\" rel=\"noopener\">https://toutiao.io/k/r9wf3f</a>    “Nginx的两种限流方式”</p>\n<p><strong>TODO:JAVA map实现限流。</strong></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>限流防止重复提交了解下</p>","more":"<p></p>\n<h4 id=\"JAVA做限流\"><a href=\"#JAVA做限流\" class=\"headerlink\" title=\"JAVA做限流\"></a>JAVA做限流</h4><p>在之前的开发中，由于网络等各种原因出现了app端多次提交的情况，这里牵扯到了一个接口的幂等性的问题，同事使用了redis来做限流，防止重复提交。</p>\n<p>记录下。以后用的上。两种方式，一种用map去做，一种用redis去做</p>\n<ul>\n<li><p>定义一个注解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.convergence.support;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.Documented;</span><br><span class=\"line\">import java.lang.annotation.ElementType;</span><br><span class=\"line\">import java.lang.annotation.Retention;</span><br><span class=\"line\">import java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.core.Ordered;</span><br><span class=\"line\">import org.springframework.core.annotation.Order;</span><br><span class=\"line\"></span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(ElementType.METHOD)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">@Order(Ordered.HIGHEST_PRECEDENCE)</span><br><span class=\"line\">public @interface RequestLimit &#123;</span><br><span class=\"line\">\t  /**</span><br><span class=\"line\">     * 允许访问的次数，默认值MAX_VALUE</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int count() default Integer.MAX_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 时间段，单位为毫秒，默认值一分钟</span><br><span class=\"line\">     */</span><br><span class=\"line\">    long time() default 60000;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>redis的方式</p>\n<ul>\n<li><p>定义切面类。进行切面操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.convergence.support.aop;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.aspectj.lang.JoinPoint;</span><br><span class=\"line\">import org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\">import org.aspectj.lang.annotation.Before;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\">import org.springframework.web.context.request.RequestContextHolder;</span><br><span class=\"line\">import org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.convergence.support.RequestLimit;</span><br><span class=\"line\">import com.convergence.support.RequestLimitException;</span><br><span class=\"line\">import com.convergence.support.util.IpUtil;</span><br><span class=\"line\">@Aspect</span><br><span class=\"line\">public class RequestLimitAop &#123;</span><br><span class=\"line\">\tprivate static final Logger logger = LoggerFactory.getLogger(RequestLimitAop.class);</span><br><span class=\"line\">\t@Autowired</span><br><span class=\"line\">\tprivate RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Before(&quot;within(@org.springframework.stereotype.Controller *) &amp;&amp; @annotation(limit)&quot;)</span><br><span class=\"line\">\tpublic void requestLimit(JoinPoint joinPoint, RequestLimit limit) throws RequestLimitException &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tObject[] args = joinPoint.getArgs();</span><br><span class=\"line\">\t\t\tHttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes())</span><br><span class=\"line\">\t\t\t\t\t.getRequest();</span><br><span class=\"line\">\t\t\tString ipAddress = IpUtil.getIpAddress(request);</span><br><span class=\"line\">\t\t\tString url = request.getRequestURL().toString();</span><br><span class=\"line\">\t\t\tString key = &quot;req_limit_&quot;.concat(url).concat(&quot;_&quot;).concat(ipAddress);</span><br><span class=\"line\">\t\t\tboolean checkResult = checkWithRedis(limit, key);</span><br><span class=\"line\">\t\t\tif (!checkResult) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(&quot;requestLimited,&quot; + &quot;[用户ip:&#123;&#125;],[访问地址:&#123;&#125;]超过了限定的次数[&#123;&#125;]次&quot;, ipAddress, url, limit.count());</span><br><span class=\"line\">\t\t\t\tthrow new RequestLimitException();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; catch (RequestLimitException e) &#123;</span><br><span class=\"line\">\t\t\tthrow e;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate boolean checkWithRedis(RequestLimit limit, String key) &#123;</span><br><span class=\"line\">\t\tlong count = redisTemplate.opsForValue().increment(key, 1);</span><br><span class=\"line\">\t\tif (count == 1) &#123;</span><br><span class=\"line\">\t\t\tredisTemplate.expire(key, limit.time(), TimeUnit.MILLISECONDS);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (count &gt; limit.count()) &#123;</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>aop配置 在com.convergence.support.aop下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.muse.config;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.muse.support.aop.RequestLimitAop;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 开启aop 配合自定义注解 RequestLimitAop。</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @author andreby</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableAspectJAutoProxy</span><br><span class=\"line\">@ComponentScan(basePackages = &#123; &quot;com.convergence.support.aop&quot; &#125;)</span><br><span class=\"line\">public class AopConfig &#123;</span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic RequestLimitAop requestLimitAop() &#123;</span><br><span class=\"line\">\t\treturn new RequestLimitAop();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>异常类定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.convergence.support;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 限流异常类</span><br><span class=\"line\"> * @author andreby</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class RequestLimitException extends Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate static final long serialVersionUID = 1L;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic RequestLimitException() &#123;</span><br><span class=\"line\">\t\tsuper(&quot;HTTP请求超出设定的限制&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic StackTraceElement[] getStackTrace() &#123;</span><br><span class=\"line\">\t\treturn super.getStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进行controller的访问控制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.convergence.web.admin;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.stereotype.Controller;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.convergence.support.RequestLimit;</span><br><span class=\"line\"></span><br><span class=\"line\">@RequestMapping(&quot;/aop&quot;)</span><br><span class=\"line\">@Controller</span><br><span class=\"line\">public class AopController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@RequestMapping(value = &quot;/test&quot;)</span><br><span class=\"line\">\t@RequestLimit(count = 2)</span><br><span class=\"line\">\t@ResponseBody</span><br><span class=\"line\">\tpublic String requestLimit(HttpServletRequest request) &#123;</span><br><span class=\"line\">\t\treturn &quot;test&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Nginx做限流\"><a href=\"#Nginx做限流\" class=\"headerlink\" title=\"Nginx做限流\"></a>Nginx做限流</h4><p>nginx提供两种限流方式，一种是控制速率 一种是控制并发连接数</p>\n<ul>\n<li><p>控制速率</p>\n<ul>\n<li><p>正常限流</p>\n<p>ngx_http_limit_req_module模块提供限制请求处理速率能力，使用了漏桶算法（leaky bucket），</p>\n<p>下面的例子使用nginx_limit_req_zone和limit_req两个指令，限制单个ip的请求处理速率</p>\n<p>在nginx.conf http中添加限流配置：</p>\n<p>格式 ：limit_req_zone key zone rate</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">      limit_req_zone $binary_remote_addr zone=myRateLimit:10m rate=10r/s;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置server，使用limit_req指令应用限流：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        limit_req zone=myRateLimit;</span><br><span class=\"line\">        proxy_pass http://my_upstream;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>key：</strong> 定义限流对象，binary_remote_addr 是一种key，表示基于remote_addr（客户端IP）来做限流，</p>\n<p>binary_的目的是压缩内存占用量。</p>\n</li>\n<li><p><strong>zone</strong>:定义共享内存区来存储访问信息，myRateLimit:10m 表示一个大小为10M，名字为myRateLimit的内存区域，1M能存储16000IP地址的访问信息，10M可以存储16Wip地址访问信息。**</p>\n</li>\n<li><p><strong>rate</strong> 用于设置最大访问速率，rate=10r/s表示每秒最多处理10个请求，Nginx实际上以毫秒为粒度来跟踪请求信息，因此10r/s实际上是限制：每100毫秒处理一个请求。这意味着，自上一个请求处理完后，若后续100毫秒内又有请求到达，将拒绝处理该请求。</p>\n</li>\n</ul>\n</li>\n<li><p>处理突发流量</p>\n<p>上面例子限制10r/s，如果有时正常流量突然增大，超出的请求将被拒绝，无法处理突发流量。可以结合burst参数使用来解决问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        limit_req zone=myRateLimit burst=20;</span><br><span class=\"line\">        proxy_pass http://my_upstream;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>burst可以理解为突发或者爆发，表示在超过设定的处理速率后能额外处理的请求数。当rate=10r/s时，将1s拆为10份，即每100ms可处理1个请求。</p>\n<p>此外 burst=20,表示若同时有21个请求到达，Nginx会处理第一个请求，剩余20个请求将放入队列中，然后每隔100ms从队列中获取一个请求进行处理。若请求数大于21，将拒绝处理多余的请求，直接返回503.</p>\n<p>不过，单独使用burst参数并不实用，假设burst=50,rate依然为10r/s，排队中的50个请求虽然每100ms会处理一个，但第50个请求却需要等待50*100ms即5s</p>\n<p>因此 burst常常与nodelay一起使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    location /&#123;</span><br><span class=\"line\">        limit_req zone=myRateLimit burst=20 nodelay;</span><br><span class=\"line\">        proxy_pass http://my_upstream;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>nodelay</strong>针对的是burst参数，*<em>burst=20 nodelay *</em> 表示这20个请求立马处理，不能延迟，相当于特事特办，不过即使这20个突发请求立马处理结束，后续来了请求也不会立马处理。burst=20 相当于缓存队列中占2-个坑，即使请求被处理了，这20个位置也只能按100ms一个来释放。</p>\n</li>\n<li><p>限制链接数</p>\n<p>nginx_http_limit_conn_module提供了限制链接数的能力，利用*<em>limit_conn_zone和limit_conn *</em>两个指令。</p>\n<p>下面是官方例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit_conn_zone $binary_remote_addr zone=perip:10m;</span><br><span class=\"line\">limit_conn_zone $server_name zone=perserver:10m;</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    limit_conn perip 10;</span><br><span class=\"line\">    limit_conn perserver 100;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>*<em>limit_conn perip 10 *</em>作用的key是$binary_remote_addr,表示限制单个ip同时最多能持有10个链接。</p>\n<p><strong>limit_conn perserver 100</strong>作用的key是$server_name,表示虚拟主机（server）同时能处理并发链接的总数。</p>\n<p><strong>需要注意的是</strong>：只有当<strong>request header</strong> 被后端server处理后，这个链接才进行计数。</p>\n</li>\n<li><p>设置白名单</p>\n<p>限流主要针对外部访问，内网访问相对安全，可以不做限流，通过设置白名单即可，那么可以利用</p>\n<p>nginx_http_geo_module和ngx_http_map_module两个工具模块来搞定。</p>\n<p>在nginx.conf的http部分中进行配置白名单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">geo $limit&#123;</span><br><span class=\"line\">    default 1;</span><br><span class=\"line\">    10.0.0.0/8 0；</span><br><span class=\"line\">    192.168.0.0/24 0;</span><br><span class=\"line\">    172.20.0.35 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">map $limit $limit_key&#123;</span><br><span class=\"line\">    0 &quot;&quot;;</span><br><span class=\"line\">    1 $binary_remote_addr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">limit_req_zone $limit_key zone=myRateLimit:10m rate=10r/s;</span><br></pre></td></tr></table></figure>\n\n<p><strong>geo</strong>对于白名单（子网或ip都可以）将返回0，其他ip返回1；</p>\n<p><strong>map</strong>将$limit转换为<strong>$limit_key</strong>,如果是<strong>$limit</strong>是0（白名单），则返回空字符串，如果是1，则返回客户端实际ip</p>\n<p><strong>limit_req_zone</strong>限流的key不再使用<strong>$binary_remote_addr</strong>，而是使用<strong>$limit_key</strong>来动态获取值。如果是白名单，limit_req_zone的限流key则为空字符串，<strong>将不会限流</strong>；若不是白名单，将会对客户端真实ip进行限流。</p>\n</li>\n<li><p>限制数据传输速度能力即下载速度</p>\n<p>使用<strong>nginx_http_core_module</strong>来实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /flv/&#123;</span><br><span class=\"line\">    flv；</span><br><span class=\"line\">    limit_rate_after 20m;</span><br><span class=\"line\">    limit_rate 100k;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个限制是针对每个请求的，表示客户端下载前20M时不限速，后续限制100KB/S</p>\n<p>[]: <a href=\"https://toutiao.io/k/r9wf3f\" target=\"_blank\" rel=\"noopener\">https://toutiao.io/k/r9wf3f</a>    “Nginx的两种限流方式”</p>\n<p><strong>TODO:JAVA map实现限流。</strong></p>\n</li>\n</ul>"},{"title":"记录下Apache Storm","date":"2017-12-03T12:46:50.000Z","_content":"\n简单记录下Storm<!--more-->","source":"_posts/记录下Apache-Storm.md","raw":"---\ntitle: 记录下Apache Storm\ndate: 2017-12-03 20:46:50\ntags: [Apache Storm]\ncategories: [大数据,实时计算]\n---\n\n简单记录下Storm<!--more-->","slug":"记录下Apache-Storm","published":1,"updated":"2022-09-03T07:30:55.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz8ds006ztwfazkvc6yts","content":"<p>简单记录下Storm<a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<p>简单记录下Storm</p>","more":"<p></p>"},{"title":"Java8点拨","date":"2018-08-04T02:30:52.000Z","_content":"\njava8的一些知识点的记录，写的比较糙，能理解就ok<!--more-->\n\n#### Lambda表达式\n\n* lambda表达式可以有零个，一个或者多个参数\n* 可以显式声明参数的类型，也可以从上下中推断参数类型\n* 多个参数必须包含在括号中，并用逗号分隔，空括号用于表示零个参数\n* 当只有一个参数时，如果推断它的类型，可以不用括号\n* lambda表达式的函数体可以包含零个，一个或者多个语句\n* 如果lambda表达式函数提只有一行，那么就可以不用大括号，匿名函数的返回类型与函数体表达式的返回类型相同。当函数提中大于一行代码则需要用大括号包含。\n* 谓词复合，用于多条件判断。\n  * negate  Predicate的非\n  * and Predicate的与\n  * or predicate的或\n* 函数复合,用于Fuction接口所代表的Lambda表达式的符合\n  * andThen 很明了的函数，aExpression.andThen(bExpression）相当于 数学上的 b(a(x))\n  * compose aExpression.compose(bExpression) 相当于数学上的  a（b(x)）\n\n***\n\n#### 函数式编程中的方法引用。\n\n| 方法引用                                     | 描述                                   | 示例                                     |\n| -------------------------------------------- | -------------------------------------- | ---------------------------------------- |\n| 静态方法引用                                 | 用于引用类的静态方法                   | Math::max等于原先的Math.max（）          |\n| 实例对象引用方法                             | 使用实例对象引用来调用实例方法         | System.out::println=System.out.println() |\n| 从类中引用实例方法（其实还是实例调用方法吧） | 在上下文提供的对象的医用上调用实例方法 | String::length相当于str.length           |\n| 引用构造函数                                 | 引用构造函数，创建实例对象             | HashMap：：new 等于 new  HashMap()       |\n\n这些方法引用其实在函数式编程语言 Rust 中都已经存在，lisp中也有。\n\n***\n\n#### 默认方法与静态方法：\n\n接口新增了default方法和static方法。\n\n* 静态方法，只能通过接口调用，不可以通过实现类的类名或实现类的实例进行调用。最简单的提供工厂的实现功能。\n\n  ```\n  package com.space.default_method;\n  \n  public interface Caculate {\n  \tint add(int a, int b);\n  \n  \tint subtract(int a, int b);\n  \n  \tint divide(int a, int b);\n  \n  \tint muti(int a, int b);\n  \t\n  \tdefault int mod (int a , int b ) {\n  \t\treturn a%b;\n  \t}\n  \tpublic static Caculate getCaculateImplInstance() {\n  \t\treturn new CaculateImpl();\n  \t}\n  }\n  ```\n\n  \n\n* 默认方法，只能通过接口的实现类来调用,可以避免新的功能添加導致对现有功能的困扰。方便api的演进\n\n  ```\n  package com.space.default_method;\n  \n  public interface Caculate {\n  \tint add(int a, int b);\n  \n  \tint subtract(int a, int b);\n  \n  \tint divide(int a, int b);\n  \n  \tint muti(int a, int b);\n  \t\n  \tdefault int mod (int a , int b ) {\n  \t\treturn a%b;\n  \t}\n  }\n  ```\n\n  ```\n  package com.space.default_method;\n  \n  public class CaculateImpl implements Caculate {\n  \n  \t@Override\n  \tpublic int add(int a, int b) {\n  \t\treturn a+b;\n  \t}\n  \n  \t@Override\n  \tpublic int subtract(int a, int b) {\n  \t\t// TODO Auto-generated method stub\n  \t\treturn a-b;\t}\n  \n  \t@Override\n  \tpublic int divide(int a, int b) {\n  \t\t// TODO Auto-generated method stub\n  \t\treturn a/b;\n  \t}\n  \n  \t@Override\n  \tpublic int muti(int a, int b) {\n  \t\treturn a*b;\n  \t}\n  \tpublic static void main(String[] args) {\n  \t\tCaculate caculate  = new CaculateImpl();\n  \t\tint mod = caculate.mod(100, 3);\n  \t\tSystem.out.println(mod);\n  \t}\n  \n  }\n  ```\n\n  **PS:** 接口冲突，方法冲突 的解决：\n\n  * 类中的方法优先级别最高，类或者父类中的声明的方法优先级高于任何声明为默认的方法的优先级\n  * 如果无法通过上述条件进行判断，那么子类接口的优先级更高，函数签名相同时，优先选择拥有最具体实现的默认方法的接口，\n  * 如果上述条件还是无法判断的话，继承多个接口的类必须通过显式覆盖和调用期望的方法，显式的选择使用哪一个默认方法的实现。\n\n#### 函数式接口\n\n* 函数式接口也称作单例抽象方法接口（SAM接口），**接口中只允许一个抽象方法**,@FunctionalInterface注解会在你注解的接口违反函数式几口的约定时提示一个编译错误。\n\n```\n@FunctionalInterface\npublic interface  MyFunctionalInterface {\n    public void firstFunction（）；\n}\n```\n\n***\n\n* 常用函数式接口\n\n  * Predicate函数式接口:功能判断输入的对象是否符合某个条件。官方文档解释到：``Determines if the input object matches some criteria``\n\n    原始类型特化：IntPredicate,LongPredicate, DoublePredicate \n\n    ```\n    /*\n     * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.\n     * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n     */\n    package java.util.function;\n    \n    import java.util.Objects;\n    \n    /**\n     * Represents a predicate (boolean-valued function) of one argument.\n     *\n     * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n     * whose functional method is {@link #test(Object)}.\n     *\n     * @param <T> the type of the input to the predicate\n     *\n     * @since 1.8\n     */\n    @FunctionalInterface\n    public interface Predicate<T> {\n    \n        /**\n         * Evaluates this predicate on the given argument.\n         *\n         * @param t the input argument\n         * @return {@code true} if the input argument matches the predicate,\n         * otherwise {@code false}\n         */\n        boolean test(T t);\n    \n        /**\n         * Returns a composed predicate that represents a short-circuiting logical\n         * AND of this predicate and another.  When evaluating the composed\n         * predicate, if this predicate is {@code false}, then the {@code other}\n         * predicate is not evaluated.\n         *\n         * <p>Any exceptions thrown during evaluation of either predicate are relayed\n         * to the caller; if evaluation of this predicate throws an exception, the\n         * {@code other} predicate will not be evaluated.\n         *\n         * @param other a predicate that will be logically-ANDed with this\n         *              predicate\n         * @return a composed predicate that represents the short-circuiting logical\n         * AND of this predicate and the {@code other} predicate\n         * @throws NullPointerException if other is null\n         */\n        default Predicate<T> and(Predicate<? super T> other) {\n            Objects.requireNonNull(other);\n            return (t) -> test(t) && other.test(t);\n        }\n    \n        /**\n         * Returns a predicate that represents the logical negation of this\n         * predicate.\n         *\n         * @return a predicate that represents the logical negation of this\n         * predicate\n         */\n        default Predicate<T> negate() {\n            return (t) -> !test(t);\n        }\n    \n        /**\n         * Returns a composed predicate that represents a short-circuiting logical\n         * OR of this predicate and another.  When evaluating the composed\n         * predicate, if this predicate is {@code true}, then the {@code other}\n         * predicate is not evaluated.\n         *\n         * <p>Any exceptions thrown during evaluation of either predicate are relayed\n         * to the caller; if evaluation of this predicate throws an exception, the\n         * {@code other} predicate will not be evaluated.\n         *\n         * @param other a predicate that will be logically-ORed with this\n         *              predicate\n         * @return a composed predicate that represents the short-circuiting logical\n         * OR of this predicate and the {@code other} predicate\n         * @throws NullPointerException if other is null\n         */\n        default Predicate<T> or(Predicate<? super T> other) {\n            Objects.requireNonNull(other);\n            return (t) -> test(t) || other.test(t);\n        }\n    \n        /**\n         * Returns a predicate that tests if two arguments are equal according\n         * to {@link Objects#equals(Object, Object)}.\n         *\n         * @param <T> the type of arguments to the predicate\n         * @param targetRef the object reference with which to compare for equality,\n         *               which may be {@code null}\n         * @return a predicate that tests if two arguments are equal according\n         * to {@link Objects#equals(Object, Object)}\n         */\n        static <T> Predicate<T> isEqual(Object targetRef) {\n            return (null == targetRef)\n                    ? Objects::isNull\n                    : object -> targetRef.equals(object);\n        }\n    }\n    \n    ```\n\n  * Consumer函数式接口： **表示一个接受单个输入参数并且没有返回值的操作**。不像其它函数式接口，Consumer 接口期望执行带有副作用的操作 (Consumer 的操作可能会更改输入参数的内部状态)。官方文档：``An operation which accepts a single input argument and returns no result. Unlike most other functional interfaces, Consumer is expected to operate via side-effects.`` 也就是void。\n\n    原始类型特化:\n\n    IntConsumer,LongConsumer, DoubleConsumer \n\n    ````\n    /*\n     * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.\n     * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n     */\n    package java.util.function;\n    \n    import java.util.Objects;\n    \n    /**\n     * Represents an operation that accepts a single input argument and returns no\n     * result. Unlike most other functional interfaces, {@code Consumer} is expected\n     * to operate via side-effects.\n     *\n     * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n     * whose functional method is {@link #accept(Object)}.\n     *\n     * @param <T> the type of the input to the operation\n     *\n     * @since 1.8\n     */\n    @FunctionalInterface\n    public interface Consumer<T> {\n    \n        /**\n         * Performs this operation on the given argument.\n         *\n         * @param t the input argument\n         */\n        void accept(T t);\n    \n        /**\n         * Returns a composed {@code Consumer} that performs, in sequence, this\n         * operation followed by the {@code after} operation. If performing either\n         * operation throws an exception, it is relayed to the caller of the\n         * composed operation.  If performing this operation throws an exception,\n         * the {@code after} operation will not be performed.\n         *\n         * @param after the operation to perform after this operation\n         * @return a composed {@code Consumer} that performs in sequence this\n         * operation followed by the {@code after} operation\n         * @throws NullPointerException if {@code after} is null\n         */\n        default Consumer<T> andThen(Consumer<? super T> after) {\n            Objects.requireNonNull(after);\n            return (T t) -> { accept(t); after.accept(t); };\n        }\n    }\n    \n    ````\n\n  * Supplier 函数式接口：顾名思义，就是提供者的意思，可以简单理解为工厂，**不接收参数，只提供返回值**\n\n    ````\n    /*\n     * Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.\n     * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n     */\n    package java.util.function;\n    \n    /**\n     * Represents a supplier of results.\n     *\n     * <p>There is no requirement that a new or distinct result be returned each\n     * time the supplier is invoked.\n     *\n     * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n     * whose functional method is {@link #get()}.\n     *\n     * @param <T> the type of results supplied by this supplier\n     *\n     * @since 1.8\n     */\n    @FunctionalInterface\n    public interface Supplier<T> {\n    \n        /**\n         * Gets a result.\n         *\n         * @return a result\n         */\n        T get();\n    }\n    \n    ````\n\n  * Function函数式接口：**接受一定数量的参数 同时提供一个返回结果**  ,\n\n    原始类型特化：\n\n    `IntFunction<R>, IntToDoubleFunction,`  `IntToLongFunction, LongFunction<R>,`  `LongToDoubleFunction, LongToIntFunction,`  `DoubleFunction<R>, ToIntFunction<T>,`  `ToDoubleFunction<T>, ToLongFunction<T>` \n\n    ```\n    /*\n     * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.\n     * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n     */\n    package java.util.function;\n    \n    import java.util.Objects;\n    \n    /**\n     * Represents a function that accepts one argument and produces a result.\n     *\n     * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n     * whose functional method is {@link #apply(Object)}.\n     *\n     * @param <T> the type of the input to the function\n     * @param <R> the type of the result of the function\n     *\n     * @since 1.8\n     */\n    @FunctionalInterface\n    public interface Function<T, R> {\n    \n        /**\n         * Applies this function to the given argument.\n         *\n         * @param t the function argument\n         * @return the function result\n         */\n        R apply(T t);\n    \n        /**\n         * Returns a composed function that first applies the {@code before}\n         * function to its input, and then applies this function to the result.\n         * If evaluation of either function throws an exception, it is relayed to\n         * the caller of the composed function.\n         *\n         * @param <V> the type of input to the {@code before} function, and to the\n         *           composed function\n         * @param before the function to apply before this function is applied\n         * @return a composed function that first applies the {@code before}\n         * function and then applies this function\n         * @throws NullPointerException if before is null\n         *\n         * @see #andThen(Function)\n         */\n        default <V> Function<V, R> compose(Function<? super V, ? extends T> before) {\n            Objects.requireNonNull(before);\n            return (V v) -> apply(before.apply(v));\n        }\n    \n        /**\n         * Returns a composed function that first applies this function to\n         * its input, and then applies the {@code after} function to the result.\n         * If evaluation of either function throws an exception, it is relayed to\n         * the caller of the composed function.\n         *\n         * @param <V> the type of output of the {@code after} function, and of the\n         *           composed function\n         * @param after the function to apply after this function is applied\n         * @return a composed function that first applies this function and then\n         * applies the {@code after} function\n         * @throws NullPointerException if after is null\n         *\n         * @see #compose(Function)\n         */\n        default <V> Function<T, V> andThen(Function<? super R, ? extends V> after) {\n            Objects.requireNonNull(after);\n            return (T t) -> after.apply(apply(t));\n        }\n    \n        /**\n         * Returns a function that always returns its input argument.\n         *\n         * @param <T> the type of the input and output objects to the function\n         * @return a function that always returns its input argument\n         */\n        static <T> Function<T, T> identity() {\n            return t -> t;\n        }\n    }\n    \n    ```\n\n  * Operator函数式接口:  运算符函数接口，有``UnaryOperator<T>和``BinaryOperator<T>``这两个接口。只有一个泛型，那么意思就是说 入参和返回只有一种类型。\n\n    ```\n    /**\n    * UnaryOperator 接收一个参数 返回同类型结果。\n    */\n        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6);\n        UnaryOperator<Integer> unaryOpt = i -> i * i;\n        unaryOperatorFun(unaryOpt, list).forEach(x -> {\n        System.out.println(x);\n    });\n    private static List<Integer> unaryOperatorFun(UnaryOperator<Integer> unaryOpt, List<Integer> list) {\n        List<Integer> uniList = new ArrayList<>();\n        list.forEach(i -> uniList.add(unaryOpt.apply(i)));\n        return uniList;\n    }\n    /**\n     * BinaryOperator\n     */\n    Map<String, String> map = new HashMap();\n    map.put(\"1\", \"23\");\n    map.put(\"12\", \"2365\");\n    map.put(\"13\", \"231\");\n    map.put(\"14\", \"232\");\n    BinaryOperator<String> bo = (s1, s2) -> s1 + s2;\n    binaryOperatorFun(bo, map).forEach(x->System.out.println(x));\n    \n    private static List<String> binaryOperatorFun(BinaryOperator<String> bo, Map<String, String> map) {\n        List<String> result = new ArrayList<>();\n        map.forEach((s1,s2)->result.add(bo.apply(s1, s2)));\n        return result;\n    }\n    ```\n\n#### Optional\n\n很像Rust中的Option\n\n````\n/*\n * Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n */\npackage java.util;\n\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.function.Supplier;\n\n/**\n * A container object which may or may not contain a non-null value.\n * If a value is present, {@code isPresent()} will return {@code true} and\n * {@code get()} will return the value.\n *\n * <p>Additional methods that depend on the presence or absence of a contained\n * value are provided, such as {@link #orElse(java.lang.Object) orElse()}\n * (return a default value if value not present) and\n * {@link #ifPresent(java.util.function.Consumer) ifPresent()} (execute a block\n * of code if the value is present).\n *\n * <p>This is a <a href=\"../lang/doc-files/ValueBased.html\">value-based</a>\n * class; use of identity-sensitive operations (including reference equality\n * ({@code ==}), identity hash code, or synchronization) on instances of\n * {@code Optional} may have unpredictable results and should be avoided.\n *\n * @since 1.8\n */\npublic final class Optional<T> {\n    /**\n     * Common instance for {@code empty()}.\n     */\n    private static final Optional<?> EMPTY = new Optional<>();\n\n    /**\n     * If non-null, the value; if null, indicates no value is present\n     */\n    private final T value;\n\n    /**\n     * Constructs an empty instance.\n     *\n     * @implNote Generally only one empty instance, {@link Optional#EMPTY},\n     * should exist per VM.\n     */\n    private Optional() {\n        this.value = null;\n    }\n\n    /**\n     * Returns an empty {@code Optional} instance.  No value is present for this\n     * Optional.\n     *\n     * @apiNote Though it may be tempting to do so, avoid testing if an object\n     * is empty by comparing with {@code ==} against instances returned by\n     * {@code Option.empty()}. There is no guarantee that it is a singleton.\n     * Instead, use {@link #isPresent()}.\n     *\n     * @param <T> Type of the non-existent value\n     * @return an empty {@code Optional}\n     */\n    public static<T> Optional<T> empty() {\n        @SuppressWarnings(\"unchecked\")\n        Optional<T> t = (Optional<T>) EMPTY;\n        return t;\n    }\n\n    /**\n     * Constructs an instance with the value present.\n     *\n     * @param value the non-null value to be present\n     * @throws NullPointerException if value is null\n     */\n    private Optional(T value) {\n        this.value = Objects.requireNonNull(value);\n    }\n\n    /**\n     * Returns an {@code Optional} with the specified present non-null value.\n     *\n     * @param <T> the class of the value\n     * @param value the value to be present, which must be non-null\n     * @return an {@code Optional} with the value present\n     * @throws NullPointerException if value is null\n     */\n    public static <T> Optional<T> of(T value) {\n        return new Optional<>(value);\n    }\n\n    /**\n     * Returns an {@code Optional} describing the specified value, if non-null,\n     * otherwise returns an empty {@code Optional}.\n     *\n     * @param <T> the class of the value\n     * @param value the possibly-null value to describe\n     * @return an {@code Optional} with a present value if the specified value\n     * is non-null, otherwise an empty {@code Optional}\n     */\n    public static <T> Optional<T> ofNullable(T value) {\n        return value == null ? empty() : of(value);\n    }\n\n    /**\n     * If a value is present in this {@code Optional}, returns the value,\n     * otherwise throws {@code NoSuchElementException}.\n     *\n     * @return the non-null value held by this {@code Optional}\n     * @throws NoSuchElementException if there is no value present\n     *\n     * @see Optional#isPresent()\n     */\n    public T get() {\n        if (value == null) {\n            throw new NoSuchElementException(\"No value present\");\n        }\n        return value;\n    }\n\n    /**\n     * Return {@code true} if there is a value present, otherwise {@code false}.\n     *\n     * @return {@code true} if there is a value present, otherwise {@code false}\n     */\n    public boolean isPresent() {\n        return value != null;\n    }\n\n    /**\n     * If a value is present, invoke the specified consumer with the value,\n     * otherwise do nothing.\n     *\n     * @param consumer block to be executed if a value is present\n     * @throws NullPointerException if value is present and {@code consumer} is\n     * null\n     */\n    public void ifPresent(Consumer<? super T> consumer) {\n        if (value != null)\n            consumer.accept(value);\n    }\n\n    /**\n     * If a value is present, and the value matches the given predicate,\n     * return an {@code Optional} describing the value, otherwise return an\n     * empty {@code Optional}.\n     *\n     * @param predicate a predicate to apply to the value, if present\n     * @return an {@code Optional} describing the value of this {@code Optional}\n     * if a value is present and the value matches the given predicate,\n     * otherwise an empty {@code Optional}\n     * @throws NullPointerException if the predicate is null\n     */\n    public Optional<T> filter(Predicate<? super T> predicate) {\n        Objects.requireNonNull(predicate);\n        if (!isPresent())\n            return this;\n        else\n            return predicate.test(value) ? this : empty();\n    }\n\n    /**\n     * If a value is present, apply the provided mapping function to it,\n     * and if the result is non-null, return an {@code Optional} describing the\n     * result.  Otherwise return an empty {@code Optional}.\n     *\n     * @apiNote This method supports post-processing on optional values, without\n     * the need to explicitly check for a return status.  For example, the\n     * following code traverses a stream of file names, selects one that has\n     * not yet been processed, and then opens that file, returning an\n     * {@code Optional<FileInputStream>}:\n     *\n     * <pre>{@code\n     *     Optional<FileInputStream> fis =\n     *         names.stream().filter(name -> !isProcessedYet(name))\n     *                       .findFirst()\n     *                       .map(name -> new FileInputStream(name));\n     * }</pre>\n     *\n     * Here, {@code findFirst} returns an {@code Optional<String>}, and then\n     * {@code map} returns an {@code Optional<FileInputStream>} for the desired\n     * file if one exists.\n     *\n     * @param <U> The type of the result of the mapping function\n     * @param mapper a mapping function to apply to the value, if present\n     * @return an {@code Optional} describing the result of applying a mapping\n     * function to the value of this {@code Optional}, if a value is present,\n     * otherwise an empty {@code Optional}\n     * @throws NullPointerException if the mapping function is null\n     */\n    public<U> Optional<U> map(Function<? super T, ? extends U> mapper) {\n        Objects.requireNonNull(mapper);\n        if (!isPresent())\n            return empty();\n        else {\n            return Optional.ofNullable(mapper.apply(value));\n        }\n    }\n\n    /**\n     * If a value is present, apply the provided {@code Optional}-bearing\n     * mapping function to it, return that result, otherwise return an empty\n     * {@code Optional}.  This method is similar to {@link #map(Function)},\n     * but the provided mapper is one whose result is already an {@code Optional},\n     * and if invoked, {@code flatMap} does not wrap it with an additional\n     * {@code Optional}.\n     *\n     * @param <U> The type parameter to the {@code Optional} returned by\n     * @param mapper a mapping function to apply to the value, if present\n     *           the mapping function\n     * @return the result of applying an {@code Optional}-bearing mapping\n     * function to the value of this {@code Optional}, if a value is present,\n     * otherwise an empty {@code Optional}\n     * @throws NullPointerException if the mapping function is null or returns\n     * a null result\n     */\n    public<U> Optional<U> flatMap(Function<? super T, Optional<U>> mapper) {\n        Objects.requireNonNull(mapper);\n        if (!isPresent())\n            return empty();\n        else {\n            return Objects.requireNonNull(mapper.apply(value));\n        }\n    }\n\n    /**\n     * Return the value if present, otherwise return {@code other}.\n     *\n     * @param other the value to be returned if there is no value present, may\n     * be null\n     * @return the value, if present, otherwise {@code other}\n     */\n    public T orElse(T other) {\n        return value != null ? value : other;\n    }\n\n    /**\n     * Return the value if present, otherwise invoke {@code other} and return\n     * the result of that invocation.\n     *\n     * @param other a {@code Supplier} whose result is returned if no value\n     * is present\n     * @return the value if present otherwise the result of {@code other.get()}\n     * @throws NullPointerException if value is not present and {@code other} is\n     * null\n     */\n    public T orElseGet(Supplier<? extends T> other) {\n        return value != null ? value : other.get();\n    }\n\n    /**\n     * Return the contained value, if present, otherwise throw an exception\n     * to be created by the provided supplier.\n     *\n     * @apiNote A method reference to the exception constructor with an empty\n     * argument list can be used as the supplier. For example,\n     * {@code IllegalStateException::new}\n     *\n     * @param <X> Type of the exception to be thrown\n     * @param exceptionSupplier The supplier which will return the exception to\n     * be thrown\n     * @return the present value\n     * @throws X if there is no value present\n     * @throws NullPointerException if no value is present and\n     * {@code exceptionSupplier} is null\n     */\n    public <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier) throws X {\n        if (value != null) {\n            return value;\n        } else {\n            throw exceptionSupplier.get();\n        }\n    }\n\n    /**\n     * Indicates whether some other object is \"equal to\" this Optional. The\n     * other object is considered equal if:\n     * <ul>\n     * <li>it is also an {@code Optional} and;\n     * <li>both instances have no value present or;\n     * <li>the present values are \"equal to\" each other via {@code equals()}.\n     * </ul>\n     *\n     * @param obj an object to be tested for equality\n     * @return {code true} if the other object is \"equal to\" this object\n     * otherwise {@code false}\n     */\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n\n        if (!(obj instanceof Optional)) {\n            return false;\n        }\n\n        Optional<?> other = (Optional<?>) obj;\n        return Objects.equals(value, other.value);\n    }\n\n    /**\n     * Returns the hash code value of the present value, if any, or 0 (zero) if\n     * no value is present.\n     *\n     * @return hash code value of the present value or 0 if no value is present\n     */\n    @Override\n    public int hashCode() {\n        return Objects.hashCode(value);\n    }\n\n    /**\n     * Returns a non-empty string representation of this Optional suitable for\n     * debugging. The exact presentation format is unspecified and may vary\n     * between implementations and versions.\n     *\n     * @implSpec If a value is present the result must include its string\n     * representation in the result. Empty and present Optionals must be\n     * unambiguously differentiable.\n     *\n     * @return the string representation of this instance\n     */\n    @Override\n    public String toString() {\n        return value != null\n            ? String.format(\"Optional[%s]\", value)\n            : \"Optional.empty\";\n    }\n}    \t\n````\n\n* 创建Optional对象\n\n  * 声明一个空的Optional对象 \n\n    ```\n    Optional<Car> optCar = Optional.empty()；\n    ```\n\n  * 创建一个有值的Optional如果你赋值为 null，则会抛出空指针异常。 如果值是 null，则目标 Optional 对象将会是空 (记得值是 absent，不是 null)。 \n\n    ```\n    Optional<Car> optCar = Optional.of(car)；\n    ```\n\n  * 可接受null值的Optional的创建\n\n    ```\n    Optional<Car> optCar = Optional.ofNullable(car);\n    ```\n\n* 使用map从Optional中提取和转换值\n\n       Optional<Project> ppp = Optional.of(pp);\n       Optional<Optional<String>> map2 = ppp.map(Project::getAuth);\n       Optional<String> autss = map2.get();\n   ````\n   Optional<Person> optPerson = Optional.ofNullable(person）;\n   \n   Optional<Car> optcar=optPerson.map(Person::getCar);\n   ````\n\n* 使用flatMap链接Optional对象,用于处理嵌套的optional,流\n\n  ```\n  OptionalPerson> optPerson = Optional.ofNullable(person）;\n  Optional<Wheel> optw=optPerson.flatMap（Person::getCar）.map(Car::getWheel());\n  ```\n\n* 默认行为及解引用Optional对象。\n\n  * ``get()``获取封装的变量，或者抛出NoSuchElementException();\n  * ``orElse(T other)``如果Optional对象中不包含值时可以进行提供一个默认值\n  * ``orElseGet（Supplier<? extends T> other）``是orElse的延迟嗲用版，Supplier只有在Optional中不含值的时候才执行调用\n  * ``orElseThrow（Supplier<? extends X> exceptionSupplier）``和get方法相似，只不过在遭遇对象元素为空的时候会抛出异常，可以定制异常。\n  * ``ifPresent(Consumer <? Super T>)`` 在变量值存在时执行一个作为参数传入的方法。否则不做任何操作。\n\n* 使用filter剔除特定的值\n\n   ```\n   Optional<String> optt = Optional.of(\"123\");\n   optt.filter(s1->\"123\".equals(s1)).ifPresent(x->System.out.println(x));\n   ```\n\n* 以下情况不使用Optional:\n\n   * in the domain model layer (it’s not serializable) \n   * in DTOs (it’s not serializable) \n   * in input parameters of methods \n   * in constructor parameters \n\n* 何时使用Optional\n\n   **当函数的返回值有可能是 null 时，我们应该尽可能地去使用它.**\n\n####  流\n\n```\n\npackage java.util.stream;\n\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.Spliterator;\nimport java.util.Spliterators;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport java.util.function.BinaryOperator;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.IntFunction;\nimport java.util.function.Predicate;\nimport java.util.function.Supplier;\nimport java.util.function.ToDoubleFunction;\nimport java.util.function.ToIntFunction;\nimport java.util.function.ToLongFunction;\nimport java.util.function.UnaryOperator;\n\n/**\n * A sequence of elements supporting sequential and parallel aggregate\n * operations.  The following example illustrates an aggregate operation using\n * {@link Stream} and {@link IntStream}:\n *\n * <pre>{@code\n *     int sum = widgets.stream()\n *                      .filter(w -> w.getColor() == RED)\n *                      .mapToInt(w -> w.getWeight())\n *                      .sum();\n * }</pre>\n *\n * In this example, {@code widgets} is a {@code Collection<Widget>}.  We create\n * a stream of {@code Widget} objects via {@link Collection#stream Collection.stream()},\n * filter it to produce a stream containing only the red widgets, and then\n * transform it into a stream of {@code int} values representing the weight of\n * each red widget. Then this stream is summed to produce a total weight.\n *\n * <p>In addition to {@code Stream}, which is a stream of object references,\n * there are primitive specializations for {@link IntStream}, {@link LongStream},\n * and {@link DoubleStream}, all of which are referred to as \"streams\" and\n * conform to the characteristics and restrictions described here.\n *\n * <p>To perform a computation, stream\n * <a href=\"package-summary.html#StreamOps\">operations</a> are composed into a\n * <em>stream pipeline</em>.  A stream pipeline consists of a source (which\n * might be an array, a collection, a generator function, an I/O channel,\n * etc), zero or more <em>intermediate operations</em> (which transform a\n * stream into another stream, such as {@link Stream#filter(Predicate)}), and a\n * <em>terminal operation</em> (which produces a result or side-effect, such\n * as {@link Stream#count()} or {@link Stream#forEach(Consumer)}).\n * Streams are lazy; computation on the source data is only performed when the\n * terminal operation is initiated, and source elements are consumed only\n * as needed.\n *\n * <p>Collections and streams, while bearing some superficial similarities,\n * have different goals.  Collections are primarily concerned with the efficient\n * management of, and access to, their elements.  By contrast, streams do not\n * provide a means to directly access or manipulate their elements, and are\n * instead concerned with declaratively describing their source and the\n * computational operations which will be performed in aggregate on that source.\n * However, if the provided stream operations do not offer the desired\n * functionality, the {@link #iterator()} and {@link #spliterator()} operations\n * can be used to perform a controlled traversal.\n *\n * <p>A stream pipeline, like the \"widgets\" example above, can be viewed as\n * a <em>query</em> on the stream source.  Unless the source was explicitly\n * designed for concurrent modification (such as a {@link ConcurrentHashMap}),\n * unpredictable or erroneous behavior may result from modifying the stream\n * source while it is being queried.\n *\n * <p>Most stream operations accept parameters that describe user-specified\n * behavior, such as the lambda expression {@code w -> w.getWeight()} passed to\n * {@code mapToInt} in the example above.  To preserve correct behavior,\n * these <em>behavioral parameters</em>:\n * <ul>\n * <li>must be <a href=\"package-summary.html#NonInterference\">non-interfering</a>\n * (they do not modify the stream source); and</li>\n * <li>in most cases must be <a href=\"package-summary.html#Statelessness\">stateless</a>\n * (their result should not depend on any state that might change during execution\n * of the stream pipeline).</li>\n * </ul>\n *\n * <p>Such parameters are always instances of a\n * <a href=\"../function/package-summary.html\">functional interface</a> such\n * as {@link java.util.function.Function}, and are often lambda expressions or\n * method references.  Unless otherwise specified these parameters must be\n * <em>non-null</em>.\n *\n * <p>A stream should be operated on (invoking an intermediate or terminal stream\n * operation) only once.  This rules out, for example, \"forked\" streams, where\n * the same source feeds two or more pipelines, or multiple traversals of the\n * same stream.  A stream implementation may throw {@link IllegalStateException}\n * if it detects that the stream is being reused. However, since some stream\n * operations may return their receiver rather than a new stream object, it may\n * not be possible to detect reuse in all cases.\n *\n * <p>Streams have a {@link #close()} method and implement {@link AutoCloseable},\n * but nearly all stream instances do not actually need to be closed after use.\n * Generally, only streams whose source is an IO channel (such as those returned\n * by {@link Files#lines(Path, Charset)}) will require closing.  Most streams\n * are backed by collections, arrays, or generating functions, which require no\n * special resource management.  (If a stream does require closing, it can be\n * declared as a resource in a {@code try}-with-resources statement.)\n *\n * <p>Stream pipelines may execute either sequentially or in\n * <a href=\"package-summary.html#Parallelism\">parallel</a>.  This\n * execution mode is a property of the stream.  Streams are created\n * with an initial choice of sequential or parallel execution.  (For example,\n * {@link Collection#stream() Collection.stream()} creates a sequential stream,\n * and {@link Collection#parallelStream() Collection.parallelStream()} creates\n * a parallel one.)  This choice of execution mode may be modified by the\n * {@link #sequential()} or {@link #parallel()} methods, and may be queried with\n * the {@link #isParallel()} method.\n *\n * @param <T> the type of the stream elements\n * @since 1.8\n * @see IntStream\n * @see LongStream\n * @see DoubleStream\n * @see <a href=\"package-summary.html\">java.util.stream</a>\n */\npublic interface Stream<T> extends BaseStream<T, Stream<T>> {\n\n    /**\n     * Returns a stream consisting of the elements of this stream that match\n     * the given predicate.\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                  predicate to apply to each element to determine if it\n     *                  should be included\n     * @return the new stream\n     */\n    Stream<T> filter(Predicate<? super T> predicate);\n\n    /**\n     * Returns a stream consisting of the results of applying the given\n     * function to the elements of this stream.\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @param <R> The element type of the new stream\n     * @param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *               <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *               function to apply to each element\n     * @return the new stream\n     */\n    <R> Stream<R> map(Function<? super T, ? extends R> mapper);\n\n    /**\n     * Returns an {@code IntStream} consisting of the results of applying the\n     * given function to the elements of this stream.\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">\n     *     intermediate operation</a>.\n     *\n     * @param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *               <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *               function to apply to each element\n     * @return the new stream\n     */\n    IntStream mapToInt(ToIntFunction<? super T> mapper);\n\n    /**\n     * Returns a {@code LongStream} consisting of the results of applying the\n     * given function to the elements of this stream.\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *               <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *               function to apply to each element\n     * @return the new stream\n     */\n    LongStream mapToLong(ToLongFunction<? super T> mapper);\n\n    /**\n     * Returns a {@code DoubleStream} consisting of the results of applying the\n     * given function to the elements of this stream.\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *               <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *               function to apply to each element\n     * @return the new stream\n     */\n    DoubleStream mapToDouble(ToDoubleFunction<? super T> mapper);\n\n    /**\n     * Returns a stream consisting of the results of replacing each element of\n     * this stream with the contents of a mapped stream produced by applying\n     * the provided mapping function to each element.  Each mapped stream is\n     * {@link java.util.stream.BaseStream#close() closed} after its contents\n     * have been placed into this stream.  (If a mapped stream is {@code null}\n     * an empty stream is used, instead.)\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @apiNote\n     * The {@code flatMap()} operation has the effect of applying a one-to-many\n     * transformation to the elements of the stream, and then flattening the\n     * resulting elements into a new stream.\n     *\n     * <p><b>Examples.</b>\n     *\n     * <p>If {@code orders} is a stream of purchase orders, and each purchase\n     * order contains a collection of line items, then the following produces a\n     * stream containing all the line items in all the orders:\n     * <pre>{@code\n     *     orders.flatMap(order -> order.getLineItems().stream())...\n     * }</pre>\n     *\n     * <p>If {@code path} is the path to a file, then the following produces a\n     * stream of the {@code words} contained in that file:\n     * <pre>{@code\n     *     Stream<String> lines = Files.lines(path, StandardCharsets.UTF_8);\n     *     Stream<String> words = lines.flatMap(line -> Stream.of(line.split(\" +\")));\n     * }</pre>\n     * The {@code mapper} function passed to {@code flatMap} splits a line,\n     * using a simple regular expression, into an array of words, and then\n     * creates a stream of words from that array.\n     *\n     * @param <R> The element type of the new stream\n     * @param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *               <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *               function to apply to each element which produces a stream\n     *               of new values\n     * @return the new stream\n     */\n    <R> Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper);\n\n    /**\n     * Returns an {@code IntStream} consisting of the results of replacing each\n     * element of this stream with the contents of a mapped stream produced by\n     * applying the provided mapping function to each element.  Each mapped\n     * stream is {@link java.util.stream.BaseStream#close() closed} after its\n     * contents have been placed into this stream.  (If a mapped stream is\n     * {@code null} an empty stream is used, instead.)\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *               <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *               function to apply to each element which produces a stream\n     *               of new values\n     * @return the new stream\n     * @see #flatMap(Function)\n     */\n    IntStream flatMapToInt(Function<? super T, ? extends IntStream> mapper);\n\n    /**\n     * Returns an {@code LongStream} consisting of the results of replacing each\n     * element of this stream with the contents of a mapped stream produced by\n     * applying the provided mapping function to each element.  Each mapped\n     * stream is {@link java.util.stream.BaseStream#close() closed} after its\n     * contents have been placed into this stream.  (If a mapped stream is\n     * {@code null} an empty stream is used, instead.)\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *               <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *               function to apply to each element which produces a stream\n     *               of new values\n     * @return the new stream\n     * @see #flatMap(Function)\n     */\n    LongStream flatMapToLong(Function<? super T, ? extends LongStream> mapper);\n\n    /**\n     * Returns an {@code DoubleStream} consisting of the results of replacing\n     * each element of this stream with the contents of a mapped stream produced\n     * by applying the provided mapping function to each element.  Each mapped\n     * stream is {@link java.util.stream.BaseStream#close() closed} after its\n     * contents have placed been into this stream.  (If a mapped stream is\n     * {@code null} an empty stream is used, instead.)\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *               <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *               function to apply to each element which produces a stream\n     *               of new values\n     * @return the new stream\n     * @see #flatMap(Function)\n     */\n    DoubleStream flatMapToDouble(Function<? super T, ? extends DoubleStream> mapper);\n\n    /**\n     * Returns a stream consisting of the distinct elements (according to\n     * {@link Object#equals(Object)}) of this stream.\n     *\n     * <p>For ordered streams, the selection of distinct elements is stable\n     * (for duplicated elements, the element appearing first in the encounter\n     * order is preserved.)  For unordered streams, no stability guarantees\n     * are made.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">stateful\n     * intermediate operation</a>.\n     *\n     * @apiNote\n     * Preserving stability for {@code distinct()} in parallel pipelines is\n     * relatively expensive (requires that the operation act as a full barrier,\n     * with substantial buffering overhead), and stability is often not needed.\n     * Using an unordered stream source (such as {@link #generate(Supplier)})\n     * or removing the ordering constraint with {@link #unordered()} may result\n     * in significantly more efficient execution for {@code distinct()} in parallel\n     * pipelines, if the semantics of your situation permit.  If consistency\n     * with encounter order is required, and you are experiencing poor performance\n     * or memory utilization with {@code distinct()} in parallel pipelines,\n     * switching to sequential execution with {@link #sequential()} may improve\n     * performance.\n     *\n     * @return the new stream\n     */\n    Stream<T> distinct();\n\n    /**\n     * Returns a stream consisting of the elements of this stream, sorted\n     * according to natural order.  If the elements of this stream are not\n     * {@code Comparable}, a {@code java.lang.ClassCastException} may be thrown\n     * when the terminal operation is executed.\n     *\n     * <p>For ordered streams, the sort is stable.  For unordered streams, no\n     * stability guarantees are made.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">stateful\n     * intermediate operation</a>.\n     *\n     * @return the new stream\n     */\n    Stream<T> sorted();\n\n    /**\n     * Returns a stream consisting of the elements of this stream, sorted\n     * according to the provided {@code Comparator}.\n     *\n     * <p>For ordered streams, the sort is stable.  For unordered streams, no\n     * stability guarantees are made.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">stateful\n     * intermediate operation</a>.\n     *\n     * @param comparator a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                   <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                   {@code Comparator} to be used to compare stream elements\n     * @return the new stream\n     */\n    Stream<T> sorted(Comparator<? super T> comparator);\n\n    /**\n     * Returns a stream consisting of the elements of this stream, additionally\n     * performing the provided action on each element as elements are consumed\n     * from the resulting stream.\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * <p>For parallel stream pipelines, the action may be called at\n     * whatever time and in whatever thread the element is made available by the\n     * upstream operation.  If the action modifies shared state,\n     * it is responsible for providing the required synchronization.\n     *\n     * @apiNote This method exists mainly to support debugging, where you want\n     * to see the elements as they flow past a certain point in a pipeline:\n     * <pre>{@code\n     *     Stream.of(\"one\", \"two\", \"three\", \"four\")\n     *         .filter(e -> e.length() > 3)\n     *         .peek(e -> System.out.println(\"Filtered value: \" + e))\n     *         .map(String::toUpperCase)\n     *         .peek(e -> System.out.println(\"Mapped value: \" + e))\n     *         .collect(Collectors.toList());\n     * }</pre>\n     *\n     * @param action a <a href=\"package-summary.html#NonInterference\">\n     *                 non-interfering</a> action to perform on the elements as\n     *                 they are consumed from the stream\n     * @return the new stream\n     */\n    Stream<T> peek(Consumer<? super T> action);\n\n    /**\n     * Returns a stream consisting of the elements of this stream, truncated\n     * to be no longer than {@code maxSize} in length.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n     * stateful intermediate operation</a>.\n     *\n     * @apiNote\n     * While {@code limit()} is generally a cheap operation on sequential\n     * stream pipelines, it can be quite expensive on ordered parallel pipelines,\n     * especially for large values of {@code maxSize}, since {@code limit(n)}\n     * is constrained to return not just any <em>n</em> elements, but the\n     * <em>first n</em> elements in the encounter order.  Using an unordered\n     * stream source (such as {@link #generate(Supplier)}) or removing the\n     * ordering constraint with {@link #unordered()} may result in significant\n     * speedups of {@code limit()} in parallel pipelines, if the semantics of\n     * your situation permit.  If consistency with encounter order is required,\n     * and you are experiencing poor performance or memory utilization with\n     * {@code limit()} in parallel pipelines, switching to sequential execution\n     * with {@link #sequential()} may improve performance.\n     *\n     * @param maxSize the number of elements the stream should be limited to\n     * @return the new stream\n     * @throws IllegalArgumentException if {@code maxSize} is negative\n     */\n    Stream<T> limit(long maxSize);\n\n    /**\n     * Returns a stream consisting of the remaining elements of this stream\n     * after discarding the first {@code n} elements of the stream.\n     * If this stream contains fewer than {@code n} elements then an\n     * empty stream will be returned.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">stateful\n     * intermediate operation</a>.\n     *\n     * @apiNote\n     * While {@code skip()} is generally a cheap operation on sequential\n     * stream pipelines, it can be quite expensive on ordered parallel pipelines,\n     * especially for large values of {@code n}, since {@code skip(n)}\n     * is constrained to skip not just any <em>n</em> elements, but the\n     * <em>first n</em> elements in the encounter order.  Using an unordered\n     * stream source (such as {@link #generate(Supplier)}) or removing the\n     * ordering constraint with {@link #unordered()} may result in significant\n     * speedups of {@code skip()} in parallel pipelines, if the semantics of\n     * your situation permit.  If consistency with encounter order is required,\n     * and you are experiencing poor performance or memory utilization with\n     * {@code skip()} in parallel pipelines, switching to sequential execution\n     * with {@link #sequential()} may improve performance.\n     *\n     * @param n the number of leading elements to skip\n     * @return the new stream\n     * @throws IllegalArgumentException if {@code n} is negative\n     */\n    Stream<T> skip(long n);\n\n    /**\n     * Performs an action for each element of this stream.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * <p>The behavior of this operation is explicitly nondeterministic.\n     * For parallel stream pipelines, this operation does <em>not</em>\n     * guarantee to respect the encounter order of the stream, as doing so\n     * would sacrifice the benefit of parallelism.  For any given element, the\n     * action may be performed at whatever time and in whatever thread the\n     * library chooses.  If the action accesses shared state, it is\n     * responsible for providing the required synchronization.\n     *\n     * @param action a <a href=\"package-summary.html#NonInterference\">\n     *               non-interfering</a> action to perform on the elements\n     */\n    void forEach(Consumer<? super T> action);\n\n    /**\n     * Performs an action for each element of this stream, in the encounter\n     * order of the stream if the stream has a defined encounter order.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * <p>This operation processes the elements one at a time, in encounter\n     * order if one exists.  Performing the action for one element\n     * <a href=\"../concurrent/package-summary.html#MemoryVisibility\"><i>happens-before</i></a>\n     * performing the action for subsequent elements, but for any given element,\n     * the action may be performed in whatever thread the library chooses.\n     *\n     * @param action a <a href=\"package-summary.html#NonInterference\">\n     *               non-interfering</a> action to perform on the elements\n     * @see #forEach(Consumer)\n     */\n    void forEachOrdered(Consumer<? super T> action);\n\n    /**\n     * Returns an array containing the elements of this stream.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * @return an array containing the elements of this stream\n     */\n    Object[] toArray();\n\n    /**\n     * Returns an array containing the elements of this stream, using the\n     * provided {@code generator} function to allocate the returned array, as\n     * well as any additional arrays that might be required for a partitioned\n     * execution or for resizing.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * @apiNote\n     * The generator function takes an integer, which is the size of the\n     * desired array, and produces an array of the desired size.  This can be\n     * concisely expressed with an array constructor reference:\n     * <pre>{@code\n     *     Person[] men = people.stream()\n     *                          .filter(p -> p.getGender() == MALE)\n     *                          .toArray(Person[]::new);\n     * }</pre>\n     *\n     * @param <A> the element type of the resulting array\n     * @param generator a function which produces a new array of the desired\n     *                  type and the provided length\n     * @return an array containing the elements in this stream\n     * @throws ArrayStoreException if the runtime type of the array returned\n     * from the array generator is not a supertype of the runtime type of every\n     * element in this stream\n     */\n    <A> A[] toArray(IntFunction<A[]> generator);\n\n    /**\n     * Performs a <a href=\"package-summary.html#Reduction\">reduction</a> on the\n     * elements of this stream, using the provided identity value and an\n     * <a href=\"package-summary.html#Associativity\">associative</a>\n     * accumulation function, and returns the reduced value.  This is equivalent\n     * to:\n     * <pre>{@code\n     *     T result = identity;\n     *     for (T element : this stream)\n     *         result = accumulator.apply(result, element)\n     *     return result;\n     * }</pre>\n     *\n     * but is not constrained to execute sequentially.\n     *\n     * <p>The {@code identity} value must be an identity for the accumulator\n     * function. This means that for all {@code t},\n     * {@code accumulator.apply(identity, t)} is equal to {@code t}.\n     * The {@code accumulator} function must be an\n     * <a href=\"package-summary.html#Associativity\">associative</a> function.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * @apiNote Sum, min, max, average, and string concatenation are all special\n     * cases of reduction. Summing a stream of numbers can be expressed as:\n     *\n     * <pre>{@code\n     *     Integer sum = integers.reduce(0, (a, b) -> a+b);\n     * }</pre>\n     *\n     * or:\n     *\n     * <pre>{@code\n     *     Integer sum = integers.reduce(0, Integer::sum);\n     * }</pre>\n     *\n     * <p>While this may seem a more roundabout way to perform an aggregation\n     * compared to simply mutating a running total in a loop, reduction\n     * operations parallelize more gracefully, without needing additional\n     * synchronization and with greatly reduced risk of data races.\n     *\n     * @param identity the identity value for the accumulating function\n     * @param accumulator an <a href=\"package-summary.html#Associativity\">associative</a>,\n     *                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                    function for combining two values\n     * @return the result of the reduction\n     */\n    T reduce(T identity, BinaryOperator<T> accumulator);\n\n    /**\n     * Performs a <a href=\"package-summary.html#Reduction\">reduction</a> on the\n     * elements of this stream, using an\n     * <a href=\"package-summary.html#Associativity\">associative</a> accumulation\n     * function, and returns an {@code Optional} describing the reduced value,\n     * if any. This is equivalent to:\n     * <pre>{@code\n     *     boolean foundAny = false;\n     *     T result = null;\n     *     for (T element : this stream) {\n     *         if (!foundAny) {\n     *             foundAny = true;\n     *             result = element;\n     *         }\n     *         else\n     *             result = accumulator.apply(result, element);\n     *     }\n     *     return foundAny ? Optional.of(result) : Optional.empty();\n     * }</pre>\n     *\n     * but is not constrained to execute sequentially.\n     *\n     * <p>The {@code accumulator} function must be an\n     * <a href=\"package-summary.html#Associativity\">associative</a> function.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * @param accumulator an <a href=\"package-summary.html#Associativity\">associative</a>,\n     *                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                    function for combining two values\n     * @return an {@link Optional} describing the result of the reduction\n     * @throws NullPointerException if the result of the reduction is null\n     * @see #reduce(Object, BinaryOperator)\n     * @see #min(Comparator)\n     * @see #max(Comparator)\n     */\n    Optional<T> reduce(BinaryOperator<T> accumulator);\n\n    /**\n     * Performs a <a href=\"package-summary.html#Reduction\">reduction</a> on the\n     * elements of this stream, using the provided identity, accumulation and\n     * combining functions.  This is equivalent to:\n     * <pre>{@code\n     *     U result = identity;\n     *     for (T element : this stream)\n     *         result = accumulator.apply(result, element)\n     *     return result;\n     * }</pre>\n     *\n     * but is not constrained to execute sequentially.\n     *\n     * <p>The {@code identity} value must be an identity for the combiner\n     * function.  This means that for all {@code u}, {@code combiner(identity, u)}\n     * is equal to {@code u}.  Additionally, the {@code combiner} function\n     * must be compatible with the {@code accumulator} function; for all\n     * {@code u} and {@code t}, the following must hold:\n     * <pre>{@code\n     *     combiner.apply(u, accumulator.apply(identity, t)) == accumulator.apply(u, t)\n     * }</pre>\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * @apiNote Many reductions using this form can be represented more simply\n     * by an explicit combination of {@code map} and {@code reduce} operations.\n     * The {@code accumulator} function acts as a fused mapper and accumulator,\n     * which can sometimes be more efficient than separate mapping and reduction,\n     * such as when knowing the previously reduced value allows you to avoid\n     * some computation.\n     *\n     * @param <U> The type of the result\n     * @param identity the identity value for the combiner function\n     * @param accumulator an <a href=\"package-summary.html#Associativity\">associative</a>,\n     *                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                    function for incorporating an additional element into a result\n     * @param combiner an <a href=\"package-summary.html#Associativity\">associative</a>,\n     *                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                    function for combining two values, which must be\n     *                    compatible with the accumulator function\n     * @return the result of the reduction\n     * @see #reduce(BinaryOperator)\n     * @see #reduce(Object, BinaryOperator)\n     */\n    <U> U reduce(U identity,\n                 BiFunction<U, ? super T, U> accumulator,\n                 BinaryOperator<U> combiner);\n\n    /**\n     * Performs a <a href=\"package-summary.html#MutableReduction\">mutable\n     * reduction</a> operation on the elements of this stream.  A mutable\n     * reduction is one in which the reduced value is a mutable result container,\n     * such as an {@code ArrayList}, and elements are incorporated by updating\n     * the state of the result rather than by replacing the result.  This\n     * produces a result equivalent to:\n     * <pre>{@code\n     *     R result = supplier.get();\n     *     for (T element : this stream)\n     *         accumulator.accept(result, element);\n     *     return result;\n     * }</pre>\n     *\n     * <p>Like {@link #reduce(Object, BinaryOperator)}, {@code collect} operations\n     * can be parallelized without requiring additional synchronization.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * @apiNote There are many existing classes in the JDK whose signatures are\n     * well-suited for use with method references as arguments to {@code collect()}.\n     * For example, the following will accumulate strings into an {@code ArrayList}:\n     * <pre>{@code\n     *     List<String> asList = stringStream.collect(ArrayList::new, ArrayList::add,\n     *                                                ArrayList::addAll);\n     * }</pre>\n     *\n     * <p>The following will take a stream of strings and concatenates them into a\n     * single string:\n     * <pre>{@code\n     *     String concat = stringStream.collect(StringBuilder::new, StringBuilder::append,\n     *                                          StringBuilder::append)\n     *                                 .toString();\n     * }</pre>\n     *\n     * @param <R> type of the result\n     * @param supplier a function that creates a new result container. For a\n     *                 parallel execution, this function may be called\n     *                 multiple times and must return a fresh value each time.\n     * @param accumulator an <a href=\"package-summary.html#Associativity\">associative</a>,\n     *                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                    function for incorporating an additional element into a result\n     * @param combiner an <a href=\"package-summary.html#Associativity\">associative</a>,\n     *                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                    function for combining two values, which must be\n     *                    compatible with the accumulator function\n     * @return the result of the reduction\n     */\n    <R> R collect(Supplier<R> supplier,\n                  BiConsumer<R, ? super T> accumulator,\n                  BiConsumer<R, R> combiner);\n\n    /**\n     * Performs a <a href=\"package-summary.html#MutableReduction\">mutable\n     * reduction</a> operation on the elements of this stream using a\n     * {@code Collector}.  A {@code Collector}\n     * encapsulates the functions used as arguments to\n     * {@link #collect(Supplier, BiConsumer, BiConsumer)}, allowing for reuse of\n     * collection strategies and composition of collect operations such as\n     * multiple-level grouping or partitioning.\n     *\n     * <p>If the stream is parallel, and the {@code Collector}\n     * is {@link Collector.Characteristics#CONCURRENT concurrent}, and\n     * either the stream is unordered or the collector is\n     * {@link Collector.Characteristics#UNORDERED unordered},\n     * then a concurrent reduction will be performed (see {@link Collector} for\n     * details on concurrent reduction.)\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * <p>When executed in parallel, multiple intermediate results may be\n     * instantiated, populated, and merged so as to maintain isolation of\n     * mutable data structures.  Therefore, even when executed in parallel\n     * with non-thread-safe data structures (such as {@code ArrayList}), no\n     * additional synchronization is needed for a parallel reduction.\n     *\n     * @apiNote\n     * The following will accumulate strings into an ArrayList:\n     * <pre>{@code\n     *     List<String> asList = stringStream.collect(Collectors.toList());\n     * }</pre>\n     *\n     * <p>The following will classify {@code Person} objects by city:\n     * <pre>{@code\n     *     Map<String, List<Person>> peopleByCity\n     *         = personStream.collect(Collectors.groupingBy(Person::getCity));\n     * }</pre>\n     *\n     * <p>The following will classify {@code Person} objects by state and city,\n     * cascading two {@code Collector}s together:\n     * <pre>{@code\n     *     Map<String, Map<String, List<Person>>> peopleByStateAndCity\n     *         = personStream.collect(Collectors.groupingBy(Person::getState,\n     *                                                      Collectors.groupingBy(Person::getCity)));\n     * }</pre>\n     *\n     * @param <R> the type of the result\n     * @param <A> the intermediate accumulation type of the {@code Collector}\n     * @param collector the {@code Collector} describing the reduction\n     * @return the result of the reduction\n     * @see #collect(Supplier, BiConsumer, BiConsumer)\n     * @see Collectors\n     */\n    <R, A> R collect(Collector<? super T, A, R> collector);\n\n    /**\n     * Returns the minimum element of this stream according to the provided\n     * {@code Comparator}.  This is a special case of a\n     * <a href=\"package-summary.html#Reduction\">reduction</a>.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal operation</a>.\n     *\n     * @param comparator a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                   <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                   {@code Comparator} to compare elements of this stream\n     * @return an {@code Optional} describing the minimum element of this stream,\n     * or an empty {@code Optional} if the stream is empty\n     * @throws NullPointerException if the minimum element is null\n     */\n    Optional<T> min(Comparator<? super T> comparator);\n\n    /**\n     * Returns the maximum element of this stream according to the provided\n     * {@code Comparator}.  This is a special case of a\n     * <a href=\"package-summary.html#Reduction\">reduction</a>.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * @param comparator a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                   <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                   {@code Comparator} to compare elements of this stream\n     * @return an {@code Optional} describing the maximum element of this stream,\n     * or an empty {@code Optional} if the stream is empty\n     * @throws NullPointerException if the maximum element is null\n     */\n    Optional<T> max(Comparator<? super T> comparator);\n\n    /**\n     * Returns the count of elements in this stream.  This is a special case of\n     * a <a href=\"package-summary.html#Reduction\">reduction</a> and is\n     * equivalent to:\n     * <pre>{@code\n     *     return mapToLong(e -> 1L).sum();\n     * }</pre>\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal operation</a>.\n     *\n     * @return the count of elements in this stream\n     */\n    long count();\n\n    /**\n     * Returns whether any elements of this stream match the provided\n     * predicate.  May not evaluate the predicate on all elements if not\n     * necessary for determining the result.  If the stream is empty then\n     * {@code false} is returned and the predicate is not evaluated.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n     * terminal operation</a>.\n     *\n     * @apiNote\n     * This method evaluates the <em>existential quantification</em> of the\n     * predicate over the elements of the stream (for some x P(x)).\n     *\n     * @param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                  predicate to apply to elements of this stream\n     * @return {@code true} if any elements of the stream match the provided\n     * predicate, otherwise {@code false}\n     */\n    boolean anyMatch(Predicate<? super T> predicate);\n\n    /**\n     * Returns whether all elements of this stream match the provided predicate.\n     * May not evaluate the predicate on all elements if not necessary for\n     * determining the result.  If the stream is empty then {@code true} is\n     * returned and the predicate is not evaluated.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n     * terminal operation</a>.\n     *\n     * @apiNote\n     * This method evaluates the <em>universal quantification</em> of the\n     * predicate over the elements of the stream (for all x P(x)).  If the\n     * stream is empty, the quantification is said to be <em>vacuously\n     * satisfied</em> and is always {@code true} (regardless of P(x)).\n     *\n     * @param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                  predicate to apply to elements of this stream\n     * @return {@code true} if either all elements of the stream match the\n     * provided predicate or the stream is empty, otherwise {@code false}\n     */\n    boolean allMatch(Predicate<? super T> predicate);\n\n    /**\n     * Returns whether no elements of this stream match the provided predicate.\n     * May not evaluate the predicate on all elements if not necessary for\n     * determining the result.  If the stream is empty then {@code true} is\n     * returned and the predicate is not evaluated.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n     * terminal operation</a>.\n     *\n     * @apiNote\n     * This method evaluates the <em>universal quantification</em> of the\n     * negated predicate over the elements of the stream (for all x ~P(x)).  If\n     * the stream is empty, the quantification is said to be vacuously satisfied\n     * and is always {@code true}, regardless of P(x).\n     *\n     * @param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                  predicate to apply to elements of this stream\n     * @return {@code true} if either no elements of the stream match the\n     * provided predicate or the stream is empty, otherwise {@code false}\n     */\n    boolean noneMatch(Predicate<? super T> predicate);\n\n    /**\n     * Returns an {@link Optional} describing the first element of this stream,\n     * or an empty {@code Optional} if the stream is empty.  If the stream has\n     * no encounter order, then any element may be returned.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n     * terminal operation</a>.\n     *\n     * @return an {@code Optional} describing the first element of this stream,\n     * or an empty {@code Optional} if the stream is empty\n     * @throws NullPointerException if the element selected is null\n     */\n    Optional<T> findFirst();\n\n    /**\n     * Returns an {@link Optional} describing some element of the stream, or an\n     * empty {@code Optional} if the stream is empty.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n     * terminal operation</a>.\n     *\n     * <p>The behavior of this operation is explicitly nondeterministic; it is\n     * free to select any element in the stream.  This is to allow for maximal\n     * performance in parallel operations; the cost is that multiple invocations\n     * on the same source may not return the same result.  (If a stable result\n     * is desired, use {@link #findFirst()} instead.)\n     *\n     * @return an {@code Optional} describing some element of this stream, or an\n     * empty {@code Optional} if the stream is empty\n     * @throws NullPointerException if the element selected is null\n     * @see #findFirst()\n     */\n    Optional<T> findAny();\n\n    // Static factories\n\n    /**\n     * Returns a builder for a {@code Stream}.\n     *\n     * @param <T> type of elements\n     * @return a stream builder\n     */\n    public static<T> Builder<T> builder() {\n        return new Streams.StreamBuilderImpl<>();\n    }\n\n    /**\n     * Returns an empty sequential {@code Stream}.\n     *\n     * @param <T> the type of stream elements\n     * @return an empty sequential stream\n     */\n    public static<T> Stream<T> empty() {\n        return StreamSupport.stream(Spliterators.<T>emptySpliterator(), false);\n    }\n\n    /**\n     * Returns a sequential {@code Stream} containing a single element.\n     *\n     * @param t the single element\n     * @param <T> the type of stream elements\n     * @return a singleton sequential stream\n     */\n    public static<T> Stream<T> of(T t) {\n        return StreamSupport.stream(new Streams.StreamBuilderImpl<>(t), false);\n    }\n\n    /**\n     * Returns a sequential ordered stream whose elements are the specified values.\n     *\n     * @param <T> the type of stream elements\n     * @param values the elements of the new stream\n     * @return the new stream\n     */\n    @SafeVarargs\n    @SuppressWarnings(\"varargs\") // Creating a stream from an array is safe\n    public static<T> Stream<T> of(T... values) {\n        return Arrays.stream(values);\n    }\n\n    /**\n     * Returns an infinite sequential ordered {@code Stream} produced by iterative\n     * application of a function {@code f} to an initial element {@code seed},\n     * producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},\n     * {@code f(f(seed))}, etc.\n     *\n     * <p>The first element (position {@code 0}) in the {@code Stream} will be\n     * the provided {@code seed}.  For {@code n > 0}, the element at position\n     * {@code n}, will be the result of applying the function {@code f} to the\n     * element at position {@code n - 1}.\n     *\n     * @param <T> the type of stream elements\n     * @param seed the initial element\n     * @param f a function to be applied to to the previous element to produce\n     *          a new element\n     * @return a new sequential {@code Stream}\n     */\n    public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f) {\n        Objects.requireNonNull(f);\n        final Iterator<T> iterator = new Iterator<T>() {\n            @SuppressWarnings(\"unchecked\")\n            T t = (T) Streams.NONE;\n\n            @Override\n            public boolean hasNext() {\n                return true;\n            }\n\n            @Override\n            public T next() {\n                return t = (t == Streams.NONE) ? seed : f.apply(t);\n            }\n        };\n        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n                iterator,\n                Spliterator.ORDERED | Spliterator.IMMUTABLE), false);\n    }\n\n    /**\n     * Returns an infinite sequential unordered stream where each element is\n     * generated by the provided {@code Supplier}.  This is suitable for\n     * generating constant streams, streams of random elements, etc.\n     *\n     * @param <T> the type of stream elements\n     * @param s the {@code Supplier} of generated elements\n     * @return a new infinite sequential unordered {@code Stream}\n     */\n    public static<T> Stream<T> generate(Supplier<T> s) {\n        Objects.requireNonNull(s);\n        return StreamSupport.stream(\n                new StreamSpliterators.InfiniteSupplyingSpliterator.OfRef<>(Long.MAX_VALUE, s), false);\n    }\n\n    /**\n     * Creates a lazily concatenated stream whose elements are all the\n     * elements of the first stream followed by all the elements of the\n     * second stream.  The resulting stream is ordered if both\n     * of the input streams are ordered, and parallel if either of the input\n     * streams is parallel.  When the resulting stream is closed, the close\n     * handlers for both input streams are invoked.\n     *\n     * @implNote\n     * Use caution when constructing streams from repeated concatenation.\n     * Accessing an element of a deeply concatenated stream can result in deep\n     * call chains, or even {@code StackOverflowException}.\n     *\n     * @param <T> The type of stream elements\n     * @param a the first stream\n     * @param b the second stream\n     * @return the concatenation of the two input streams\n     */\n    public static <T> Stream<T> concat(Stream<? extends T> a, Stream<? extends T> b) {\n        Objects.requireNonNull(a);\n        Objects.requireNonNull(b);\n\n        @SuppressWarnings(\"unchecked\")\n        Spliterator<T> split = new Streams.ConcatSpliterator.OfRef<>(\n                (Spliterator<T>) a.spliterator(), (Spliterator<T>) b.spliterator());\n        Stream<T> stream = StreamSupport.stream(split, a.isParallel() || b.isParallel());\n        return stream.onClose(Streams.composedClose(a, b));\n    }\n\n    /**\n     * A mutable builder for a {@code Stream}.  This allows the creation of a\n     * {@code Stream} by generating elements individually and adding them to the\n     * {@code Builder} (without the copying overhead that comes from using\n     * an {@code ArrayList} as a temporary buffer.)\n     *\n     * <p>A stream builder has a lifecycle, which starts in a building\n     * phase, during which elements can be added, and then transitions to a built\n     * phase, after which elements may not be added.  The built phase begins\n     * when the {@link #build()} method is called, which creates an ordered\n     * {@code Stream} whose elements are the elements that were added to the stream\n     * builder, in the order they were added.\n     *\n     * @param <T> the type of stream elements\n     * @see Stream#builder()\n     * @since 1.8\n     */\n    public interface Builder<T> extends Consumer<T> {\n\n        /**\n         * Adds an element to the stream being built.\n         *\n         * @throws IllegalStateException if the builder has already transitioned to\n         * the built state\n         */\n        @Override\n        void accept(T t);\n\n        /**\n         * Adds an element to the stream being built.\n         *\n         * @implSpec\n         * The default implementation behaves as if:\n         * <pre>{@code\n         *     accept(t)\n         *     return this;\n         * }</pre>\n         *\n         * @param t the element to add\n         * @return {@code this} builder\n         * @throws IllegalStateException if the builder has already transitioned to\n         * the built state\n         */\n        default Builder<T> add(T t) {\n            accept(t);\n            return this;\n        }\n\n        /**\n         * Builds the stream, transitioning this builder to the built state.\n         * An {@code IllegalStateException} is thrown if there are further attempts\n         * to operate on the builder after it has entered the built state.\n         *\n         * @return the built stream\n         * @throws IllegalStateException if the builder has already transitioned to\n         * the built state\n         */\n        Stream<T> build();\n\n    }\n}\n```\n\n* 特点\n  * 元素序列。可以访问特定元素类型的一组有序值，\n  * 源，使用一个提供数据的源，如集合，数组或者输入/输出资源，从有序集合生成流时会保留原有的顺序\n  * 数据处理操作，支持类似数据库的操作，及函数式编程中的常用操作，如filter，map,reduce.sort，find,match\n  * **流水线** 流操作大多数本身会返回一个流，这样多个操作可以链接起来，那么可以看作类似操作数据库的流水线操作\n  * **内部迭代** 流的迭代操作，是在内部进行迭代的。\n\n* 流与集合的区别：\n\n  在于什么时候计算\n\n  * 集合是一个内存中的数据结构，它包含数据结构中目前的所有的值，集合中的每个元素都得先算出来才能添加到集合，集合是我需要就创建，无需考虑需求。\n  * 流是在概念上亭的数据结构，你不能添加或者删除元素，元素是按需求进行计算的，input->output,典型的生产者-消费者关系\n  * 流只能遍历一次,只能消费一次，而集合会一直存在内存中。\n  * 外部迭代与内部迭代，集合使用foreach进行外部迭代，流使用内部迭代，\n\n* **流操作**\n\n  * 中间操作  返回一个流对象的操作都是中间操作：如filter,map，limit, sort .etc\n\n    * filter()  接受一个断言条件去过滤流的所有元素。 这个流的操作是中间的， 这使得我们能够对结果调用另外一个流操作（例如 forEach） \n    * map() 通过给定的功能将每个元素转换成另一个对象。 以下示例将每个字符串转换成大写字符串。当然你也可以使用 map 将每个对象转换成另一种类型。 \n    * sorted()  返回流的排序视图。元素按照自然顺序进行排序，除非传递了一个自定义的比较器。 \n\n  * 终端操作 如collect  forEach count 即不会返回流对象的操作。\n\n    *  forEach()  该方法有助于迭代流的所有元素，并对他们中的每一个执行一些操作。 改操作作为 lambda 表达式参数传递 \n\n    * collect()  collect() 方法用于从一个 stream 中接收元素，并将他们存储在一个集合中，并通过参数分类。 \n\n    * match()  各种匹配操作检查某个断言条件是否与流匹配。所有这些操作都是终端并返回一个 Boolean 结果 \n\n    * findAny() 将会返回当前流中的任意元素\n\n    * count 返回符合给定谓词条件的总数\n\n    * reduce（）**归约** 将一个流中的元素进行组合起来。函数式编程语言的术语来讲就是折叠。\n\n      ```\n      List<Integer> intList= new ArrayList<>();\n      /**\n      * 归约\n      */\n      for (int k = 0; k < 20; k++) {\n      intList.add(k);\n      }\n      int as=intList.stream().reduce(0,(a,b)->a+b);\n      System.out.println(as);\n      Optional<Integer> as1=intList.stream().reduce(Integer::min);\n      System.out.println(as1.get());\n      Optional<Integer> as2=intList.stream().reduce(Integer::max);\n      System.out.println(as2.get());\n      ```\n\n      \n\n  * 短路操作 foreach中的continue或者break的效果\n\n    * anyMatch()  一旦满足断言条件，该方法将返回 true。它不会处理任何更多的元素。  括号里面放一个predicate\n    * allMatch（）查看流中的元素是否都能匹配给定的条件\n    * noneMatch（）确保流中 的元素没有和给定的谓词相匹配\n    * findFirst()  该方法将从流返回第一个元素，然后不再处理任何元素。 括号里面放一个predicate\n\n  * 额外的一些操作 **怎么感觉越来越像sql**\n\n    * distinct() 去重\n    * limit（） 截断长度 也可用在无序流set上\n    * skip（）跳过元素\n    * \n\n* 流的使用\n\n  * 一个数据源\n  * 一个中间操作链\n  * 一个终端操作\n\n* **流的构建 **\n\n  * 值构建 使用 Stream.of（T）\n\n  * 使用数组Stream.of(val1, val2, val3….)\n\n    ```\n        @SafeVarargs\n        @SuppressWarnings(\"varargs\") // Creating a stream from an array is safe\n        public static<T> Stream<T> of(T... values) {\n            return Arrays.stream(values);\n        }\n    ```\n\n  * 使用数组 Stream.of(arrayOfElements) 和上面的其实是同一个api\n\n    ```\n        @SafeVarargs\n        @SuppressWarnings(\"varargs\") // Creating a stream from an array is safe\n        public static<T> Stream<T> of(T... values) {\n            return Arrays.stream(values);\n        }\n    ```\n\n  * 使用 someList.stream()\n\n  * 由文件流生成\n\n  * 由函数生成流  使用 Stream.generate(functions ) 或者 Stream.iterate(functions ) 这个生成的是个无限流，函数放在generate()或iterate（）里面\n\n    ```\n        /**\n         * Returns an infinite sequential unordered stream where each element is\n         * generated by the provided {@code Supplier}.  This is suitable for\n         * generating constant streams, streams of random elements, etc.\n         *\n         * @param <T> the type of stream elements\n         * @param s the {@code Supplier} of generated elements\n         * @return a new infinite sequential unordered {@code Stream}\n         */\n        public static<T> Stream<T> generate(Supplier<T> s) {\n            Objects.requireNonNull(s);\n            return StreamSupport.stream(\n                    new StreamSpliterators.InfiniteSupplyingSpliterator.OfRef<>(Long.MAX_VALUE, s), false);\n        }\n    ```\n\n    ```\n        /**\n         * Returns an infinite sequential ordered {@code Stream} produced by iterative\n         * application of a function {@code f} to an initial element {@code seed},\n         * producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},\n         * {@code f(f(seed))}, etc.\n         *\n         * <p>The first element (position {@code 0}) in the {@code Stream} will be\n         * the provided {@code seed}.  For {@code n > 0}, the element at position\n         * {@code n}, will be the result of applying the function {@code f} to the\n         * element at position {@code n - 1}.\n         *\n         * @param <T> the type of stream elements\n         * @param seed the initial element\n         * @param f a function to be applied to to the previous element to produce\n         *          a new element\n         * @return a new sequential {@code Stream}\n         */\n        public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f) {\n            Objects.requireNonNull(f);\n            final Iterator<T> iterator = new Iterator<T>() {\n                @SuppressWarnings(\"unchecked\")\n                T t = (T) Streams.NONE;\n    \n                @Override\n                public boolean hasNext() {\n                    return true;\n                }\n    \n                @Override\n                public T next() {\n                    return t = (t == Streams.NONE) ? seed : f.apply(t);\n                }\n            };\n            return StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n                    iterator,\n                    Spliterator.ORDERED | Spliterator.IMMUTABLE), false);\n        }\n    ```\n\n  * 將Streams轉換為其他數據結構\n\n    * 使用 stream.collect(Collectors.xxx())  或 stream.toArray将 Stream 转换成 set list array\n\n      ```\n           \tList<Project> l1=datas.stream().filter(p12->p12.getStar()>3).collect(Collectors.toList());\n      \t\tSystem.out.println(l1);\n      \t\tSet<Project> s1=datas.stream().filter(p12->p12.getStar()>3).collect(Collectors.toSet());\n      \t\tSystem.out.println(s1);\n      \t\tProject[] a1=datas.stream().filter(p12->p12.getStar()>3).toArray(Project[]::new);\n      ```\n\n    * 其他一些數據結構的轉換在 stream.collect（Collectors.xxx）裏\n\n      ```\n      Map<String, Project> map1 = datas.stream().filter(p12 -> p12.getStar() > 3)\n      .collect(Collectors.toMap(Project::getLang, Function.identity()));\n      System.out.println(map1);\n      Map<String, String> map3 =\tdatas.stream().filter(p12 -> p12.getStar() > 3)\n      .collect(Collectors.toMap(Project::getLang, Project::getName));\n      ```\n\n\n         * 用流收集数据\n    \n           * Collectors.groupingBy分组 二级分组就是将groupBy（）.groupBy（）\n    \n             ```\n             Map<Integer, List<Project>> collect = datas.stream().collect(Collectors.groupingBy(Project::getStar));\n             \t\tcollect.forEach((k, v) -> {\n             \t\t\tSystem.out.println(k);\n             \t\t\tSystem.out.println(v);\n             \t\t});\n             ```\n    \n           * Collectors.groupingBy分组与mapping同时使用\n    \n             ```\n             datas.stream().collect(Collectors.groupingBy(Project::getStar, Collectors.mapping(item-> {\n                 if (item.getStar() == 1) {\n                 return  item.getStar();\n                 }\n                 return 1l;\n             \t\t}, Collectors.toSet())));\n             ```\n    \n           * 流中的最大值，最小值 maxBy,minBy\n    \n             ```\n             Optional<Project> popt = datas.stream().collect(Collectors.maxBy(Comparator.comparingInt(Project::getStar)));\n             \t\tProject project3 = popt.get();\n             \t\tSystem.out.println(project3);\n             \t\tOptional<Project> popt1 = datas.stream().collect(Collectors.minBy(Comparator.comparingInt(Project::getStar)));\n             \t\tSystem.out.println(popt1.get());\n             ```\n    \n           * 汇总 summingInt\n    \n             ```\n             Integer count2 = datas.stream().collect(Collectors.summingInt(Project::getStar));\n                 System.out.println(count2);\n             ```\n    \n           * 链接字符串 需要先用map将元素对象的某个属性提取出来。 joining\n    \n             ```\n             String str = datas.stream().map(Project::getLang).collect(Collectors.joining(\",\"));\n             System.out.println(str);\n             ```\n    \n           * 分区 多级分区 使用链式编程 partitioningBy（）.partitioningBy()\n    \n             ```\n             Map<Boolean, List<Project>> collect3 = datas.stream().collect(Collectors.partitioningBy((Project pro)-> pro.getStar()>3));\n             \t\tcollect3.forEach((k,v)->{\n             \t\t\tSystem.out.println(k);\n             \t\t\tSystem.out.println(v.toString());\n             \t\t});\n             ```\n    \n             **TODO:并行流，组合异步，Fork/Join分治框架，时间新api**","source":"_posts/Java8点拨.md","raw":"---\ntitle: Java8点拨\ndate: 2018-08-04 10:30:52\ntags: [Java]\ncategories: [Java]\n---\n\njava8的一些知识点的记录，写的比较糙，能理解就ok<!--more-->\n\n#### Lambda表达式\n\n* lambda表达式可以有零个，一个或者多个参数\n* 可以显式声明参数的类型，也可以从上下中推断参数类型\n* 多个参数必须包含在括号中，并用逗号分隔，空括号用于表示零个参数\n* 当只有一个参数时，如果推断它的类型，可以不用括号\n* lambda表达式的函数体可以包含零个，一个或者多个语句\n* 如果lambda表达式函数提只有一行，那么就可以不用大括号，匿名函数的返回类型与函数体表达式的返回类型相同。当函数提中大于一行代码则需要用大括号包含。\n* 谓词复合，用于多条件判断。\n  * negate  Predicate的非\n  * and Predicate的与\n  * or predicate的或\n* 函数复合,用于Fuction接口所代表的Lambda表达式的符合\n  * andThen 很明了的函数，aExpression.andThen(bExpression）相当于 数学上的 b(a(x))\n  * compose aExpression.compose(bExpression) 相当于数学上的  a（b(x)）\n\n***\n\n#### 函数式编程中的方法引用。\n\n| 方法引用                                     | 描述                                   | 示例                                     |\n| -------------------------------------------- | -------------------------------------- | ---------------------------------------- |\n| 静态方法引用                                 | 用于引用类的静态方法                   | Math::max等于原先的Math.max（）          |\n| 实例对象引用方法                             | 使用实例对象引用来调用实例方法         | System.out::println=System.out.println() |\n| 从类中引用实例方法（其实还是实例调用方法吧） | 在上下文提供的对象的医用上调用实例方法 | String::length相当于str.length           |\n| 引用构造函数                                 | 引用构造函数，创建实例对象             | HashMap：：new 等于 new  HashMap()       |\n\n这些方法引用其实在函数式编程语言 Rust 中都已经存在，lisp中也有。\n\n***\n\n#### 默认方法与静态方法：\n\n接口新增了default方法和static方法。\n\n* 静态方法，只能通过接口调用，不可以通过实现类的类名或实现类的实例进行调用。最简单的提供工厂的实现功能。\n\n  ```\n  package com.space.default_method;\n  \n  public interface Caculate {\n  \tint add(int a, int b);\n  \n  \tint subtract(int a, int b);\n  \n  \tint divide(int a, int b);\n  \n  \tint muti(int a, int b);\n  \t\n  \tdefault int mod (int a , int b ) {\n  \t\treturn a%b;\n  \t}\n  \tpublic static Caculate getCaculateImplInstance() {\n  \t\treturn new CaculateImpl();\n  \t}\n  }\n  ```\n\n  \n\n* 默认方法，只能通过接口的实现类来调用,可以避免新的功能添加導致对现有功能的困扰。方便api的演进\n\n  ```\n  package com.space.default_method;\n  \n  public interface Caculate {\n  \tint add(int a, int b);\n  \n  \tint subtract(int a, int b);\n  \n  \tint divide(int a, int b);\n  \n  \tint muti(int a, int b);\n  \t\n  \tdefault int mod (int a , int b ) {\n  \t\treturn a%b;\n  \t}\n  }\n  ```\n\n  ```\n  package com.space.default_method;\n  \n  public class CaculateImpl implements Caculate {\n  \n  \t@Override\n  \tpublic int add(int a, int b) {\n  \t\treturn a+b;\n  \t}\n  \n  \t@Override\n  \tpublic int subtract(int a, int b) {\n  \t\t// TODO Auto-generated method stub\n  \t\treturn a-b;\t}\n  \n  \t@Override\n  \tpublic int divide(int a, int b) {\n  \t\t// TODO Auto-generated method stub\n  \t\treturn a/b;\n  \t}\n  \n  \t@Override\n  \tpublic int muti(int a, int b) {\n  \t\treturn a*b;\n  \t}\n  \tpublic static void main(String[] args) {\n  \t\tCaculate caculate  = new CaculateImpl();\n  \t\tint mod = caculate.mod(100, 3);\n  \t\tSystem.out.println(mod);\n  \t}\n  \n  }\n  ```\n\n  **PS:** 接口冲突，方法冲突 的解决：\n\n  * 类中的方法优先级别最高，类或者父类中的声明的方法优先级高于任何声明为默认的方法的优先级\n  * 如果无法通过上述条件进行判断，那么子类接口的优先级更高，函数签名相同时，优先选择拥有最具体实现的默认方法的接口，\n  * 如果上述条件还是无法判断的话，继承多个接口的类必须通过显式覆盖和调用期望的方法，显式的选择使用哪一个默认方法的实现。\n\n#### 函数式接口\n\n* 函数式接口也称作单例抽象方法接口（SAM接口），**接口中只允许一个抽象方法**,@FunctionalInterface注解会在你注解的接口违反函数式几口的约定时提示一个编译错误。\n\n```\n@FunctionalInterface\npublic interface  MyFunctionalInterface {\n    public void firstFunction（）；\n}\n```\n\n***\n\n* 常用函数式接口\n\n  * Predicate函数式接口:功能判断输入的对象是否符合某个条件。官方文档解释到：``Determines if the input object matches some criteria``\n\n    原始类型特化：IntPredicate,LongPredicate, DoublePredicate \n\n    ```\n    /*\n     * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.\n     * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n     */\n    package java.util.function;\n    \n    import java.util.Objects;\n    \n    /**\n     * Represents a predicate (boolean-valued function) of one argument.\n     *\n     * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n     * whose functional method is {@link #test(Object)}.\n     *\n     * @param <T> the type of the input to the predicate\n     *\n     * @since 1.8\n     */\n    @FunctionalInterface\n    public interface Predicate<T> {\n    \n        /**\n         * Evaluates this predicate on the given argument.\n         *\n         * @param t the input argument\n         * @return {@code true} if the input argument matches the predicate,\n         * otherwise {@code false}\n         */\n        boolean test(T t);\n    \n        /**\n         * Returns a composed predicate that represents a short-circuiting logical\n         * AND of this predicate and another.  When evaluating the composed\n         * predicate, if this predicate is {@code false}, then the {@code other}\n         * predicate is not evaluated.\n         *\n         * <p>Any exceptions thrown during evaluation of either predicate are relayed\n         * to the caller; if evaluation of this predicate throws an exception, the\n         * {@code other} predicate will not be evaluated.\n         *\n         * @param other a predicate that will be logically-ANDed with this\n         *              predicate\n         * @return a composed predicate that represents the short-circuiting logical\n         * AND of this predicate and the {@code other} predicate\n         * @throws NullPointerException if other is null\n         */\n        default Predicate<T> and(Predicate<? super T> other) {\n            Objects.requireNonNull(other);\n            return (t) -> test(t) && other.test(t);\n        }\n    \n        /**\n         * Returns a predicate that represents the logical negation of this\n         * predicate.\n         *\n         * @return a predicate that represents the logical negation of this\n         * predicate\n         */\n        default Predicate<T> negate() {\n            return (t) -> !test(t);\n        }\n    \n        /**\n         * Returns a composed predicate that represents a short-circuiting logical\n         * OR of this predicate and another.  When evaluating the composed\n         * predicate, if this predicate is {@code true}, then the {@code other}\n         * predicate is not evaluated.\n         *\n         * <p>Any exceptions thrown during evaluation of either predicate are relayed\n         * to the caller; if evaluation of this predicate throws an exception, the\n         * {@code other} predicate will not be evaluated.\n         *\n         * @param other a predicate that will be logically-ORed with this\n         *              predicate\n         * @return a composed predicate that represents the short-circuiting logical\n         * OR of this predicate and the {@code other} predicate\n         * @throws NullPointerException if other is null\n         */\n        default Predicate<T> or(Predicate<? super T> other) {\n            Objects.requireNonNull(other);\n            return (t) -> test(t) || other.test(t);\n        }\n    \n        /**\n         * Returns a predicate that tests if two arguments are equal according\n         * to {@link Objects#equals(Object, Object)}.\n         *\n         * @param <T> the type of arguments to the predicate\n         * @param targetRef the object reference with which to compare for equality,\n         *               which may be {@code null}\n         * @return a predicate that tests if two arguments are equal according\n         * to {@link Objects#equals(Object, Object)}\n         */\n        static <T> Predicate<T> isEqual(Object targetRef) {\n            return (null == targetRef)\n                    ? Objects::isNull\n                    : object -> targetRef.equals(object);\n        }\n    }\n    \n    ```\n\n  * Consumer函数式接口： **表示一个接受单个输入参数并且没有返回值的操作**。不像其它函数式接口，Consumer 接口期望执行带有副作用的操作 (Consumer 的操作可能会更改输入参数的内部状态)。官方文档：``An operation which accepts a single input argument and returns no result. Unlike most other functional interfaces, Consumer is expected to operate via side-effects.`` 也就是void。\n\n    原始类型特化:\n\n    IntConsumer,LongConsumer, DoubleConsumer \n\n    ````\n    /*\n     * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.\n     * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n     */\n    package java.util.function;\n    \n    import java.util.Objects;\n    \n    /**\n     * Represents an operation that accepts a single input argument and returns no\n     * result. Unlike most other functional interfaces, {@code Consumer} is expected\n     * to operate via side-effects.\n     *\n     * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n     * whose functional method is {@link #accept(Object)}.\n     *\n     * @param <T> the type of the input to the operation\n     *\n     * @since 1.8\n     */\n    @FunctionalInterface\n    public interface Consumer<T> {\n    \n        /**\n         * Performs this operation on the given argument.\n         *\n         * @param t the input argument\n         */\n        void accept(T t);\n    \n        /**\n         * Returns a composed {@code Consumer} that performs, in sequence, this\n         * operation followed by the {@code after} operation. If performing either\n         * operation throws an exception, it is relayed to the caller of the\n         * composed operation.  If performing this operation throws an exception,\n         * the {@code after} operation will not be performed.\n         *\n         * @param after the operation to perform after this operation\n         * @return a composed {@code Consumer} that performs in sequence this\n         * operation followed by the {@code after} operation\n         * @throws NullPointerException if {@code after} is null\n         */\n        default Consumer<T> andThen(Consumer<? super T> after) {\n            Objects.requireNonNull(after);\n            return (T t) -> { accept(t); after.accept(t); };\n        }\n    }\n    \n    ````\n\n  * Supplier 函数式接口：顾名思义，就是提供者的意思，可以简单理解为工厂，**不接收参数，只提供返回值**\n\n    ````\n    /*\n     * Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.\n     * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n     */\n    package java.util.function;\n    \n    /**\n     * Represents a supplier of results.\n     *\n     * <p>There is no requirement that a new or distinct result be returned each\n     * time the supplier is invoked.\n     *\n     * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n     * whose functional method is {@link #get()}.\n     *\n     * @param <T> the type of results supplied by this supplier\n     *\n     * @since 1.8\n     */\n    @FunctionalInterface\n    public interface Supplier<T> {\n    \n        /**\n         * Gets a result.\n         *\n         * @return a result\n         */\n        T get();\n    }\n    \n    ````\n\n  * Function函数式接口：**接受一定数量的参数 同时提供一个返回结果**  ,\n\n    原始类型特化：\n\n    `IntFunction<R>, IntToDoubleFunction,`  `IntToLongFunction, LongFunction<R>,`  `LongToDoubleFunction, LongToIntFunction,`  `DoubleFunction<R>, ToIntFunction<T>,`  `ToDoubleFunction<T>, ToLongFunction<T>` \n\n    ```\n    /*\n     * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.\n     * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n     */\n    package java.util.function;\n    \n    import java.util.Objects;\n    \n    /**\n     * Represents a function that accepts one argument and produces a result.\n     *\n     * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n     * whose functional method is {@link #apply(Object)}.\n     *\n     * @param <T> the type of the input to the function\n     * @param <R> the type of the result of the function\n     *\n     * @since 1.8\n     */\n    @FunctionalInterface\n    public interface Function<T, R> {\n    \n        /**\n         * Applies this function to the given argument.\n         *\n         * @param t the function argument\n         * @return the function result\n         */\n        R apply(T t);\n    \n        /**\n         * Returns a composed function that first applies the {@code before}\n         * function to its input, and then applies this function to the result.\n         * If evaluation of either function throws an exception, it is relayed to\n         * the caller of the composed function.\n         *\n         * @param <V> the type of input to the {@code before} function, and to the\n         *           composed function\n         * @param before the function to apply before this function is applied\n         * @return a composed function that first applies the {@code before}\n         * function and then applies this function\n         * @throws NullPointerException if before is null\n         *\n         * @see #andThen(Function)\n         */\n        default <V> Function<V, R> compose(Function<? super V, ? extends T> before) {\n            Objects.requireNonNull(before);\n            return (V v) -> apply(before.apply(v));\n        }\n    \n        /**\n         * Returns a composed function that first applies this function to\n         * its input, and then applies the {@code after} function to the result.\n         * If evaluation of either function throws an exception, it is relayed to\n         * the caller of the composed function.\n         *\n         * @param <V> the type of output of the {@code after} function, and of the\n         *           composed function\n         * @param after the function to apply after this function is applied\n         * @return a composed function that first applies this function and then\n         * applies the {@code after} function\n         * @throws NullPointerException if after is null\n         *\n         * @see #compose(Function)\n         */\n        default <V> Function<T, V> andThen(Function<? super R, ? extends V> after) {\n            Objects.requireNonNull(after);\n            return (T t) -> after.apply(apply(t));\n        }\n    \n        /**\n         * Returns a function that always returns its input argument.\n         *\n         * @param <T> the type of the input and output objects to the function\n         * @return a function that always returns its input argument\n         */\n        static <T> Function<T, T> identity() {\n            return t -> t;\n        }\n    }\n    \n    ```\n\n  * Operator函数式接口:  运算符函数接口，有``UnaryOperator<T>和``BinaryOperator<T>``这两个接口。只有一个泛型，那么意思就是说 入参和返回只有一种类型。\n\n    ```\n    /**\n    * UnaryOperator 接收一个参数 返回同类型结果。\n    */\n        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6);\n        UnaryOperator<Integer> unaryOpt = i -> i * i;\n        unaryOperatorFun(unaryOpt, list).forEach(x -> {\n        System.out.println(x);\n    });\n    private static List<Integer> unaryOperatorFun(UnaryOperator<Integer> unaryOpt, List<Integer> list) {\n        List<Integer> uniList = new ArrayList<>();\n        list.forEach(i -> uniList.add(unaryOpt.apply(i)));\n        return uniList;\n    }\n    /**\n     * BinaryOperator\n     */\n    Map<String, String> map = new HashMap();\n    map.put(\"1\", \"23\");\n    map.put(\"12\", \"2365\");\n    map.put(\"13\", \"231\");\n    map.put(\"14\", \"232\");\n    BinaryOperator<String> bo = (s1, s2) -> s1 + s2;\n    binaryOperatorFun(bo, map).forEach(x->System.out.println(x));\n    \n    private static List<String> binaryOperatorFun(BinaryOperator<String> bo, Map<String, String> map) {\n        List<String> result = new ArrayList<>();\n        map.forEach((s1,s2)->result.add(bo.apply(s1, s2)));\n        return result;\n    }\n    ```\n\n#### Optional\n\n很像Rust中的Option\n\n````\n/*\n * Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n */\npackage java.util;\n\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.function.Supplier;\n\n/**\n * A container object which may or may not contain a non-null value.\n * If a value is present, {@code isPresent()} will return {@code true} and\n * {@code get()} will return the value.\n *\n * <p>Additional methods that depend on the presence or absence of a contained\n * value are provided, such as {@link #orElse(java.lang.Object) orElse()}\n * (return a default value if value not present) and\n * {@link #ifPresent(java.util.function.Consumer) ifPresent()} (execute a block\n * of code if the value is present).\n *\n * <p>This is a <a href=\"../lang/doc-files/ValueBased.html\">value-based</a>\n * class; use of identity-sensitive operations (including reference equality\n * ({@code ==}), identity hash code, or synchronization) on instances of\n * {@code Optional} may have unpredictable results and should be avoided.\n *\n * @since 1.8\n */\npublic final class Optional<T> {\n    /**\n     * Common instance for {@code empty()}.\n     */\n    private static final Optional<?> EMPTY = new Optional<>();\n\n    /**\n     * If non-null, the value; if null, indicates no value is present\n     */\n    private final T value;\n\n    /**\n     * Constructs an empty instance.\n     *\n     * @implNote Generally only one empty instance, {@link Optional#EMPTY},\n     * should exist per VM.\n     */\n    private Optional() {\n        this.value = null;\n    }\n\n    /**\n     * Returns an empty {@code Optional} instance.  No value is present for this\n     * Optional.\n     *\n     * @apiNote Though it may be tempting to do so, avoid testing if an object\n     * is empty by comparing with {@code ==} against instances returned by\n     * {@code Option.empty()}. There is no guarantee that it is a singleton.\n     * Instead, use {@link #isPresent()}.\n     *\n     * @param <T> Type of the non-existent value\n     * @return an empty {@code Optional}\n     */\n    public static<T> Optional<T> empty() {\n        @SuppressWarnings(\"unchecked\")\n        Optional<T> t = (Optional<T>) EMPTY;\n        return t;\n    }\n\n    /**\n     * Constructs an instance with the value present.\n     *\n     * @param value the non-null value to be present\n     * @throws NullPointerException if value is null\n     */\n    private Optional(T value) {\n        this.value = Objects.requireNonNull(value);\n    }\n\n    /**\n     * Returns an {@code Optional} with the specified present non-null value.\n     *\n     * @param <T> the class of the value\n     * @param value the value to be present, which must be non-null\n     * @return an {@code Optional} with the value present\n     * @throws NullPointerException if value is null\n     */\n    public static <T> Optional<T> of(T value) {\n        return new Optional<>(value);\n    }\n\n    /**\n     * Returns an {@code Optional} describing the specified value, if non-null,\n     * otherwise returns an empty {@code Optional}.\n     *\n     * @param <T> the class of the value\n     * @param value the possibly-null value to describe\n     * @return an {@code Optional} with a present value if the specified value\n     * is non-null, otherwise an empty {@code Optional}\n     */\n    public static <T> Optional<T> ofNullable(T value) {\n        return value == null ? empty() : of(value);\n    }\n\n    /**\n     * If a value is present in this {@code Optional}, returns the value,\n     * otherwise throws {@code NoSuchElementException}.\n     *\n     * @return the non-null value held by this {@code Optional}\n     * @throws NoSuchElementException if there is no value present\n     *\n     * @see Optional#isPresent()\n     */\n    public T get() {\n        if (value == null) {\n            throw new NoSuchElementException(\"No value present\");\n        }\n        return value;\n    }\n\n    /**\n     * Return {@code true} if there is a value present, otherwise {@code false}.\n     *\n     * @return {@code true} if there is a value present, otherwise {@code false}\n     */\n    public boolean isPresent() {\n        return value != null;\n    }\n\n    /**\n     * If a value is present, invoke the specified consumer with the value,\n     * otherwise do nothing.\n     *\n     * @param consumer block to be executed if a value is present\n     * @throws NullPointerException if value is present and {@code consumer} is\n     * null\n     */\n    public void ifPresent(Consumer<? super T> consumer) {\n        if (value != null)\n            consumer.accept(value);\n    }\n\n    /**\n     * If a value is present, and the value matches the given predicate,\n     * return an {@code Optional} describing the value, otherwise return an\n     * empty {@code Optional}.\n     *\n     * @param predicate a predicate to apply to the value, if present\n     * @return an {@code Optional} describing the value of this {@code Optional}\n     * if a value is present and the value matches the given predicate,\n     * otherwise an empty {@code Optional}\n     * @throws NullPointerException if the predicate is null\n     */\n    public Optional<T> filter(Predicate<? super T> predicate) {\n        Objects.requireNonNull(predicate);\n        if (!isPresent())\n            return this;\n        else\n            return predicate.test(value) ? this : empty();\n    }\n\n    /**\n     * If a value is present, apply the provided mapping function to it,\n     * and if the result is non-null, return an {@code Optional} describing the\n     * result.  Otherwise return an empty {@code Optional}.\n     *\n     * @apiNote This method supports post-processing on optional values, without\n     * the need to explicitly check for a return status.  For example, the\n     * following code traverses a stream of file names, selects one that has\n     * not yet been processed, and then opens that file, returning an\n     * {@code Optional<FileInputStream>}:\n     *\n     * <pre>{@code\n     *     Optional<FileInputStream> fis =\n     *         names.stream().filter(name -> !isProcessedYet(name))\n     *                       .findFirst()\n     *                       .map(name -> new FileInputStream(name));\n     * }</pre>\n     *\n     * Here, {@code findFirst} returns an {@code Optional<String>}, and then\n     * {@code map} returns an {@code Optional<FileInputStream>} for the desired\n     * file if one exists.\n     *\n     * @param <U> The type of the result of the mapping function\n     * @param mapper a mapping function to apply to the value, if present\n     * @return an {@code Optional} describing the result of applying a mapping\n     * function to the value of this {@code Optional}, if a value is present,\n     * otherwise an empty {@code Optional}\n     * @throws NullPointerException if the mapping function is null\n     */\n    public<U> Optional<U> map(Function<? super T, ? extends U> mapper) {\n        Objects.requireNonNull(mapper);\n        if (!isPresent())\n            return empty();\n        else {\n            return Optional.ofNullable(mapper.apply(value));\n        }\n    }\n\n    /**\n     * If a value is present, apply the provided {@code Optional}-bearing\n     * mapping function to it, return that result, otherwise return an empty\n     * {@code Optional}.  This method is similar to {@link #map(Function)},\n     * but the provided mapper is one whose result is already an {@code Optional},\n     * and if invoked, {@code flatMap} does not wrap it with an additional\n     * {@code Optional}.\n     *\n     * @param <U> The type parameter to the {@code Optional} returned by\n     * @param mapper a mapping function to apply to the value, if present\n     *           the mapping function\n     * @return the result of applying an {@code Optional}-bearing mapping\n     * function to the value of this {@code Optional}, if a value is present,\n     * otherwise an empty {@code Optional}\n     * @throws NullPointerException if the mapping function is null or returns\n     * a null result\n     */\n    public<U> Optional<U> flatMap(Function<? super T, Optional<U>> mapper) {\n        Objects.requireNonNull(mapper);\n        if (!isPresent())\n            return empty();\n        else {\n            return Objects.requireNonNull(mapper.apply(value));\n        }\n    }\n\n    /**\n     * Return the value if present, otherwise return {@code other}.\n     *\n     * @param other the value to be returned if there is no value present, may\n     * be null\n     * @return the value, if present, otherwise {@code other}\n     */\n    public T orElse(T other) {\n        return value != null ? value : other;\n    }\n\n    /**\n     * Return the value if present, otherwise invoke {@code other} and return\n     * the result of that invocation.\n     *\n     * @param other a {@code Supplier} whose result is returned if no value\n     * is present\n     * @return the value if present otherwise the result of {@code other.get()}\n     * @throws NullPointerException if value is not present and {@code other} is\n     * null\n     */\n    public T orElseGet(Supplier<? extends T> other) {\n        return value != null ? value : other.get();\n    }\n\n    /**\n     * Return the contained value, if present, otherwise throw an exception\n     * to be created by the provided supplier.\n     *\n     * @apiNote A method reference to the exception constructor with an empty\n     * argument list can be used as the supplier. For example,\n     * {@code IllegalStateException::new}\n     *\n     * @param <X> Type of the exception to be thrown\n     * @param exceptionSupplier The supplier which will return the exception to\n     * be thrown\n     * @return the present value\n     * @throws X if there is no value present\n     * @throws NullPointerException if no value is present and\n     * {@code exceptionSupplier} is null\n     */\n    public <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier) throws X {\n        if (value != null) {\n            return value;\n        } else {\n            throw exceptionSupplier.get();\n        }\n    }\n\n    /**\n     * Indicates whether some other object is \"equal to\" this Optional. The\n     * other object is considered equal if:\n     * <ul>\n     * <li>it is also an {@code Optional} and;\n     * <li>both instances have no value present or;\n     * <li>the present values are \"equal to\" each other via {@code equals()}.\n     * </ul>\n     *\n     * @param obj an object to be tested for equality\n     * @return {code true} if the other object is \"equal to\" this object\n     * otherwise {@code false}\n     */\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n\n        if (!(obj instanceof Optional)) {\n            return false;\n        }\n\n        Optional<?> other = (Optional<?>) obj;\n        return Objects.equals(value, other.value);\n    }\n\n    /**\n     * Returns the hash code value of the present value, if any, or 0 (zero) if\n     * no value is present.\n     *\n     * @return hash code value of the present value or 0 if no value is present\n     */\n    @Override\n    public int hashCode() {\n        return Objects.hashCode(value);\n    }\n\n    /**\n     * Returns a non-empty string representation of this Optional suitable for\n     * debugging. The exact presentation format is unspecified and may vary\n     * between implementations and versions.\n     *\n     * @implSpec If a value is present the result must include its string\n     * representation in the result. Empty and present Optionals must be\n     * unambiguously differentiable.\n     *\n     * @return the string representation of this instance\n     */\n    @Override\n    public String toString() {\n        return value != null\n            ? String.format(\"Optional[%s]\", value)\n            : \"Optional.empty\";\n    }\n}    \t\n````\n\n* 创建Optional对象\n\n  * 声明一个空的Optional对象 \n\n    ```\n    Optional<Car> optCar = Optional.empty()；\n    ```\n\n  * 创建一个有值的Optional如果你赋值为 null，则会抛出空指针异常。 如果值是 null，则目标 Optional 对象将会是空 (记得值是 absent，不是 null)。 \n\n    ```\n    Optional<Car> optCar = Optional.of(car)；\n    ```\n\n  * 可接受null值的Optional的创建\n\n    ```\n    Optional<Car> optCar = Optional.ofNullable(car);\n    ```\n\n* 使用map从Optional中提取和转换值\n\n       Optional<Project> ppp = Optional.of(pp);\n       Optional<Optional<String>> map2 = ppp.map(Project::getAuth);\n       Optional<String> autss = map2.get();\n   ````\n   Optional<Person> optPerson = Optional.ofNullable(person）;\n   \n   Optional<Car> optcar=optPerson.map(Person::getCar);\n   ````\n\n* 使用flatMap链接Optional对象,用于处理嵌套的optional,流\n\n  ```\n  OptionalPerson> optPerson = Optional.ofNullable(person）;\n  Optional<Wheel> optw=optPerson.flatMap（Person::getCar）.map(Car::getWheel());\n  ```\n\n* 默认行为及解引用Optional对象。\n\n  * ``get()``获取封装的变量，或者抛出NoSuchElementException();\n  * ``orElse(T other)``如果Optional对象中不包含值时可以进行提供一个默认值\n  * ``orElseGet（Supplier<? extends T> other）``是orElse的延迟嗲用版，Supplier只有在Optional中不含值的时候才执行调用\n  * ``orElseThrow（Supplier<? extends X> exceptionSupplier）``和get方法相似，只不过在遭遇对象元素为空的时候会抛出异常，可以定制异常。\n  * ``ifPresent(Consumer <? Super T>)`` 在变量值存在时执行一个作为参数传入的方法。否则不做任何操作。\n\n* 使用filter剔除特定的值\n\n   ```\n   Optional<String> optt = Optional.of(\"123\");\n   optt.filter(s1->\"123\".equals(s1)).ifPresent(x->System.out.println(x));\n   ```\n\n* 以下情况不使用Optional:\n\n   * in the domain model layer (it’s not serializable) \n   * in DTOs (it’s not serializable) \n   * in input parameters of methods \n   * in constructor parameters \n\n* 何时使用Optional\n\n   **当函数的返回值有可能是 null 时，我们应该尽可能地去使用它.**\n\n####  流\n\n```\n\npackage java.util.stream;\n\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.Spliterator;\nimport java.util.Spliterators;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport java.util.function.BinaryOperator;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.IntFunction;\nimport java.util.function.Predicate;\nimport java.util.function.Supplier;\nimport java.util.function.ToDoubleFunction;\nimport java.util.function.ToIntFunction;\nimport java.util.function.ToLongFunction;\nimport java.util.function.UnaryOperator;\n\n/**\n * A sequence of elements supporting sequential and parallel aggregate\n * operations.  The following example illustrates an aggregate operation using\n * {@link Stream} and {@link IntStream}:\n *\n * <pre>{@code\n *     int sum = widgets.stream()\n *                      .filter(w -> w.getColor() == RED)\n *                      .mapToInt(w -> w.getWeight())\n *                      .sum();\n * }</pre>\n *\n * In this example, {@code widgets} is a {@code Collection<Widget>}.  We create\n * a stream of {@code Widget} objects via {@link Collection#stream Collection.stream()},\n * filter it to produce a stream containing only the red widgets, and then\n * transform it into a stream of {@code int} values representing the weight of\n * each red widget. Then this stream is summed to produce a total weight.\n *\n * <p>In addition to {@code Stream}, which is a stream of object references,\n * there are primitive specializations for {@link IntStream}, {@link LongStream},\n * and {@link DoubleStream}, all of which are referred to as \"streams\" and\n * conform to the characteristics and restrictions described here.\n *\n * <p>To perform a computation, stream\n * <a href=\"package-summary.html#StreamOps\">operations</a> are composed into a\n * <em>stream pipeline</em>.  A stream pipeline consists of a source (which\n * might be an array, a collection, a generator function, an I/O channel,\n * etc), zero or more <em>intermediate operations</em> (which transform a\n * stream into another stream, such as {@link Stream#filter(Predicate)}), and a\n * <em>terminal operation</em> (which produces a result or side-effect, such\n * as {@link Stream#count()} or {@link Stream#forEach(Consumer)}).\n * Streams are lazy; computation on the source data is only performed when the\n * terminal operation is initiated, and source elements are consumed only\n * as needed.\n *\n * <p>Collections and streams, while bearing some superficial similarities,\n * have different goals.  Collections are primarily concerned with the efficient\n * management of, and access to, their elements.  By contrast, streams do not\n * provide a means to directly access or manipulate their elements, and are\n * instead concerned with declaratively describing their source and the\n * computational operations which will be performed in aggregate on that source.\n * However, if the provided stream operations do not offer the desired\n * functionality, the {@link #iterator()} and {@link #spliterator()} operations\n * can be used to perform a controlled traversal.\n *\n * <p>A stream pipeline, like the \"widgets\" example above, can be viewed as\n * a <em>query</em> on the stream source.  Unless the source was explicitly\n * designed for concurrent modification (such as a {@link ConcurrentHashMap}),\n * unpredictable or erroneous behavior may result from modifying the stream\n * source while it is being queried.\n *\n * <p>Most stream operations accept parameters that describe user-specified\n * behavior, such as the lambda expression {@code w -> w.getWeight()} passed to\n * {@code mapToInt} in the example above.  To preserve correct behavior,\n * these <em>behavioral parameters</em>:\n * <ul>\n * <li>must be <a href=\"package-summary.html#NonInterference\">non-interfering</a>\n * (they do not modify the stream source); and</li>\n * <li>in most cases must be <a href=\"package-summary.html#Statelessness\">stateless</a>\n * (their result should not depend on any state that might change during execution\n * of the stream pipeline).</li>\n * </ul>\n *\n * <p>Such parameters are always instances of a\n * <a href=\"../function/package-summary.html\">functional interface</a> such\n * as {@link java.util.function.Function}, and are often lambda expressions or\n * method references.  Unless otherwise specified these parameters must be\n * <em>non-null</em>.\n *\n * <p>A stream should be operated on (invoking an intermediate or terminal stream\n * operation) only once.  This rules out, for example, \"forked\" streams, where\n * the same source feeds two or more pipelines, or multiple traversals of the\n * same stream.  A stream implementation may throw {@link IllegalStateException}\n * if it detects that the stream is being reused. However, since some stream\n * operations may return their receiver rather than a new stream object, it may\n * not be possible to detect reuse in all cases.\n *\n * <p>Streams have a {@link #close()} method and implement {@link AutoCloseable},\n * but nearly all stream instances do not actually need to be closed after use.\n * Generally, only streams whose source is an IO channel (such as those returned\n * by {@link Files#lines(Path, Charset)}) will require closing.  Most streams\n * are backed by collections, arrays, or generating functions, which require no\n * special resource management.  (If a stream does require closing, it can be\n * declared as a resource in a {@code try}-with-resources statement.)\n *\n * <p>Stream pipelines may execute either sequentially or in\n * <a href=\"package-summary.html#Parallelism\">parallel</a>.  This\n * execution mode is a property of the stream.  Streams are created\n * with an initial choice of sequential or parallel execution.  (For example,\n * {@link Collection#stream() Collection.stream()} creates a sequential stream,\n * and {@link Collection#parallelStream() Collection.parallelStream()} creates\n * a parallel one.)  This choice of execution mode may be modified by the\n * {@link #sequential()} or {@link #parallel()} methods, and may be queried with\n * the {@link #isParallel()} method.\n *\n * @param <T> the type of the stream elements\n * @since 1.8\n * @see IntStream\n * @see LongStream\n * @see DoubleStream\n * @see <a href=\"package-summary.html\">java.util.stream</a>\n */\npublic interface Stream<T> extends BaseStream<T, Stream<T>> {\n\n    /**\n     * Returns a stream consisting of the elements of this stream that match\n     * the given predicate.\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                  predicate to apply to each element to determine if it\n     *                  should be included\n     * @return the new stream\n     */\n    Stream<T> filter(Predicate<? super T> predicate);\n\n    /**\n     * Returns a stream consisting of the results of applying the given\n     * function to the elements of this stream.\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @param <R> The element type of the new stream\n     * @param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *               <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *               function to apply to each element\n     * @return the new stream\n     */\n    <R> Stream<R> map(Function<? super T, ? extends R> mapper);\n\n    /**\n     * Returns an {@code IntStream} consisting of the results of applying the\n     * given function to the elements of this stream.\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">\n     *     intermediate operation</a>.\n     *\n     * @param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *               <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *               function to apply to each element\n     * @return the new stream\n     */\n    IntStream mapToInt(ToIntFunction<? super T> mapper);\n\n    /**\n     * Returns a {@code LongStream} consisting of the results of applying the\n     * given function to the elements of this stream.\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *               <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *               function to apply to each element\n     * @return the new stream\n     */\n    LongStream mapToLong(ToLongFunction<? super T> mapper);\n\n    /**\n     * Returns a {@code DoubleStream} consisting of the results of applying the\n     * given function to the elements of this stream.\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *               <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *               function to apply to each element\n     * @return the new stream\n     */\n    DoubleStream mapToDouble(ToDoubleFunction<? super T> mapper);\n\n    /**\n     * Returns a stream consisting of the results of replacing each element of\n     * this stream with the contents of a mapped stream produced by applying\n     * the provided mapping function to each element.  Each mapped stream is\n     * {@link java.util.stream.BaseStream#close() closed} after its contents\n     * have been placed into this stream.  (If a mapped stream is {@code null}\n     * an empty stream is used, instead.)\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @apiNote\n     * The {@code flatMap()} operation has the effect of applying a one-to-many\n     * transformation to the elements of the stream, and then flattening the\n     * resulting elements into a new stream.\n     *\n     * <p><b>Examples.</b>\n     *\n     * <p>If {@code orders} is a stream of purchase orders, and each purchase\n     * order contains a collection of line items, then the following produces a\n     * stream containing all the line items in all the orders:\n     * <pre>{@code\n     *     orders.flatMap(order -> order.getLineItems().stream())...\n     * }</pre>\n     *\n     * <p>If {@code path} is the path to a file, then the following produces a\n     * stream of the {@code words} contained in that file:\n     * <pre>{@code\n     *     Stream<String> lines = Files.lines(path, StandardCharsets.UTF_8);\n     *     Stream<String> words = lines.flatMap(line -> Stream.of(line.split(\" +\")));\n     * }</pre>\n     * The {@code mapper} function passed to {@code flatMap} splits a line,\n     * using a simple regular expression, into an array of words, and then\n     * creates a stream of words from that array.\n     *\n     * @param <R> The element type of the new stream\n     * @param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *               <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *               function to apply to each element which produces a stream\n     *               of new values\n     * @return the new stream\n     */\n    <R> Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper);\n\n    /**\n     * Returns an {@code IntStream} consisting of the results of replacing each\n     * element of this stream with the contents of a mapped stream produced by\n     * applying the provided mapping function to each element.  Each mapped\n     * stream is {@link java.util.stream.BaseStream#close() closed} after its\n     * contents have been placed into this stream.  (If a mapped stream is\n     * {@code null} an empty stream is used, instead.)\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *               <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *               function to apply to each element which produces a stream\n     *               of new values\n     * @return the new stream\n     * @see #flatMap(Function)\n     */\n    IntStream flatMapToInt(Function<? super T, ? extends IntStream> mapper);\n\n    /**\n     * Returns an {@code LongStream} consisting of the results of replacing each\n     * element of this stream with the contents of a mapped stream produced by\n     * applying the provided mapping function to each element.  Each mapped\n     * stream is {@link java.util.stream.BaseStream#close() closed} after its\n     * contents have been placed into this stream.  (If a mapped stream is\n     * {@code null} an empty stream is used, instead.)\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *               <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *               function to apply to each element which produces a stream\n     *               of new values\n     * @return the new stream\n     * @see #flatMap(Function)\n     */\n    LongStream flatMapToLong(Function<? super T, ? extends LongStream> mapper);\n\n    /**\n     * Returns an {@code DoubleStream} consisting of the results of replacing\n     * each element of this stream with the contents of a mapped stream produced\n     * by applying the provided mapping function to each element.  Each mapped\n     * stream is {@link java.util.stream.BaseStream#close() closed} after its\n     * contents have placed been into this stream.  (If a mapped stream is\n     * {@code null} an empty stream is used, instead.)\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * @param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *               <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *               function to apply to each element which produces a stream\n     *               of new values\n     * @return the new stream\n     * @see #flatMap(Function)\n     */\n    DoubleStream flatMapToDouble(Function<? super T, ? extends DoubleStream> mapper);\n\n    /**\n     * Returns a stream consisting of the distinct elements (according to\n     * {@link Object#equals(Object)}) of this stream.\n     *\n     * <p>For ordered streams, the selection of distinct elements is stable\n     * (for duplicated elements, the element appearing first in the encounter\n     * order is preserved.)  For unordered streams, no stability guarantees\n     * are made.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">stateful\n     * intermediate operation</a>.\n     *\n     * @apiNote\n     * Preserving stability for {@code distinct()} in parallel pipelines is\n     * relatively expensive (requires that the operation act as a full barrier,\n     * with substantial buffering overhead), and stability is often not needed.\n     * Using an unordered stream source (such as {@link #generate(Supplier)})\n     * or removing the ordering constraint with {@link #unordered()} may result\n     * in significantly more efficient execution for {@code distinct()} in parallel\n     * pipelines, if the semantics of your situation permit.  If consistency\n     * with encounter order is required, and you are experiencing poor performance\n     * or memory utilization with {@code distinct()} in parallel pipelines,\n     * switching to sequential execution with {@link #sequential()} may improve\n     * performance.\n     *\n     * @return the new stream\n     */\n    Stream<T> distinct();\n\n    /**\n     * Returns a stream consisting of the elements of this stream, sorted\n     * according to natural order.  If the elements of this stream are not\n     * {@code Comparable}, a {@code java.lang.ClassCastException} may be thrown\n     * when the terminal operation is executed.\n     *\n     * <p>For ordered streams, the sort is stable.  For unordered streams, no\n     * stability guarantees are made.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">stateful\n     * intermediate operation</a>.\n     *\n     * @return the new stream\n     */\n    Stream<T> sorted();\n\n    /**\n     * Returns a stream consisting of the elements of this stream, sorted\n     * according to the provided {@code Comparator}.\n     *\n     * <p>For ordered streams, the sort is stable.  For unordered streams, no\n     * stability guarantees are made.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">stateful\n     * intermediate operation</a>.\n     *\n     * @param comparator a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                   <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                   {@code Comparator} to be used to compare stream elements\n     * @return the new stream\n     */\n    Stream<T> sorted(Comparator<? super T> comparator);\n\n    /**\n     * Returns a stream consisting of the elements of this stream, additionally\n     * performing the provided action on each element as elements are consumed\n     * from the resulting stream.\n     *\n     * <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n     * operation</a>.\n     *\n     * <p>For parallel stream pipelines, the action may be called at\n     * whatever time and in whatever thread the element is made available by the\n     * upstream operation.  If the action modifies shared state,\n     * it is responsible for providing the required synchronization.\n     *\n     * @apiNote This method exists mainly to support debugging, where you want\n     * to see the elements as they flow past a certain point in a pipeline:\n     * <pre>{@code\n     *     Stream.of(\"one\", \"two\", \"three\", \"four\")\n     *         .filter(e -> e.length() > 3)\n     *         .peek(e -> System.out.println(\"Filtered value: \" + e))\n     *         .map(String::toUpperCase)\n     *         .peek(e -> System.out.println(\"Mapped value: \" + e))\n     *         .collect(Collectors.toList());\n     * }</pre>\n     *\n     * @param action a <a href=\"package-summary.html#NonInterference\">\n     *                 non-interfering</a> action to perform on the elements as\n     *                 they are consumed from the stream\n     * @return the new stream\n     */\n    Stream<T> peek(Consumer<? super T> action);\n\n    /**\n     * Returns a stream consisting of the elements of this stream, truncated\n     * to be no longer than {@code maxSize} in length.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n     * stateful intermediate operation</a>.\n     *\n     * @apiNote\n     * While {@code limit()} is generally a cheap operation on sequential\n     * stream pipelines, it can be quite expensive on ordered parallel pipelines,\n     * especially for large values of {@code maxSize}, since {@code limit(n)}\n     * is constrained to return not just any <em>n</em> elements, but the\n     * <em>first n</em> elements in the encounter order.  Using an unordered\n     * stream source (such as {@link #generate(Supplier)}) or removing the\n     * ordering constraint with {@link #unordered()} may result in significant\n     * speedups of {@code limit()} in parallel pipelines, if the semantics of\n     * your situation permit.  If consistency with encounter order is required,\n     * and you are experiencing poor performance or memory utilization with\n     * {@code limit()} in parallel pipelines, switching to sequential execution\n     * with {@link #sequential()} may improve performance.\n     *\n     * @param maxSize the number of elements the stream should be limited to\n     * @return the new stream\n     * @throws IllegalArgumentException if {@code maxSize} is negative\n     */\n    Stream<T> limit(long maxSize);\n\n    /**\n     * Returns a stream consisting of the remaining elements of this stream\n     * after discarding the first {@code n} elements of the stream.\n     * If this stream contains fewer than {@code n} elements then an\n     * empty stream will be returned.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">stateful\n     * intermediate operation</a>.\n     *\n     * @apiNote\n     * While {@code skip()} is generally a cheap operation on sequential\n     * stream pipelines, it can be quite expensive on ordered parallel pipelines,\n     * especially for large values of {@code n}, since {@code skip(n)}\n     * is constrained to skip not just any <em>n</em> elements, but the\n     * <em>first n</em> elements in the encounter order.  Using an unordered\n     * stream source (such as {@link #generate(Supplier)}) or removing the\n     * ordering constraint with {@link #unordered()} may result in significant\n     * speedups of {@code skip()} in parallel pipelines, if the semantics of\n     * your situation permit.  If consistency with encounter order is required,\n     * and you are experiencing poor performance or memory utilization with\n     * {@code skip()} in parallel pipelines, switching to sequential execution\n     * with {@link #sequential()} may improve performance.\n     *\n     * @param n the number of leading elements to skip\n     * @return the new stream\n     * @throws IllegalArgumentException if {@code n} is negative\n     */\n    Stream<T> skip(long n);\n\n    /**\n     * Performs an action for each element of this stream.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * <p>The behavior of this operation is explicitly nondeterministic.\n     * For parallel stream pipelines, this operation does <em>not</em>\n     * guarantee to respect the encounter order of the stream, as doing so\n     * would sacrifice the benefit of parallelism.  For any given element, the\n     * action may be performed at whatever time and in whatever thread the\n     * library chooses.  If the action accesses shared state, it is\n     * responsible for providing the required synchronization.\n     *\n     * @param action a <a href=\"package-summary.html#NonInterference\">\n     *               non-interfering</a> action to perform on the elements\n     */\n    void forEach(Consumer<? super T> action);\n\n    /**\n     * Performs an action for each element of this stream, in the encounter\n     * order of the stream if the stream has a defined encounter order.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * <p>This operation processes the elements one at a time, in encounter\n     * order if one exists.  Performing the action for one element\n     * <a href=\"../concurrent/package-summary.html#MemoryVisibility\"><i>happens-before</i></a>\n     * performing the action for subsequent elements, but for any given element,\n     * the action may be performed in whatever thread the library chooses.\n     *\n     * @param action a <a href=\"package-summary.html#NonInterference\">\n     *               non-interfering</a> action to perform on the elements\n     * @see #forEach(Consumer)\n     */\n    void forEachOrdered(Consumer<? super T> action);\n\n    /**\n     * Returns an array containing the elements of this stream.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * @return an array containing the elements of this stream\n     */\n    Object[] toArray();\n\n    /**\n     * Returns an array containing the elements of this stream, using the\n     * provided {@code generator} function to allocate the returned array, as\n     * well as any additional arrays that might be required for a partitioned\n     * execution or for resizing.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * @apiNote\n     * The generator function takes an integer, which is the size of the\n     * desired array, and produces an array of the desired size.  This can be\n     * concisely expressed with an array constructor reference:\n     * <pre>{@code\n     *     Person[] men = people.stream()\n     *                          .filter(p -> p.getGender() == MALE)\n     *                          .toArray(Person[]::new);\n     * }</pre>\n     *\n     * @param <A> the element type of the resulting array\n     * @param generator a function which produces a new array of the desired\n     *                  type and the provided length\n     * @return an array containing the elements in this stream\n     * @throws ArrayStoreException if the runtime type of the array returned\n     * from the array generator is not a supertype of the runtime type of every\n     * element in this stream\n     */\n    <A> A[] toArray(IntFunction<A[]> generator);\n\n    /**\n     * Performs a <a href=\"package-summary.html#Reduction\">reduction</a> on the\n     * elements of this stream, using the provided identity value and an\n     * <a href=\"package-summary.html#Associativity\">associative</a>\n     * accumulation function, and returns the reduced value.  This is equivalent\n     * to:\n     * <pre>{@code\n     *     T result = identity;\n     *     for (T element : this stream)\n     *         result = accumulator.apply(result, element)\n     *     return result;\n     * }</pre>\n     *\n     * but is not constrained to execute sequentially.\n     *\n     * <p>The {@code identity} value must be an identity for the accumulator\n     * function. This means that for all {@code t},\n     * {@code accumulator.apply(identity, t)} is equal to {@code t}.\n     * The {@code accumulator} function must be an\n     * <a href=\"package-summary.html#Associativity\">associative</a> function.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * @apiNote Sum, min, max, average, and string concatenation are all special\n     * cases of reduction. Summing a stream of numbers can be expressed as:\n     *\n     * <pre>{@code\n     *     Integer sum = integers.reduce(0, (a, b) -> a+b);\n     * }</pre>\n     *\n     * or:\n     *\n     * <pre>{@code\n     *     Integer sum = integers.reduce(0, Integer::sum);\n     * }</pre>\n     *\n     * <p>While this may seem a more roundabout way to perform an aggregation\n     * compared to simply mutating a running total in a loop, reduction\n     * operations parallelize more gracefully, without needing additional\n     * synchronization and with greatly reduced risk of data races.\n     *\n     * @param identity the identity value for the accumulating function\n     * @param accumulator an <a href=\"package-summary.html#Associativity\">associative</a>,\n     *                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                    function for combining two values\n     * @return the result of the reduction\n     */\n    T reduce(T identity, BinaryOperator<T> accumulator);\n\n    /**\n     * Performs a <a href=\"package-summary.html#Reduction\">reduction</a> on the\n     * elements of this stream, using an\n     * <a href=\"package-summary.html#Associativity\">associative</a> accumulation\n     * function, and returns an {@code Optional} describing the reduced value,\n     * if any. This is equivalent to:\n     * <pre>{@code\n     *     boolean foundAny = false;\n     *     T result = null;\n     *     for (T element : this stream) {\n     *         if (!foundAny) {\n     *             foundAny = true;\n     *             result = element;\n     *         }\n     *         else\n     *             result = accumulator.apply(result, element);\n     *     }\n     *     return foundAny ? Optional.of(result) : Optional.empty();\n     * }</pre>\n     *\n     * but is not constrained to execute sequentially.\n     *\n     * <p>The {@code accumulator} function must be an\n     * <a href=\"package-summary.html#Associativity\">associative</a> function.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * @param accumulator an <a href=\"package-summary.html#Associativity\">associative</a>,\n     *                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                    function for combining two values\n     * @return an {@link Optional} describing the result of the reduction\n     * @throws NullPointerException if the result of the reduction is null\n     * @see #reduce(Object, BinaryOperator)\n     * @see #min(Comparator)\n     * @see #max(Comparator)\n     */\n    Optional<T> reduce(BinaryOperator<T> accumulator);\n\n    /**\n     * Performs a <a href=\"package-summary.html#Reduction\">reduction</a> on the\n     * elements of this stream, using the provided identity, accumulation and\n     * combining functions.  This is equivalent to:\n     * <pre>{@code\n     *     U result = identity;\n     *     for (T element : this stream)\n     *         result = accumulator.apply(result, element)\n     *     return result;\n     * }</pre>\n     *\n     * but is not constrained to execute sequentially.\n     *\n     * <p>The {@code identity} value must be an identity for the combiner\n     * function.  This means that for all {@code u}, {@code combiner(identity, u)}\n     * is equal to {@code u}.  Additionally, the {@code combiner} function\n     * must be compatible with the {@code accumulator} function; for all\n     * {@code u} and {@code t}, the following must hold:\n     * <pre>{@code\n     *     combiner.apply(u, accumulator.apply(identity, t)) == accumulator.apply(u, t)\n     * }</pre>\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * @apiNote Many reductions using this form can be represented more simply\n     * by an explicit combination of {@code map} and {@code reduce} operations.\n     * The {@code accumulator} function acts as a fused mapper and accumulator,\n     * which can sometimes be more efficient than separate mapping and reduction,\n     * such as when knowing the previously reduced value allows you to avoid\n     * some computation.\n     *\n     * @param <U> The type of the result\n     * @param identity the identity value for the combiner function\n     * @param accumulator an <a href=\"package-summary.html#Associativity\">associative</a>,\n     *                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                    function for incorporating an additional element into a result\n     * @param combiner an <a href=\"package-summary.html#Associativity\">associative</a>,\n     *                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                    function for combining two values, which must be\n     *                    compatible with the accumulator function\n     * @return the result of the reduction\n     * @see #reduce(BinaryOperator)\n     * @see #reduce(Object, BinaryOperator)\n     */\n    <U> U reduce(U identity,\n                 BiFunction<U, ? super T, U> accumulator,\n                 BinaryOperator<U> combiner);\n\n    /**\n     * Performs a <a href=\"package-summary.html#MutableReduction\">mutable\n     * reduction</a> operation on the elements of this stream.  A mutable\n     * reduction is one in which the reduced value is a mutable result container,\n     * such as an {@code ArrayList}, and elements are incorporated by updating\n     * the state of the result rather than by replacing the result.  This\n     * produces a result equivalent to:\n     * <pre>{@code\n     *     R result = supplier.get();\n     *     for (T element : this stream)\n     *         accumulator.accept(result, element);\n     *     return result;\n     * }</pre>\n     *\n     * <p>Like {@link #reduce(Object, BinaryOperator)}, {@code collect} operations\n     * can be parallelized without requiring additional synchronization.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * @apiNote There are many existing classes in the JDK whose signatures are\n     * well-suited for use with method references as arguments to {@code collect()}.\n     * For example, the following will accumulate strings into an {@code ArrayList}:\n     * <pre>{@code\n     *     List<String> asList = stringStream.collect(ArrayList::new, ArrayList::add,\n     *                                                ArrayList::addAll);\n     * }</pre>\n     *\n     * <p>The following will take a stream of strings and concatenates them into a\n     * single string:\n     * <pre>{@code\n     *     String concat = stringStream.collect(StringBuilder::new, StringBuilder::append,\n     *                                          StringBuilder::append)\n     *                                 .toString();\n     * }</pre>\n     *\n     * @param <R> type of the result\n     * @param supplier a function that creates a new result container. For a\n     *                 parallel execution, this function may be called\n     *                 multiple times and must return a fresh value each time.\n     * @param accumulator an <a href=\"package-summary.html#Associativity\">associative</a>,\n     *                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                    function for incorporating an additional element into a result\n     * @param combiner an <a href=\"package-summary.html#Associativity\">associative</a>,\n     *                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                    function for combining two values, which must be\n     *                    compatible with the accumulator function\n     * @return the result of the reduction\n     */\n    <R> R collect(Supplier<R> supplier,\n                  BiConsumer<R, ? super T> accumulator,\n                  BiConsumer<R, R> combiner);\n\n    /**\n     * Performs a <a href=\"package-summary.html#MutableReduction\">mutable\n     * reduction</a> operation on the elements of this stream using a\n     * {@code Collector}.  A {@code Collector}\n     * encapsulates the functions used as arguments to\n     * {@link #collect(Supplier, BiConsumer, BiConsumer)}, allowing for reuse of\n     * collection strategies and composition of collect operations such as\n     * multiple-level grouping or partitioning.\n     *\n     * <p>If the stream is parallel, and the {@code Collector}\n     * is {@link Collector.Characteristics#CONCURRENT concurrent}, and\n     * either the stream is unordered or the collector is\n     * {@link Collector.Characteristics#UNORDERED unordered},\n     * then a concurrent reduction will be performed (see {@link Collector} for\n     * details on concurrent reduction.)\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * <p>When executed in parallel, multiple intermediate results may be\n     * instantiated, populated, and merged so as to maintain isolation of\n     * mutable data structures.  Therefore, even when executed in parallel\n     * with non-thread-safe data structures (such as {@code ArrayList}), no\n     * additional synchronization is needed for a parallel reduction.\n     *\n     * @apiNote\n     * The following will accumulate strings into an ArrayList:\n     * <pre>{@code\n     *     List<String> asList = stringStream.collect(Collectors.toList());\n     * }</pre>\n     *\n     * <p>The following will classify {@code Person} objects by city:\n     * <pre>{@code\n     *     Map<String, List<Person>> peopleByCity\n     *         = personStream.collect(Collectors.groupingBy(Person::getCity));\n     * }</pre>\n     *\n     * <p>The following will classify {@code Person} objects by state and city,\n     * cascading two {@code Collector}s together:\n     * <pre>{@code\n     *     Map<String, Map<String, List<Person>>> peopleByStateAndCity\n     *         = personStream.collect(Collectors.groupingBy(Person::getState,\n     *                                                      Collectors.groupingBy(Person::getCity)));\n     * }</pre>\n     *\n     * @param <R> the type of the result\n     * @param <A> the intermediate accumulation type of the {@code Collector}\n     * @param collector the {@code Collector} describing the reduction\n     * @return the result of the reduction\n     * @see #collect(Supplier, BiConsumer, BiConsumer)\n     * @see Collectors\n     */\n    <R, A> R collect(Collector<? super T, A, R> collector);\n\n    /**\n     * Returns the minimum element of this stream according to the provided\n     * {@code Comparator}.  This is a special case of a\n     * <a href=\"package-summary.html#Reduction\">reduction</a>.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal operation</a>.\n     *\n     * @param comparator a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                   <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                   {@code Comparator} to compare elements of this stream\n     * @return an {@code Optional} describing the minimum element of this stream,\n     * or an empty {@code Optional} if the stream is empty\n     * @throws NullPointerException if the minimum element is null\n     */\n    Optional<T> min(Comparator<? super T> comparator);\n\n    /**\n     * Returns the maximum element of this stream according to the provided\n     * {@code Comparator}.  This is a special case of a\n     * <a href=\"package-summary.html#Reduction\">reduction</a>.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n     * operation</a>.\n     *\n     * @param comparator a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                   <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                   {@code Comparator} to compare elements of this stream\n     * @return an {@code Optional} describing the maximum element of this stream,\n     * or an empty {@code Optional} if the stream is empty\n     * @throws NullPointerException if the maximum element is null\n     */\n    Optional<T> max(Comparator<? super T> comparator);\n\n    /**\n     * Returns the count of elements in this stream.  This is a special case of\n     * a <a href=\"package-summary.html#Reduction\">reduction</a> and is\n     * equivalent to:\n     * <pre>{@code\n     *     return mapToLong(e -> 1L).sum();\n     * }</pre>\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">terminal operation</a>.\n     *\n     * @return the count of elements in this stream\n     */\n    long count();\n\n    /**\n     * Returns whether any elements of this stream match the provided\n     * predicate.  May not evaluate the predicate on all elements if not\n     * necessary for determining the result.  If the stream is empty then\n     * {@code false} is returned and the predicate is not evaluated.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n     * terminal operation</a>.\n     *\n     * @apiNote\n     * This method evaluates the <em>existential quantification</em> of the\n     * predicate over the elements of the stream (for some x P(x)).\n     *\n     * @param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                  predicate to apply to elements of this stream\n     * @return {@code true} if any elements of the stream match the provided\n     * predicate, otherwise {@code false}\n     */\n    boolean anyMatch(Predicate<? super T> predicate);\n\n    /**\n     * Returns whether all elements of this stream match the provided predicate.\n     * May not evaluate the predicate on all elements if not necessary for\n     * determining the result.  If the stream is empty then {@code true} is\n     * returned and the predicate is not evaluated.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n     * terminal operation</a>.\n     *\n     * @apiNote\n     * This method evaluates the <em>universal quantification</em> of the\n     * predicate over the elements of the stream (for all x P(x)).  If the\n     * stream is empty, the quantification is said to be <em>vacuously\n     * satisfied</em> and is always {@code true} (regardless of P(x)).\n     *\n     * @param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                  predicate to apply to elements of this stream\n     * @return {@code true} if either all elements of the stream match the\n     * provided predicate or the stream is empty, otherwise {@code false}\n     */\n    boolean allMatch(Predicate<? super T> predicate);\n\n    /**\n     * Returns whether no elements of this stream match the provided predicate.\n     * May not evaluate the predicate on all elements if not necessary for\n     * determining the result.  If the stream is empty then {@code true} is\n     * returned and the predicate is not evaluated.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n     * terminal operation</a>.\n     *\n     * @apiNote\n     * This method evaluates the <em>universal quantification</em> of the\n     * negated predicate over the elements of the stream (for all x ~P(x)).  If\n     * the stream is empty, the quantification is said to be vacuously satisfied\n     * and is always {@code true}, regardless of P(x).\n     *\n     * @param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n     *                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n     *                  predicate to apply to elements of this stream\n     * @return {@code true} if either no elements of the stream match the\n     * provided predicate or the stream is empty, otherwise {@code false}\n     */\n    boolean noneMatch(Predicate<? super T> predicate);\n\n    /**\n     * Returns an {@link Optional} describing the first element of this stream,\n     * or an empty {@code Optional} if the stream is empty.  If the stream has\n     * no encounter order, then any element may be returned.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n     * terminal operation</a>.\n     *\n     * @return an {@code Optional} describing the first element of this stream,\n     * or an empty {@code Optional} if the stream is empty\n     * @throws NullPointerException if the element selected is null\n     */\n    Optional<T> findFirst();\n\n    /**\n     * Returns an {@link Optional} describing some element of the stream, or an\n     * empty {@code Optional} if the stream is empty.\n     *\n     * <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n     * terminal operation</a>.\n     *\n     * <p>The behavior of this operation is explicitly nondeterministic; it is\n     * free to select any element in the stream.  This is to allow for maximal\n     * performance in parallel operations; the cost is that multiple invocations\n     * on the same source may not return the same result.  (If a stable result\n     * is desired, use {@link #findFirst()} instead.)\n     *\n     * @return an {@code Optional} describing some element of this stream, or an\n     * empty {@code Optional} if the stream is empty\n     * @throws NullPointerException if the element selected is null\n     * @see #findFirst()\n     */\n    Optional<T> findAny();\n\n    // Static factories\n\n    /**\n     * Returns a builder for a {@code Stream}.\n     *\n     * @param <T> type of elements\n     * @return a stream builder\n     */\n    public static<T> Builder<T> builder() {\n        return new Streams.StreamBuilderImpl<>();\n    }\n\n    /**\n     * Returns an empty sequential {@code Stream}.\n     *\n     * @param <T> the type of stream elements\n     * @return an empty sequential stream\n     */\n    public static<T> Stream<T> empty() {\n        return StreamSupport.stream(Spliterators.<T>emptySpliterator(), false);\n    }\n\n    /**\n     * Returns a sequential {@code Stream} containing a single element.\n     *\n     * @param t the single element\n     * @param <T> the type of stream elements\n     * @return a singleton sequential stream\n     */\n    public static<T> Stream<T> of(T t) {\n        return StreamSupport.stream(new Streams.StreamBuilderImpl<>(t), false);\n    }\n\n    /**\n     * Returns a sequential ordered stream whose elements are the specified values.\n     *\n     * @param <T> the type of stream elements\n     * @param values the elements of the new stream\n     * @return the new stream\n     */\n    @SafeVarargs\n    @SuppressWarnings(\"varargs\") // Creating a stream from an array is safe\n    public static<T> Stream<T> of(T... values) {\n        return Arrays.stream(values);\n    }\n\n    /**\n     * Returns an infinite sequential ordered {@code Stream} produced by iterative\n     * application of a function {@code f} to an initial element {@code seed},\n     * producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},\n     * {@code f(f(seed))}, etc.\n     *\n     * <p>The first element (position {@code 0}) in the {@code Stream} will be\n     * the provided {@code seed}.  For {@code n > 0}, the element at position\n     * {@code n}, will be the result of applying the function {@code f} to the\n     * element at position {@code n - 1}.\n     *\n     * @param <T> the type of stream elements\n     * @param seed the initial element\n     * @param f a function to be applied to to the previous element to produce\n     *          a new element\n     * @return a new sequential {@code Stream}\n     */\n    public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f) {\n        Objects.requireNonNull(f);\n        final Iterator<T> iterator = new Iterator<T>() {\n            @SuppressWarnings(\"unchecked\")\n            T t = (T) Streams.NONE;\n\n            @Override\n            public boolean hasNext() {\n                return true;\n            }\n\n            @Override\n            public T next() {\n                return t = (t == Streams.NONE) ? seed : f.apply(t);\n            }\n        };\n        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n                iterator,\n                Spliterator.ORDERED | Spliterator.IMMUTABLE), false);\n    }\n\n    /**\n     * Returns an infinite sequential unordered stream where each element is\n     * generated by the provided {@code Supplier}.  This is suitable for\n     * generating constant streams, streams of random elements, etc.\n     *\n     * @param <T> the type of stream elements\n     * @param s the {@code Supplier} of generated elements\n     * @return a new infinite sequential unordered {@code Stream}\n     */\n    public static<T> Stream<T> generate(Supplier<T> s) {\n        Objects.requireNonNull(s);\n        return StreamSupport.stream(\n                new StreamSpliterators.InfiniteSupplyingSpliterator.OfRef<>(Long.MAX_VALUE, s), false);\n    }\n\n    /**\n     * Creates a lazily concatenated stream whose elements are all the\n     * elements of the first stream followed by all the elements of the\n     * second stream.  The resulting stream is ordered if both\n     * of the input streams are ordered, and parallel if either of the input\n     * streams is parallel.  When the resulting stream is closed, the close\n     * handlers for both input streams are invoked.\n     *\n     * @implNote\n     * Use caution when constructing streams from repeated concatenation.\n     * Accessing an element of a deeply concatenated stream can result in deep\n     * call chains, or even {@code StackOverflowException}.\n     *\n     * @param <T> The type of stream elements\n     * @param a the first stream\n     * @param b the second stream\n     * @return the concatenation of the two input streams\n     */\n    public static <T> Stream<T> concat(Stream<? extends T> a, Stream<? extends T> b) {\n        Objects.requireNonNull(a);\n        Objects.requireNonNull(b);\n\n        @SuppressWarnings(\"unchecked\")\n        Spliterator<T> split = new Streams.ConcatSpliterator.OfRef<>(\n                (Spliterator<T>) a.spliterator(), (Spliterator<T>) b.spliterator());\n        Stream<T> stream = StreamSupport.stream(split, a.isParallel() || b.isParallel());\n        return stream.onClose(Streams.composedClose(a, b));\n    }\n\n    /**\n     * A mutable builder for a {@code Stream}.  This allows the creation of a\n     * {@code Stream} by generating elements individually and adding them to the\n     * {@code Builder} (without the copying overhead that comes from using\n     * an {@code ArrayList} as a temporary buffer.)\n     *\n     * <p>A stream builder has a lifecycle, which starts in a building\n     * phase, during which elements can be added, and then transitions to a built\n     * phase, after which elements may not be added.  The built phase begins\n     * when the {@link #build()} method is called, which creates an ordered\n     * {@code Stream} whose elements are the elements that were added to the stream\n     * builder, in the order they were added.\n     *\n     * @param <T> the type of stream elements\n     * @see Stream#builder()\n     * @since 1.8\n     */\n    public interface Builder<T> extends Consumer<T> {\n\n        /**\n         * Adds an element to the stream being built.\n         *\n         * @throws IllegalStateException if the builder has already transitioned to\n         * the built state\n         */\n        @Override\n        void accept(T t);\n\n        /**\n         * Adds an element to the stream being built.\n         *\n         * @implSpec\n         * The default implementation behaves as if:\n         * <pre>{@code\n         *     accept(t)\n         *     return this;\n         * }</pre>\n         *\n         * @param t the element to add\n         * @return {@code this} builder\n         * @throws IllegalStateException if the builder has already transitioned to\n         * the built state\n         */\n        default Builder<T> add(T t) {\n            accept(t);\n            return this;\n        }\n\n        /**\n         * Builds the stream, transitioning this builder to the built state.\n         * An {@code IllegalStateException} is thrown if there are further attempts\n         * to operate on the builder after it has entered the built state.\n         *\n         * @return the built stream\n         * @throws IllegalStateException if the builder has already transitioned to\n         * the built state\n         */\n        Stream<T> build();\n\n    }\n}\n```\n\n* 特点\n  * 元素序列。可以访问特定元素类型的一组有序值，\n  * 源，使用一个提供数据的源，如集合，数组或者输入/输出资源，从有序集合生成流时会保留原有的顺序\n  * 数据处理操作，支持类似数据库的操作，及函数式编程中的常用操作，如filter，map,reduce.sort，find,match\n  * **流水线** 流操作大多数本身会返回一个流，这样多个操作可以链接起来，那么可以看作类似操作数据库的流水线操作\n  * **内部迭代** 流的迭代操作，是在内部进行迭代的。\n\n* 流与集合的区别：\n\n  在于什么时候计算\n\n  * 集合是一个内存中的数据结构，它包含数据结构中目前的所有的值，集合中的每个元素都得先算出来才能添加到集合，集合是我需要就创建，无需考虑需求。\n  * 流是在概念上亭的数据结构，你不能添加或者删除元素，元素是按需求进行计算的，input->output,典型的生产者-消费者关系\n  * 流只能遍历一次,只能消费一次，而集合会一直存在内存中。\n  * 外部迭代与内部迭代，集合使用foreach进行外部迭代，流使用内部迭代，\n\n* **流操作**\n\n  * 中间操作  返回一个流对象的操作都是中间操作：如filter,map，limit, sort .etc\n\n    * filter()  接受一个断言条件去过滤流的所有元素。 这个流的操作是中间的， 这使得我们能够对结果调用另外一个流操作（例如 forEach） \n    * map() 通过给定的功能将每个元素转换成另一个对象。 以下示例将每个字符串转换成大写字符串。当然你也可以使用 map 将每个对象转换成另一种类型。 \n    * sorted()  返回流的排序视图。元素按照自然顺序进行排序，除非传递了一个自定义的比较器。 \n\n  * 终端操作 如collect  forEach count 即不会返回流对象的操作。\n\n    *  forEach()  该方法有助于迭代流的所有元素，并对他们中的每一个执行一些操作。 改操作作为 lambda 表达式参数传递 \n\n    * collect()  collect() 方法用于从一个 stream 中接收元素，并将他们存储在一个集合中，并通过参数分类。 \n\n    * match()  各种匹配操作检查某个断言条件是否与流匹配。所有这些操作都是终端并返回一个 Boolean 结果 \n\n    * findAny() 将会返回当前流中的任意元素\n\n    * count 返回符合给定谓词条件的总数\n\n    * reduce（）**归约** 将一个流中的元素进行组合起来。函数式编程语言的术语来讲就是折叠。\n\n      ```\n      List<Integer> intList= new ArrayList<>();\n      /**\n      * 归约\n      */\n      for (int k = 0; k < 20; k++) {\n      intList.add(k);\n      }\n      int as=intList.stream().reduce(0,(a,b)->a+b);\n      System.out.println(as);\n      Optional<Integer> as1=intList.stream().reduce(Integer::min);\n      System.out.println(as1.get());\n      Optional<Integer> as2=intList.stream().reduce(Integer::max);\n      System.out.println(as2.get());\n      ```\n\n      \n\n  * 短路操作 foreach中的continue或者break的效果\n\n    * anyMatch()  一旦满足断言条件，该方法将返回 true。它不会处理任何更多的元素。  括号里面放一个predicate\n    * allMatch（）查看流中的元素是否都能匹配给定的条件\n    * noneMatch（）确保流中 的元素没有和给定的谓词相匹配\n    * findFirst()  该方法将从流返回第一个元素，然后不再处理任何元素。 括号里面放一个predicate\n\n  * 额外的一些操作 **怎么感觉越来越像sql**\n\n    * distinct() 去重\n    * limit（） 截断长度 也可用在无序流set上\n    * skip（）跳过元素\n    * \n\n* 流的使用\n\n  * 一个数据源\n  * 一个中间操作链\n  * 一个终端操作\n\n* **流的构建 **\n\n  * 值构建 使用 Stream.of（T）\n\n  * 使用数组Stream.of(val1, val2, val3….)\n\n    ```\n        @SafeVarargs\n        @SuppressWarnings(\"varargs\") // Creating a stream from an array is safe\n        public static<T> Stream<T> of(T... values) {\n            return Arrays.stream(values);\n        }\n    ```\n\n  * 使用数组 Stream.of(arrayOfElements) 和上面的其实是同一个api\n\n    ```\n        @SafeVarargs\n        @SuppressWarnings(\"varargs\") // Creating a stream from an array is safe\n        public static<T> Stream<T> of(T... values) {\n            return Arrays.stream(values);\n        }\n    ```\n\n  * 使用 someList.stream()\n\n  * 由文件流生成\n\n  * 由函数生成流  使用 Stream.generate(functions ) 或者 Stream.iterate(functions ) 这个生成的是个无限流，函数放在generate()或iterate（）里面\n\n    ```\n        /**\n         * Returns an infinite sequential unordered stream where each element is\n         * generated by the provided {@code Supplier}.  This is suitable for\n         * generating constant streams, streams of random elements, etc.\n         *\n         * @param <T> the type of stream elements\n         * @param s the {@code Supplier} of generated elements\n         * @return a new infinite sequential unordered {@code Stream}\n         */\n        public static<T> Stream<T> generate(Supplier<T> s) {\n            Objects.requireNonNull(s);\n            return StreamSupport.stream(\n                    new StreamSpliterators.InfiniteSupplyingSpliterator.OfRef<>(Long.MAX_VALUE, s), false);\n        }\n    ```\n\n    ```\n        /**\n         * Returns an infinite sequential ordered {@code Stream} produced by iterative\n         * application of a function {@code f} to an initial element {@code seed},\n         * producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},\n         * {@code f(f(seed))}, etc.\n         *\n         * <p>The first element (position {@code 0}) in the {@code Stream} will be\n         * the provided {@code seed}.  For {@code n > 0}, the element at position\n         * {@code n}, will be the result of applying the function {@code f} to the\n         * element at position {@code n - 1}.\n         *\n         * @param <T> the type of stream elements\n         * @param seed the initial element\n         * @param f a function to be applied to to the previous element to produce\n         *          a new element\n         * @return a new sequential {@code Stream}\n         */\n        public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f) {\n            Objects.requireNonNull(f);\n            final Iterator<T> iterator = new Iterator<T>() {\n                @SuppressWarnings(\"unchecked\")\n                T t = (T) Streams.NONE;\n    \n                @Override\n                public boolean hasNext() {\n                    return true;\n                }\n    \n                @Override\n                public T next() {\n                    return t = (t == Streams.NONE) ? seed : f.apply(t);\n                }\n            };\n            return StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n                    iterator,\n                    Spliterator.ORDERED | Spliterator.IMMUTABLE), false);\n        }\n    ```\n\n  * 將Streams轉換為其他數據結構\n\n    * 使用 stream.collect(Collectors.xxx())  或 stream.toArray将 Stream 转换成 set list array\n\n      ```\n           \tList<Project> l1=datas.stream().filter(p12->p12.getStar()>3).collect(Collectors.toList());\n      \t\tSystem.out.println(l1);\n      \t\tSet<Project> s1=datas.stream().filter(p12->p12.getStar()>3).collect(Collectors.toSet());\n      \t\tSystem.out.println(s1);\n      \t\tProject[] a1=datas.stream().filter(p12->p12.getStar()>3).toArray(Project[]::new);\n      ```\n\n    * 其他一些數據結構的轉換在 stream.collect（Collectors.xxx）裏\n\n      ```\n      Map<String, Project> map1 = datas.stream().filter(p12 -> p12.getStar() > 3)\n      .collect(Collectors.toMap(Project::getLang, Function.identity()));\n      System.out.println(map1);\n      Map<String, String> map3 =\tdatas.stream().filter(p12 -> p12.getStar() > 3)\n      .collect(Collectors.toMap(Project::getLang, Project::getName));\n      ```\n\n\n         * 用流收集数据\n    \n           * Collectors.groupingBy分组 二级分组就是将groupBy（）.groupBy（）\n    \n             ```\n             Map<Integer, List<Project>> collect = datas.stream().collect(Collectors.groupingBy(Project::getStar));\n             \t\tcollect.forEach((k, v) -> {\n             \t\t\tSystem.out.println(k);\n             \t\t\tSystem.out.println(v);\n             \t\t});\n             ```\n    \n           * Collectors.groupingBy分组与mapping同时使用\n    \n             ```\n             datas.stream().collect(Collectors.groupingBy(Project::getStar, Collectors.mapping(item-> {\n                 if (item.getStar() == 1) {\n                 return  item.getStar();\n                 }\n                 return 1l;\n             \t\t}, Collectors.toSet())));\n             ```\n    \n           * 流中的最大值，最小值 maxBy,minBy\n    \n             ```\n             Optional<Project> popt = datas.stream().collect(Collectors.maxBy(Comparator.comparingInt(Project::getStar)));\n             \t\tProject project3 = popt.get();\n             \t\tSystem.out.println(project3);\n             \t\tOptional<Project> popt1 = datas.stream().collect(Collectors.minBy(Comparator.comparingInt(Project::getStar)));\n             \t\tSystem.out.println(popt1.get());\n             ```\n    \n           * 汇总 summingInt\n    \n             ```\n             Integer count2 = datas.stream().collect(Collectors.summingInt(Project::getStar));\n                 System.out.println(count2);\n             ```\n    \n           * 链接字符串 需要先用map将元素对象的某个属性提取出来。 joining\n    \n             ```\n             String str = datas.stream().map(Project::getLang).collect(Collectors.joining(\",\"));\n             System.out.println(str);\n             ```\n    \n           * 分区 多级分区 使用链式编程 partitioningBy（）.partitioningBy()\n    \n             ```\n             Map<Boolean, List<Project>> collect3 = datas.stream().collect(Collectors.partitioningBy((Project pro)-> pro.getStar()>3));\n             \t\tcollect3.forEach((k,v)->{\n             \t\t\tSystem.out.println(k);\n             \t\t\tSystem.out.println(v.toString());\n             \t\t});\n             ```\n    \n             **TODO:并行流，组合异步，Fork/Join分治框架，时间新api**","slug":"Java8点拨","published":1,"updated":"2022-09-03T07:30:55.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz8du0070twfaxz25uy4o","content":"<p>java8的一些知识点的记录，写的比较糙，能理解就ok<a id=\"more\"></a></p>\n<h4 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h4><ul>\n<li>lambda表达式可以有零个，一个或者多个参数</li>\n<li>可以显式声明参数的类型，也可以从上下中推断参数类型</li>\n<li>多个参数必须包含在括号中，并用逗号分隔，空括号用于表示零个参数</li>\n<li>当只有一个参数时，如果推断它的类型，可以不用括号</li>\n<li>lambda表达式的函数体可以包含零个，一个或者多个语句</li>\n<li>如果lambda表达式函数提只有一行，那么就可以不用大括号，匿名函数的返回类型与函数体表达式的返回类型相同。当函数提中大于一行代码则需要用大括号包含。</li>\n<li>谓词复合，用于多条件判断。<ul>\n<li>negate  Predicate的非</li>\n<li>and Predicate的与</li>\n<li>or predicate的或</li>\n</ul>\n</li>\n<li>函数复合,用于Fuction接口所代表的Lambda表达式的符合<ul>\n<li>andThen 很明了的函数，aExpression.andThen(bExpression）相当于 数学上的 b(a(x))</li>\n<li>compose aExpression.compose(bExpression) 相当于数学上的  a（b(x)）</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"函数式编程中的方法引用。\"><a href=\"#函数式编程中的方法引用。\" class=\"headerlink\" title=\"函数式编程中的方法引用。\"></a>函数式编程中的方法引用。</h4><table>\n<thead>\n<tr>\n<th>方法引用</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>静态方法引用</td>\n<td>用于引用类的静态方法</td>\n<td>Math::max等于原先的Math.max（）</td>\n</tr>\n<tr>\n<td>实例对象引用方法</td>\n<td>使用实例对象引用来调用实例方法</td>\n<td>System.out::println=System.out.println()</td>\n</tr>\n<tr>\n<td>从类中引用实例方法（其实还是实例调用方法吧）</td>\n<td>在上下文提供的对象的医用上调用实例方法</td>\n<td>String::length相当于str.length</td>\n</tr>\n<tr>\n<td>引用构造函数</td>\n<td>引用构造函数，创建实例对象</td>\n<td>HashMap：：new 等于 new  HashMap()</td>\n</tr>\n</tbody></table>\n<p>这些方法引用其实在函数式编程语言 Rust 中都已经存在，lisp中也有。</p>\n<hr>\n<h4 id=\"默认方法与静态方法：\"><a href=\"#默认方法与静态方法：\" class=\"headerlink\" title=\"默认方法与静态方法：\"></a>默认方法与静态方法：</h4><p>接口新增了default方法和static方法。</p>\n<ul>\n<li><p>静态方法，只能通过接口调用，不可以通过实现类的类名或实现类的实例进行调用。最简单的提供工厂的实现功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.space.default_method;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface Caculate &#123;</span><br><span class=\"line\">\tint add(int a, int b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint subtract(int a, int b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint divide(int a, int b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint muti(int a, int b);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdefault int mod (int a , int b ) &#123;</span><br><span class=\"line\">\t\treturn a%b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static Caculate getCaculateImplInstance() &#123;</span><br><span class=\"line\">\t\treturn new CaculateImpl();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>默认方法，只能通过接口的实现类来调用,可以避免新的功能添加導致对现有功能的困扰。方便api的演进</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.space.default_method;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface Caculate &#123;</span><br><span class=\"line\">\tint add(int a, int b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint subtract(int a, int b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint divide(int a, int b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint muti(int a, int b);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdefault int mod (int a , int b ) &#123;</span><br><span class=\"line\">\t\treturn a%b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.space.default_method;</span><br><span class=\"line\"></span><br><span class=\"line\">public class CaculateImpl implements Caculate &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int add(int a, int b) &#123;</span><br><span class=\"line\">\t\treturn a+b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int subtract(int a, int b) &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\treturn a-b;\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int divide(int a, int b) &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\treturn a/b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int muti(int a, int b) &#123;</span><br><span class=\"line\">\t\treturn a*b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tCaculate caculate  = new CaculateImpl();</span><br><span class=\"line\">\t\tint mod = caculate.mod(100, 3);</span><br><span class=\"line\">\t\tSystem.out.println(mod);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>PS:</strong> 接口冲突，方法冲突 的解决：</p>\n<ul>\n<li>类中的方法优先级别最高，类或者父类中的声明的方法优先级高于任何声明为默认的方法的优先级</li>\n<li>如果无法通过上述条件进行判断，那么子类接口的优先级更高，函数签名相同时，优先选择拥有最具体实现的默认方法的接口，</li>\n<li>如果上述条件还是无法判断的话，继承多个接口的类必须通过显式覆盖和调用期望的方法，显式的选择使用哪一个默认方法的实现。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h4><ul>\n<li>函数式接口也称作单例抽象方法接口（SAM接口），<strong>接口中只允许一个抽象方法</strong>,@FunctionalInterface注解会在你注解的接口违反函数式几口的约定时提示一个编译错误。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FunctionalInterface</span><br><span class=\"line\">public interface  MyFunctionalInterface &#123;</span><br><span class=\"line\">    public void firstFunction（）；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li><p>常用函数式接口</p>\n<ul>\n<li><p>Predicate函数式接口:功能判断输入的对象是否符合某个条件。官方文档解释到：<code>Determines if the input object matches some criteria</code></p>\n<p>原始类型特化：IntPredicate,LongPredicate, DoublePredicate </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span><br><span class=\"line\"> */</span><br><span class=\"line\">package java.util.function;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Represents a predicate (boolean-valued function) of one argument.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt;</span><br><span class=\"line\"> * whose functional method is &#123;@link #test(Object)&#125;.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &lt;T&gt; the type of the input to the predicate</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @since 1.8</span><br><span class=\"line\"> */</span><br><span class=\"line\">@FunctionalInterface</span><br><span class=\"line\">public interface Predicate&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Evaluates this predicate on the given argument.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param t the input argument</span><br><span class=\"line\">     * @return &#123;@code true&#125; if the input argument matches the predicate,</span><br><span class=\"line\">     * otherwise &#123;@code false&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    boolean test(T t);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a composed predicate that represents a short-circuiting logical</span><br><span class=\"line\">     * AND of this predicate and another.  When evaluating the composed</span><br><span class=\"line\">     * predicate, if this predicate is &#123;@code false&#125;, then the &#123;@code other&#125;</span><br><span class=\"line\">     * predicate is not evaluated.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;Any exceptions thrown during evaluation of either predicate are relayed</span><br><span class=\"line\">     * to the caller; if evaluation of this predicate throws an exception, the</span><br><span class=\"line\">     * &#123;@code other&#125; predicate will not be evaluated.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param other a predicate that will be logically-ANDed with this</span><br><span class=\"line\">     *              predicate</span><br><span class=\"line\">     * @return a composed predicate that represents the short-circuiting logical</span><br><span class=\"line\">     * AND of this predicate and the &#123;@code other&#125; predicate</span><br><span class=\"line\">     * @throws NullPointerException if other is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    default Predicate&lt;T&gt; and(Predicate&lt;? super T&gt; other) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(other);</span><br><span class=\"line\">        return (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a predicate that represents the logical negation of this</span><br><span class=\"line\">     * predicate.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return a predicate that represents the logical negation of this</span><br><span class=\"line\">     * predicate</span><br><span class=\"line\">     */</span><br><span class=\"line\">    default Predicate&lt;T&gt; negate() &#123;</span><br><span class=\"line\">        return (t) -&gt; !test(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a composed predicate that represents a short-circuiting logical</span><br><span class=\"line\">     * OR of this predicate and another.  When evaluating the composed</span><br><span class=\"line\">     * predicate, if this predicate is &#123;@code true&#125;, then the &#123;@code other&#125;</span><br><span class=\"line\">     * predicate is not evaluated.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;Any exceptions thrown during evaluation of either predicate are relayed</span><br><span class=\"line\">     * to the caller; if evaluation of this predicate throws an exception, the</span><br><span class=\"line\">     * &#123;@code other&#125; predicate will not be evaluated.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param other a predicate that will be logically-ORed with this</span><br><span class=\"line\">     *              predicate</span><br><span class=\"line\">     * @return a composed predicate that represents the short-circuiting logical</span><br><span class=\"line\">     * OR of this predicate and the &#123;@code other&#125; predicate</span><br><span class=\"line\">     * @throws NullPointerException if other is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    default Predicate&lt;T&gt; or(Predicate&lt;? super T&gt; other) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(other);</span><br><span class=\"line\">        return (t) -&gt; test(t) || other.test(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a predicate that tests if two arguments are equal according</span><br><span class=\"line\">     * to &#123;@link Objects#equals(Object, Object)&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; the type of arguments to the predicate</span><br><span class=\"line\">     * @param targetRef the object reference with which to compare for equality,</span><br><span class=\"line\">     *               which may be &#123;@code null&#125;</span><br><span class=\"line\">     * @return a predicate that tests if two arguments are equal according</span><br><span class=\"line\">     * to &#123;@link Objects#equals(Object, Object)&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    static &lt;T&gt; Predicate&lt;T&gt; isEqual(Object targetRef) &#123;</span><br><span class=\"line\">        return (null == targetRef)</span><br><span class=\"line\">                ? Objects::isNull</span><br><span class=\"line\">                : object -&gt; targetRef.equals(object);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Consumer函数式接口： <strong>表示一个接受单个输入参数并且没有返回值的操作</strong>。不像其它函数式接口，Consumer 接口期望执行带有副作用的操作 (Consumer 的操作可能会更改输入参数的内部状态)。官方文档：<code>An operation which accepts a single input argument and returns no result. Unlike most other functional interfaces, Consumer is expected to operate via side-effects.</code> 也就是void。</p>\n<p>原始类型特化:</p>\n<p>IntConsumer,LongConsumer, DoubleConsumer </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span><br><span class=\"line\"> */</span><br><span class=\"line\">package java.util.function;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Represents an operation that accepts a single input argument and returns no</span><br><span class=\"line\"> * result. Unlike most other functional interfaces, &#123;@code Consumer&#125; is expected</span><br><span class=\"line\"> * to operate via side-effects.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt;</span><br><span class=\"line\"> * whose functional method is &#123;@link #accept(Object)&#125;.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &lt;T&gt; the type of the input to the operation</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @since 1.8</span><br><span class=\"line\"> */</span><br><span class=\"line\">@FunctionalInterface</span><br><span class=\"line\">public interface Consumer&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Performs this operation on the given argument.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param t the input argument</span><br><span class=\"line\">     */</span><br><span class=\"line\">    void accept(T t);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a composed &#123;@code Consumer&#125; that performs, in sequence, this</span><br><span class=\"line\">     * operation followed by the &#123;@code after&#125; operation. If performing either</span><br><span class=\"line\">     * operation throws an exception, it is relayed to the caller of the</span><br><span class=\"line\">     * composed operation.  If performing this operation throws an exception,</span><br><span class=\"line\">     * the &#123;@code after&#125; operation will not be performed.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param after the operation to perform after this operation</span><br><span class=\"line\">     * @return a composed &#123;@code Consumer&#125; that performs in sequence this</span><br><span class=\"line\">     * operation followed by the &#123;@code after&#125; operation</span><br><span class=\"line\">     * @throws NullPointerException if &#123;@code after&#125; is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    default Consumer&lt;T&gt; andThen(Consumer&lt;? super T&gt; after) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(after);</span><br><span class=\"line\">        return (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Supplier 函数式接口：顾名思义，就是提供者的意思，可以简单理解为工厂，<strong>不接收参数，只提供返回值</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span><br><span class=\"line\"> */</span><br><span class=\"line\">package java.util.function;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Represents a supplier of results.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;There is no requirement that a new or distinct result be returned each</span><br><span class=\"line\"> * time the supplier is invoked.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt;</span><br><span class=\"line\"> * whose functional method is &#123;@link #get()&#125;.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &lt;T&gt; the type of results supplied by this supplier</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @since 1.8</span><br><span class=\"line\"> */</span><br><span class=\"line\">@FunctionalInterface</span><br><span class=\"line\">public interface Supplier&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Gets a result.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return a result</span><br><span class=\"line\">     */</span><br><span class=\"line\">    T get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Function函数式接口：<strong>接受一定数量的参数 同时提供一个返回结果</strong>  ,</p>\n<p>原始类型特化：</p>\n<p><code>IntFunction&lt;R&gt;, IntToDoubleFunction,</code>  <code>IntToLongFunction, LongFunction&lt;R&gt;,</code>  <code>LongToDoubleFunction, LongToIntFunction,</code>  <code>DoubleFunction&lt;R&gt;, ToIntFunction&lt;T&gt;,</code>  <code>ToDoubleFunction&lt;T&gt;, ToLongFunction&lt;T&gt;</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span><br><span class=\"line\"> */</span><br><span class=\"line\">package java.util.function;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Represents a function that accepts one argument and produces a result.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt;</span><br><span class=\"line\"> * whose functional method is &#123;@link #apply(Object)&#125;.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &lt;T&gt; the type of the input to the function</span><br><span class=\"line\"> * @param &lt;R&gt; the type of the result of the function</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @since 1.8</span><br><span class=\"line\"> */</span><br><span class=\"line\">@FunctionalInterface</span><br><span class=\"line\">public interface Function&lt;T, R&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Applies this function to the given argument.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param t the function argument</span><br><span class=\"line\">     * @return the function result</span><br><span class=\"line\">     */</span><br><span class=\"line\">    R apply(T t);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a composed function that first applies the &#123;@code before&#125;</span><br><span class=\"line\">     * function to its input, and then applies this function to the result.</span><br><span class=\"line\">     * If evaluation of either function throws an exception, it is relayed to</span><br><span class=\"line\">     * the caller of the composed function.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;V&gt; the type of input to the &#123;@code before&#125; function, and to the</span><br><span class=\"line\">     *           composed function</span><br><span class=\"line\">     * @param before the function to apply before this function is applied</span><br><span class=\"line\">     * @return a composed function that first applies the &#123;@code before&#125;</span><br><span class=\"line\">     * function and then applies this function</span><br><span class=\"line\">     * @throws NullPointerException if before is null</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @see #andThen(Function)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    default &lt;V&gt; Function&lt;V, R&gt; compose(Function&lt;? super V, ? extends T&gt; before) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(before);</span><br><span class=\"line\">        return (V v) -&gt; apply(before.apply(v));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a composed function that first applies this function to</span><br><span class=\"line\">     * its input, and then applies the &#123;@code after&#125; function to the result.</span><br><span class=\"line\">     * If evaluation of either function throws an exception, it is relayed to</span><br><span class=\"line\">     * the caller of the composed function.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;V&gt; the type of output of the &#123;@code after&#125; function, and of the</span><br><span class=\"line\">     *           composed function</span><br><span class=\"line\">     * @param after the function to apply after this function is applied</span><br><span class=\"line\">     * @return a composed function that first applies this function and then</span><br><span class=\"line\">     * applies the &#123;@code after&#125; function</span><br><span class=\"line\">     * @throws NullPointerException if after is null</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @see #compose(Function)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    default &lt;V&gt; Function&lt;T, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(after);</span><br><span class=\"line\">        return (T t) -&gt; after.apply(apply(t));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a function that always returns its input argument.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; the type of the input and output objects to the function</span><br><span class=\"line\">     * @return a function that always returns its input argument</span><br><span class=\"line\">     */</span><br><span class=\"line\">    static &lt;T&gt; Function&lt;T, T&gt; identity() &#123;</span><br><span class=\"line\">        return t -&gt; t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Operator函数式接口:  运算符函数接口，有<code>UnaryOperator&lt;T&gt;和</code>BinaryOperator<t>``这两个接口。只有一个泛型，那么意思就是说 入参和返回只有一种类型。</t></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* UnaryOperator 接收一个参数 返回同类型结果。</span><br><span class=\"line\">*/</span><br><span class=\"line\">    List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6);</span><br><span class=\"line\">    UnaryOperator&lt;Integer&gt; unaryOpt = i -&gt; i * i;</span><br><span class=\"line\">    unaryOperatorFun(unaryOpt, list).forEach(x -&gt; &#123;</span><br><span class=\"line\">    System.out.println(x);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">private static List&lt;Integer&gt; unaryOperatorFun(UnaryOperator&lt;Integer&gt; unaryOpt, List&lt;Integer&gt; list) &#123;</span><br><span class=\"line\">    List&lt;Integer&gt; uniList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    list.forEach(i -&gt; uniList.add(unaryOpt.apply(i)));</span><br><span class=\"line\">    return uniList;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * BinaryOperator</span><br><span class=\"line\"> */</span><br><span class=\"line\">Map&lt;String, String&gt; map = new HashMap();</span><br><span class=\"line\">map.put(&quot;1&quot;, &quot;23&quot;);</span><br><span class=\"line\">map.put(&quot;12&quot;, &quot;2365&quot;);</span><br><span class=\"line\">map.put(&quot;13&quot;, &quot;231&quot;);</span><br><span class=\"line\">map.put(&quot;14&quot;, &quot;232&quot;);</span><br><span class=\"line\">BinaryOperator&lt;String&gt; bo = (s1, s2) -&gt; s1 + s2;</span><br><span class=\"line\">binaryOperatorFun(bo, map).forEach(x-&gt;System.out.println(x));</span><br><span class=\"line\"></span><br><span class=\"line\">private static List&lt;String&gt; binaryOperatorFun(BinaryOperator&lt;String&gt; bo, Map&lt;String, String&gt; map) &#123;</span><br><span class=\"line\">    List&lt;String&gt; result = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    map.forEach((s1,s2)-&gt;result.add(bo.apply(s1, s2)));</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Optional\"><a href=\"#Optional\" class=\"headerlink\" title=\"Optional\"></a>Optional</h4><p>很像Rust中的Option</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span><br><span class=\"line\"> */</span><br><span class=\"line\">package java.util;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.function.Consumer;</span><br><span class=\"line\">import java.util.function.Function;</span><br><span class=\"line\">import java.util.function.Predicate;</span><br><span class=\"line\">import java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * A container object which may or may not contain a non-null value.</span><br><span class=\"line\"> * If a value is present, &#123;@code isPresent()&#125; will return &#123;@code true&#125; and</span><br><span class=\"line\"> * &#123;@code get()&#125; will return the value.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;Additional methods that depend on the presence or absence of a contained</span><br><span class=\"line\"> * value are provided, such as &#123;@link #orElse(java.lang.Object) orElse()&#125;</span><br><span class=\"line\"> * (return a default value if value not present) and</span><br><span class=\"line\"> * &#123;@link #ifPresent(java.util.function.Consumer) ifPresent()&#125; (execute a block</span><br><span class=\"line\"> * of code if the value is present).</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;This is a &lt;a href=&quot;../lang/doc-files/ValueBased.html&quot;&gt;value-based&lt;/a&gt;</span><br><span class=\"line\"> * class; use of identity-sensitive operations (including reference equality</span><br><span class=\"line\"> * (&#123;@code ==&#125;), identity hash code, or synchronization) on instances of</span><br><span class=\"line\"> * &#123;@code Optional&#125; may have unpredictable results and should be avoided.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @since 1.8</span><br><span class=\"line\"> */</span><br><span class=\"line\">public final class Optional&lt;T&gt; &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Common instance for &#123;@code empty()&#125;.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static final Optional&lt;?&gt; EMPTY = new Optional&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * If non-null, the value; if null, indicates no value is present</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private final T value;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Constructs an empty instance.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @implNote Generally only one empty instance, &#123;@link Optional#EMPTY&#125;,</span><br><span class=\"line\">     * should exist per VM.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Optional() &#123;</span><br><span class=\"line\">        this.value = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an empty &#123;@code Optional&#125; instance.  No value is present for this</span><br><span class=\"line\">     * Optional.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote Though it may be tempting to do so, avoid testing if an object</span><br><span class=\"line\">     * is empty by comparing with &#123;@code ==&#125; against instances returned by</span><br><span class=\"line\">     * &#123;@code Option.empty()&#125;. There is no guarantee that it is a singleton.</span><br><span class=\"line\">     * Instead, use &#123;@link #isPresent()&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; Type of the non-existent value</span><br><span class=\"line\">     * @return an empty &#123;@code Optional&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static&lt;T&gt; Optional&lt;T&gt; empty() &#123;</span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">        Optional&lt;T&gt; t = (Optional&lt;T&gt;) EMPTY;</span><br><span class=\"line\">        return t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Constructs an instance with the value present.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param value the non-null value to be present</span><br><span class=\"line\">     * @throws NullPointerException if value is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Optional(T value) &#123;</span><br><span class=\"line\">        this.value = Objects.requireNonNull(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an &#123;@code Optional&#125; with the specified present non-null value.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; the class of the value</span><br><span class=\"line\">     * @param value the value to be present, which must be non-null</span><br><span class=\"line\">     * @return an &#123;@code Optional&#125; with the value present</span><br><span class=\"line\">     * @throws NullPointerException if value is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static &lt;T&gt; Optional&lt;T&gt; of(T value) &#123;</span><br><span class=\"line\">        return new Optional&lt;&gt;(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an &#123;@code Optional&#125; describing the specified value, if non-null,</span><br><span class=\"line\">     * otherwise returns an empty &#123;@code Optional&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; the class of the value</span><br><span class=\"line\">     * @param value the possibly-null value to describe</span><br><span class=\"line\">     * @return an &#123;@code Optional&#125; with a present value if the specified value</span><br><span class=\"line\">     * is non-null, otherwise an empty &#123;@code Optional&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value) &#123;</span><br><span class=\"line\">        return value == null ? empty() : of(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * If a value is present in this &#123;@code Optional&#125;, returns the value,</span><br><span class=\"line\">     * otherwise throws &#123;@code NoSuchElementException&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return the non-null value held by this &#123;@code Optional&#125;</span><br><span class=\"line\">     * @throws NoSuchElementException if there is no value present</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @see Optional#isPresent()</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public T get() &#123;</span><br><span class=\"line\">        if (value == null) &#123;</span><br><span class=\"line\">            throw new NoSuchElementException(&quot;No value present&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Return &#123;@code true&#125; if there is a value present, otherwise &#123;@code false&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return &#123;@code true&#125; if there is a value present, otherwise &#123;@code false&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean isPresent() &#123;</span><br><span class=\"line\">        return value != null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * If a value is present, invoke the specified consumer with the value,</span><br><span class=\"line\">     * otherwise do nothing.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param consumer block to be executed if a value is present</span><br><span class=\"line\">     * @throws NullPointerException if value is present and &#123;@code consumer&#125; is</span><br><span class=\"line\">     * null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void ifPresent(Consumer&lt;? super T&gt; consumer) &#123;</span><br><span class=\"line\">        if (value != null)</span><br><span class=\"line\">            consumer.accept(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * If a value is present, and the value matches the given predicate,</span><br><span class=\"line\">     * return an &#123;@code Optional&#125; describing the value, otherwise return an</span><br><span class=\"line\">     * empty &#123;@code Optional&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param predicate a predicate to apply to the value, if present</span><br><span class=\"line\">     * @return an &#123;@code Optional&#125; describing the value of this &#123;@code Optional&#125;</span><br><span class=\"line\">     * if a value is present and the value matches the given predicate,</span><br><span class=\"line\">     * otherwise an empty &#123;@code Optional&#125;</span><br><span class=\"line\">     * @throws NullPointerException if the predicate is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public Optional&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(predicate);</span><br><span class=\"line\">        if (!isPresent())</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            return predicate.test(value) ? this : empty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * If a value is present, apply the provided mapping function to it,</span><br><span class=\"line\">     * and if the result is non-null, return an &#123;@code Optional&#125; describing the</span><br><span class=\"line\">     * result.  Otherwise return an empty &#123;@code Optional&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote This method supports post-processing on optional values, without</span><br><span class=\"line\">     * the need to explicitly check for a return status.  For example, the</span><br><span class=\"line\">     * following code traverses a stream of file names, selects one that has</span><br><span class=\"line\">     * not yet been processed, and then opens that file, returning an</span><br><span class=\"line\">     * &#123;@code Optional&lt;FileInputStream&gt;&#125;:</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     Optional&lt;FileInputStream&gt; fis =</span><br><span class=\"line\">     *         names.stream().filter(name -&gt; !isProcessedYet(name))</span><br><span class=\"line\">     *                       .findFirst()</span><br><span class=\"line\">     *                       .map(name -&gt; new FileInputStream(name));</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Here, &#123;@code findFirst&#125; returns an &#123;@code Optional&lt;String&gt;&#125;, and then</span><br><span class=\"line\">     * &#123;@code map&#125; returns an &#123;@code Optional&lt;FileInputStream&gt;&#125; for the desired</span><br><span class=\"line\">     * file if one exists.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;U&gt; The type of the result of the mapping function</span><br><span class=\"line\">     * @param mapper a mapping function to apply to the value, if present</span><br><span class=\"line\">     * @return an &#123;@code Optional&#125; describing the result of applying a mapping</span><br><span class=\"line\">     * function to the value of this &#123;@code Optional&#125;, if a value is present,</span><br><span class=\"line\">     * otherwise an empty &#123;@code Optional&#125;</span><br><span class=\"line\">     * @throws NullPointerException if the mapping function is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public&lt;U&gt; Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; mapper) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(mapper);</span><br><span class=\"line\">        if (!isPresent())</span><br><span class=\"line\">            return empty();</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            return Optional.ofNullable(mapper.apply(value));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * If a value is present, apply the provided &#123;@code Optional&#125;-bearing</span><br><span class=\"line\">     * mapping function to it, return that result, otherwise return an empty</span><br><span class=\"line\">     * &#123;@code Optional&#125;.  This method is similar to &#123;@link #map(Function)&#125;,</span><br><span class=\"line\">     * but the provided mapper is one whose result is already an &#123;@code Optional&#125;,</span><br><span class=\"line\">     * and if invoked, &#123;@code flatMap&#125; does not wrap it with an additional</span><br><span class=\"line\">     * &#123;@code Optional&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;U&gt; The type parameter to the &#123;@code Optional&#125; returned by</span><br><span class=\"line\">     * @param mapper a mapping function to apply to the value, if present</span><br><span class=\"line\">     *           the mapping function</span><br><span class=\"line\">     * @return the result of applying an &#123;@code Optional&#125;-bearing mapping</span><br><span class=\"line\">     * function to the value of this &#123;@code Optional&#125;, if a value is present,</span><br><span class=\"line\">     * otherwise an empty &#123;@code Optional&#125;</span><br><span class=\"line\">     * @throws NullPointerException if the mapping function is null or returns</span><br><span class=\"line\">     * a null result</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public&lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; mapper) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(mapper);</span><br><span class=\"line\">        if (!isPresent())</span><br><span class=\"line\">            return empty();</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            return Objects.requireNonNull(mapper.apply(value));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Return the value if present, otherwise return &#123;@code other&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param other the value to be returned if there is no value present, may</span><br><span class=\"line\">     * be null</span><br><span class=\"line\">     * @return the value, if present, otherwise &#123;@code other&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public T orElse(T other) &#123;</span><br><span class=\"line\">        return value != null ? value : other;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Return the value if present, otherwise invoke &#123;@code other&#125; and return</span><br><span class=\"line\">     * the result of that invocation.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param other a &#123;@code Supplier&#125; whose result is returned if no value</span><br><span class=\"line\">     * is present</span><br><span class=\"line\">     * @return the value if present otherwise the result of &#123;@code other.get()&#125;</span><br><span class=\"line\">     * @throws NullPointerException if value is not present and &#123;@code other&#125; is</span><br><span class=\"line\">     * null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public T orElseGet(Supplier&lt;? extends T&gt; other) &#123;</span><br><span class=\"line\">        return value != null ? value : other.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Return the contained value, if present, otherwise throw an exception</span><br><span class=\"line\">     * to be created by the provided supplier.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote A method reference to the exception constructor with an empty</span><br><span class=\"line\">     * argument list can be used as the supplier. For example,</span><br><span class=\"line\">     * &#123;@code IllegalStateException::new&#125;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;X&gt; Type of the exception to be thrown</span><br><span class=\"line\">     * @param exceptionSupplier The supplier which will return the exception to</span><br><span class=\"line\">     * be thrown</span><br><span class=\"line\">     * @return the present value</span><br><span class=\"line\">     * @throws X if there is no value present</span><br><span class=\"line\">     * @throws NullPointerException if no value is present and</span><br><span class=\"line\">     * &#123;@code exceptionSupplier&#125; is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public &lt;X extends Throwable&gt; T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) throws X &#123;</span><br><span class=\"line\">        if (value != null) &#123;</span><br><span class=\"line\">            return value;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            throw exceptionSupplier.get();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Indicates whether some other object is &quot;equal to&quot; this Optional. The</span><br><span class=\"line\">     * other object is considered equal if:</span><br><span class=\"line\">     * &lt;ul&gt;</span><br><span class=\"line\">     * &lt;li&gt;it is also an &#123;@code Optional&#125; and;</span><br><span class=\"line\">     * &lt;li&gt;both instances have no value present or;</span><br><span class=\"line\">     * &lt;li&gt;the present values are &quot;equal to&quot; each other via &#123;@code equals()&#125;.</span><br><span class=\"line\">     * &lt;/ul&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param obj an object to be tested for equality</span><br><span class=\"line\">     * @return &#123;code true&#125; if the other object is &quot;equal to&quot; this object</span><br><span class=\"line\">     * otherwise &#123;@code false&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean equals(Object obj) &#123;</span><br><span class=\"line\">        if (this == obj) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (!(obj instanceof Optional)) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Optional&lt;?&gt; other = (Optional&lt;?&gt;) obj;</span><br><span class=\"line\">        return Objects.equals(value, other.value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns the hash code value of the present value, if any, or 0 (zero) if</span><br><span class=\"line\">     * no value is present.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return hash code value of the present value or 0 if no value is present</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int hashCode() &#123;</span><br><span class=\"line\">        return Objects.hashCode(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a non-empty string representation of this Optional suitable for</span><br><span class=\"line\">     * debugging. The exact presentation format is unspecified and may vary</span><br><span class=\"line\">     * between implementations and versions.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @implSpec If a value is present the result must include its string</span><br><span class=\"line\">     * representation in the result. Empty and present Optionals must be</span><br><span class=\"line\">     * unambiguously differentiable.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return the string representation of this instance</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return value != null</span><br><span class=\"line\">            ? String.format(&quot;Optional[%s]&quot;, value)</span><br><span class=\"line\">            : &quot;Optional.empty&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>创建Optional对象</p>\n<ul>\n<li><p>声明一个空的Optional对象 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;Car&gt; optCar = Optional.empty()；</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个有值的Optional如果你赋值为 null，则会抛出空指针异常。 如果值是 null，则目标 Optional 对象将会是空 (记得值是 absent，不是 null)。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;Car&gt; optCar = Optional.of(car)；</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可接受null值的Optional的创建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;Car&gt; optCar = Optional.ofNullable(car);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>使用map从Optional中提取和转换值</p>\n<pre><code>Optional&lt;Project&gt; ppp = Optional.of(pp);\nOptional&lt;Optional&lt;String&gt;&gt; map2 = ppp.map(Project::getAuth);\nOptional&lt;String&gt; autss = map2.get();</code></pre> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;Person&gt; optPerson = Optional.ofNullable(person）;</span><br><span class=\"line\"></span><br><span class=\"line\">Optional&lt;Car&gt; optcar=optPerson.map(Person::getCar);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用flatMap链接Optional对象,用于处理嵌套的optional,流</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OptionalPerson&gt; optPerson = Optional.ofNullable(person）;</span><br><span class=\"line\">Optional&lt;Wheel&gt; optw=optPerson.flatMap（Person::getCar）.map(Car::getWheel());</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>默认行为及解引用Optional对象。</p>\n<ul>\n<li><code>get()</code>获取封装的变量，或者抛出NoSuchElementException();</li>\n<li><code>orElse(T other)</code>如果Optional对象中不包含值时可以进行提供一个默认值</li>\n<li><code>orElseGet（Supplier&lt;? extends T&gt; other）</code>是orElse的延迟嗲用版，Supplier只有在Optional中不含值的时候才执行调用</li>\n<li><code>orElseThrow（Supplier&lt;? extends X&gt; exceptionSupplier）</code>和get方法相似，只不过在遭遇对象元素为空的时候会抛出异常，可以定制异常。</li>\n<li><code>ifPresent(Consumer &lt;? Super T&gt;)</code> 在变量值存在时执行一个作为参数传入的方法。否则不做任何操作。</li>\n</ul>\n</li>\n<li><p>使用filter剔除特定的值</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;String&gt; optt = Optional.of(&quot;123&quot;);</span><br><span class=\"line\">optt.filter(s1-&gt;&quot;123&quot;.equals(s1)).ifPresent(x-&gt;System.out.println(x));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以下情况不使用Optional:</p>\n<ul>\n<li>in the domain model layer (it’s not serializable) </li>\n<li>in DTOs (it’s not serializable) </li>\n<li>in input parameters of methods </li>\n<li>in constructor parameters </li>\n</ul>\n</li>\n<li><p>何时使用Optional</p>\n<p> <strong>当函数的返回值有可能是 null 时，我们应该尽可能地去使用它.</strong></p>\n</li>\n</ul>\n<h4 id=\"流\"><a href=\"#流\" class=\"headerlink\" title=\"流\"></a>流</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br><span class=\"line\">913</span><br><span class=\"line\">914</span><br><span class=\"line\">915</span><br><span class=\"line\">916</span><br><span class=\"line\">917</span><br><span class=\"line\">918</span><br><span class=\"line\">919</span><br><span class=\"line\">920</span><br><span class=\"line\">921</span><br><span class=\"line\">922</span><br><span class=\"line\">923</span><br><span class=\"line\">924</span><br><span class=\"line\">925</span><br><span class=\"line\">926</span><br><span class=\"line\">927</span><br><span class=\"line\">928</span><br><span class=\"line\">929</span><br><span class=\"line\">930</span><br><span class=\"line\">931</span><br><span class=\"line\">932</span><br><span class=\"line\">933</span><br><span class=\"line\">934</span><br><span class=\"line\">935</span><br><span class=\"line\">936</span><br><span class=\"line\">937</span><br><span class=\"line\">938</span><br><span class=\"line\">939</span><br><span class=\"line\">940</span><br><span class=\"line\">941</span><br><span class=\"line\">942</span><br><span class=\"line\">943</span><br><span class=\"line\">944</span><br><span class=\"line\">945</span><br><span class=\"line\">946</span><br><span class=\"line\">947</span><br><span class=\"line\">948</span><br><span class=\"line\">949</span><br><span class=\"line\">950</span><br><span class=\"line\">951</span><br><span class=\"line\">952</span><br><span class=\"line\">953</span><br><span class=\"line\">954</span><br><span class=\"line\">955</span><br><span class=\"line\">956</span><br><span class=\"line\">957</span><br><span class=\"line\">958</span><br><span class=\"line\">959</span><br><span class=\"line\">960</span><br><span class=\"line\">961</span><br><span class=\"line\">962</span><br><span class=\"line\">963</span><br><span class=\"line\">964</span><br><span class=\"line\">965</span><br><span class=\"line\">966</span><br><span class=\"line\">967</span><br><span class=\"line\">968</span><br><span class=\"line\">969</span><br><span class=\"line\">970</span><br><span class=\"line\">971</span><br><span class=\"line\">972</span><br><span class=\"line\">973</span><br><span class=\"line\">974</span><br><span class=\"line\">975</span><br><span class=\"line\">976</span><br><span class=\"line\">977</span><br><span class=\"line\">978</span><br><span class=\"line\">979</span><br><span class=\"line\">980</span><br><span class=\"line\">981</span><br><span class=\"line\">982</span><br><span class=\"line\">983</span><br><span class=\"line\">984</span><br><span class=\"line\">985</span><br><span class=\"line\">986</span><br><span class=\"line\">987</span><br><span class=\"line\">988</span><br><span class=\"line\">989</span><br><span class=\"line\">990</span><br><span class=\"line\">991</span><br><span class=\"line\">992</span><br><span class=\"line\">993</span><br><span class=\"line\">994</span><br><span class=\"line\">995</span><br><span class=\"line\">996</span><br><span class=\"line\">997</span><br><span class=\"line\">998</span><br><span class=\"line\">999</span><br><span class=\"line\">1000</span><br><span class=\"line\">1001</span><br><span class=\"line\">1002</span><br><span class=\"line\">1003</span><br><span class=\"line\">1004</span><br><span class=\"line\">1005</span><br><span class=\"line\">1006</span><br><span class=\"line\">1007</span><br><span class=\"line\">1008</span><br><span class=\"line\">1009</span><br><span class=\"line\">1010</span><br><span class=\"line\">1011</span><br><span class=\"line\">1012</span><br><span class=\"line\">1013</span><br><span class=\"line\">1014</span><br><span class=\"line\">1015</span><br><span class=\"line\">1016</span><br><span class=\"line\">1017</span><br><span class=\"line\">1018</span><br><span class=\"line\">1019</span><br><span class=\"line\">1020</span><br><span class=\"line\">1021</span><br><span class=\"line\">1022</span><br><span class=\"line\">1023</span><br><span class=\"line\">1024</span><br><span class=\"line\">1025</span><br><span class=\"line\">1026</span><br><span class=\"line\">1027</span><br><span class=\"line\">1028</span><br><span class=\"line\">1029</span><br><span class=\"line\">1030</span><br><span class=\"line\">1031</span><br><span class=\"line\">1032</span><br><span class=\"line\">1033</span><br><span class=\"line\">1034</span><br><span class=\"line\">1035</span><br><span class=\"line\">1036</span><br><span class=\"line\">1037</span><br><span class=\"line\">1038</span><br><span class=\"line\">1039</span><br><span class=\"line\">1040</span><br><span class=\"line\">1041</span><br><span class=\"line\">1042</span><br><span class=\"line\">1043</span><br><span class=\"line\">1044</span><br><span class=\"line\">1045</span><br><span class=\"line\">1046</span><br><span class=\"line\">1047</span><br><span class=\"line\">1048</span><br><span class=\"line\">1049</span><br><span class=\"line\">1050</span><br><span class=\"line\">1051</span><br><span class=\"line\">1052</span><br><span class=\"line\">1053</span><br><span class=\"line\">1054</span><br><span class=\"line\">1055</span><br><span class=\"line\">1056</span><br><span class=\"line\">1057</span><br><span class=\"line\">1058</span><br><span class=\"line\">1059</span><br><span class=\"line\">1060</span><br><span class=\"line\">1061</span><br><span class=\"line\">1062</span><br><span class=\"line\">1063</span><br><span class=\"line\">1064</span><br><span class=\"line\">1065</span><br><span class=\"line\">1066</span><br><span class=\"line\">1067</span><br><span class=\"line\">1068</span><br><span class=\"line\">1069</span><br><span class=\"line\">1070</span><br><span class=\"line\">1071</span><br><span class=\"line\">1072</span><br><span class=\"line\">1073</span><br><span class=\"line\">1074</span><br><span class=\"line\">1075</span><br><span class=\"line\">1076</span><br><span class=\"line\">1077</span><br><span class=\"line\">1078</span><br><span class=\"line\">1079</span><br><span class=\"line\">1080</span><br><span class=\"line\">1081</span><br><span class=\"line\">1082</span><br><span class=\"line\">1083</span><br><span class=\"line\">1084</span><br><span class=\"line\">1085</span><br><span class=\"line\">1086</span><br><span class=\"line\">1087</span><br><span class=\"line\">1088</span><br><span class=\"line\">1089</span><br><span class=\"line\">1090</span><br><span class=\"line\">1091</span><br><span class=\"line\">1092</span><br><span class=\"line\">1093</span><br><span class=\"line\">1094</span><br><span class=\"line\">1095</span><br><span class=\"line\">1096</span><br><span class=\"line\">1097</span><br><span class=\"line\">1098</span><br><span class=\"line\">1099</span><br><span class=\"line\">1100</span><br><span class=\"line\">1101</span><br><span class=\"line\">1102</span><br><span class=\"line\">1103</span><br><span class=\"line\">1104</span><br><span class=\"line\">1105</span><br><span class=\"line\">1106</span><br><span class=\"line\">1107</span><br><span class=\"line\">1108</span><br><span class=\"line\">1109</span><br><span class=\"line\">1110</span><br><span class=\"line\">1111</span><br><span class=\"line\">1112</span><br><span class=\"line\">1113</span><br><span class=\"line\">1114</span><br><span class=\"line\">1115</span><br><span class=\"line\">1116</span><br><span class=\"line\">1117</span><br><span class=\"line\">1118</span><br><span class=\"line\">1119</span><br><span class=\"line\">1120</span><br><span class=\"line\">1121</span><br><span class=\"line\">1122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package java.util.stream;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.nio.charset.Charset;</span><br><span class=\"line\">import java.nio.file.Files;</span><br><span class=\"line\">import java.nio.file.Path;</span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">import java.util.Collection;</span><br><span class=\"line\">import java.util.Comparator;</span><br><span class=\"line\">import java.util.Iterator;</span><br><span class=\"line\">import java.util.Objects;</span><br><span class=\"line\">import java.util.Optional;</span><br><span class=\"line\">import java.util.Spliterator;</span><br><span class=\"line\">import java.util.Spliterators;</span><br><span class=\"line\">import java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\">import java.util.function.BiConsumer;</span><br><span class=\"line\">import java.util.function.BiFunction;</span><br><span class=\"line\">import java.util.function.BinaryOperator;</span><br><span class=\"line\">import java.util.function.Consumer;</span><br><span class=\"line\">import java.util.function.Function;</span><br><span class=\"line\">import java.util.function.IntFunction;</span><br><span class=\"line\">import java.util.function.Predicate;</span><br><span class=\"line\">import java.util.function.Supplier;</span><br><span class=\"line\">import java.util.function.ToDoubleFunction;</span><br><span class=\"line\">import java.util.function.ToIntFunction;</span><br><span class=\"line\">import java.util.function.ToLongFunction;</span><br><span class=\"line\">import java.util.function.UnaryOperator;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * A sequence of elements supporting sequential and parallel aggregate</span><br><span class=\"line\"> * operations.  The following example illustrates an aggregate operation using</span><br><span class=\"line\"> * &#123;@link Stream&#125; and &#123;@link IntStream&#125;:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;pre&gt;&#123;@code</span><br><span class=\"line\"> *     int sum = widgets.stream()</span><br><span class=\"line\"> *                      .filter(w -&gt; w.getColor() == RED)</span><br><span class=\"line\"> *                      .mapToInt(w -&gt; w.getWeight())</span><br><span class=\"line\"> *                      .sum();</span><br><span class=\"line\"> * &#125;&lt;/pre&gt;</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * In this example, &#123;@code widgets&#125; is a &#123;@code Collection&lt;Widget&gt;&#125;.  We create</span><br><span class=\"line\"> * a stream of &#123;@code Widget&#125; objects via &#123;@link Collection#stream Collection.stream()&#125;,</span><br><span class=\"line\"> * filter it to produce a stream containing only the red widgets, and then</span><br><span class=\"line\"> * transform it into a stream of &#123;@code int&#125; values representing the weight of</span><br><span class=\"line\"> * each red widget. Then this stream is summed to produce a total weight.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;In addition to &#123;@code Stream&#125;, which is a stream of object references,</span><br><span class=\"line\"> * there are primitive specializations for &#123;@link IntStream&#125;, &#123;@link LongStream&#125;,</span><br><span class=\"line\"> * and &#123;@link DoubleStream&#125;, all of which are referred to as &quot;streams&quot; and</span><br><span class=\"line\"> * conform to the characteristics and restrictions described here.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;To perform a computation, stream</span><br><span class=\"line\"> * &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;operations&lt;/a&gt; are composed into a</span><br><span class=\"line\"> * &lt;em&gt;stream pipeline&lt;/em&gt;.  A stream pipeline consists of a source (which</span><br><span class=\"line\"> * might be an array, a collection, a generator function, an I/O channel,</span><br><span class=\"line\"> * etc), zero or more &lt;em&gt;intermediate operations&lt;/em&gt; (which transform a</span><br><span class=\"line\"> * stream into another stream, such as &#123;@link Stream#filter(Predicate)&#125;), and a</span><br><span class=\"line\"> * &lt;em&gt;terminal operation&lt;/em&gt; (which produces a result or side-effect, such</span><br><span class=\"line\"> * as &#123;@link Stream#count()&#125; or &#123;@link Stream#forEach(Consumer)&#125;).</span><br><span class=\"line\"> * Streams are lazy; computation on the source data is only performed when the</span><br><span class=\"line\"> * terminal operation is initiated, and source elements are consumed only</span><br><span class=\"line\"> * as needed.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;Collections and streams, while bearing some superficial similarities,</span><br><span class=\"line\"> * have different goals.  Collections are primarily concerned with the efficient</span><br><span class=\"line\"> * management of, and access to, their elements.  By contrast, streams do not</span><br><span class=\"line\"> * provide a means to directly access or manipulate their elements, and are</span><br><span class=\"line\"> * instead concerned with declaratively describing their source and the</span><br><span class=\"line\"> * computational operations which will be performed in aggregate on that source.</span><br><span class=\"line\"> * However, if the provided stream operations do not offer the desired</span><br><span class=\"line\"> * functionality, the &#123;@link #iterator()&#125; and &#123;@link #spliterator()&#125; operations</span><br><span class=\"line\"> * can be used to perform a controlled traversal.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;A stream pipeline, like the &quot;widgets&quot; example above, can be viewed as</span><br><span class=\"line\"> * a &lt;em&gt;query&lt;/em&gt; on the stream source.  Unless the source was explicitly</span><br><span class=\"line\"> * designed for concurrent modification (such as a &#123;@link ConcurrentHashMap&#125;),</span><br><span class=\"line\"> * unpredictable or erroneous behavior may result from modifying the stream</span><br><span class=\"line\"> * source while it is being queried.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;Most stream operations accept parameters that describe user-specified</span><br><span class=\"line\"> * behavior, such as the lambda expression &#123;@code w -&gt; w.getWeight()&#125; passed to</span><br><span class=\"line\"> * &#123;@code mapToInt&#125; in the example above.  To preserve correct behavior,</span><br><span class=\"line\"> * these &lt;em&gt;behavioral parameters&lt;/em&gt;:</span><br><span class=\"line\"> * &lt;ul&gt;</span><br><span class=\"line\"> * &lt;li&gt;must be &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;</span><br><span class=\"line\"> * (they do not modify the stream source); and&lt;/li&gt;</span><br><span class=\"line\"> * &lt;li&gt;in most cases must be &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\"> * (their result should not depend on any state that might change during execution</span><br><span class=\"line\"> * of the stream pipeline).&lt;/li&gt;</span><br><span class=\"line\"> * &lt;/ul&gt;</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;Such parameters are always instances of a</span><br><span class=\"line\"> * &lt;a href=&quot;../function/package-summary.html&quot;&gt;functional interface&lt;/a&gt; such</span><br><span class=\"line\"> * as &#123;@link java.util.function.Function&#125;, and are often lambda expressions or</span><br><span class=\"line\"> * method references.  Unless otherwise specified these parameters must be</span><br><span class=\"line\"> * &lt;em&gt;non-null&lt;/em&gt;.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;A stream should be operated on (invoking an intermediate or terminal stream</span><br><span class=\"line\"> * operation) only once.  This rules out, for example, &quot;forked&quot; streams, where</span><br><span class=\"line\"> * the same source feeds two or more pipelines, or multiple traversals of the</span><br><span class=\"line\"> * same stream.  A stream implementation may throw &#123;@link IllegalStateException&#125;</span><br><span class=\"line\"> * if it detects that the stream is being reused. However, since some stream</span><br><span class=\"line\"> * operations may return their receiver rather than a new stream object, it may</span><br><span class=\"line\"> * not be possible to detect reuse in all cases.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;Streams have a &#123;@link #close()&#125; method and implement &#123;@link AutoCloseable&#125;,</span><br><span class=\"line\"> * but nearly all stream instances do not actually need to be closed after use.</span><br><span class=\"line\"> * Generally, only streams whose source is an IO channel (such as those returned</span><br><span class=\"line\"> * by &#123;@link Files#lines(Path, Charset)&#125;) will require closing.  Most streams</span><br><span class=\"line\"> * are backed by collections, arrays, or generating functions, which require no</span><br><span class=\"line\"> * special resource management.  (If a stream does require closing, it can be</span><br><span class=\"line\"> * declared as a resource in a &#123;@code try&#125;-with-resources statement.)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;Stream pipelines may execute either sequentially or in</span><br><span class=\"line\"> * &lt;a href=&quot;package-summary.html#Parallelism&quot;&gt;parallel&lt;/a&gt;.  This</span><br><span class=\"line\"> * execution mode is a property of the stream.  Streams are created</span><br><span class=\"line\"> * with an initial choice of sequential or parallel execution.  (For example,</span><br><span class=\"line\"> * &#123;@link Collection#stream() Collection.stream()&#125; creates a sequential stream,</span><br><span class=\"line\"> * and &#123;@link Collection#parallelStream() Collection.parallelStream()&#125; creates</span><br><span class=\"line\"> * a parallel one.)  This choice of execution mode may be modified by the</span><br><span class=\"line\"> * &#123;@link #sequential()&#125; or &#123;@link #parallel()&#125; methods, and may be queried with</span><br><span class=\"line\"> * the &#123;@link #isParallel()&#125; method.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &lt;T&gt; the type of the stream elements</span><br><span class=\"line\"> * @since 1.8</span><br><span class=\"line\"> * @see IntStream</span><br><span class=\"line\"> * @see LongStream</span><br><span class=\"line\"> * @see DoubleStream</span><br><span class=\"line\"> * @see &lt;a href=&quot;package-summary.html&quot;&gt;java.util.stream&lt;/a&gt;</span><br><span class=\"line\"> */</span><br><span class=\"line\">public interface Stream&lt;T&gt; extends BaseStream&lt;T, Stream&lt;T&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a stream consisting of the elements of this stream that match</span><br><span class=\"line\">     * the given predicate.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param predicate a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                  &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                  predicate to apply to each element to determine if it</span><br><span class=\"line\">     *                  should be included</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a stream consisting of the results of applying the given</span><br><span class=\"line\">     * function to the elements of this stream.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;R&gt; The element type of the new stream</span><br><span class=\"line\">     * @param mapper a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *               &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *               function to apply to each element</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    &lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an &#123;@code IntStream&#125; consisting of the results of applying the</span><br><span class=\"line\">     * given function to the elements of this stream.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;</span><br><span class=\"line\">     *     intermediate operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param mapper a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *               &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *               function to apply to each element</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    IntStream mapToInt(ToIntFunction&lt;? super T&gt; mapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a &#123;@code LongStream&#125; consisting of the results of applying the</span><br><span class=\"line\">     * given function to the elements of this stream.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param mapper a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *               &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *               function to apply to each element</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    LongStream mapToLong(ToLongFunction&lt;? super T&gt; mapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a &#123;@code DoubleStream&#125; consisting of the results of applying the</span><br><span class=\"line\">     * given function to the elements of this stream.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param mapper a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *               &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *               function to apply to each element</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    DoubleStream mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a stream consisting of the results of replacing each element of</span><br><span class=\"line\">     * this stream with the contents of a mapped stream produced by applying</span><br><span class=\"line\">     * the provided mapping function to each element.  Each mapped stream is</span><br><span class=\"line\">     * &#123;@link java.util.stream.BaseStream#close() closed&#125; after its contents</span><br><span class=\"line\">     * have been placed into this stream.  (If a mapped stream is &#123;@code null&#125;</span><br><span class=\"line\">     * an empty stream is used, instead.)</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote</span><br><span class=\"line\">     * The &#123;@code flatMap()&#125; operation has the effect of applying a one-to-many</span><br><span class=\"line\">     * transformation to the elements of the stream, and then flattening the</span><br><span class=\"line\">     * resulting elements into a new stream.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;&lt;b&gt;Examples.&lt;/b&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;If &#123;@code orders&#125; is a stream of purchase orders, and each purchase</span><br><span class=\"line\">     * order contains a collection of line items, then the following produces a</span><br><span class=\"line\">     * stream containing all the line items in all the orders:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     orders.flatMap(order -&gt; order.getLineItems().stream())...</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;If &#123;@code path&#125; is the path to a file, then the following produces a</span><br><span class=\"line\">     * stream of the &#123;@code words&#125; contained in that file:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     Stream&lt;String&gt; lines = Files.lines(path, StandardCharsets.UTF_8);</span><br><span class=\"line\">     *     Stream&lt;String&gt; words = lines.flatMap(line -&gt; Stream.of(line.split(&quot; +&quot;)));</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     * The &#123;@code mapper&#125; function passed to &#123;@code flatMap&#125; splits a line,</span><br><span class=\"line\">     * using a simple regular expression, into an array of words, and then</span><br><span class=\"line\">     * creates a stream of words from that array.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;R&gt; The element type of the new stream</span><br><span class=\"line\">     * @param mapper a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *               &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *               function to apply to each element which produces a stream</span><br><span class=\"line\">     *               of new values</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    &lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an &#123;@code IntStream&#125; consisting of the results of replacing each</span><br><span class=\"line\">     * element of this stream with the contents of a mapped stream produced by</span><br><span class=\"line\">     * applying the provided mapping function to each element.  Each mapped</span><br><span class=\"line\">     * stream is &#123;@link java.util.stream.BaseStream#close() closed&#125; after its</span><br><span class=\"line\">     * contents have been placed into this stream.  (If a mapped stream is</span><br><span class=\"line\">     * &#123;@code null&#125; an empty stream is used, instead.)</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param mapper a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *               &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *               function to apply to each element which produces a stream</span><br><span class=\"line\">     *               of new values</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     * @see #flatMap(Function)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    IntStream flatMapToInt(Function&lt;? super T, ? extends IntStream&gt; mapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an &#123;@code LongStream&#125; consisting of the results of replacing each</span><br><span class=\"line\">     * element of this stream with the contents of a mapped stream produced by</span><br><span class=\"line\">     * applying the provided mapping function to each element.  Each mapped</span><br><span class=\"line\">     * stream is &#123;@link java.util.stream.BaseStream#close() closed&#125; after its</span><br><span class=\"line\">     * contents have been placed into this stream.  (If a mapped stream is</span><br><span class=\"line\">     * &#123;@code null&#125; an empty stream is used, instead.)</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param mapper a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *               &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *               function to apply to each element which produces a stream</span><br><span class=\"line\">     *               of new values</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     * @see #flatMap(Function)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    LongStream flatMapToLong(Function&lt;? super T, ? extends LongStream&gt; mapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an &#123;@code DoubleStream&#125; consisting of the results of replacing</span><br><span class=\"line\">     * each element of this stream with the contents of a mapped stream produced</span><br><span class=\"line\">     * by applying the provided mapping function to each element.  Each mapped</span><br><span class=\"line\">     * stream is &#123;@link java.util.stream.BaseStream#close() closed&#125; after its</span><br><span class=\"line\">     * contents have placed been into this stream.  (If a mapped stream is</span><br><span class=\"line\">     * &#123;@code null&#125; an empty stream is used, instead.)</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param mapper a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *               &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *               function to apply to each element which produces a stream</span><br><span class=\"line\">     *               of new values</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     * @see #flatMap(Function)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    DoubleStream flatMapToDouble(Function&lt;? super T, ? extends DoubleStream&gt; mapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a stream consisting of the distinct elements (according to</span><br><span class=\"line\">     * &#123;@link Object#equals(Object)&#125;) of this stream.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;For ordered streams, the selection of distinct elements is stable</span><br><span class=\"line\">     * (for duplicated elements, the element appearing first in the encounter</span><br><span class=\"line\">     * order is preserved.)  For unordered streams, no stability guarantees</span><br><span class=\"line\">     * are made.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;stateful</span><br><span class=\"line\">     * intermediate operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote</span><br><span class=\"line\">     * Preserving stability for &#123;@code distinct()&#125; in parallel pipelines is</span><br><span class=\"line\">     * relatively expensive (requires that the operation act as a full barrier,</span><br><span class=\"line\">     * with substantial buffering overhead), and stability is often not needed.</span><br><span class=\"line\">     * Using an unordered stream source (such as &#123;@link #generate(Supplier)&#125;)</span><br><span class=\"line\">     * or removing the ordering constraint with &#123;@link #unordered()&#125; may result</span><br><span class=\"line\">     * in significantly more efficient execution for &#123;@code distinct()&#125; in parallel</span><br><span class=\"line\">     * pipelines, if the semantics of your situation permit.  If consistency</span><br><span class=\"line\">     * with encounter order is required, and you are experiencing poor performance</span><br><span class=\"line\">     * or memory utilization with &#123;@code distinct()&#125; in parallel pipelines,</span><br><span class=\"line\">     * switching to sequential execution with &#123;@link #sequential()&#125; may improve</span><br><span class=\"line\">     * performance.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Stream&lt;T&gt; distinct();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a stream consisting of the elements of this stream, sorted</span><br><span class=\"line\">     * according to natural order.  If the elements of this stream are not</span><br><span class=\"line\">     * &#123;@code Comparable&#125;, a &#123;@code java.lang.ClassCastException&#125; may be thrown</span><br><span class=\"line\">     * when the terminal operation is executed.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;For ordered streams, the sort is stable.  For unordered streams, no</span><br><span class=\"line\">     * stability guarantees are made.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;stateful</span><br><span class=\"line\">     * intermediate operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Stream&lt;T&gt; sorted();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a stream consisting of the elements of this stream, sorted</span><br><span class=\"line\">     * according to the provided &#123;@code Comparator&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;For ordered streams, the sort is stable.  For unordered streams, no</span><br><span class=\"line\">     * stability guarantees are made.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;stateful</span><br><span class=\"line\">     * intermediate operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param comparator a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                   &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                   &#123;@code Comparator&#125; to be used to compare stream elements</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Stream&lt;T&gt; sorted(Comparator&lt;? super T&gt; comparator);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a stream consisting of the elements of this stream, additionally</span><br><span class=\"line\">     * performing the provided action on each element as elements are consumed</span><br><span class=\"line\">     * from the resulting stream.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;For parallel stream pipelines, the action may be called at</span><br><span class=\"line\">     * whatever time and in whatever thread the element is made available by the</span><br><span class=\"line\">     * upstream operation.  If the action modifies shared state,</span><br><span class=\"line\">     * it is responsible for providing the required synchronization.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote This method exists mainly to support debugging, where you want</span><br><span class=\"line\">     * to see the elements as they flow past a certain point in a pipeline:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     Stream.of(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)</span><br><span class=\"line\">     *         .filter(e -&gt; e.length() &gt; 3)</span><br><span class=\"line\">     *         .peek(e -&gt; System.out.println(&quot;Filtered value: &quot; + e))</span><br><span class=\"line\">     *         .map(String::toUpperCase)</span><br><span class=\"line\">     *         .peek(e -&gt; System.out.println(&quot;Mapped value: &quot; + e))</span><br><span class=\"line\">     *         .collect(Collectors.toList());</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param action a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;</span><br><span class=\"line\">     *                 non-interfering&lt;/a&gt; action to perform on the elements as</span><br><span class=\"line\">     *                 they are consumed from the stream</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Stream&lt;T&gt; peek(Consumer&lt;? super T&gt; action);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a stream consisting of the elements of this stream, truncated</span><br><span class=\"line\">     * to be no longer than &#123;@code maxSize&#125; in length.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;short-circuiting</span><br><span class=\"line\">     * stateful intermediate operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote</span><br><span class=\"line\">     * While &#123;@code limit()&#125; is generally a cheap operation on sequential</span><br><span class=\"line\">     * stream pipelines, it can be quite expensive on ordered parallel pipelines,</span><br><span class=\"line\">     * especially for large values of &#123;@code maxSize&#125;, since &#123;@code limit(n)&#125;</span><br><span class=\"line\">     * is constrained to return not just any &lt;em&gt;n&lt;/em&gt; elements, but the</span><br><span class=\"line\">     * &lt;em&gt;first n&lt;/em&gt; elements in the encounter order.  Using an unordered</span><br><span class=\"line\">     * stream source (such as &#123;@link #generate(Supplier)&#125;) or removing the</span><br><span class=\"line\">     * ordering constraint with &#123;@link #unordered()&#125; may result in significant</span><br><span class=\"line\">     * speedups of &#123;@code limit()&#125; in parallel pipelines, if the semantics of</span><br><span class=\"line\">     * your situation permit.  If consistency with encounter order is required,</span><br><span class=\"line\">     * and you are experiencing poor performance or memory utilization with</span><br><span class=\"line\">     * &#123;@code limit()&#125; in parallel pipelines, switching to sequential execution</span><br><span class=\"line\">     * with &#123;@link #sequential()&#125; may improve performance.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param maxSize the number of elements the stream should be limited to</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     * @throws IllegalArgumentException if &#123;@code maxSize&#125; is negative</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Stream&lt;T&gt; limit(long maxSize);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a stream consisting of the remaining elements of this stream</span><br><span class=\"line\">     * after discarding the first &#123;@code n&#125; elements of the stream.</span><br><span class=\"line\">     * If this stream contains fewer than &#123;@code n&#125; elements then an</span><br><span class=\"line\">     * empty stream will be returned.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;stateful</span><br><span class=\"line\">     * intermediate operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote</span><br><span class=\"line\">     * While &#123;@code skip()&#125; is generally a cheap operation on sequential</span><br><span class=\"line\">     * stream pipelines, it can be quite expensive on ordered parallel pipelines,</span><br><span class=\"line\">     * especially for large values of &#123;@code n&#125;, since &#123;@code skip(n)&#125;</span><br><span class=\"line\">     * is constrained to skip not just any &lt;em&gt;n&lt;/em&gt; elements, but the</span><br><span class=\"line\">     * &lt;em&gt;first n&lt;/em&gt; elements in the encounter order.  Using an unordered</span><br><span class=\"line\">     * stream source (such as &#123;@link #generate(Supplier)&#125;) or removing the</span><br><span class=\"line\">     * ordering constraint with &#123;@link #unordered()&#125; may result in significant</span><br><span class=\"line\">     * speedups of &#123;@code skip()&#125; in parallel pipelines, if the semantics of</span><br><span class=\"line\">     * your situation permit.  If consistency with encounter order is required,</span><br><span class=\"line\">     * and you are experiencing poor performance or memory utilization with</span><br><span class=\"line\">     * &#123;@code skip()&#125; in parallel pipelines, switching to sequential execution</span><br><span class=\"line\">     * with &#123;@link #sequential()&#125; may improve performance.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param n the number of leading elements to skip</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     * @throws IllegalArgumentException if &#123;@code n&#125; is negative</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Stream&lt;T&gt; skip(long n);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Performs an action for each element of this stream.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;The behavior of this operation is explicitly nondeterministic.</span><br><span class=\"line\">     * For parallel stream pipelines, this operation does &lt;em&gt;not&lt;/em&gt;</span><br><span class=\"line\">     * guarantee to respect the encounter order of the stream, as doing so</span><br><span class=\"line\">     * would sacrifice the benefit of parallelism.  For any given element, the</span><br><span class=\"line\">     * action may be performed at whatever time and in whatever thread the</span><br><span class=\"line\">     * library chooses.  If the action accesses shared state, it is</span><br><span class=\"line\">     * responsible for providing the required synchronization.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param action a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;</span><br><span class=\"line\">     *               non-interfering&lt;/a&gt; action to perform on the elements</span><br><span class=\"line\">     */</span><br><span class=\"line\">    void forEach(Consumer&lt;? super T&gt; action);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Performs an action for each element of this stream, in the encounter</span><br><span class=\"line\">     * order of the stream if the stream has a defined encounter order.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This operation processes the elements one at a time, in encounter</span><br><span class=\"line\">     * order if one exists.  Performing the action for one element</span><br><span class=\"line\">     * &lt;a href=&quot;../concurrent/package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happens-before&lt;/i&gt;&lt;/a&gt;</span><br><span class=\"line\">     * performing the action for subsequent elements, but for any given element,</span><br><span class=\"line\">     * the action may be performed in whatever thread the library chooses.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param action a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;</span><br><span class=\"line\">     *               non-interfering&lt;/a&gt; action to perform on the elements</span><br><span class=\"line\">     * @see #forEach(Consumer)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    void forEachOrdered(Consumer&lt;? super T&gt; action);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an array containing the elements of this stream.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return an array containing the elements of this stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Object[] toArray();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an array containing the elements of this stream, using the</span><br><span class=\"line\">     * provided &#123;@code generator&#125; function to allocate the returned array, as</span><br><span class=\"line\">     * well as any additional arrays that might be required for a partitioned</span><br><span class=\"line\">     * execution or for resizing.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote</span><br><span class=\"line\">     * The generator function takes an integer, which is the size of the</span><br><span class=\"line\">     * desired array, and produces an array of the desired size.  This can be</span><br><span class=\"line\">     * concisely expressed with an array constructor reference:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     Person[] men = people.stream()</span><br><span class=\"line\">     *                          .filter(p -&gt; p.getGender() == MALE)</span><br><span class=\"line\">     *                          .toArray(Person[]::new);</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;A&gt; the element type of the resulting array</span><br><span class=\"line\">     * @param generator a function which produces a new array of the desired</span><br><span class=\"line\">     *                  type and the provided length</span><br><span class=\"line\">     * @return an array containing the elements in this stream</span><br><span class=\"line\">     * @throws ArrayStoreException if the runtime type of the array returned</span><br><span class=\"line\">     * from the array generator is not a supertype of the runtime type of every</span><br><span class=\"line\">     * element in this stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    &lt;A&gt; A[] toArray(IntFunction&lt;A[]&gt; generator);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Performs a &lt;a href=&quot;package-summary.html#Reduction&quot;&gt;reduction&lt;/a&gt; on the</span><br><span class=\"line\">     * elements of this stream, using the provided identity value and an</span><br><span class=\"line\">     * &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt;</span><br><span class=\"line\">     * accumulation function, and returns the reduced value.  This is equivalent</span><br><span class=\"line\">     * to:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     T result = identity;</span><br><span class=\"line\">     *     for (T element : this stream)</span><br><span class=\"line\">     *         result = accumulator.apply(result, element)</span><br><span class=\"line\">     *     return result;</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * but is not constrained to execute sequentially.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;The &#123;@code identity&#125; value must be an identity for the accumulator</span><br><span class=\"line\">     * function. This means that for all &#123;@code t&#125;,</span><br><span class=\"line\">     * &#123;@code accumulator.apply(identity, t)&#125; is equal to &#123;@code t&#125;.</span><br><span class=\"line\">     * The &#123;@code accumulator&#125; function must be an</span><br><span class=\"line\">     * &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt; function.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote Sum, min, max, average, and string concatenation are all special</span><br><span class=\"line\">     * cases of reduction. Summing a stream of numbers can be expressed as:</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     Integer sum = integers.reduce(0, (a, b) -&gt; a+b);</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * or:</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     Integer sum = integers.reduce(0, Integer::sum);</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;While this may seem a more roundabout way to perform an aggregation</span><br><span class=\"line\">     * compared to simply mutating a running total in a loop, reduction</span><br><span class=\"line\">     * operations parallelize more gracefully, without needing additional</span><br><span class=\"line\">     * synchronization and with greatly reduced risk of data races.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param identity the identity value for the accumulating function</span><br><span class=\"line\">     * @param accumulator an &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                    function for combining two values</span><br><span class=\"line\">     * @return the result of the reduction</span><br><span class=\"line\">     */</span><br><span class=\"line\">    T reduce(T identity, BinaryOperator&lt;T&gt; accumulator);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Performs a &lt;a href=&quot;package-summary.html#Reduction&quot;&gt;reduction&lt;/a&gt; on the</span><br><span class=\"line\">     * elements of this stream, using an</span><br><span class=\"line\">     * &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt; accumulation</span><br><span class=\"line\">     * function, and returns an &#123;@code Optional&#125; describing the reduced value,</span><br><span class=\"line\">     * if any. This is equivalent to:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     boolean foundAny = false;</span><br><span class=\"line\">     *     T result = null;</span><br><span class=\"line\">     *     for (T element : this stream) &#123;</span><br><span class=\"line\">     *         if (!foundAny) &#123;</span><br><span class=\"line\">     *             foundAny = true;</span><br><span class=\"line\">     *             result = element;</span><br><span class=\"line\">     *         &#125;</span><br><span class=\"line\">     *         else</span><br><span class=\"line\">     *             result = accumulator.apply(result, element);</span><br><span class=\"line\">     *     &#125;</span><br><span class=\"line\">     *     return foundAny ? Optional.of(result) : Optional.empty();</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * but is not constrained to execute sequentially.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;The &#123;@code accumulator&#125; function must be an</span><br><span class=\"line\">     * &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt; function.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param accumulator an &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                    function for combining two values</span><br><span class=\"line\">     * @return an &#123;@link Optional&#125; describing the result of the reduction</span><br><span class=\"line\">     * @throws NullPointerException if the result of the reduction is null</span><br><span class=\"line\">     * @see #reduce(Object, BinaryOperator)</span><br><span class=\"line\">     * @see #min(Comparator)</span><br><span class=\"line\">     * @see #max(Comparator)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Performs a &lt;a href=&quot;package-summary.html#Reduction&quot;&gt;reduction&lt;/a&gt; on the</span><br><span class=\"line\">     * elements of this stream, using the provided identity, accumulation and</span><br><span class=\"line\">     * combining functions.  This is equivalent to:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     U result = identity;</span><br><span class=\"line\">     *     for (T element : this stream)</span><br><span class=\"line\">     *         result = accumulator.apply(result, element)</span><br><span class=\"line\">     *     return result;</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * but is not constrained to execute sequentially.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;The &#123;@code identity&#125; value must be an identity for the combiner</span><br><span class=\"line\">     * function.  This means that for all &#123;@code u&#125;, &#123;@code combiner(identity, u)&#125;</span><br><span class=\"line\">     * is equal to &#123;@code u&#125;.  Additionally, the &#123;@code combiner&#125; function</span><br><span class=\"line\">     * must be compatible with the &#123;@code accumulator&#125; function; for all</span><br><span class=\"line\">     * &#123;@code u&#125; and &#123;@code t&#125;, the following must hold:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     combiner.apply(u, accumulator.apply(identity, t)) == accumulator.apply(u, t)</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote Many reductions using this form can be represented more simply</span><br><span class=\"line\">     * by an explicit combination of &#123;@code map&#125; and &#123;@code reduce&#125; operations.</span><br><span class=\"line\">     * The &#123;@code accumulator&#125; function acts as a fused mapper and accumulator,</span><br><span class=\"line\">     * which can sometimes be more efficient than separate mapping and reduction,</span><br><span class=\"line\">     * such as when knowing the previously reduced value allows you to avoid</span><br><span class=\"line\">     * some computation.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;U&gt; The type of the result</span><br><span class=\"line\">     * @param identity the identity value for the combiner function</span><br><span class=\"line\">     * @param accumulator an &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                    function for incorporating an additional element into a result</span><br><span class=\"line\">     * @param combiner an &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                    function for combining two values, which must be</span><br><span class=\"line\">     *                    compatible with the accumulator function</span><br><span class=\"line\">     * @return the result of the reduction</span><br><span class=\"line\">     * @see #reduce(BinaryOperator)</span><br><span class=\"line\">     * @see #reduce(Object, BinaryOperator)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    &lt;U&gt; U reduce(U identity,</span><br><span class=\"line\">                 BiFunction&lt;U, ? super T, U&gt; accumulator,</span><br><span class=\"line\">                 BinaryOperator&lt;U&gt; combiner);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Performs a &lt;a href=&quot;package-summary.html#MutableReduction&quot;&gt;mutable</span><br><span class=\"line\">     * reduction&lt;/a&gt; operation on the elements of this stream.  A mutable</span><br><span class=\"line\">     * reduction is one in which the reduced value is a mutable result container,</span><br><span class=\"line\">     * such as an &#123;@code ArrayList&#125;, and elements are incorporated by updating</span><br><span class=\"line\">     * the state of the result rather than by replacing the result.  This</span><br><span class=\"line\">     * produces a result equivalent to:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     R result = supplier.get();</span><br><span class=\"line\">     *     for (T element : this stream)</span><br><span class=\"line\">     *         accumulator.accept(result, element);</span><br><span class=\"line\">     *     return result;</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;Like &#123;@link #reduce(Object, BinaryOperator)&#125;, &#123;@code collect&#125; operations</span><br><span class=\"line\">     * can be parallelized without requiring additional synchronization.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote There are many existing classes in the JDK whose signatures are</span><br><span class=\"line\">     * well-suited for use with method references as arguments to &#123;@code collect()&#125;.</span><br><span class=\"line\">     * For example, the following will accumulate strings into an &#123;@code ArrayList&#125;:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     List&lt;String&gt; asList = stringStream.collect(ArrayList::new, ArrayList::add,</span><br><span class=\"line\">     *                                                ArrayList::addAll);</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;The following will take a stream of strings and concatenates them into a</span><br><span class=\"line\">     * single string:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     String concat = stringStream.collect(StringBuilder::new, StringBuilder::append,</span><br><span class=\"line\">     *                                          StringBuilder::append)</span><br><span class=\"line\">     *                                 .toString();</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;R&gt; type of the result</span><br><span class=\"line\">     * @param supplier a function that creates a new result container. For a</span><br><span class=\"line\">     *                 parallel execution, this function may be called</span><br><span class=\"line\">     *                 multiple times and must return a fresh value each time.</span><br><span class=\"line\">     * @param accumulator an &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                    function for incorporating an additional element into a result</span><br><span class=\"line\">     * @param combiner an &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                    function for combining two values, which must be</span><br><span class=\"line\">     *                    compatible with the accumulator function</span><br><span class=\"line\">     * @return the result of the reduction</span><br><span class=\"line\">     */</span><br><span class=\"line\">    &lt;R&gt; R collect(Supplier&lt;R&gt; supplier,</span><br><span class=\"line\">                  BiConsumer&lt;R, ? super T&gt; accumulator,</span><br><span class=\"line\">                  BiConsumer&lt;R, R&gt; combiner);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Performs a &lt;a href=&quot;package-summary.html#MutableReduction&quot;&gt;mutable</span><br><span class=\"line\">     * reduction&lt;/a&gt; operation on the elements of this stream using a</span><br><span class=\"line\">     * &#123;@code Collector&#125;.  A &#123;@code Collector&#125;</span><br><span class=\"line\">     * encapsulates the functions used as arguments to</span><br><span class=\"line\">     * &#123;@link #collect(Supplier, BiConsumer, BiConsumer)&#125;, allowing for reuse of</span><br><span class=\"line\">     * collection strategies and composition of collect operations such as</span><br><span class=\"line\">     * multiple-level grouping or partitioning.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;If the stream is parallel, and the &#123;@code Collector&#125;</span><br><span class=\"line\">     * is &#123;@link Collector.Characteristics#CONCURRENT concurrent&#125;, and</span><br><span class=\"line\">     * either the stream is unordered or the collector is</span><br><span class=\"line\">     * &#123;@link Collector.Characteristics#UNORDERED unordered&#125;,</span><br><span class=\"line\">     * then a concurrent reduction will be performed (see &#123;@link Collector&#125; for</span><br><span class=\"line\">     * details on concurrent reduction.)</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;When executed in parallel, multiple intermediate results may be</span><br><span class=\"line\">     * instantiated, populated, and merged so as to maintain isolation of</span><br><span class=\"line\">     * mutable data structures.  Therefore, even when executed in parallel</span><br><span class=\"line\">     * with non-thread-safe data structures (such as &#123;@code ArrayList&#125;), no</span><br><span class=\"line\">     * additional synchronization is needed for a parallel reduction.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote</span><br><span class=\"line\">     * The following will accumulate strings into an ArrayList:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     List&lt;String&gt; asList = stringStream.collect(Collectors.toList());</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;The following will classify &#123;@code Person&#125; objects by city:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     Map&lt;String, List&lt;Person&gt;&gt; peopleByCity</span><br><span class=\"line\">     *         = personStream.collect(Collectors.groupingBy(Person::getCity));</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;The following will classify &#123;@code Person&#125; objects by state and city,</span><br><span class=\"line\">     * cascading two &#123;@code Collector&#125;s together:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     Map&lt;String, Map&lt;String, List&lt;Person&gt;&gt;&gt; peopleByStateAndCity</span><br><span class=\"line\">     *         = personStream.collect(Collectors.groupingBy(Person::getState,</span><br><span class=\"line\">     *                                                      Collectors.groupingBy(Person::getCity)));</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;R&gt; the type of the result</span><br><span class=\"line\">     * @param &lt;A&gt; the intermediate accumulation type of the &#123;@code Collector&#125;</span><br><span class=\"line\">     * @param collector the &#123;@code Collector&#125; describing the reduction</span><br><span class=\"line\">     * @return the result of the reduction</span><br><span class=\"line\">     * @see #collect(Supplier, BiConsumer, BiConsumer)</span><br><span class=\"line\">     * @see Collectors</span><br><span class=\"line\">     */</span><br><span class=\"line\">    &lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns the minimum element of this stream according to the provided</span><br><span class=\"line\">     * &#123;@code Comparator&#125;.  This is a special case of a</span><br><span class=\"line\">     * &lt;a href=&quot;package-summary.html#Reduction&quot;&gt;reduction&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param comparator a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                   &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                   &#123;@code Comparator&#125; to compare elements of this stream</span><br><span class=\"line\">     * @return an &#123;@code Optional&#125; describing the minimum element of this stream,</span><br><span class=\"line\">     * or an empty &#123;@code Optional&#125; if the stream is empty</span><br><span class=\"line\">     * @throws NullPointerException if the minimum element is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Optional&lt;T&gt; min(Comparator&lt;? super T&gt; comparator);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns the maximum element of this stream according to the provided</span><br><span class=\"line\">     * &#123;@code Comparator&#125;.  This is a special case of a</span><br><span class=\"line\">     * &lt;a href=&quot;package-summary.html#Reduction&quot;&gt;reduction&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param comparator a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                   &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                   &#123;@code Comparator&#125; to compare elements of this stream</span><br><span class=\"line\">     * @return an &#123;@code Optional&#125; describing the maximum element of this stream,</span><br><span class=\"line\">     * or an empty &#123;@code Optional&#125; if the stream is empty</span><br><span class=\"line\">     * @throws NullPointerException if the maximum element is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Optional&lt;T&gt; max(Comparator&lt;? super T&gt; comparator);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns the count of elements in this stream.  This is a special case of</span><br><span class=\"line\">     * a &lt;a href=&quot;package-summary.html#Reduction&quot;&gt;reduction&lt;/a&gt; and is</span><br><span class=\"line\">     * equivalent to:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     return mapToLong(e -&gt; 1L).sum();</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return the count of elements in this stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    long count();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns whether any elements of this stream match the provided</span><br><span class=\"line\">     * predicate.  May not evaluate the predicate on all elements if not</span><br><span class=\"line\">     * necessary for determining the result.  If the stream is empty then</span><br><span class=\"line\">     * &#123;@code false&#125; is returned and the predicate is not evaluated.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;short-circuiting</span><br><span class=\"line\">     * terminal operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote</span><br><span class=\"line\">     * This method evaluates the &lt;em&gt;existential quantification&lt;/em&gt; of the</span><br><span class=\"line\">     * predicate over the elements of the stream (for some x P(x)).</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param predicate a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                  &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                  predicate to apply to elements of this stream</span><br><span class=\"line\">     * @return &#123;@code true&#125; if any elements of the stream match the provided</span><br><span class=\"line\">     * predicate, otherwise &#123;@code false&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    boolean anyMatch(Predicate&lt;? super T&gt; predicate);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns whether all elements of this stream match the provided predicate.</span><br><span class=\"line\">     * May not evaluate the predicate on all elements if not necessary for</span><br><span class=\"line\">     * determining the result.  If the stream is empty then &#123;@code true&#125; is</span><br><span class=\"line\">     * returned and the predicate is not evaluated.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;short-circuiting</span><br><span class=\"line\">     * terminal operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote</span><br><span class=\"line\">     * This method evaluates the &lt;em&gt;universal quantification&lt;/em&gt; of the</span><br><span class=\"line\">     * predicate over the elements of the stream (for all x P(x)).  If the</span><br><span class=\"line\">     * stream is empty, the quantification is said to be &lt;em&gt;vacuously</span><br><span class=\"line\">     * satisfied&lt;/em&gt; and is always &#123;@code true&#125; (regardless of P(x)).</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param predicate a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                  &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                  predicate to apply to elements of this stream</span><br><span class=\"line\">     * @return &#123;@code true&#125; if either all elements of the stream match the</span><br><span class=\"line\">     * provided predicate or the stream is empty, otherwise &#123;@code false&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    boolean allMatch(Predicate&lt;? super T&gt; predicate);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns whether no elements of this stream match the provided predicate.</span><br><span class=\"line\">     * May not evaluate the predicate on all elements if not necessary for</span><br><span class=\"line\">     * determining the result.  If the stream is empty then &#123;@code true&#125; is</span><br><span class=\"line\">     * returned and the predicate is not evaluated.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;short-circuiting</span><br><span class=\"line\">     * terminal operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote</span><br><span class=\"line\">     * This method evaluates the &lt;em&gt;universal quantification&lt;/em&gt; of the</span><br><span class=\"line\">     * negated predicate over the elements of the stream (for all x ~P(x)).  If</span><br><span class=\"line\">     * the stream is empty, the quantification is said to be vacuously satisfied</span><br><span class=\"line\">     * and is always &#123;@code true&#125;, regardless of P(x).</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param predicate a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                  &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                  predicate to apply to elements of this stream</span><br><span class=\"line\">     * @return &#123;@code true&#125; if either no elements of the stream match the</span><br><span class=\"line\">     * provided predicate or the stream is empty, otherwise &#123;@code false&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    boolean noneMatch(Predicate&lt;? super T&gt; predicate);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an &#123;@link Optional&#125; describing the first element of this stream,</span><br><span class=\"line\">     * or an empty &#123;@code Optional&#125; if the stream is empty.  If the stream has</span><br><span class=\"line\">     * no encounter order, then any element may be returned.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;short-circuiting</span><br><span class=\"line\">     * terminal operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return an &#123;@code Optional&#125; describing the first element of this stream,</span><br><span class=\"line\">     * or an empty &#123;@code Optional&#125; if the stream is empty</span><br><span class=\"line\">     * @throws NullPointerException if the element selected is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Optional&lt;T&gt; findFirst();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an &#123;@link Optional&#125; describing some element of the stream, or an</span><br><span class=\"line\">     * empty &#123;@code Optional&#125; if the stream is empty.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;short-circuiting</span><br><span class=\"line\">     * terminal operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;The behavior of this operation is explicitly nondeterministic; it is</span><br><span class=\"line\">     * free to select any element in the stream.  This is to allow for maximal</span><br><span class=\"line\">     * performance in parallel operations; the cost is that multiple invocations</span><br><span class=\"line\">     * on the same source may not return the same result.  (If a stable result</span><br><span class=\"line\">     * is desired, use &#123;@link #findFirst()&#125; instead.)</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return an &#123;@code Optional&#125; describing some element of this stream, or an</span><br><span class=\"line\">     * empty &#123;@code Optional&#125; if the stream is empty</span><br><span class=\"line\">     * @throws NullPointerException if the element selected is null</span><br><span class=\"line\">     * @see #findFirst()</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Optional&lt;T&gt; findAny();</span><br><span class=\"line\"></span><br><span class=\"line\">    // Static factories</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a builder for a &#123;@code Stream&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; type of elements</span><br><span class=\"line\">     * @return a stream builder</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static&lt;T&gt; Builder&lt;T&gt; builder() &#123;</span><br><span class=\"line\">        return new Streams.StreamBuilderImpl&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an empty sequential &#123;@code Stream&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; the type of stream elements</span><br><span class=\"line\">     * @return an empty sequential stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static&lt;T&gt; Stream&lt;T&gt; empty() &#123;</span><br><span class=\"line\">        return StreamSupport.stream(Spliterators.&lt;T&gt;emptySpliterator(), false);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a sequential &#123;@code Stream&#125; containing a single element.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param t the single element</span><br><span class=\"line\">     * @param &lt;T&gt; the type of stream elements</span><br><span class=\"line\">     * @return a singleton sequential stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static&lt;T&gt; Stream&lt;T&gt; of(T t) &#123;</span><br><span class=\"line\">        return StreamSupport.stream(new Streams.StreamBuilderImpl&lt;&gt;(t), false);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a sequential ordered stream whose elements are the specified values.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; the type of stream elements</span><br><span class=\"line\">     * @param values the elements of the new stream</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @SafeVarargs</span><br><span class=\"line\">    @SuppressWarnings(&quot;varargs&quot;) // Creating a stream from an array is safe</span><br><span class=\"line\">    public static&lt;T&gt; Stream&lt;T&gt; of(T... values) &#123;</span><br><span class=\"line\">        return Arrays.stream(values);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an infinite sequential ordered &#123;@code Stream&#125; produced by iterative</span><br><span class=\"line\">     * application of a function &#123;@code f&#125; to an initial element &#123;@code seed&#125;,</span><br><span class=\"line\">     * producing a &#123;@code Stream&#125; consisting of &#123;@code seed&#125;, &#123;@code f(seed)&#125;,</span><br><span class=\"line\">     * &#123;@code f(f(seed))&#125;, etc.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;The first element (position &#123;@code 0&#125;) in the &#123;@code Stream&#125; will be</span><br><span class=\"line\">     * the provided &#123;@code seed&#125;.  For &#123;@code n &gt; 0&#125;, the element at position</span><br><span class=\"line\">     * &#123;@code n&#125;, will be the result of applying the function &#123;@code f&#125; to the</span><br><span class=\"line\">     * element at position &#123;@code n - 1&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; the type of stream elements</span><br><span class=\"line\">     * @param seed the initial element</span><br><span class=\"line\">     * @param f a function to be applied to to the previous element to produce</span><br><span class=\"line\">     *          a new element</span><br><span class=\"line\">     * @return a new sequential &#123;@code Stream&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(f);</span><br><span class=\"line\">        final Iterator&lt;T&gt; iterator = new Iterator&lt;T&gt;() &#123;</span><br><span class=\"line\">            @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">            T t = (T) Streams.NONE;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean hasNext() &#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public T next() &#123;</span><br><span class=\"line\">                return t = (t == Streams.NONE) ? seed : f.apply(t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(</span><br><span class=\"line\">                iterator,</span><br><span class=\"line\">                Spliterator.ORDERED | Spliterator.IMMUTABLE), false);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an infinite sequential unordered stream where each element is</span><br><span class=\"line\">     * generated by the provided &#123;@code Supplier&#125;.  This is suitable for</span><br><span class=\"line\">     * generating constant streams, streams of random elements, etc.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; the type of stream elements</span><br><span class=\"line\">     * @param s the &#123;@code Supplier&#125; of generated elements</span><br><span class=\"line\">     * @return a new infinite sequential unordered &#123;@code Stream&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(s);</span><br><span class=\"line\">        return StreamSupport.stream(</span><br><span class=\"line\">                new StreamSpliterators.InfiniteSupplyingSpliterator.OfRef&lt;&gt;(Long.MAX_VALUE, s), false);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Creates a lazily concatenated stream whose elements are all the</span><br><span class=\"line\">     * elements of the first stream followed by all the elements of the</span><br><span class=\"line\">     * second stream.  The resulting stream is ordered if both</span><br><span class=\"line\">     * of the input streams are ordered, and parallel if either of the input</span><br><span class=\"line\">     * streams is parallel.  When the resulting stream is closed, the close</span><br><span class=\"line\">     * handlers for both input streams are invoked.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @implNote</span><br><span class=\"line\">     * Use caution when constructing streams from repeated concatenation.</span><br><span class=\"line\">     * Accessing an element of a deeply concatenated stream can result in deep</span><br><span class=\"line\">     * call chains, or even &#123;@code StackOverflowException&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; The type of stream elements</span><br><span class=\"line\">     * @param a the first stream</span><br><span class=\"line\">     * @param b the second stream</span><br><span class=\"line\">     * @return the concatenation of the two input streams</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static &lt;T&gt; Stream&lt;T&gt; concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(a);</span><br><span class=\"line\">        Objects.requireNonNull(b);</span><br><span class=\"line\"></span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">        Spliterator&lt;T&gt; split = new Streams.ConcatSpliterator.OfRef&lt;&gt;(</span><br><span class=\"line\">                (Spliterator&lt;T&gt;) a.spliterator(), (Spliterator&lt;T&gt;) b.spliterator());</span><br><span class=\"line\">        Stream&lt;T&gt; stream = StreamSupport.stream(split, a.isParallel() || b.isParallel());</span><br><span class=\"line\">        return stream.onClose(Streams.composedClose(a, b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * A mutable builder for a &#123;@code Stream&#125;.  This allows the creation of a</span><br><span class=\"line\">     * &#123;@code Stream&#125; by generating elements individually and adding them to the</span><br><span class=\"line\">     * &#123;@code Builder&#125; (without the copying overhead that comes from using</span><br><span class=\"line\">     * an &#123;@code ArrayList&#125; as a temporary buffer.)</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;A stream builder has a lifecycle, which starts in a building</span><br><span class=\"line\">     * phase, during which elements can be added, and then transitions to a built</span><br><span class=\"line\">     * phase, after which elements may not be added.  The built phase begins</span><br><span class=\"line\">     * when the &#123;@link #build()&#125; method is called, which creates an ordered</span><br><span class=\"line\">     * &#123;@code Stream&#125; whose elements are the elements that were added to the stream</span><br><span class=\"line\">     * builder, in the order they were added.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; the type of stream elements</span><br><span class=\"line\">     * @see Stream#builder()</span><br><span class=\"line\">     * @since 1.8</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public interface Builder&lt;T&gt; extends Consumer&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * Adds an element to the stream being built.</span><br><span class=\"line\">         *</span><br><span class=\"line\">         * @throws IllegalStateException if the builder has already transitioned to</span><br><span class=\"line\">         * the built state</span><br><span class=\"line\">         */</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        void accept(T t);</span><br><span class=\"line\"></span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * Adds an element to the stream being built.</span><br><span class=\"line\">         *</span><br><span class=\"line\">         * @implSpec</span><br><span class=\"line\">         * The default implementation behaves as if:</span><br><span class=\"line\">         * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">         *     accept(t)</span><br><span class=\"line\">         *     return this;</span><br><span class=\"line\">         * &#125;&lt;/pre&gt;</span><br><span class=\"line\">         *</span><br><span class=\"line\">         * @param t the element to add</span><br><span class=\"line\">         * @return &#123;@code this&#125; builder</span><br><span class=\"line\">         * @throws IllegalStateException if the builder has already transitioned to</span><br><span class=\"line\">         * the built state</span><br><span class=\"line\">         */</span><br><span class=\"line\">        default Builder&lt;T&gt; add(T t) &#123;</span><br><span class=\"line\">            accept(t);</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * Builds the stream, transitioning this builder to the built state.</span><br><span class=\"line\">         * An &#123;@code IllegalStateException&#125; is thrown if there are further attempts</span><br><span class=\"line\">         * to operate on the builder after it has entered the built state.</span><br><span class=\"line\">         *</span><br><span class=\"line\">         * @return the built stream</span><br><span class=\"line\">         * @throws IllegalStateException if the builder has already transitioned to</span><br><span class=\"line\">         * the built state</span><br><span class=\"line\">         */</span><br><span class=\"line\">        Stream&lt;T&gt; build();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>特点</p>\n<ul>\n<li>元素序列。可以访问特定元素类型的一组有序值，</li>\n<li>源，使用一个提供数据的源，如集合，数组或者输入/输出资源，从有序集合生成流时会保留原有的顺序</li>\n<li>数据处理操作，支持类似数据库的操作，及函数式编程中的常用操作，如filter，map,reduce.sort，find,match</li>\n<li><strong>流水线</strong> 流操作大多数本身会返回一个流，这样多个操作可以链接起来，那么可以看作类似操作数据库的流水线操作</li>\n<li><strong>内部迭代</strong> 流的迭代操作，是在内部进行迭代的。</li>\n</ul>\n</li>\n<li><p>流与集合的区别：</p>\n<p>在于什么时候计算</p>\n<ul>\n<li>集合是一个内存中的数据结构，它包含数据结构中目前的所有的值，集合中的每个元素都得先算出来才能添加到集合，集合是我需要就创建，无需考虑需求。</li>\n<li>流是在概念上亭的数据结构，你不能添加或者删除元素，元素是按需求进行计算的，input-&gt;output,典型的生产者-消费者关系</li>\n<li>流只能遍历一次,只能消费一次，而集合会一直存在内存中。</li>\n<li>外部迭代与内部迭代，集合使用foreach进行外部迭代，流使用内部迭代，</li>\n</ul>\n</li>\n<li><p><strong>流操作</strong></p>\n<ul>\n<li><p>中间操作  返回一个流对象的操作都是中间操作：如filter,map，limit, sort .etc</p>\n<ul>\n<li>filter()  接受一个断言条件去过滤流的所有元素。 这个流的操作是中间的， 这使得我们能够对结果调用另外一个流操作（例如 forEach） </li>\n<li>map() 通过给定的功能将每个元素转换成另一个对象。 以下示例将每个字符串转换成大写字符串。当然你也可以使用 map 将每个对象转换成另一种类型。 </li>\n<li>sorted()  返回流的排序视图。元素按照自然顺序进行排序，除非传递了一个自定义的比较器。 </li>\n</ul>\n</li>\n<li><p>终端操作 如collect  forEach count 即不会返回流对象的操作。</p>\n<ul>\n<li><p>forEach()  该方法有助于迭代流的所有元素，并对他们中的每一个执行一些操作。 改操作作为 lambda 表达式参数传递 </p>\n</li>\n<li><p>collect()  collect() 方法用于从一个 stream 中接收元素，并将他们存储在一个集合中，并通过参数分类。 </p>\n</li>\n<li><p>match()  各种匹配操作检查某个断言条件是否与流匹配。所有这些操作都是终端并返回一个 Boolean 结果 </p>\n</li>\n<li><p>findAny() 将会返回当前流中的任意元素</p>\n</li>\n<li><p>count 返回符合给定谓词条件的总数</p>\n</li>\n<li><p>reduce（）<strong>归约</strong> 将一个流中的元素进行组合起来。函数式编程语言的术语来讲就是折叠。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; intList= new ArrayList&lt;&gt;();</span><br><span class=\"line\">/**</span><br><span class=\"line\">* 归约</span><br><span class=\"line\">*/</span><br><span class=\"line\">for (int k = 0; k &lt; 20; k++) &#123;</span><br><span class=\"line\">intList.add(k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int as=intList.stream().reduce(0,(a,b)-&gt;a+b);</span><br><span class=\"line\">System.out.println(as);</span><br><span class=\"line\">Optional&lt;Integer&gt; as1=intList.stream().reduce(Integer::min);</span><br><span class=\"line\">System.out.println(as1.get());</span><br><span class=\"line\">Optional&lt;Integer&gt; as2=intList.stream().reduce(Integer::max);</span><br><span class=\"line\">System.out.println(as2.get());</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>短路操作 foreach中的continue或者break的效果</p>\n<ul>\n<li>anyMatch()  一旦满足断言条件，该方法将返回 true。它不会处理任何更多的元素。  括号里面放一个predicate</li>\n<li>allMatch（）查看流中的元素是否都能匹配给定的条件</li>\n<li>noneMatch（）确保流中 的元素没有和给定的谓词相匹配</li>\n<li>findFirst()  该方法将从流返回第一个元素，然后不再处理任何元素。 括号里面放一个predicate</li>\n</ul>\n</li>\n<li><p>额外的一些操作 <strong>怎么感觉越来越像sql</strong></p>\n<ul>\n<li>distinct() 去重</li>\n<li>limit（） 截断长度 也可用在无序流set上</li>\n<li>skip（）跳过元素</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>流的使用</p>\n<ul>\n<li>一个数据源</li>\n<li>一个中间操作链</li>\n<li>一个终端操作</li>\n</ul>\n</li>\n<li><p>*<em>流的构建 *</em></p>\n<ul>\n<li><p>值构建 使用 Stream.of（T）</p>\n</li>\n<li><p>使用数组Stream.of(val1, val2, val3….)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SafeVarargs</span><br><span class=\"line\">@SuppressWarnings(&quot;varargs&quot;) // Creating a stream from an array is safe</span><br><span class=\"line\">public static&lt;T&gt; Stream&lt;T&gt; of(T... values) &#123;</span><br><span class=\"line\">    return Arrays.stream(values);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用数组 Stream.of(arrayOfElements) 和上面的其实是同一个api</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SafeVarargs</span><br><span class=\"line\">@SuppressWarnings(&quot;varargs&quot;) // Creating a stream from an array is safe</span><br><span class=\"line\">public static&lt;T&gt; Stream&lt;T&gt; of(T... values) &#123;</span><br><span class=\"line\">    return Arrays.stream(values);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 someList.stream()</p>\n</li>\n<li><p>由文件流生成</p>\n</li>\n<li><p>由函数生成流  使用 Stream.generate(functions ) 或者 Stream.iterate(functions ) 这个生成的是个无限流，函数放在generate()或iterate（）里面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Returns an infinite sequential unordered stream where each element is</span><br><span class=\"line\"> * generated by the provided &#123;@code Supplier&#125;.  This is suitable for</span><br><span class=\"line\"> * generating constant streams, streams of random elements, etc.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &lt;T&gt; the type of stream elements</span><br><span class=\"line\"> * @param s the &#123;@code Supplier&#125; of generated elements</span><br><span class=\"line\"> * @return a new infinite sequential unordered &#123;@code Stream&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s) &#123;</span><br><span class=\"line\">    Objects.requireNonNull(s);</span><br><span class=\"line\">    return StreamSupport.stream(</span><br><span class=\"line\">            new StreamSpliterators.InfiniteSupplyingSpliterator.OfRef&lt;&gt;(Long.MAX_VALUE, s), false);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Returns an infinite sequential ordered &#123;@code Stream&#125; produced by iterative</span><br><span class=\"line\"> * application of a function &#123;@code f&#125; to an initial element &#123;@code seed&#125;,</span><br><span class=\"line\"> * producing a &#123;@code Stream&#125; consisting of &#123;@code seed&#125;, &#123;@code f(seed)&#125;,</span><br><span class=\"line\"> * &#123;@code f(f(seed))&#125;, etc.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;The first element (position &#123;@code 0&#125;) in the &#123;@code Stream&#125; will be</span><br><span class=\"line\"> * the provided &#123;@code seed&#125;.  For &#123;@code n &gt; 0&#125;, the element at position</span><br><span class=\"line\"> * &#123;@code n&#125;, will be the result of applying the function &#123;@code f&#125; to the</span><br><span class=\"line\"> * element at position &#123;@code n - 1&#125;.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &lt;T&gt; the type of stream elements</span><br><span class=\"line\"> * @param seed the initial element</span><br><span class=\"line\"> * @param f a function to be applied to to the previous element to produce</span><br><span class=\"line\"> *          a new element</span><br><span class=\"line\"> * @return a new sequential &#123;@code Stream&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f) &#123;</span><br><span class=\"line\">    Objects.requireNonNull(f);</span><br><span class=\"line\">    final Iterator&lt;T&gt; iterator = new Iterator&lt;T&gt;() &#123;</span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">        T t = (T) Streams.NONE;</span><br><span class=\"line\">    </span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public boolean hasNext() &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public T next() &#123;</span><br><span class=\"line\">            return t = (t == Streams.NONE) ? seed : f.apply(t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return StreamSupport.stream(Spliterators.spliteratorUnknownSize(</span><br><span class=\"line\">            iterator,</span><br><span class=\"line\">            Spliterator.ORDERED | Spliterator.IMMUTABLE), false);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>將Streams轉換為其他數據結構</p>\n<ul>\n<li><p>使用 stream.collect(Collectors.xxx())  或 stream.toArray将 Stream 转换成 set list array</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   \tList&lt;Project&gt; l1=datas.stream().filter(p12-&gt;p12.getStar()&gt;3).collect(Collectors.toList());</span><br><span class=\"line\">System.out.println(l1);</span><br><span class=\"line\">Set&lt;Project&gt; s1=datas.stream().filter(p12-&gt;p12.getStar()&gt;3).collect(Collectors.toSet());</span><br><span class=\"line\">System.out.println(s1);</span><br><span class=\"line\">Project[] a1=datas.stream().filter(p12-&gt;p12.getStar()&gt;3).toArray(Project[]::new);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其他一些數據結構的轉換在 stream.collect（Collectors.xxx）裏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Project&gt; map1 = datas.stream().filter(p12 -&gt; p12.getStar() &gt; 3)</span><br><span class=\"line\">.collect(Collectors.toMap(Project::getLang, Function.identity()));</span><br><span class=\"line\">System.out.println(map1);</span><br><span class=\"line\">Map&lt;String, String&gt; map3 =\tdatas.stream().filter(p12 -&gt; p12.getStar() &gt; 3)</span><br><span class=\"line\">.collect(Collectors.toMap(Project::getLang, Project::getName));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>用流收集数据</p>\n<ul>\n<li><p>Collectors.groupingBy分组 二级分组就是将groupBy（）.groupBy（）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer, List&lt;Project&gt;&gt; collect = datas.stream().collect(Collectors.groupingBy(Project::getStar));</span><br><span class=\"line\">\t\tcollect.forEach((k, v) -&gt; &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(k);</span><br><span class=\"line\">\t\t\tSystem.out.println(v);</span><br><span class=\"line\">\t\t&#125;);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>* Collectors.groupingBy分组与mapping同时使用\n\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">datas.stream().collect(Collectors.groupingBy(Project::getStar, Collectors.mapping(item-&gt; &#123;</span><br><span class=\"line\">    if (item.getStar() == 1) &#123;</span><br><span class=\"line\">    return  item.getStar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 1l;</span><br><span class=\"line\">\t\t&#125;, Collectors.toSet())));</span><br></pre></td></tr></table></figure>\n\n\n* 流中的最大值，最小值 maxBy,minBy\n\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;Project&gt; popt = datas.stream().collect(Collectors.maxBy(Comparator.comparingInt(Project::getStar)));</span><br><span class=\"line\">\t\tProject project3 = popt.get();</span><br><span class=\"line\">\t\tSystem.out.println(project3);</span><br><span class=\"line\">\t\tOptional&lt;Project&gt; popt1 = datas.stream().collect(Collectors.minBy(Comparator.comparingInt(Project::getStar)));</span><br><span class=\"line\">\t\tSystem.out.println(popt1.get());</span><br></pre></td></tr></table></figure>\n\n\n* 汇总 summingInt\n\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer count2 = datas.stream().collect(Collectors.summingInt(Project::getStar));</span><br><span class=\"line\">    System.out.println(count2);</span><br></pre></td></tr></table></figure>\n\n\n* 链接字符串 需要先用map将元素对象的某个属性提取出来。 joining\n\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = datas.stream().map(Project::getLang).collect(Collectors.joining(&quot;,&quot;));</span><br><span class=\"line\">System.out.println(str);</span><br></pre></td></tr></table></figure>\n\n\n* 分区 多级分区 使用链式编程 partitioningBy（）.partitioningBy()\n\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Boolean, List&lt;Project&gt;&gt; collect3 = datas.stream().collect(Collectors.partitioningBy((Project pro)-&gt; pro.getStar()&gt;3));</span><br><span class=\"line\">\t\tcollect3.forEach((k,v)-&gt;&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(k);</span><br><span class=\"line\">\t\t\tSystem.out.println(v.toString());</span><br><span class=\"line\">\t\t&#125;);</span><br></pre></td></tr></table></figure>\n\n\n  **TODO:并行流，组合异步，Fork/Join分治框架，时间新api**</code></pre>","site":{"data":{}},"excerpt":"<p>java8的一些知识点的记录，写的比较糙，能理解就ok</p>","more":"<p></p>\n<h4 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h4><ul>\n<li>lambda表达式可以有零个，一个或者多个参数</li>\n<li>可以显式声明参数的类型，也可以从上下中推断参数类型</li>\n<li>多个参数必须包含在括号中，并用逗号分隔，空括号用于表示零个参数</li>\n<li>当只有一个参数时，如果推断它的类型，可以不用括号</li>\n<li>lambda表达式的函数体可以包含零个，一个或者多个语句</li>\n<li>如果lambda表达式函数提只有一行，那么就可以不用大括号，匿名函数的返回类型与函数体表达式的返回类型相同。当函数提中大于一行代码则需要用大括号包含。</li>\n<li>谓词复合，用于多条件判断。<ul>\n<li>negate  Predicate的非</li>\n<li>and Predicate的与</li>\n<li>or predicate的或</li>\n</ul>\n</li>\n<li>函数复合,用于Fuction接口所代表的Lambda表达式的符合<ul>\n<li>andThen 很明了的函数，aExpression.andThen(bExpression）相当于 数学上的 b(a(x))</li>\n<li>compose aExpression.compose(bExpression) 相当于数学上的  a（b(x)）</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"函数式编程中的方法引用。\"><a href=\"#函数式编程中的方法引用。\" class=\"headerlink\" title=\"函数式编程中的方法引用。\"></a>函数式编程中的方法引用。</h4><table>\n<thead>\n<tr>\n<th>方法引用</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>静态方法引用</td>\n<td>用于引用类的静态方法</td>\n<td>Math::max等于原先的Math.max（）</td>\n</tr>\n<tr>\n<td>实例对象引用方法</td>\n<td>使用实例对象引用来调用实例方法</td>\n<td>System.out::println=System.out.println()</td>\n</tr>\n<tr>\n<td>从类中引用实例方法（其实还是实例调用方法吧）</td>\n<td>在上下文提供的对象的医用上调用实例方法</td>\n<td>String::length相当于str.length</td>\n</tr>\n<tr>\n<td>引用构造函数</td>\n<td>引用构造函数，创建实例对象</td>\n<td>HashMap：：new 等于 new  HashMap()</td>\n</tr>\n</tbody></table>\n<p>这些方法引用其实在函数式编程语言 Rust 中都已经存在，lisp中也有。</p>\n<hr>\n<h4 id=\"默认方法与静态方法：\"><a href=\"#默认方法与静态方法：\" class=\"headerlink\" title=\"默认方法与静态方法：\"></a>默认方法与静态方法：</h4><p>接口新增了default方法和static方法。</p>\n<ul>\n<li><p>静态方法，只能通过接口调用，不可以通过实现类的类名或实现类的实例进行调用。最简单的提供工厂的实现功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.space.default_method;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface Caculate &#123;</span><br><span class=\"line\">\tint add(int a, int b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint subtract(int a, int b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint divide(int a, int b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint muti(int a, int b);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdefault int mod (int a , int b ) &#123;</span><br><span class=\"line\">\t\treturn a%b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static Caculate getCaculateImplInstance() &#123;</span><br><span class=\"line\">\t\treturn new CaculateImpl();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>默认方法，只能通过接口的实现类来调用,可以避免新的功能添加導致对现有功能的困扰。方便api的演进</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.space.default_method;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface Caculate &#123;</span><br><span class=\"line\">\tint add(int a, int b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint subtract(int a, int b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint divide(int a, int b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint muti(int a, int b);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdefault int mod (int a , int b ) &#123;</span><br><span class=\"line\">\t\treturn a%b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.space.default_method;</span><br><span class=\"line\"></span><br><span class=\"line\">public class CaculateImpl implements Caculate &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int add(int a, int b) &#123;</span><br><span class=\"line\">\t\treturn a+b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int subtract(int a, int b) &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\treturn a-b;\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int divide(int a, int b) &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\treturn a/b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int muti(int a, int b) &#123;</span><br><span class=\"line\">\t\treturn a*b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tCaculate caculate  = new CaculateImpl();</span><br><span class=\"line\">\t\tint mod = caculate.mod(100, 3);</span><br><span class=\"line\">\t\tSystem.out.println(mod);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>PS:</strong> 接口冲突，方法冲突 的解决：</p>\n<ul>\n<li>类中的方法优先级别最高，类或者父类中的声明的方法优先级高于任何声明为默认的方法的优先级</li>\n<li>如果无法通过上述条件进行判断，那么子类接口的优先级更高，函数签名相同时，优先选择拥有最具体实现的默认方法的接口，</li>\n<li>如果上述条件还是无法判断的话，继承多个接口的类必须通过显式覆盖和调用期望的方法，显式的选择使用哪一个默认方法的实现。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h4><ul>\n<li>函数式接口也称作单例抽象方法接口（SAM接口），<strong>接口中只允许一个抽象方法</strong>,@FunctionalInterface注解会在你注解的接口违反函数式几口的约定时提示一个编译错误。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FunctionalInterface</span><br><span class=\"line\">public interface  MyFunctionalInterface &#123;</span><br><span class=\"line\">    public void firstFunction（）；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li><p>常用函数式接口</p>\n<ul>\n<li><p>Predicate函数式接口:功能判断输入的对象是否符合某个条件。官方文档解释到：<code>Determines if the input object matches some criteria</code></p>\n<p>原始类型特化：IntPredicate,LongPredicate, DoublePredicate </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span><br><span class=\"line\"> */</span><br><span class=\"line\">package java.util.function;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Represents a predicate (boolean-valued function) of one argument.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt;</span><br><span class=\"line\"> * whose functional method is &#123;@link #test(Object)&#125;.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &lt;T&gt; the type of the input to the predicate</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @since 1.8</span><br><span class=\"line\"> */</span><br><span class=\"line\">@FunctionalInterface</span><br><span class=\"line\">public interface Predicate&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Evaluates this predicate on the given argument.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param t the input argument</span><br><span class=\"line\">     * @return &#123;@code true&#125; if the input argument matches the predicate,</span><br><span class=\"line\">     * otherwise &#123;@code false&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    boolean test(T t);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a composed predicate that represents a short-circuiting logical</span><br><span class=\"line\">     * AND of this predicate and another.  When evaluating the composed</span><br><span class=\"line\">     * predicate, if this predicate is &#123;@code false&#125;, then the &#123;@code other&#125;</span><br><span class=\"line\">     * predicate is not evaluated.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;Any exceptions thrown during evaluation of either predicate are relayed</span><br><span class=\"line\">     * to the caller; if evaluation of this predicate throws an exception, the</span><br><span class=\"line\">     * &#123;@code other&#125; predicate will not be evaluated.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param other a predicate that will be logically-ANDed with this</span><br><span class=\"line\">     *              predicate</span><br><span class=\"line\">     * @return a composed predicate that represents the short-circuiting logical</span><br><span class=\"line\">     * AND of this predicate and the &#123;@code other&#125; predicate</span><br><span class=\"line\">     * @throws NullPointerException if other is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    default Predicate&lt;T&gt; and(Predicate&lt;? super T&gt; other) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(other);</span><br><span class=\"line\">        return (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a predicate that represents the logical negation of this</span><br><span class=\"line\">     * predicate.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return a predicate that represents the logical negation of this</span><br><span class=\"line\">     * predicate</span><br><span class=\"line\">     */</span><br><span class=\"line\">    default Predicate&lt;T&gt; negate() &#123;</span><br><span class=\"line\">        return (t) -&gt; !test(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a composed predicate that represents a short-circuiting logical</span><br><span class=\"line\">     * OR of this predicate and another.  When evaluating the composed</span><br><span class=\"line\">     * predicate, if this predicate is &#123;@code true&#125;, then the &#123;@code other&#125;</span><br><span class=\"line\">     * predicate is not evaluated.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;Any exceptions thrown during evaluation of either predicate are relayed</span><br><span class=\"line\">     * to the caller; if evaluation of this predicate throws an exception, the</span><br><span class=\"line\">     * &#123;@code other&#125; predicate will not be evaluated.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param other a predicate that will be logically-ORed with this</span><br><span class=\"line\">     *              predicate</span><br><span class=\"line\">     * @return a composed predicate that represents the short-circuiting logical</span><br><span class=\"line\">     * OR of this predicate and the &#123;@code other&#125; predicate</span><br><span class=\"line\">     * @throws NullPointerException if other is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    default Predicate&lt;T&gt; or(Predicate&lt;? super T&gt; other) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(other);</span><br><span class=\"line\">        return (t) -&gt; test(t) || other.test(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a predicate that tests if two arguments are equal according</span><br><span class=\"line\">     * to &#123;@link Objects#equals(Object, Object)&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; the type of arguments to the predicate</span><br><span class=\"line\">     * @param targetRef the object reference with which to compare for equality,</span><br><span class=\"line\">     *               which may be &#123;@code null&#125;</span><br><span class=\"line\">     * @return a predicate that tests if two arguments are equal according</span><br><span class=\"line\">     * to &#123;@link Objects#equals(Object, Object)&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    static &lt;T&gt; Predicate&lt;T&gt; isEqual(Object targetRef) &#123;</span><br><span class=\"line\">        return (null == targetRef)</span><br><span class=\"line\">                ? Objects::isNull</span><br><span class=\"line\">                : object -&gt; targetRef.equals(object);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Consumer函数式接口： <strong>表示一个接受单个输入参数并且没有返回值的操作</strong>。不像其它函数式接口，Consumer 接口期望执行带有副作用的操作 (Consumer 的操作可能会更改输入参数的内部状态)。官方文档：<code>An operation which accepts a single input argument and returns no result. Unlike most other functional interfaces, Consumer is expected to operate via side-effects.</code> 也就是void。</p>\n<p>原始类型特化:</p>\n<p>IntConsumer,LongConsumer, DoubleConsumer </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span><br><span class=\"line\"> */</span><br><span class=\"line\">package java.util.function;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Represents an operation that accepts a single input argument and returns no</span><br><span class=\"line\"> * result. Unlike most other functional interfaces, &#123;@code Consumer&#125; is expected</span><br><span class=\"line\"> * to operate via side-effects.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt;</span><br><span class=\"line\"> * whose functional method is &#123;@link #accept(Object)&#125;.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &lt;T&gt; the type of the input to the operation</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @since 1.8</span><br><span class=\"line\"> */</span><br><span class=\"line\">@FunctionalInterface</span><br><span class=\"line\">public interface Consumer&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Performs this operation on the given argument.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param t the input argument</span><br><span class=\"line\">     */</span><br><span class=\"line\">    void accept(T t);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a composed &#123;@code Consumer&#125; that performs, in sequence, this</span><br><span class=\"line\">     * operation followed by the &#123;@code after&#125; operation. If performing either</span><br><span class=\"line\">     * operation throws an exception, it is relayed to the caller of the</span><br><span class=\"line\">     * composed operation.  If performing this operation throws an exception,</span><br><span class=\"line\">     * the &#123;@code after&#125; operation will not be performed.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param after the operation to perform after this operation</span><br><span class=\"line\">     * @return a composed &#123;@code Consumer&#125; that performs in sequence this</span><br><span class=\"line\">     * operation followed by the &#123;@code after&#125; operation</span><br><span class=\"line\">     * @throws NullPointerException if &#123;@code after&#125; is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    default Consumer&lt;T&gt; andThen(Consumer&lt;? super T&gt; after) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(after);</span><br><span class=\"line\">        return (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Supplier 函数式接口：顾名思义，就是提供者的意思，可以简单理解为工厂，<strong>不接收参数，只提供返回值</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span><br><span class=\"line\"> */</span><br><span class=\"line\">package java.util.function;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Represents a supplier of results.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;There is no requirement that a new or distinct result be returned each</span><br><span class=\"line\"> * time the supplier is invoked.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt;</span><br><span class=\"line\"> * whose functional method is &#123;@link #get()&#125;.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &lt;T&gt; the type of results supplied by this supplier</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @since 1.8</span><br><span class=\"line\"> */</span><br><span class=\"line\">@FunctionalInterface</span><br><span class=\"line\">public interface Supplier&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Gets a result.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return a result</span><br><span class=\"line\">     */</span><br><span class=\"line\">    T get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Function函数式接口：<strong>接受一定数量的参数 同时提供一个返回结果</strong>  ,</p>\n<p>原始类型特化：</p>\n<p><code>IntFunction&lt;R&gt;, IntToDoubleFunction,</code>  <code>IntToLongFunction, LongFunction&lt;R&gt;,</code>  <code>LongToDoubleFunction, LongToIntFunction,</code>  <code>DoubleFunction&lt;R&gt;, ToIntFunction&lt;T&gt;,</code>  <code>ToDoubleFunction&lt;T&gt;, ToLongFunction&lt;T&gt;</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span><br><span class=\"line\"> */</span><br><span class=\"line\">package java.util.function;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Represents a function that accepts one argument and produces a result.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt;</span><br><span class=\"line\"> * whose functional method is &#123;@link #apply(Object)&#125;.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &lt;T&gt; the type of the input to the function</span><br><span class=\"line\"> * @param &lt;R&gt; the type of the result of the function</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @since 1.8</span><br><span class=\"line\"> */</span><br><span class=\"line\">@FunctionalInterface</span><br><span class=\"line\">public interface Function&lt;T, R&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Applies this function to the given argument.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param t the function argument</span><br><span class=\"line\">     * @return the function result</span><br><span class=\"line\">     */</span><br><span class=\"line\">    R apply(T t);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a composed function that first applies the &#123;@code before&#125;</span><br><span class=\"line\">     * function to its input, and then applies this function to the result.</span><br><span class=\"line\">     * If evaluation of either function throws an exception, it is relayed to</span><br><span class=\"line\">     * the caller of the composed function.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;V&gt; the type of input to the &#123;@code before&#125; function, and to the</span><br><span class=\"line\">     *           composed function</span><br><span class=\"line\">     * @param before the function to apply before this function is applied</span><br><span class=\"line\">     * @return a composed function that first applies the &#123;@code before&#125;</span><br><span class=\"line\">     * function and then applies this function</span><br><span class=\"line\">     * @throws NullPointerException if before is null</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @see #andThen(Function)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    default &lt;V&gt; Function&lt;V, R&gt; compose(Function&lt;? super V, ? extends T&gt; before) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(before);</span><br><span class=\"line\">        return (V v) -&gt; apply(before.apply(v));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a composed function that first applies this function to</span><br><span class=\"line\">     * its input, and then applies the &#123;@code after&#125; function to the result.</span><br><span class=\"line\">     * If evaluation of either function throws an exception, it is relayed to</span><br><span class=\"line\">     * the caller of the composed function.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;V&gt; the type of output of the &#123;@code after&#125; function, and of the</span><br><span class=\"line\">     *           composed function</span><br><span class=\"line\">     * @param after the function to apply after this function is applied</span><br><span class=\"line\">     * @return a composed function that first applies this function and then</span><br><span class=\"line\">     * applies the &#123;@code after&#125; function</span><br><span class=\"line\">     * @throws NullPointerException if after is null</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @see #compose(Function)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    default &lt;V&gt; Function&lt;T, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(after);</span><br><span class=\"line\">        return (T t) -&gt; after.apply(apply(t));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a function that always returns its input argument.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; the type of the input and output objects to the function</span><br><span class=\"line\">     * @return a function that always returns its input argument</span><br><span class=\"line\">     */</span><br><span class=\"line\">    static &lt;T&gt; Function&lt;T, T&gt; identity() &#123;</span><br><span class=\"line\">        return t -&gt; t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Operator函数式接口:  运算符函数接口，有<code>UnaryOperator&lt;T&gt;和</code>BinaryOperator<t>``这两个接口。只有一个泛型，那么意思就是说 入参和返回只有一种类型。</t></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* UnaryOperator 接收一个参数 返回同类型结果。</span><br><span class=\"line\">*/</span><br><span class=\"line\">    List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6);</span><br><span class=\"line\">    UnaryOperator&lt;Integer&gt; unaryOpt = i -&gt; i * i;</span><br><span class=\"line\">    unaryOperatorFun(unaryOpt, list).forEach(x -&gt; &#123;</span><br><span class=\"line\">    System.out.println(x);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">private static List&lt;Integer&gt; unaryOperatorFun(UnaryOperator&lt;Integer&gt; unaryOpt, List&lt;Integer&gt; list) &#123;</span><br><span class=\"line\">    List&lt;Integer&gt; uniList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    list.forEach(i -&gt; uniList.add(unaryOpt.apply(i)));</span><br><span class=\"line\">    return uniList;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * BinaryOperator</span><br><span class=\"line\"> */</span><br><span class=\"line\">Map&lt;String, String&gt; map = new HashMap();</span><br><span class=\"line\">map.put(&quot;1&quot;, &quot;23&quot;);</span><br><span class=\"line\">map.put(&quot;12&quot;, &quot;2365&quot;);</span><br><span class=\"line\">map.put(&quot;13&quot;, &quot;231&quot;);</span><br><span class=\"line\">map.put(&quot;14&quot;, &quot;232&quot;);</span><br><span class=\"line\">BinaryOperator&lt;String&gt; bo = (s1, s2) -&gt; s1 + s2;</span><br><span class=\"line\">binaryOperatorFun(bo, map).forEach(x-&gt;System.out.println(x));</span><br><span class=\"line\"></span><br><span class=\"line\">private static List&lt;String&gt; binaryOperatorFun(BinaryOperator&lt;String&gt; bo, Map&lt;String, String&gt; map) &#123;</span><br><span class=\"line\">    List&lt;String&gt; result = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    map.forEach((s1,s2)-&gt;result.add(bo.apply(s1, s2)));</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Optional\"><a href=\"#Optional\" class=\"headerlink\" title=\"Optional\"></a>Optional</h4><p>很像Rust中的Option</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span><br><span class=\"line\"> */</span><br><span class=\"line\">package java.util;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.function.Consumer;</span><br><span class=\"line\">import java.util.function.Function;</span><br><span class=\"line\">import java.util.function.Predicate;</span><br><span class=\"line\">import java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * A container object which may or may not contain a non-null value.</span><br><span class=\"line\"> * If a value is present, &#123;@code isPresent()&#125; will return &#123;@code true&#125; and</span><br><span class=\"line\"> * &#123;@code get()&#125; will return the value.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;Additional methods that depend on the presence or absence of a contained</span><br><span class=\"line\"> * value are provided, such as &#123;@link #orElse(java.lang.Object) orElse()&#125;</span><br><span class=\"line\"> * (return a default value if value not present) and</span><br><span class=\"line\"> * &#123;@link #ifPresent(java.util.function.Consumer) ifPresent()&#125; (execute a block</span><br><span class=\"line\"> * of code if the value is present).</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;This is a &lt;a href=&quot;../lang/doc-files/ValueBased.html&quot;&gt;value-based&lt;/a&gt;</span><br><span class=\"line\"> * class; use of identity-sensitive operations (including reference equality</span><br><span class=\"line\"> * (&#123;@code ==&#125;), identity hash code, or synchronization) on instances of</span><br><span class=\"line\"> * &#123;@code Optional&#125; may have unpredictable results and should be avoided.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @since 1.8</span><br><span class=\"line\"> */</span><br><span class=\"line\">public final class Optional&lt;T&gt; &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Common instance for &#123;@code empty()&#125;.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static final Optional&lt;?&gt; EMPTY = new Optional&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * If non-null, the value; if null, indicates no value is present</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private final T value;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Constructs an empty instance.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @implNote Generally only one empty instance, &#123;@link Optional#EMPTY&#125;,</span><br><span class=\"line\">     * should exist per VM.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Optional() &#123;</span><br><span class=\"line\">        this.value = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an empty &#123;@code Optional&#125; instance.  No value is present for this</span><br><span class=\"line\">     * Optional.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote Though it may be tempting to do so, avoid testing if an object</span><br><span class=\"line\">     * is empty by comparing with &#123;@code ==&#125; against instances returned by</span><br><span class=\"line\">     * &#123;@code Option.empty()&#125;. There is no guarantee that it is a singleton.</span><br><span class=\"line\">     * Instead, use &#123;@link #isPresent()&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; Type of the non-existent value</span><br><span class=\"line\">     * @return an empty &#123;@code Optional&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static&lt;T&gt; Optional&lt;T&gt; empty() &#123;</span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">        Optional&lt;T&gt; t = (Optional&lt;T&gt;) EMPTY;</span><br><span class=\"line\">        return t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Constructs an instance with the value present.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param value the non-null value to be present</span><br><span class=\"line\">     * @throws NullPointerException if value is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Optional(T value) &#123;</span><br><span class=\"line\">        this.value = Objects.requireNonNull(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an &#123;@code Optional&#125; with the specified present non-null value.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; the class of the value</span><br><span class=\"line\">     * @param value the value to be present, which must be non-null</span><br><span class=\"line\">     * @return an &#123;@code Optional&#125; with the value present</span><br><span class=\"line\">     * @throws NullPointerException if value is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static &lt;T&gt; Optional&lt;T&gt; of(T value) &#123;</span><br><span class=\"line\">        return new Optional&lt;&gt;(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an &#123;@code Optional&#125; describing the specified value, if non-null,</span><br><span class=\"line\">     * otherwise returns an empty &#123;@code Optional&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; the class of the value</span><br><span class=\"line\">     * @param value the possibly-null value to describe</span><br><span class=\"line\">     * @return an &#123;@code Optional&#125; with a present value if the specified value</span><br><span class=\"line\">     * is non-null, otherwise an empty &#123;@code Optional&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value) &#123;</span><br><span class=\"line\">        return value == null ? empty() : of(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * If a value is present in this &#123;@code Optional&#125;, returns the value,</span><br><span class=\"line\">     * otherwise throws &#123;@code NoSuchElementException&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return the non-null value held by this &#123;@code Optional&#125;</span><br><span class=\"line\">     * @throws NoSuchElementException if there is no value present</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @see Optional#isPresent()</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public T get() &#123;</span><br><span class=\"line\">        if (value == null) &#123;</span><br><span class=\"line\">            throw new NoSuchElementException(&quot;No value present&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Return &#123;@code true&#125; if there is a value present, otherwise &#123;@code false&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return &#123;@code true&#125; if there is a value present, otherwise &#123;@code false&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean isPresent() &#123;</span><br><span class=\"line\">        return value != null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * If a value is present, invoke the specified consumer with the value,</span><br><span class=\"line\">     * otherwise do nothing.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param consumer block to be executed if a value is present</span><br><span class=\"line\">     * @throws NullPointerException if value is present and &#123;@code consumer&#125; is</span><br><span class=\"line\">     * null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void ifPresent(Consumer&lt;? super T&gt; consumer) &#123;</span><br><span class=\"line\">        if (value != null)</span><br><span class=\"line\">            consumer.accept(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * If a value is present, and the value matches the given predicate,</span><br><span class=\"line\">     * return an &#123;@code Optional&#125; describing the value, otherwise return an</span><br><span class=\"line\">     * empty &#123;@code Optional&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param predicate a predicate to apply to the value, if present</span><br><span class=\"line\">     * @return an &#123;@code Optional&#125; describing the value of this &#123;@code Optional&#125;</span><br><span class=\"line\">     * if a value is present and the value matches the given predicate,</span><br><span class=\"line\">     * otherwise an empty &#123;@code Optional&#125;</span><br><span class=\"line\">     * @throws NullPointerException if the predicate is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public Optional&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(predicate);</span><br><span class=\"line\">        if (!isPresent())</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            return predicate.test(value) ? this : empty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * If a value is present, apply the provided mapping function to it,</span><br><span class=\"line\">     * and if the result is non-null, return an &#123;@code Optional&#125; describing the</span><br><span class=\"line\">     * result.  Otherwise return an empty &#123;@code Optional&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote This method supports post-processing on optional values, without</span><br><span class=\"line\">     * the need to explicitly check for a return status.  For example, the</span><br><span class=\"line\">     * following code traverses a stream of file names, selects one that has</span><br><span class=\"line\">     * not yet been processed, and then opens that file, returning an</span><br><span class=\"line\">     * &#123;@code Optional&lt;FileInputStream&gt;&#125;:</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     Optional&lt;FileInputStream&gt; fis =</span><br><span class=\"line\">     *         names.stream().filter(name -&gt; !isProcessedYet(name))</span><br><span class=\"line\">     *                       .findFirst()</span><br><span class=\"line\">     *                       .map(name -&gt; new FileInputStream(name));</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Here, &#123;@code findFirst&#125; returns an &#123;@code Optional&lt;String&gt;&#125;, and then</span><br><span class=\"line\">     * &#123;@code map&#125; returns an &#123;@code Optional&lt;FileInputStream&gt;&#125; for the desired</span><br><span class=\"line\">     * file if one exists.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;U&gt; The type of the result of the mapping function</span><br><span class=\"line\">     * @param mapper a mapping function to apply to the value, if present</span><br><span class=\"line\">     * @return an &#123;@code Optional&#125; describing the result of applying a mapping</span><br><span class=\"line\">     * function to the value of this &#123;@code Optional&#125;, if a value is present,</span><br><span class=\"line\">     * otherwise an empty &#123;@code Optional&#125;</span><br><span class=\"line\">     * @throws NullPointerException if the mapping function is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public&lt;U&gt; Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; mapper) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(mapper);</span><br><span class=\"line\">        if (!isPresent())</span><br><span class=\"line\">            return empty();</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            return Optional.ofNullable(mapper.apply(value));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * If a value is present, apply the provided &#123;@code Optional&#125;-bearing</span><br><span class=\"line\">     * mapping function to it, return that result, otherwise return an empty</span><br><span class=\"line\">     * &#123;@code Optional&#125;.  This method is similar to &#123;@link #map(Function)&#125;,</span><br><span class=\"line\">     * but the provided mapper is one whose result is already an &#123;@code Optional&#125;,</span><br><span class=\"line\">     * and if invoked, &#123;@code flatMap&#125; does not wrap it with an additional</span><br><span class=\"line\">     * &#123;@code Optional&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;U&gt; The type parameter to the &#123;@code Optional&#125; returned by</span><br><span class=\"line\">     * @param mapper a mapping function to apply to the value, if present</span><br><span class=\"line\">     *           the mapping function</span><br><span class=\"line\">     * @return the result of applying an &#123;@code Optional&#125;-bearing mapping</span><br><span class=\"line\">     * function to the value of this &#123;@code Optional&#125;, if a value is present,</span><br><span class=\"line\">     * otherwise an empty &#123;@code Optional&#125;</span><br><span class=\"line\">     * @throws NullPointerException if the mapping function is null or returns</span><br><span class=\"line\">     * a null result</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public&lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; mapper) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(mapper);</span><br><span class=\"line\">        if (!isPresent())</span><br><span class=\"line\">            return empty();</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            return Objects.requireNonNull(mapper.apply(value));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Return the value if present, otherwise return &#123;@code other&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param other the value to be returned if there is no value present, may</span><br><span class=\"line\">     * be null</span><br><span class=\"line\">     * @return the value, if present, otherwise &#123;@code other&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public T orElse(T other) &#123;</span><br><span class=\"line\">        return value != null ? value : other;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Return the value if present, otherwise invoke &#123;@code other&#125; and return</span><br><span class=\"line\">     * the result of that invocation.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param other a &#123;@code Supplier&#125; whose result is returned if no value</span><br><span class=\"line\">     * is present</span><br><span class=\"line\">     * @return the value if present otherwise the result of &#123;@code other.get()&#125;</span><br><span class=\"line\">     * @throws NullPointerException if value is not present and &#123;@code other&#125; is</span><br><span class=\"line\">     * null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public T orElseGet(Supplier&lt;? extends T&gt; other) &#123;</span><br><span class=\"line\">        return value != null ? value : other.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Return the contained value, if present, otherwise throw an exception</span><br><span class=\"line\">     * to be created by the provided supplier.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote A method reference to the exception constructor with an empty</span><br><span class=\"line\">     * argument list can be used as the supplier. For example,</span><br><span class=\"line\">     * &#123;@code IllegalStateException::new&#125;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;X&gt; Type of the exception to be thrown</span><br><span class=\"line\">     * @param exceptionSupplier The supplier which will return the exception to</span><br><span class=\"line\">     * be thrown</span><br><span class=\"line\">     * @return the present value</span><br><span class=\"line\">     * @throws X if there is no value present</span><br><span class=\"line\">     * @throws NullPointerException if no value is present and</span><br><span class=\"line\">     * &#123;@code exceptionSupplier&#125; is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public &lt;X extends Throwable&gt; T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) throws X &#123;</span><br><span class=\"line\">        if (value != null) &#123;</span><br><span class=\"line\">            return value;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            throw exceptionSupplier.get();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Indicates whether some other object is &quot;equal to&quot; this Optional. The</span><br><span class=\"line\">     * other object is considered equal if:</span><br><span class=\"line\">     * &lt;ul&gt;</span><br><span class=\"line\">     * &lt;li&gt;it is also an &#123;@code Optional&#125; and;</span><br><span class=\"line\">     * &lt;li&gt;both instances have no value present or;</span><br><span class=\"line\">     * &lt;li&gt;the present values are &quot;equal to&quot; each other via &#123;@code equals()&#125;.</span><br><span class=\"line\">     * &lt;/ul&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param obj an object to be tested for equality</span><br><span class=\"line\">     * @return &#123;code true&#125; if the other object is &quot;equal to&quot; this object</span><br><span class=\"line\">     * otherwise &#123;@code false&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean equals(Object obj) &#123;</span><br><span class=\"line\">        if (this == obj) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (!(obj instanceof Optional)) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Optional&lt;?&gt; other = (Optional&lt;?&gt;) obj;</span><br><span class=\"line\">        return Objects.equals(value, other.value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns the hash code value of the present value, if any, or 0 (zero) if</span><br><span class=\"line\">     * no value is present.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return hash code value of the present value or 0 if no value is present</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int hashCode() &#123;</span><br><span class=\"line\">        return Objects.hashCode(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a non-empty string representation of this Optional suitable for</span><br><span class=\"line\">     * debugging. The exact presentation format is unspecified and may vary</span><br><span class=\"line\">     * between implementations and versions.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @implSpec If a value is present the result must include its string</span><br><span class=\"line\">     * representation in the result. Empty and present Optionals must be</span><br><span class=\"line\">     * unambiguously differentiable.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return the string representation of this instance</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return value != null</span><br><span class=\"line\">            ? String.format(&quot;Optional[%s]&quot;, value)</span><br><span class=\"line\">            : &quot;Optional.empty&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>创建Optional对象</p>\n<ul>\n<li><p>声明一个空的Optional对象 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;Car&gt; optCar = Optional.empty()；</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个有值的Optional如果你赋值为 null，则会抛出空指针异常。 如果值是 null，则目标 Optional 对象将会是空 (记得值是 absent，不是 null)。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;Car&gt; optCar = Optional.of(car)；</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可接受null值的Optional的创建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;Car&gt; optCar = Optional.ofNullable(car);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>使用map从Optional中提取和转换值</p>\n<pre><code>Optional&lt;Project&gt; ppp = Optional.of(pp);\nOptional&lt;Optional&lt;String&gt;&gt; map2 = ppp.map(Project::getAuth);\nOptional&lt;String&gt; autss = map2.get();</code></pre> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;Person&gt; optPerson = Optional.ofNullable(person）;</span><br><span class=\"line\"></span><br><span class=\"line\">Optional&lt;Car&gt; optcar=optPerson.map(Person::getCar);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用flatMap链接Optional对象,用于处理嵌套的optional,流</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OptionalPerson&gt; optPerson = Optional.ofNullable(person）;</span><br><span class=\"line\">Optional&lt;Wheel&gt; optw=optPerson.flatMap（Person::getCar）.map(Car::getWheel());</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>默认行为及解引用Optional对象。</p>\n<ul>\n<li><code>get()</code>获取封装的变量，或者抛出NoSuchElementException();</li>\n<li><code>orElse(T other)</code>如果Optional对象中不包含值时可以进行提供一个默认值</li>\n<li><code>orElseGet（Supplier&lt;? extends T&gt; other）</code>是orElse的延迟嗲用版，Supplier只有在Optional中不含值的时候才执行调用</li>\n<li><code>orElseThrow（Supplier&lt;? extends X&gt; exceptionSupplier）</code>和get方法相似，只不过在遭遇对象元素为空的时候会抛出异常，可以定制异常。</li>\n<li><code>ifPresent(Consumer &lt;? Super T&gt;)</code> 在变量值存在时执行一个作为参数传入的方法。否则不做任何操作。</li>\n</ul>\n</li>\n<li><p>使用filter剔除特定的值</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;String&gt; optt = Optional.of(&quot;123&quot;);</span><br><span class=\"line\">optt.filter(s1-&gt;&quot;123&quot;.equals(s1)).ifPresent(x-&gt;System.out.println(x));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以下情况不使用Optional:</p>\n<ul>\n<li>in the domain model layer (it’s not serializable) </li>\n<li>in DTOs (it’s not serializable) </li>\n<li>in input parameters of methods </li>\n<li>in constructor parameters </li>\n</ul>\n</li>\n<li><p>何时使用Optional</p>\n<p> <strong>当函数的返回值有可能是 null 时，我们应该尽可能地去使用它.</strong></p>\n</li>\n</ul>\n<h4 id=\"流\"><a href=\"#流\" class=\"headerlink\" title=\"流\"></a>流</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br><span class=\"line\">913</span><br><span class=\"line\">914</span><br><span class=\"line\">915</span><br><span class=\"line\">916</span><br><span class=\"line\">917</span><br><span class=\"line\">918</span><br><span class=\"line\">919</span><br><span class=\"line\">920</span><br><span class=\"line\">921</span><br><span class=\"line\">922</span><br><span class=\"line\">923</span><br><span class=\"line\">924</span><br><span class=\"line\">925</span><br><span class=\"line\">926</span><br><span class=\"line\">927</span><br><span class=\"line\">928</span><br><span class=\"line\">929</span><br><span class=\"line\">930</span><br><span class=\"line\">931</span><br><span class=\"line\">932</span><br><span class=\"line\">933</span><br><span class=\"line\">934</span><br><span class=\"line\">935</span><br><span class=\"line\">936</span><br><span class=\"line\">937</span><br><span class=\"line\">938</span><br><span class=\"line\">939</span><br><span class=\"line\">940</span><br><span class=\"line\">941</span><br><span class=\"line\">942</span><br><span class=\"line\">943</span><br><span class=\"line\">944</span><br><span class=\"line\">945</span><br><span class=\"line\">946</span><br><span class=\"line\">947</span><br><span class=\"line\">948</span><br><span class=\"line\">949</span><br><span class=\"line\">950</span><br><span class=\"line\">951</span><br><span class=\"line\">952</span><br><span class=\"line\">953</span><br><span class=\"line\">954</span><br><span class=\"line\">955</span><br><span class=\"line\">956</span><br><span class=\"line\">957</span><br><span class=\"line\">958</span><br><span class=\"line\">959</span><br><span class=\"line\">960</span><br><span class=\"line\">961</span><br><span class=\"line\">962</span><br><span class=\"line\">963</span><br><span class=\"line\">964</span><br><span class=\"line\">965</span><br><span class=\"line\">966</span><br><span class=\"line\">967</span><br><span class=\"line\">968</span><br><span class=\"line\">969</span><br><span class=\"line\">970</span><br><span class=\"line\">971</span><br><span class=\"line\">972</span><br><span class=\"line\">973</span><br><span class=\"line\">974</span><br><span class=\"line\">975</span><br><span class=\"line\">976</span><br><span class=\"line\">977</span><br><span class=\"line\">978</span><br><span class=\"line\">979</span><br><span class=\"line\">980</span><br><span class=\"line\">981</span><br><span class=\"line\">982</span><br><span class=\"line\">983</span><br><span class=\"line\">984</span><br><span class=\"line\">985</span><br><span class=\"line\">986</span><br><span class=\"line\">987</span><br><span class=\"line\">988</span><br><span class=\"line\">989</span><br><span class=\"line\">990</span><br><span class=\"line\">991</span><br><span class=\"line\">992</span><br><span class=\"line\">993</span><br><span class=\"line\">994</span><br><span class=\"line\">995</span><br><span class=\"line\">996</span><br><span class=\"line\">997</span><br><span class=\"line\">998</span><br><span class=\"line\">999</span><br><span class=\"line\">1000</span><br><span class=\"line\">1001</span><br><span class=\"line\">1002</span><br><span class=\"line\">1003</span><br><span class=\"line\">1004</span><br><span class=\"line\">1005</span><br><span class=\"line\">1006</span><br><span class=\"line\">1007</span><br><span class=\"line\">1008</span><br><span class=\"line\">1009</span><br><span class=\"line\">1010</span><br><span class=\"line\">1011</span><br><span class=\"line\">1012</span><br><span class=\"line\">1013</span><br><span class=\"line\">1014</span><br><span class=\"line\">1015</span><br><span class=\"line\">1016</span><br><span class=\"line\">1017</span><br><span class=\"line\">1018</span><br><span class=\"line\">1019</span><br><span class=\"line\">1020</span><br><span class=\"line\">1021</span><br><span class=\"line\">1022</span><br><span class=\"line\">1023</span><br><span class=\"line\">1024</span><br><span class=\"line\">1025</span><br><span class=\"line\">1026</span><br><span class=\"line\">1027</span><br><span class=\"line\">1028</span><br><span class=\"line\">1029</span><br><span class=\"line\">1030</span><br><span class=\"line\">1031</span><br><span class=\"line\">1032</span><br><span class=\"line\">1033</span><br><span class=\"line\">1034</span><br><span class=\"line\">1035</span><br><span class=\"line\">1036</span><br><span class=\"line\">1037</span><br><span class=\"line\">1038</span><br><span class=\"line\">1039</span><br><span class=\"line\">1040</span><br><span class=\"line\">1041</span><br><span class=\"line\">1042</span><br><span class=\"line\">1043</span><br><span class=\"line\">1044</span><br><span class=\"line\">1045</span><br><span class=\"line\">1046</span><br><span class=\"line\">1047</span><br><span class=\"line\">1048</span><br><span class=\"line\">1049</span><br><span class=\"line\">1050</span><br><span class=\"line\">1051</span><br><span class=\"line\">1052</span><br><span class=\"line\">1053</span><br><span class=\"line\">1054</span><br><span class=\"line\">1055</span><br><span class=\"line\">1056</span><br><span class=\"line\">1057</span><br><span class=\"line\">1058</span><br><span class=\"line\">1059</span><br><span class=\"line\">1060</span><br><span class=\"line\">1061</span><br><span class=\"line\">1062</span><br><span class=\"line\">1063</span><br><span class=\"line\">1064</span><br><span class=\"line\">1065</span><br><span class=\"line\">1066</span><br><span class=\"line\">1067</span><br><span class=\"line\">1068</span><br><span class=\"line\">1069</span><br><span class=\"line\">1070</span><br><span class=\"line\">1071</span><br><span class=\"line\">1072</span><br><span class=\"line\">1073</span><br><span class=\"line\">1074</span><br><span class=\"line\">1075</span><br><span class=\"line\">1076</span><br><span class=\"line\">1077</span><br><span class=\"line\">1078</span><br><span class=\"line\">1079</span><br><span class=\"line\">1080</span><br><span class=\"line\">1081</span><br><span class=\"line\">1082</span><br><span class=\"line\">1083</span><br><span class=\"line\">1084</span><br><span class=\"line\">1085</span><br><span class=\"line\">1086</span><br><span class=\"line\">1087</span><br><span class=\"line\">1088</span><br><span class=\"line\">1089</span><br><span class=\"line\">1090</span><br><span class=\"line\">1091</span><br><span class=\"line\">1092</span><br><span class=\"line\">1093</span><br><span class=\"line\">1094</span><br><span class=\"line\">1095</span><br><span class=\"line\">1096</span><br><span class=\"line\">1097</span><br><span class=\"line\">1098</span><br><span class=\"line\">1099</span><br><span class=\"line\">1100</span><br><span class=\"line\">1101</span><br><span class=\"line\">1102</span><br><span class=\"line\">1103</span><br><span class=\"line\">1104</span><br><span class=\"line\">1105</span><br><span class=\"line\">1106</span><br><span class=\"line\">1107</span><br><span class=\"line\">1108</span><br><span class=\"line\">1109</span><br><span class=\"line\">1110</span><br><span class=\"line\">1111</span><br><span class=\"line\">1112</span><br><span class=\"line\">1113</span><br><span class=\"line\">1114</span><br><span class=\"line\">1115</span><br><span class=\"line\">1116</span><br><span class=\"line\">1117</span><br><span class=\"line\">1118</span><br><span class=\"line\">1119</span><br><span class=\"line\">1120</span><br><span class=\"line\">1121</span><br><span class=\"line\">1122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package java.util.stream;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.nio.charset.Charset;</span><br><span class=\"line\">import java.nio.file.Files;</span><br><span class=\"line\">import java.nio.file.Path;</span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">import java.util.Collection;</span><br><span class=\"line\">import java.util.Comparator;</span><br><span class=\"line\">import java.util.Iterator;</span><br><span class=\"line\">import java.util.Objects;</span><br><span class=\"line\">import java.util.Optional;</span><br><span class=\"line\">import java.util.Spliterator;</span><br><span class=\"line\">import java.util.Spliterators;</span><br><span class=\"line\">import java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\">import java.util.function.BiConsumer;</span><br><span class=\"line\">import java.util.function.BiFunction;</span><br><span class=\"line\">import java.util.function.BinaryOperator;</span><br><span class=\"line\">import java.util.function.Consumer;</span><br><span class=\"line\">import java.util.function.Function;</span><br><span class=\"line\">import java.util.function.IntFunction;</span><br><span class=\"line\">import java.util.function.Predicate;</span><br><span class=\"line\">import java.util.function.Supplier;</span><br><span class=\"line\">import java.util.function.ToDoubleFunction;</span><br><span class=\"line\">import java.util.function.ToIntFunction;</span><br><span class=\"line\">import java.util.function.ToLongFunction;</span><br><span class=\"line\">import java.util.function.UnaryOperator;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * A sequence of elements supporting sequential and parallel aggregate</span><br><span class=\"line\"> * operations.  The following example illustrates an aggregate operation using</span><br><span class=\"line\"> * &#123;@link Stream&#125; and &#123;@link IntStream&#125;:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;pre&gt;&#123;@code</span><br><span class=\"line\"> *     int sum = widgets.stream()</span><br><span class=\"line\"> *                      .filter(w -&gt; w.getColor() == RED)</span><br><span class=\"line\"> *                      .mapToInt(w -&gt; w.getWeight())</span><br><span class=\"line\"> *                      .sum();</span><br><span class=\"line\"> * &#125;&lt;/pre&gt;</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * In this example, &#123;@code widgets&#125; is a &#123;@code Collection&lt;Widget&gt;&#125;.  We create</span><br><span class=\"line\"> * a stream of &#123;@code Widget&#125; objects via &#123;@link Collection#stream Collection.stream()&#125;,</span><br><span class=\"line\"> * filter it to produce a stream containing only the red widgets, and then</span><br><span class=\"line\"> * transform it into a stream of &#123;@code int&#125; values representing the weight of</span><br><span class=\"line\"> * each red widget. Then this stream is summed to produce a total weight.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;In addition to &#123;@code Stream&#125;, which is a stream of object references,</span><br><span class=\"line\"> * there are primitive specializations for &#123;@link IntStream&#125;, &#123;@link LongStream&#125;,</span><br><span class=\"line\"> * and &#123;@link DoubleStream&#125;, all of which are referred to as &quot;streams&quot; and</span><br><span class=\"line\"> * conform to the characteristics and restrictions described here.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;To perform a computation, stream</span><br><span class=\"line\"> * &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;operations&lt;/a&gt; are composed into a</span><br><span class=\"line\"> * &lt;em&gt;stream pipeline&lt;/em&gt;.  A stream pipeline consists of a source (which</span><br><span class=\"line\"> * might be an array, a collection, a generator function, an I/O channel,</span><br><span class=\"line\"> * etc), zero or more &lt;em&gt;intermediate operations&lt;/em&gt; (which transform a</span><br><span class=\"line\"> * stream into another stream, such as &#123;@link Stream#filter(Predicate)&#125;), and a</span><br><span class=\"line\"> * &lt;em&gt;terminal operation&lt;/em&gt; (which produces a result or side-effect, such</span><br><span class=\"line\"> * as &#123;@link Stream#count()&#125; or &#123;@link Stream#forEach(Consumer)&#125;).</span><br><span class=\"line\"> * Streams are lazy; computation on the source data is only performed when the</span><br><span class=\"line\"> * terminal operation is initiated, and source elements are consumed only</span><br><span class=\"line\"> * as needed.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;Collections and streams, while bearing some superficial similarities,</span><br><span class=\"line\"> * have different goals.  Collections are primarily concerned with the efficient</span><br><span class=\"line\"> * management of, and access to, their elements.  By contrast, streams do not</span><br><span class=\"line\"> * provide a means to directly access or manipulate their elements, and are</span><br><span class=\"line\"> * instead concerned with declaratively describing their source and the</span><br><span class=\"line\"> * computational operations which will be performed in aggregate on that source.</span><br><span class=\"line\"> * However, if the provided stream operations do not offer the desired</span><br><span class=\"line\"> * functionality, the &#123;@link #iterator()&#125; and &#123;@link #spliterator()&#125; operations</span><br><span class=\"line\"> * can be used to perform a controlled traversal.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;A stream pipeline, like the &quot;widgets&quot; example above, can be viewed as</span><br><span class=\"line\"> * a &lt;em&gt;query&lt;/em&gt; on the stream source.  Unless the source was explicitly</span><br><span class=\"line\"> * designed for concurrent modification (such as a &#123;@link ConcurrentHashMap&#125;),</span><br><span class=\"line\"> * unpredictable or erroneous behavior may result from modifying the stream</span><br><span class=\"line\"> * source while it is being queried.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;Most stream operations accept parameters that describe user-specified</span><br><span class=\"line\"> * behavior, such as the lambda expression &#123;@code w -&gt; w.getWeight()&#125; passed to</span><br><span class=\"line\"> * &#123;@code mapToInt&#125; in the example above.  To preserve correct behavior,</span><br><span class=\"line\"> * these &lt;em&gt;behavioral parameters&lt;/em&gt;:</span><br><span class=\"line\"> * &lt;ul&gt;</span><br><span class=\"line\"> * &lt;li&gt;must be &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;</span><br><span class=\"line\"> * (they do not modify the stream source); and&lt;/li&gt;</span><br><span class=\"line\"> * &lt;li&gt;in most cases must be &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\"> * (their result should not depend on any state that might change during execution</span><br><span class=\"line\"> * of the stream pipeline).&lt;/li&gt;</span><br><span class=\"line\"> * &lt;/ul&gt;</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;Such parameters are always instances of a</span><br><span class=\"line\"> * &lt;a href=&quot;../function/package-summary.html&quot;&gt;functional interface&lt;/a&gt; such</span><br><span class=\"line\"> * as &#123;@link java.util.function.Function&#125;, and are often lambda expressions or</span><br><span class=\"line\"> * method references.  Unless otherwise specified these parameters must be</span><br><span class=\"line\"> * &lt;em&gt;non-null&lt;/em&gt;.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;A stream should be operated on (invoking an intermediate or terminal stream</span><br><span class=\"line\"> * operation) only once.  This rules out, for example, &quot;forked&quot; streams, where</span><br><span class=\"line\"> * the same source feeds two or more pipelines, or multiple traversals of the</span><br><span class=\"line\"> * same stream.  A stream implementation may throw &#123;@link IllegalStateException&#125;</span><br><span class=\"line\"> * if it detects that the stream is being reused. However, since some stream</span><br><span class=\"line\"> * operations may return their receiver rather than a new stream object, it may</span><br><span class=\"line\"> * not be possible to detect reuse in all cases.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;Streams have a &#123;@link #close()&#125; method and implement &#123;@link AutoCloseable&#125;,</span><br><span class=\"line\"> * but nearly all stream instances do not actually need to be closed after use.</span><br><span class=\"line\"> * Generally, only streams whose source is an IO channel (such as those returned</span><br><span class=\"line\"> * by &#123;@link Files#lines(Path, Charset)&#125;) will require closing.  Most streams</span><br><span class=\"line\"> * are backed by collections, arrays, or generating functions, which require no</span><br><span class=\"line\"> * special resource management.  (If a stream does require closing, it can be</span><br><span class=\"line\"> * declared as a resource in a &#123;@code try&#125;-with-resources statement.)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;Stream pipelines may execute either sequentially or in</span><br><span class=\"line\"> * &lt;a href=&quot;package-summary.html#Parallelism&quot;&gt;parallel&lt;/a&gt;.  This</span><br><span class=\"line\"> * execution mode is a property of the stream.  Streams are created</span><br><span class=\"line\"> * with an initial choice of sequential or parallel execution.  (For example,</span><br><span class=\"line\"> * &#123;@link Collection#stream() Collection.stream()&#125; creates a sequential stream,</span><br><span class=\"line\"> * and &#123;@link Collection#parallelStream() Collection.parallelStream()&#125; creates</span><br><span class=\"line\"> * a parallel one.)  This choice of execution mode may be modified by the</span><br><span class=\"line\"> * &#123;@link #sequential()&#125; or &#123;@link #parallel()&#125; methods, and may be queried with</span><br><span class=\"line\"> * the &#123;@link #isParallel()&#125; method.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &lt;T&gt; the type of the stream elements</span><br><span class=\"line\"> * @since 1.8</span><br><span class=\"line\"> * @see IntStream</span><br><span class=\"line\"> * @see LongStream</span><br><span class=\"line\"> * @see DoubleStream</span><br><span class=\"line\"> * @see &lt;a href=&quot;package-summary.html&quot;&gt;java.util.stream&lt;/a&gt;</span><br><span class=\"line\"> */</span><br><span class=\"line\">public interface Stream&lt;T&gt; extends BaseStream&lt;T, Stream&lt;T&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a stream consisting of the elements of this stream that match</span><br><span class=\"line\">     * the given predicate.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param predicate a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                  &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                  predicate to apply to each element to determine if it</span><br><span class=\"line\">     *                  should be included</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a stream consisting of the results of applying the given</span><br><span class=\"line\">     * function to the elements of this stream.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;R&gt; The element type of the new stream</span><br><span class=\"line\">     * @param mapper a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *               &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *               function to apply to each element</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    &lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an &#123;@code IntStream&#125; consisting of the results of applying the</span><br><span class=\"line\">     * given function to the elements of this stream.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;</span><br><span class=\"line\">     *     intermediate operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param mapper a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *               &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *               function to apply to each element</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    IntStream mapToInt(ToIntFunction&lt;? super T&gt; mapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a &#123;@code LongStream&#125; consisting of the results of applying the</span><br><span class=\"line\">     * given function to the elements of this stream.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param mapper a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *               &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *               function to apply to each element</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    LongStream mapToLong(ToLongFunction&lt;? super T&gt; mapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a &#123;@code DoubleStream&#125; consisting of the results of applying the</span><br><span class=\"line\">     * given function to the elements of this stream.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param mapper a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *               &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *               function to apply to each element</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    DoubleStream mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a stream consisting of the results of replacing each element of</span><br><span class=\"line\">     * this stream with the contents of a mapped stream produced by applying</span><br><span class=\"line\">     * the provided mapping function to each element.  Each mapped stream is</span><br><span class=\"line\">     * &#123;@link java.util.stream.BaseStream#close() closed&#125; after its contents</span><br><span class=\"line\">     * have been placed into this stream.  (If a mapped stream is &#123;@code null&#125;</span><br><span class=\"line\">     * an empty stream is used, instead.)</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote</span><br><span class=\"line\">     * The &#123;@code flatMap()&#125; operation has the effect of applying a one-to-many</span><br><span class=\"line\">     * transformation to the elements of the stream, and then flattening the</span><br><span class=\"line\">     * resulting elements into a new stream.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;&lt;b&gt;Examples.&lt;/b&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;If &#123;@code orders&#125; is a stream of purchase orders, and each purchase</span><br><span class=\"line\">     * order contains a collection of line items, then the following produces a</span><br><span class=\"line\">     * stream containing all the line items in all the orders:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     orders.flatMap(order -&gt; order.getLineItems().stream())...</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;If &#123;@code path&#125; is the path to a file, then the following produces a</span><br><span class=\"line\">     * stream of the &#123;@code words&#125; contained in that file:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     Stream&lt;String&gt; lines = Files.lines(path, StandardCharsets.UTF_8);</span><br><span class=\"line\">     *     Stream&lt;String&gt; words = lines.flatMap(line -&gt; Stream.of(line.split(&quot; +&quot;)));</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     * The &#123;@code mapper&#125; function passed to &#123;@code flatMap&#125; splits a line,</span><br><span class=\"line\">     * using a simple regular expression, into an array of words, and then</span><br><span class=\"line\">     * creates a stream of words from that array.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;R&gt; The element type of the new stream</span><br><span class=\"line\">     * @param mapper a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *               &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *               function to apply to each element which produces a stream</span><br><span class=\"line\">     *               of new values</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    &lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an &#123;@code IntStream&#125; consisting of the results of replacing each</span><br><span class=\"line\">     * element of this stream with the contents of a mapped stream produced by</span><br><span class=\"line\">     * applying the provided mapping function to each element.  Each mapped</span><br><span class=\"line\">     * stream is &#123;@link java.util.stream.BaseStream#close() closed&#125; after its</span><br><span class=\"line\">     * contents have been placed into this stream.  (If a mapped stream is</span><br><span class=\"line\">     * &#123;@code null&#125; an empty stream is used, instead.)</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param mapper a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *               &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *               function to apply to each element which produces a stream</span><br><span class=\"line\">     *               of new values</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     * @see #flatMap(Function)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    IntStream flatMapToInt(Function&lt;? super T, ? extends IntStream&gt; mapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an &#123;@code LongStream&#125; consisting of the results of replacing each</span><br><span class=\"line\">     * element of this stream with the contents of a mapped stream produced by</span><br><span class=\"line\">     * applying the provided mapping function to each element.  Each mapped</span><br><span class=\"line\">     * stream is &#123;@link java.util.stream.BaseStream#close() closed&#125; after its</span><br><span class=\"line\">     * contents have been placed into this stream.  (If a mapped stream is</span><br><span class=\"line\">     * &#123;@code null&#125; an empty stream is used, instead.)</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param mapper a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *               &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *               function to apply to each element which produces a stream</span><br><span class=\"line\">     *               of new values</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     * @see #flatMap(Function)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    LongStream flatMapToLong(Function&lt;? super T, ? extends LongStream&gt; mapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an &#123;@code DoubleStream&#125; consisting of the results of replacing</span><br><span class=\"line\">     * each element of this stream with the contents of a mapped stream produced</span><br><span class=\"line\">     * by applying the provided mapping function to each element.  Each mapped</span><br><span class=\"line\">     * stream is &#123;@link java.util.stream.BaseStream#close() closed&#125; after its</span><br><span class=\"line\">     * contents have placed been into this stream.  (If a mapped stream is</span><br><span class=\"line\">     * &#123;@code null&#125; an empty stream is used, instead.)</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param mapper a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *               &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *               function to apply to each element which produces a stream</span><br><span class=\"line\">     *               of new values</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     * @see #flatMap(Function)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    DoubleStream flatMapToDouble(Function&lt;? super T, ? extends DoubleStream&gt; mapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a stream consisting of the distinct elements (according to</span><br><span class=\"line\">     * &#123;@link Object#equals(Object)&#125;) of this stream.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;For ordered streams, the selection of distinct elements is stable</span><br><span class=\"line\">     * (for duplicated elements, the element appearing first in the encounter</span><br><span class=\"line\">     * order is preserved.)  For unordered streams, no stability guarantees</span><br><span class=\"line\">     * are made.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;stateful</span><br><span class=\"line\">     * intermediate operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote</span><br><span class=\"line\">     * Preserving stability for &#123;@code distinct()&#125; in parallel pipelines is</span><br><span class=\"line\">     * relatively expensive (requires that the operation act as a full barrier,</span><br><span class=\"line\">     * with substantial buffering overhead), and stability is often not needed.</span><br><span class=\"line\">     * Using an unordered stream source (such as &#123;@link #generate(Supplier)&#125;)</span><br><span class=\"line\">     * or removing the ordering constraint with &#123;@link #unordered()&#125; may result</span><br><span class=\"line\">     * in significantly more efficient execution for &#123;@code distinct()&#125; in parallel</span><br><span class=\"line\">     * pipelines, if the semantics of your situation permit.  If consistency</span><br><span class=\"line\">     * with encounter order is required, and you are experiencing poor performance</span><br><span class=\"line\">     * or memory utilization with &#123;@code distinct()&#125; in parallel pipelines,</span><br><span class=\"line\">     * switching to sequential execution with &#123;@link #sequential()&#125; may improve</span><br><span class=\"line\">     * performance.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Stream&lt;T&gt; distinct();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a stream consisting of the elements of this stream, sorted</span><br><span class=\"line\">     * according to natural order.  If the elements of this stream are not</span><br><span class=\"line\">     * &#123;@code Comparable&#125;, a &#123;@code java.lang.ClassCastException&#125; may be thrown</span><br><span class=\"line\">     * when the terminal operation is executed.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;For ordered streams, the sort is stable.  For unordered streams, no</span><br><span class=\"line\">     * stability guarantees are made.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;stateful</span><br><span class=\"line\">     * intermediate operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Stream&lt;T&gt; sorted();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a stream consisting of the elements of this stream, sorted</span><br><span class=\"line\">     * according to the provided &#123;@code Comparator&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;For ordered streams, the sort is stable.  For unordered streams, no</span><br><span class=\"line\">     * stability guarantees are made.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;stateful</span><br><span class=\"line\">     * intermediate operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param comparator a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                   &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                   &#123;@code Comparator&#125; to be used to compare stream elements</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Stream&lt;T&gt; sorted(Comparator&lt;? super T&gt; comparator);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a stream consisting of the elements of this stream, additionally</span><br><span class=\"line\">     * performing the provided action on each element as elements are consumed</span><br><span class=\"line\">     * from the resulting stream.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is an &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;intermediate</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;For parallel stream pipelines, the action may be called at</span><br><span class=\"line\">     * whatever time and in whatever thread the element is made available by the</span><br><span class=\"line\">     * upstream operation.  If the action modifies shared state,</span><br><span class=\"line\">     * it is responsible for providing the required synchronization.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote This method exists mainly to support debugging, where you want</span><br><span class=\"line\">     * to see the elements as they flow past a certain point in a pipeline:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     Stream.of(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)</span><br><span class=\"line\">     *         .filter(e -&gt; e.length() &gt; 3)</span><br><span class=\"line\">     *         .peek(e -&gt; System.out.println(&quot;Filtered value: &quot; + e))</span><br><span class=\"line\">     *         .map(String::toUpperCase)</span><br><span class=\"line\">     *         .peek(e -&gt; System.out.println(&quot;Mapped value: &quot; + e))</span><br><span class=\"line\">     *         .collect(Collectors.toList());</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param action a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;</span><br><span class=\"line\">     *                 non-interfering&lt;/a&gt; action to perform on the elements as</span><br><span class=\"line\">     *                 they are consumed from the stream</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Stream&lt;T&gt; peek(Consumer&lt;? super T&gt; action);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a stream consisting of the elements of this stream, truncated</span><br><span class=\"line\">     * to be no longer than &#123;@code maxSize&#125; in length.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;short-circuiting</span><br><span class=\"line\">     * stateful intermediate operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote</span><br><span class=\"line\">     * While &#123;@code limit()&#125; is generally a cheap operation on sequential</span><br><span class=\"line\">     * stream pipelines, it can be quite expensive on ordered parallel pipelines,</span><br><span class=\"line\">     * especially for large values of &#123;@code maxSize&#125;, since &#123;@code limit(n)&#125;</span><br><span class=\"line\">     * is constrained to return not just any &lt;em&gt;n&lt;/em&gt; elements, but the</span><br><span class=\"line\">     * &lt;em&gt;first n&lt;/em&gt; elements in the encounter order.  Using an unordered</span><br><span class=\"line\">     * stream source (such as &#123;@link #generate(Supplier)&#125;) or removing the</span><br><span class=\"line\">     * ordering constraint with &#123;@link #unordered()&#125; may result in significant</span><br><span class=\"line\">     * speedups of &#123;@code limit()&#125; in parallel pipelines, if the semantics of</span><br><span class=\"line\">     * your situation permit.  If consistency with encounter order is required,</span><br><span class=\"line\">     * and you are experiencing poor performance or memory utilization with</span><br><span class=\"line\">     * &#123;@code limit()&#125; in parallel pipelines, switching to sequential execution</span><br><span class=\"line\">     * with &#123;@link #sequential()&#125; may improve performance.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param maxSize the number of elements the stream should be limited to</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     * @throws IllegalArgumentException if &#123;@code maxSize&#125; is negative</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Stream&lt;T&gt; limit(long maxSize);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a stream consisting of the remaining elements of this stream</span><br><span class=\"line\">     * after discarding the first &#123;@code n&#125; elements of the stream.</span><br><span class=\"line\">     * If this stream contains fewer than &#123;@code n&#125; elements then an</span><br><span class=\"line\">     * empty stream will be returned.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;stateful</span><br><span class=\"line\">     * intermediate operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote</span><br><span class=\"line\">     * While &#123;@code skip()&#125; is generally a cheap operation on sequential</span><br><span class=\"line\">     * stream pipelines, it can be quite expensive on ordered parallel pipelines,</span><br><span class=\"line\">     * especially for large values of &#123;@code n&#125;, since &#123;@code skip(n)&#125;</span><br><span class=\"line\">     * is constrained to skip not just any &lt;em&gt;n&lt;/em&gt; elements, but the</span><br><span class=\"line\">     * &lt;em&gt;first n&lt;/em&gt; elements in the encounter order.  Using an unordered</span><br><span class=\"line\">     * stream source (such as &#123;@link #generate(Supplier)&#125;) or removing the</span><br><span class=\"line\">     * ordering constraint with &#123;@link #unordered()&#125; may result in significant</span><br><span class=\"line\">     * speedups of &#123;@code skip()&#125; in parallel pipelines, if the semantics of</span><br><span class=\"line\">     * your situation permit.  If consistency with encounter order is required,</span><br><span class=\"line\">     * and you are experiencing poor performance or memory utilization with</span><br><span class=\"line\">     * &#123;@code skip()&#125; in parallel pipelines, switching to sequential execution</span><br><span class=\"line\">     * with &#123;@link #sequential()&#125; may improve performance.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param n the number of leading elements to skip</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     * @throws IllegalArgumentException if &#123;@code n&#125; is negative</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Stream&lt;T&gt; skip(long n);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Performs an action for each element of this stream.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;The behavior of this operation is explicitly nondeterministic.</span><br><span class=\"line\">     * For parallel stream pipelines, this operation does &lt;em&gt;not&lt;/em&gt;</span><br><span class=\"line\">     * guarantee to respect the encounter order of the stream, as doing so</span><br><span class=\"line\">     * would sacrifice the benefit of parallelism.  For any given element, the</span><br><span class=\"line\">     * action may be performed at whatever time and in whatever thread the</span><br><span class=\"line\">     * library chooses.  If the action accesses shared state, it is</span><br><span class=\"line\">     * responsible for providing the required synchronization.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param action a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;</span><br><span class=\"line\">     *               non-interfering&lt;/a&gt; action to perform on the elements</span><br><span class=\"line\">     */</span><br><span class=\"line\">    void forEach(Consumer&lt;? super T&gt; action);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Performs an action for each element of this stream, in the encounter</span><br><span class=\"line\">     * order of the stream if the stream has a defined encounter order.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This operation processes the elements one at a time, in encounter</span><br><span class=\"line\">     * order if one exists.  Performing the action for one element</span><br><span class=\"line\">     * &lt;a href=&quot;../concurrent/package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happens-before&lt;/i&gt;&lt;/a&gt;</span><br><span class=\"line\">     * performing the action for subsequent elements, but for any given element,</span><br><span class=\"line\">     * the action may be performed in whatever thread the library chooses.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param action a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;</span><br><span class=\"line\">     *               non-interfering&lt;/a&gt; action to perform on the elements</span><br><span class=\"line\">     * @see #forEach(Consumer)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    void forEachOrdered(Consumer&lt;? super T&gt; action);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an array containing the elements of this stream.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return an array containing the elements of this stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Object[] toArray();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an array containing the elements of this stream, using the</span><br><span class=\"line\">     * provided &#123;@code generator&#125; function to allocate the returned array, as</span><br><span class=\"line\">     * well as any additional arrays that might be required for a partitioned</span><br><span class=\"line\">     * execution or for resizing.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote</span><br><span class=\"line\">     * The generator function takes an integer, which is the size of the</span><br><span class=\"line\">     * desired array, and produces an array of the desired size.  This can be</span><br><span class=\"line\">     * concisely expressed with an array constructor reference:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     Person[] men = people.stream()</span><br><span class=\"line\">     *                          .filter(p -&gt; p.getGender() == MALE)</span><br><span class=\"line\">     *                          .toArray(Person[]::new);</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;A&gt; the element type of the resulting array</span><br><span class=\"line\">     * @param generator a function which produces a new array of the desired</span><br><span class=\"line\">     *                  type and the provided length</span><br><span class=\"line\">     * @return an array containing the elements in this stream</span><br><span class=\"line\">     * @throws ArrayStoreException if the runtime type of the array returned</span><br><span class=\"line\">     * from the array generator is not a supertype of the runtime type of every</span><br><span class=\"line\">     * element in this stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    &lt;A&gt; A[] toArray(IntFunction&lt;A[]&gt; generator);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Performs a &lt;a href=&quot;package-summary.html#Reduction&quot;&gt;reduction&lt;/a&gt; on the</span><br><span class=\"line\">     * elements of this stream, using the provided identity value and an</span><br><span class=\"line\">     * &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt;</span><br><span class=\"line\">     * accumulation function, and returns the reduced value.  This is equivalent</span><br><span class=\"line\">     * to:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     T result = identity;</span><br><span class=\"line\">     *     for (T element : this stream)</span><br><span class=\"line\">     *         result = accumulator.apply(result, element)</span><br><span class=\"line\">     *     return result;</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * but is not constrained to execute sequentially.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;The &#123;@code identity&#125; value must be an identity for the accumulator</span><br><span class=\"line\">     * function. This means that for all &#123;@code t&#125;,</span><br><span class=\"line\">     * &#123;@code accumulator.apply(identity, t)&#125; is equal to &#123;@code t&#125;.</span><br><span class=\"line\">     * The &#123;@code accumulator&#125; function must be an</span><br><span class=\"line\">     * &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt; function.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote Sum, min, max, average, and string concatenation are all special</span><br><span class=\"line\">     * cases of reduction. Summing a stream of numbers can be expressed as:</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     Integer sum = integers.reduce(0, (a, b) -&gt; a+b);</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * or:</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     Integer sum = integers.reduce(0, Integer::sum);</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;While this may seem a more roundabout way to perform an aggregation</span><br><span class=\"line\">     * compared to simply mutating a running total in a loop, reduction</span><br><span class=\"line\">     * operations parallelize more gracefully, without needing additional</span><br><span class=\"line\">     * synchronization and with greatly reduced risk of data races.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param identity the identity value for the accumulating function</span><br><span class=\"line\">     * @param accumulator an &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                    function for combining two values</span><br><span class=\"line\">     * @return the result of the reduction</span><br><span class=\"line\">     */</span><br><span class=\"line\">    T reduce(T identity, BinaryOperator&lt;T&gt; accumulator);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Performs a &lt;a href=&quot;package-summary.html#Reduction&quot;&gt;reduction&lt;/a&gt; on the</span><br><span class=\"line\">     * elements of this stream, using an</span><br><span class=\"line\">     * &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt; accumulation</span><br><span class=\"line\">     * function, and returns an &#123;@code Optional&#125; describing the reduced value,</span><br><span class=\"line\">     * if any. This is equivalent to:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     boolean foundAny = false;</span><br><span class=\"line\">     *     T result = null;</span><br><span class=\"line\">     *     for (T element : this stream) &#123;</span><br><span class=\"line\">     *         if (!foundAny) &#123;</span><br><span class=\"line\">     *             foundAny = true;</span><br><span class=\"line\">     *             result = element;</span><br><span class=\"line\">     *         &#125;</span><br><span class=\"line\">     *         else</span><br><span class=\"line\">     *             result = accumulator.apply(result, element);</span><br><span class=\"line\">     *     &#125;</span><br><span class=\"line\">     *     return foundAny ? Optional.of(result) : Optional.empty();</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * but is not constrained to execute sequentially.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;The &#123;@code accumulator&#125; function must be an</span><br><span class=\"line\">     * &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt; function.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param accumulator an &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                    function for combining two values</span><br><span class=\"line\">     * @return an &#123;@link Optional&#125; describing the result of the reduction</span><br><span class=\"line\">     * @throws NullPointerException if the result of the reduction is null</span><br><span class=\"line\">     * @see #reduce(Object, BinaryOperator)</span><br><span class=\"line\">     * @see #min(Comparator)</span><br><span class=\"line\">     * @see #max(Comparator)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Performs a &lt;a href=&quot;package-summary.html#Reduction&quot;&gt;reduction&lt;/a&gt; on the</span><br><span class=\"line\">     * elements of this stream, using the provided identity, accumulation and</span><br><span class=\"line\">     * combining functions.  This is equivalent to:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     U result = identity;</span><br><span class=\"line\">     *     for (T element : this stream)</span><br><span class=\"line\">     *         result = accumulator.apply(result, element)</span><br><span class=\"line\">     *     return result;</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * but is not constrained to execute sequentially.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;The &#123;@code identity&#125; value must be an identity for the combiner</span><br><span class=\"line\">     * function.  This means that for all &#123;@code u&#125;, &#123;@code combiner(identity, u)&#125;</span><br><span class=\"line\">     * is equal to &#123;@code u&#125;.  Additionally, the &#123;@code combiner&#125; function</span><br><span class=\"line\">     * must be compatible with the &#123;@code accumulator&#125; function; for all</span><br><span class=\"line\">     * &#123;@code u&#125; and &#123;@code t&#125;, the following must hold:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     combiner.apply(u, accumulator.apply(identity, t)) == accumulator.apply(u, t)</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote Many reductions using this form can be represented more simply</span><br><span class=\"line\">     * by an explicit combination of &#123;@code map&#125; and &#123;@code reduce&#125; operations.</span><br><span class=\"line\">     * The &#123;@code accumulator&#125; function acts as a fused mapper and accumulator,</span><br><span class=\"line\">     * which can sometimes be more efficient than separate mapping and reduction,</span><br><span class=\"line\">     * such as when knowing the previously reduced value allows you to avoid</span><br><span class=\"line\">     * some computation.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;U&gt; The type of the result</span><br><span class=\"line\">     * @param identity the identity value for the combiner function</span><br><span class=\"line\">     * @param accumulator an &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                    function for incorporating an additional element into a result</span><br><span class=\"line\">     * @param combiner an &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                    function for combining two values, which must be</span><br><span class=\"line\">     *                    compatible with the accumulator function</span><br><span class=\"line\">     * @return the result of the reduction</span><br><span class=\"line\">     * @see #reduce(BinaryOperator)</span><br><span class=\"line\">     * @see #reduce(Object, BinaryOperator)</span><br><span class=\"line\">     */</span><br><span class=\"line\">    &lt;U&gt; U reduce(U identity,</span><br><span class=\"line\">                 BiFunction&lt;U, ? super T, U&gt; accumulator,</span><br><span class=\"line\">                 BinaryOperator&lt;U&gt; combiner);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Performs a &lt;a href=&quot;package-summary.html#MutableReduction&quot;&gt;mutable</span><br><span class=\"line\">     * reduction&lt;/a&gt; operation on the elements of this stream.  A mutable</span><br><span class=\"line\">     * reduction is one in which the reduced value is a mutable result container,</span><br><span class=\"line\">     * such as an &#123;@code ArrayList&#125;, and elements are incorporated by updating</span><br><span class=\"line\">     * the state of the result rather than by replacing the result.  This</span><br><span class=\"line\">     * produces a result equivalent to:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     R result = supplier.get();</span><br><span class=\"line\">     *     for (T element : this stream)</span><br><span class=\"line\">     *         accumulator.accept(result, element);</span><br><span class=\"line\">     *     return result;</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;Like &#123;@link #reduce(Object, BinaryOperator)&#125;, &#123;@code collect&#125; operations</span><br><span class=\"line\">     * can be parallelized without requiring additional synchronization.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote There are many existing classes in the JDK whose signatures are</span><br><span class=\"line\">     * well-suited for use with method references as arguments to &#123;@code collect()&#125;.</span><br><span class=\"line\">     * For example, the following will accumulate strings into an &#123;@code ArrayList&#125;:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     List&lt;String&gt; asList = stringStream.collect(ArrayList::new, ArrayList::add,</span><br><span class=\"line\">     *                                                ArrayList::addAll);</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;The following will take a stream of strings and concatenates them into a</span><br><span class=\"line\">     * single string:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     String concat = stringStream.collect(StringBuilder::new, StringBuilder::append,</span><br><span class=\"line\">     *                                          StringBuilder::append)</span><br><span class=\"line\">     *                                 .toString();</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;R&gt; type of the result</span><br><span class=\"line\">     * @param supplier a function that creates a new result container. For a</span><br><span class=\"line\">     *                 parallel execution, this function may be called</span><br><span class=\"line\">     *                 multiple times and must return a fresh value each time.</span><br><span class=\"line\">     * @param accumulator an &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                    function for incorporating an additional element into a result</span><br><span class=\"line\">     * @param combiner an &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                    &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                    function for combining two values, which must be</span><br><span class=\"line\">     *                    compatible with the accumulator function</span><br><span class=\"line\">     * @return the result of the reduction</span><br><span class=\"line\">     */</span><br><span class=\"line\">    &lt;R&gt; R collect(Supplier&lt;R&gt; supplier,</span><br><span class=\"line\">                  BiConsumer&lt;R, ? super T&gt; accumulator,</span><br><span class=\"line\">                  BiConsumer&lt;R, R&gt; combiner);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Performs a &lt;a href=&quot;package-summary.html#MutableReduction&quot;&gt;mutable</span><br><span class=\"line\">     * reduction&lt;/a&gt; operation on the elements of this stream using a</span><br><span class=\"line\">     * &#123;@code Collector&#125;.  A &#123;@code Collector&#125;</span><br><span class=\"line\">     * encapsulates the functions used as arguments to</span><br><span class=\"line\">     * &#123;@link #collect(Supplier, BiConsumer, BiConsumer)&#125;, allowing for reuse of</span><br><span class=\"line\">     * collection strategies and composition of collect operations such as</span><br><span class=\"line\">     * multiple-level grouping or partitioning.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;If the stream is parallel, and the &#123;@code Collector&#125;</span><br><span class=\"line\">     * is &#123;@link Collector.Characteristics#CONCURRENT concurrent&#125;, and</span><br><span class=\"line\">     * either the stream is unordered or the collector is</span><br><span class=\"line\">     * &#123;@link Collector.Characteristics#UNORDERED unordered&#125;,</span><br><span class=\"line\">     * then a concurrent reduction will be performed (see &#123;@link Collector&#125; for</span><br><span class=\"line\">     * details on concurrent reduction.)</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;When executed in parallel, multiple intermediate results may be</span><br><span class=\"line\">     * instantiated, populated, and merged so as to maintain isolation of</span><br><span class=\"line\">     * mutable data structures.  Therefore, even when executed in parallel</span><br><span class=\"line\">     * with non-thread-safe data structures (such as &#123;@code ArrayList&#125;), no</span><br><span class=\"line\">     * additional synchronization is needed for a parallel reduction.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote</span><br><span class=\"line\">     * The following will accumulate strings into an ArrayList:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     List&lt;String&gt; asList = stringStream.collect(Collectors.toList());</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;The following will classify &#123;@code Person&#125; objects by city:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     Map&lt;String, List&lt;Person&gt;&gt; peopleByCity</span><br><span class=\"line\">     *         = personStream.collect(Collectors.groupingBy(Person::getCity));</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;The following will classify &#123;@code Person&#125; objects by state and city,</span><br><span class=\"line\">     * cascading two &#123;@code Collector&#125;s together:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     Map&lt;String, Map&lt;String, List&lt;Person&gt;&gt;&gt; peopleByStateAndCity</span><br><span class=\"line\">     *         = personStream.collect(Collectors.groupingBy(Person::getState,</span><br><span class=\"line\">     *                                                      Collectors.groupingBy(Person::getCity)));</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;R&gt; the type of the result</span><br><span class=\"line\">     * @param &lt;A&gt; the intermediate accumulation type of the &#123;@code Collector&#125;</span><br><span class=\"line\">     * @param collector the &#123;@code Collector&#125; describing the reduction</span><br><span class=\"line\">     * @return the result of the reduction</span><br><span class=\"line\">     * @see #collect(Supplier, BiConsumer, BiConsumer)</span><br><span class=\"line\">     * @see Collectors</span><br><span class=\"line\">     */</span><br><span class=\"line\">    &lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns the minimum element of this stream according to the provided</span><br><span class=\"line\">     * &#123;@code Comparator&#125;.  This is a special case of a</span><br><span class=\"line\">     * &lt;a href=&quot;package-summary.html#Reduction&quot;&gt;reduction&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param comparator a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                   &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                   &#123;@code Comparator&#125; to compare elements of this stream</span><br><span class=\"line\">     * @return an &#123;@code Optional&#125; describing the minimum element of this stream,</span><br><span class=\"line\">     * or an empty &#123;@code Optional&#125; if the stream is empty</span><br><span class=\"line\">     * @throws NullPointerException if the minimum element is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Optional&lt;T&gt; min(Comparator&lt;? super T&gt; comparator);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns the maximum element of this stream according to the provided</span><br><span class=\"line\">     * &#123;@code Comparator&#125;.  This is a special case of a</span><br><span class=\"line\">     * &lt;a href=&quot;package-summary.html#Reduction&quot;&gt;reduction&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal</span><br><span class=\"line\">     * operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param comparator a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                   &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                   &#123;@code Comparator&#125; to compare elements of this stream</span><br><span class=\"line\">     * @return an &#123;@code Optional&#125; describing the maximum element of this stream,</span><br><span class=\"line\">     * or an empty &#123;@code Optional&#125; if the stream is empty</span><br><span class=\"line\">     * @throws NullPointerException if the maximum element is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Optional&lt;T&gt; max(Comparator&lt;? super T&gt; comparator);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns the count of elements in this stream.  This is a special case of</span><br><span class=\"line\">     * a &lt;a href=&quot;package-summary.html#Reduction&quot;&gt;reduction&lt;/a&gt; and is</span><br><span class=\"line\">     * equivalent to:</span><br><span class=\"line\">     * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">     *     return mapToLong(e -&gt; 1L).sum();</span><br><span class=\"line\">     * &#125;&lt;/pre&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return the count of elements in this stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    long count();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns whether any elements of this stream match the provided</span><br><span class=\"line\">     * predicate.  May not evaluate the predicate on all elements if not</span><br><span class=\"line\">     * necessary for determining the result.  If the stream is empty then</span><br><span class=\"line\">     * &#123;@code false&#125; is returned and the predicate is not evaluated.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;short-circuiting</span><br><span class=\"line\">     * terminal operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote</span><br><span class=\"line\">     * This method evaluates the &lt;em&gt;existential quantification&lt;/em&gt; of the</span><br><span class=\"line\">     * predicate over the elements of the stream (for some x P(x)).</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param predicate a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                  &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                  predicate to apply to elements of this stream</span><br><span class=\"line\">     * @return &#123;@code true&#125; if any elements of the stream match the provided</span><br><span class=\"line\">     * predicate, otherwise &#123;@code false&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    boolean anyMatch(Predicate&lt;? super T&gt; predicate);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns whether all elements of this stream match the provided predicate.</span><br><span class=\"line\">     * May not evaluate the predicate on all elements if not necessary for</span><br><span class=\"line\">     * determining the result.  If the stream is empty then &#123;@code true&#125; is</span><br><span class=\"line\">     * returned and the predicate is not evaluated.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;short-circuiting</span><br><span class=\"line\">     * terminal operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote</span><br><span class=\"line\">     * This method evaluates the &lt;em&gt;universal quantification&lt;/em&gt; of the</span><br><span class=\"line\">     * predicate over the elements of the stream (for all x P(x)).  If the</span><br><span class=\"line\">     * stream is empty, the quantification is said to be &lt;em&gt;vacuously</span><br><span class=\"line\">     * satisfied&lt;/em&gt; and is always &#123;@code true&#125; (regardless of P(x)).</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param predicate a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                  &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                  predicate to apply to elements of this stream</span><br><span class=\"line\">     * @return &#123;@code true&#125; if either all elements of the stream match the</span><br><span class=\"line\">     * provided predicate or the stream is empty, otherwise &#123;@code false&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    boolean allMatch(Predicate&lt;? super T&gt; predicate);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns whether no elements of this stream match the provided predicate.</span><br><span class=\"line\">     * May not evaluate the predicate on all elements if not necessary for</span><br><span class=\"line\">     * determining the result.  If the stream is empty then &#123;@code true&#125; is</span><br><span class=\"line\">     * returned and the predicate is not evaluated.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;short-circuiting</span><br><span class=\"line\">     * terminal operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @apiNote</span><br><span class=\"line\">     * This method evaluates the &lt;em&gt;universal quantification&lt;/em&gt; of the</span><br><span class=\"line\">     * negated predicate over the elements of the stream (for all x ~P(x)).  If</span><br><span class=\"line\">     * the stream is empty, the quantification is said to be vacuously satisfied</span><br><span class=\"line\">     * and is always &#123;@code true&#125;, regardless of P(x).</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param predicate a &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,</span><br><span class=\"line\">     *                  &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;</span><br><span class=\"line\">     *                  predicate to apply to elements of this stream</span><br><span class=\"line\">     * @return &#123;@code true&#125; if either no elements of the stream match the</span><br><span class=\"line\">     * provided predicate or the stream is empty, otherwise &#123;@code false&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    boolean noneMatch(Predicate&lt;? super T&gt; predicate);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an &#123;@link Optional&#125; describing the first element of this stream,</span><br><span class=\"line\">     * or an empty &#123;@code Optional&#125; if the stream is empty.  If the stream has</span><br><span class=\"line\">     * no encounter order, then any element may be returned.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;short-circuiting</span><br><span class=\"line\">     * terminal operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return an &#123;@code Optional&#125; describing the first element of this stream,</span><br><span class=\"line\">     * or an empty &#123;@code Optional&#125; if the stream is empty</span><br><span class=\"line\">     * @throws NullPointerException if the element selected is null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Optional&lt;T&gt; findFirst();</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an &#123;@link Optional&#125; describing some element of the stream, or an</span><br><span class=\"line\">     * empty &#123;@code Optional&#125; if the stream is empty.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;short-circuiting</span><br><span class=\"line\">     * terminal operation&lt;/a&gt;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;The behavior of this operation is explicitly nondeterministic; it is</span><br><span class=\"line\">     * free to select any element in the stream.  This is to allow for maximal</span><br><span class=\"line\">     * performance in parallel operations; the cost is that multiple invocations</span><br><span class=\"line\">     * on the same source may not return the same result.  (If a stable result</span><br><span class=\"line\">     * is desired, use &#123;@link #findFirst()&#125; instead.)</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return an &#123;@code Optional&#125; describing some element of this stream, or an</span><br><span class=\"line\">     * empty &#123;@code Optional&#125; if the stream is empty</span><br><span class=\"line\">     * @throws NullPointerException if the element selected is null</span><br><span class=\"line\">     * @see #findFirst()</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Optional&lt;T&gt; findAny();</span><br><span class=\"line\"></span><br><span class=\"line\">    // Static factories</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a builder for a &#123;@code Stream&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; type of elements</span><br><span class=\"line\">     * @return a stream builder</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static&lt;T&gt; Builder&lt;T&gt; builder() &#123;</span><br><span class=\"line\">        return new Streams.StreamBuilderImpl&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an empty sequential &#123;@code Stream&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; the type of stream elements</span><br><span class=\"line\">     * @return an empty sequential stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static&lt;T&gt; Stream&lt;T&gt; empty() &#123;</span><br><span class=\"line\">        return StreamSupport.stream(Spliterators.&lt;T&gt;emptySpliterator(), false);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a sequential &#123;@code Stream&#125; containing a single element.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param t the single element</span><br><span class=\"line\">     * @param &lt;T&gt; the type of stream elements</span><br><span class=\"line\">     * @return a singleton sequential stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static&lt;T&gt; Stream&lt;T&gt; of(T t) &#123;</span><br><span class=\"line\">        return StreamSupport.stream(new Streams.StreamBuilderImpl&lt;&gt;(t), false);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns a sequential ordered stream whose elements are the specified values.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; the type of stream elements</span><br><span class=\"line\">     * @param values the elements of the new stream</span><br><span class=\"line\">     * @return the new stream</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @SafeVarargs</span><br><span class=\"line\">    @SuppressWarnings(&quot;varargs&quot;) // Creating a stream from an array is safe</span><br><span class=\"line\">    public static&lt;T&gt; Stream&lt;T&gt; of(T... values) &#123;</span><br><span class=\"line\">        return Arrays.stream(values);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an infinite sequential ordered &#123;@code Stream&#125; produced by iterative</span><br><span class=\"line\">     * application of a function &#123;@code f&#125; to an initial element &#123;@code seed&#125;,</span><br><span class=\"line\">     * producing a &#123;@code Stream&#125; consisting of &#123;@code seed&#125;, &#123;@code f(seed)&#125;,</span><br><span class=\"line\">     * &#123;@code f(f(seed))&#125;, etc.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;The first element (position &#123;@code 0&#125;) in the &#123;@code Stream&#125; will be</span><br><span class=\"line\">     * the provided &#123;@code seed&#125;.  For &#123;@code n &gt; 0&#125;, the element at position</span><br><span class=\"line\">     * &#123;@code n&#125;, will be the result of applying the function &#123;@code f&#125; to the</span><br><span class=\"line\">     * element at position &#123;@code n - 1&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; the type of stream elements</span><br><span class=\"line\">     * @param seed the initial element</span><br><span class=\"line\">     * @param f a function to be applied to to the previous element to produce</span><br><span class=\"line\">     *          a new element</span><br><span class=\"line\">     * @return a new sequential &#123;@code Stream&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(f);</span><br><span class=\"line\">        final Iterator&lt;T&gt; iterator = new Iterator&lt;T&gt;() &#123;</span><br><span class=\"line\">            @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">            T t = (T) Streams.NONE;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean hasNext() &#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public T next() &#123;</span><br><span class=\"line\">                return t = (t == Streams.NONE) ? seed : f.apply(t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(</span><br><span class=\"line\">                iterator,</span><br><span class=\"line\">                Spliterator.ORDERED | Spliterator.IMMUTABLE), false);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Returns an infinite sequential unordered stream where each element is</span><br><span class=\"line\">     * generated by the provided &#123;@code Supplier&#125;.  This is suitable for</span><br><span class=\"line\">     * generating constant streams, streams of random elements, etc.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; the type of stream elements</span><br><span class=\"line\">     * @param s the &#123;@code Supplier&#125; of generated elements</span><br><span class=\"line\">     * @return a new infinite sequential unordered &#123;@code Stream&#125;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(s);</span><br><span class=\"line\">        return StreamSupport.stream(</span><br><span class=\"line\">                new StreamSpliterators.InfiniteSupplyingSpliterator.OfRef&lt;&gt;(Long.MAX_VALUE, s), false);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Creates a lazily concatenated stream whose elements are all the</span><br><span class=\"line\">     * elements of the first stream followed by all the elements of the</span><br><span class=\"line\">     * second stream.  The resulting stream is ordered if both</span><br><span class=\"line\">     * of the input streams are ordered, and parallel if either of the input</span><br><span class=\"line\">     * streams is parallel.  When the resulting stream is closed, the close</span><br><span class=\"line\">     * handlers for both input streams are invoked.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @implNote</span><br><span class=\"line\">     * Use caution when constructing streams from repeated concatenation.</span><br><span class=\"line\">     * Accessing an element of a deeply concatenated stream can result in deep</span><br><span class=\"line\">     * call chains, or even &#123;@code StackOverflowException&#125;.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; The type of stream elements</span><br><span class=\"line\">     * @param a the first stream</span><br><span class=\"line\">     * @param b the second stream</span><br><span class=\"line\">     * @return the concatenation of the two input streams</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static &lt;T&gt; Stream&lt;T&gt; concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b) &#123;</span><br><span class=\"line\">        Objects.requireNonNull(a);</span><br><span class=\"line\">        Objects.requireNonNull(b);</span><br><span class=\"line\"></span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">        Spliterator&lt;T&gt; split = new Streams.ConcatSpliterator.OfRef&lt;&gt;(</span><br><span class=\"line\">                (Spliterator&lt;T&gt;) a.spliterator(), (Spliterator&lt;T&gt;) b.spliterator());</span><br><span class=\"line\">        Stream&lt;T&gt; stream = StreamSupport.stream(split, a.isParallel() || b.isParallel());</span><br><span class=\"line\">        return stream.onClose(Streams.composedClose(a, b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * A mutable builder for a &#123;@code Stream&#125;.  This allows the creation of a</span><br><span class=\"line\">     * &#123;@code Stream&#125; by generating elements individually and adding them to the</span><br><span class=\"line\">     * &#123;@code Builder&#125; (without the copying overhead that comes from using</span><br><span class=\"line\">     * an &#123;@code ArrayList&#125; as a temporary buffer.)</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * &lt;p&gt;A stream builder has a lifecycle, which starts in a building</span><br><span class=\"line\">     * phase, during which elements can be added, and then transitions to a built</span><br><span class=\"line\">     * phase, after which elements may not be added.  The built phase begins</span><br><span class=\"line\">     * when the &#123;@link #build()&#125; method is called, which creates an ordered</span><br><span class=\"line\">     * &#123;@code Stream&#125; whose elements are the elements that were added to the stream</span><br><span class=\"line\">     * builder, in the order they were added.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param &lt;T&gt; the type of stream elements</span><br><span class=\"line\">     * @see Stream#builder()</span><br><span class=\"line\">     * @since 1.8</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public interface Builder&lt;T&gt; extends Consumer&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * Adds an element to the stream being built.</span><br><span class=\"line\">         *</span><br><span class=\"line\">         * @throws IllegalStateException if the builder has already transitioned to</span><br><span class=\"line\">         * the built state</span><br><span class=\"line\">         */</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        void accept(T t);</span><br><span class=\"line\"></span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * Adds an element to the stream being built.</span><br><span class=\"line\">         *</span><br><span class=\"line\">         * @implSpec</span><br><span class=\"line\">         * The default implementation behaves as if:</span><br><span class=\"line\">         * &lt;pre&gt;&#123;@code</span><br><span class=\"line\">         *     accept(t)</span><br><span class=\"line\">         *     return this;</span><br><span class=\"line\">         * &#125;&lt;/pre&gt;</span><br><span class=\"line\">         *</span><br><span class=\"line\">         * @param t the element to add</span><br><span class=\"line\">         * @return &#123;@code this&#125; builder</span><br><span class=\"line\">         * @throws IllegalStateException if the builder has already transitioned to</span><br><span class=\"line\">         * the built state</span><br><span class=\"line\">         */</span><br><span class=\"line\">        default Builder&lt;T&gt; add(T t) &#123;</span><br><span class=\"line\">            accept(t);</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * Builds the stream, transitioning this builder to the built state.</span><br><span class=\"line\">         * An &#123;@code IllegalStateException&#125; is thrown if there are further attempts</span><br><span class=\"line\">         * to operate on the builder after it has entered the built state.</span><br><span class=\"line\">         *</span><br><span class=\"line\">         * @return the built stream</span><br><span class=\"line\">         * @throws IllegalStateException if the builder has already transitioned to</span><br><span class=\"line\">         * the built state</span><br><span class=\"line\">         */</span><br><span class=\"line\">        Stream&lt;T&gt; build();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>特点</p>\n<ul>\n<li>元素序列。可以访问特定元素类型的一组有序值，</li>\n<li>源，使用一个提供数据的源，如集合，数组或者输入/输出资源，从有序集合生成流时会保留原有的顺序</li>\n<li>数据处理操作，支持类似数据库的操作，及函数式编程中的常用操作，如filter，map,reduce.sort，find,match</li>\n<li><strong>流水线</strong> 流操作大多数本身会返回一个流，这样多个操作可以链接起来，那么可以看作类似操作数据库的流水线操作</li>\n<li><strong>内部迭代</strong> 流的迭代操作，是在内部进行迭代的。</li>\n</ul>\n</li>\n<li><p>流与集合的区别：</p>\n<p>在于什么时候计算</p>\n<ul>\n<li>集合是一个内存中的数据结构，它包含数据结构中目前的所有的值，集合中的每个元素都得先算出来才能添加到集合，集合是我需要就创建，无需考虑需求。</li>\n<li>流是在概念上亭的数据结构，你不能添加或者删除元素，元素是按需求进行计算的，input-&gt;output,典型的生产者-消费者关系</li>\n<li>流只能遍历一次,只能消费一次，而集合会一直存在内存中。</li>\n<li>外部迭代与内部迭代，集合使用foreach进行外部迭代，流使用内部迭代，</li>\n</ul>\n</li>\n<li><p><strong>流操作</strong></p>\n<ul>\n<li><p>中间操作  返回一个流对象的操作都是中间操作：如filter,map，limit, sort .etc</p>\n<ul>\n<li>filter()  接受一个断言条件去过滤流的所有元素。 这个流的操作是中间的， 这使得我们能够对结果调用另外一个流操作（例如 forEach） </li>\n<li>map() 通过给定的功能将每个元素转换成另一个对象。 以下示例将每个字符串转换成大写字符串。当然你也可以使用 map 将每个对象转换成另一种类型。 </li>\n<li>sorted()  返回流的排序视图。元素按照自然顺序进行排序，除非传递了一个自定义的比较器。 </li>\n</ul>\n</li>\n<li><p>终端操作 如collect  forEach count 即不会返回流对象的操作。</p>\n<ul>\n<li><p>forEach()  该方法有助于迭代流的所有元素，并对他们中的每一个执行一些操作。 改操作作为 lambda 表达式参数传递 </p>\n</li>\n<li><p>collect()  collect() 方法用于从一个 stream 中接收元素，并将他们存储在一个集合中，并通过参数分类。 </p>\n</li>\n<li><p>match()  各种匹配操作检查某个断言条件是否与流匹配。所有这些操作都是终端并返回一个 Boolean 结果 </p>\n</li>\n<li><p>findAny() 将会返回当前流中的任意元素</p>\n</li>\n<li><p>count 返回符合给定谓词条件的总数</p>\n</li>\n<li><p>reduce（）<strong>归约</strong> 将一个流中的元素进行组合起来。函数式编程语言的术语来讲就是折叠。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; intList= new ArrayList&lt;&gt;();</span><br><span class=\"line\">/**</span><br><span class=\"line\">* 归约</span><br><span class=\"line\">*/</span><br><span class=\"line\">for (int k = 0; k &lt; 20; k++) &#123;</span><br><span class=\"line\">intList.add(k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int as=intList.stream().reduce(0,(a,b)-&gt;a+b);</span><br><span class=\"line\">System.out.println(as);</span><br><span class=\"line\">Optional&lt;Integer&gt; as1=intList.stream().reduce(Integer::min);</span><br><span class=\"line\">System.out.println(as1.get());</span><br><span class=\"line\">Optional&lt;Integer&gt; as2=intList.stream().reduce(Integer::max);</span><br><span class=\"line\">System.out.println(as2.get());</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>短路操作 foreach中的continue或者break的效果</p>\n<ul>\n<li>anyMatch()  一旦满足断言条件，该方法将返回 true。它不会处理任何更多的元素。  括号里面放一个predicate</li>\n<li>allMatch（）查看流中的元素是否都能匹配给定的条件</li>\n<li>noneMatch（）确保流中 的元素没有和给定的谓词相匹配</li>\n<li>findFirst()  该方法将从流返回第一个元素，然后不再处理任何元素。 括号里面放一个predicate</li>\n</ul>\n</li>\n<li><p>额外的一些操作 <strong>怎么感觉越来越像sql</strong></p>\n<ul>\n<li>distinct() 去重</li>\n<li>limit（） 截断长度 也可用在无序流set上</li>\n<li>skip（）跳过元素</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>流的使用</p>\n<ul>\n<li>一个数据源</li>\n<li>一个中间操作链</li>\n<li>一个终端操作</li>\n</ul>\n</li>\n<li><p>*<em>流的构建 *</em></p>\n<ul>\n<li><p>值构建 使用 Stream.of（T）</p>\n</li>\n<li><p>使用数组Stream.of(val1, val2, val3….)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SafeVarargs</span><br><span class=\"line\">@SuppressWarnings(&quot;varargs&quot;) // Creating a stream from an array is safe</span><br><span class=\"line\">public static&lt;T&gt; Stream&lt;T&gt; of(T... values) &#123;</span><br><span class=\"line\">    return Arrays.stream(values);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用数组 Stream.of(arrayOfElements) 和上面的其实是同一个api</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SafeVarargs</span><br><span class=\"line\">@SuppressWarnings(&quot;varargs&quot;) // Creating a stream from an array is safe</span><br><span class=\"line\">public static&lt;T&gt; Stream&lt;T&gt; of(T... values) &#123;</span><br><span class=\"line\">    return Arrays.stream(values);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 someList.stream()</p>\n</li>\n<li><p>由文件流生成</p>\n</li>\n<li><p>由函数生成流  使用 Stream.generate(functions ) 或者 Stream.iterate(functions ) 这个生成的是个无限流，函数放在generate()或iterate（）里面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Returns an infinite sequential unordered stream where each element is</span><br><span class=\"line\"> * generated by the provided &#123;@code Supplier&#125;.  This is suitable for</span><br><span class=\"line\"> * generating constant streams, streams of random elements, etc.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &lt;T&gt; the type of stream elements</span><br><span class=\"line\"> * @param s the &#123;@code Supplier&#125; of generated elements</span><br><span class=\"line\"> * @return a new infinite sequential unordered &#123;@code Stream&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s) &#123;</span><br><span class=\"line\">    Objects.requireNonNull(s);</span><br><span class=\"line\">    return StreamSupport.stream(</span><br><span class=\"line\">            new StreamSpliterators.InfiniteSupplyingSpliterator.OfRef&lt;&gt;(Long.MAX_VALUE, s), false);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Returns an infinite sequential ordered &#123;@code Stream&#125; produced by iterative</span><br><span class=\"line\"> * application of a function &#123;@code f&#125; to an initial element &#123;@code seed&#125;,</span><br><span class=\"line\"> * producing a &#123;@code Stream&#125; consisting of &#123;@code seed&#125;, &#123;@code f(seed)&#125;,</span><br><span class=\"line\"> * &#123;@code f(f(seed))&#125;, etc.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;p&gt;The first element (position &#123;@code 0&#125;) in the &#123;@code Stream&#125; will be</span><br><span class=\"line\"> * the provided &#123;@code seed&#125;.  For &#123;@code n &gt; 0&#125;, the element at position</span><br><span class=\"line\"> * &#123;@code n&#125;, will be the result of applying the function &#123;@code f&#125; to the</span><br><span class=\"line\"> * element at position &#123;@code n - 1&#125;.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param &lt;T&gt; the type of stream elements</span><br><span class=\"line\"> * @param seed the initial element</span><br><span class=\"line\"> * @param f a function to be applied to to the previous element to produce</span><br><span class=\"line\"> *          a new element</span><br><span class=\"line\"> * @return a new sequential &#123;@code Stream&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f) &#123;</span><br><span class=\"line\">    Objects.requireNonNull(f);</span><br><span class=\"line\">    final Iterator&lt;T&gt; iterator = new Iterator&lt;T&gt;() &#123;</span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">        T t = (T) Streams.NONE;</span><br><span class=\"line\">    </span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public boolean hasNext() &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public T next() &#123;</span><br><span class=\"line\">            return t = (t == Streams.NONE) ? seed : f.apply(t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return StreamSupport.stream(Spliterators.spliteratorUnknownSize(</span><br><span class=\"line\">            iterator,</span><br><span class=\"line\">            Spliterator.ORDERED | Spliterator.IMMUTABLE), false);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>將Streams轉換為其他數據結構</p>\n<ul>\n<li><p>使用 stream.collect(Collectors.xxx())  或 stream.toArray将 Stream 转换成 set list array</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   \tList&lt;Project&gt; l1=datas.stream().filter(p12-&gt;p12.getStar()&gt;3).collect(Collectors.toList());</span><br><span class=\"line\">System.out.println(l1);</span><br><span class=\"line\">Set&lt;Project&gt; s1=datas.stream().filter(p12-&gt;p12.getStar()&gt;3).collect(Collectors.toSet());</span><br><span class=\"line\">System.out.println(s1);</span><br><span class=\"line\">Project[] a1=datas.stream().filter(p12-&gt;p12.getStar()&gt;3).toArray(Project[]::new);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其他一些數據結構的轉換在 stream.collect（Collectors.xxx）裏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Project&gt; map1 = datas.stream().filter(p12 -&gt; p12.getStar() &gt; 3)</span><br><span class=\"line\">.collect(Collectors.toMap(Project::getLang, Function.identity()));</span><br><span class=\"line\">System.out.println(map1);</span><br><span class=\"line\">Map&lt;String, String&gt; map3 =\tdatas.stream().filter(p12 -&gt; p12.getStar() &gt; 3)</span><br><span class=\"line\">.collect(Collectors.toMap(Project::getLang, Project::getName));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>用流收集数据</p>\n<ul>\n<li><p>Collectors.groupingBy分组 二级分组就是将groupBy（）.groupBy（）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer, List&lt;Project&gt;&gt; collect = datas.stream().collect(Collectors.groupingBy(Project::getStar));</span><br><span class=\"line\">\t\tcollect.forEach((k, v) -&gt; &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(k);</span><br><span class=\"line\">\t\t\tSystem.out.println(v);</span><br><span class=\"line\">\t\t&#125;);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>* Collectors.groupingBy分组与mapping同时使用\n\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">datas.stream().collect(Collectors.groupingBy(Project::getStar, Collectors.mapping(item-&gt; &#123;</span><br><span class=\"line\">    if (item.getStar() == 1) &#123;</span><br><span class=\"line\">    return  item.getStar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 1l;</span><br><span class=\"line\">\t\t&#125;, Collectors.toSet())));</span><br></pre></td></tr></table></figure>\n\n\n* 流中的最大值，最小值 maxBy,minBy\n\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;Project&gt; popt = datas.stream().collect(Collectors.maxBy(Comparator.comparingInt(Project::getStar)));</span><br><span class=\"line\">\t\tProject project3 = popt.get();</span><br><span class=\"line\">\t\tSystem.out.println(project3);</span><br><span class=\"line\">\t\tOptional&lt;Project&gt; popt1 = datas.stream().collect(Collectors.minBy(Comparator.comparingInt(Project::getStar)));</span><br><span class=\"line\">\t\tSystem.out.println(popt1.get());</span><br></pre></td></tr></table></figure>\n\n\n* 汇总 summingInt\n\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer count2 = datas.stream().collect(Collectors.summingInt(Project::getStar));</span><br><span class=\"line\">    System.out.println(count2);</span><br></pre></td></tr></table></figure>\n\n\n* 链接字符串 需要先用map将元素对象的某个属性提取出来。 joining\n\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = datas.stream().map(Project::getLang).collect(Collectors.joining(&quot;,&quot;));</span><br><span class=\"line\">System.out.println(str);</span><br></pre></td></tr></table></figure>\n\n\n* 分区 多级分区 使用链式编程 partitioningBy（）.partitioningBy()\n\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Boolean, List&lt;Project&gt;&gt; collect3 = datas.stream().collect(Collectors.partitioningBy((Project pro)-&gt; pro.getStar()&gt;3));</span><br><span class=\"line\">\t\tcollect3.forEach((k,v)-&gt;&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(k);</span><br><span class=\"line\">\t\t\tSystem.out.println(v.toString());</span><br><span class=\"line\">\t\t&#125;);</span><br></pre></td></tr></table></figure>\n\n\n  **TODO:并行流，组合异步，Fork/Join分治框架，时间新api**</code></pre>"},{"title":"Mybatis源码分析(二)","date":"2018-11-07T10:22:20.000Z","_content":"\nMybatis源码分析二<!--more-->\n\n**基于3.4.5版本。与springboot2.0.5 mybatis-spring1.3.2**\n\n* 主要的核心类\n  * **Configuration: MyBatis 所有的配置信息都维持在 Configuration 对象之中。**\n  * **SqlSession :作为 MyBatis 工作的主要顶层 API，表示和数据库交互的会话，完成必要数据库增删改查功能**\n  * **Executor :MyBatis 执行器，是 MyBatis 调度的核心，负责 SQL 语句的生成和查询缓存的维护**\n  * **StatementHandler :封装了 JDBC Statement 操作，负责对 JDBC statement 的操作，如设置参数、将 Statement 结果集转换成 List 集合。**\n  * **ParameterHandler :负责对用户传递的参数转换成 JDBC Statement 所需要的参数 **\n  * **ResultSetHandler :负责将 JDBC 返回的 ResultSet 结果集对象转换成 List 类型的集合**\n  * **TypeHandler:负责 java 数据类型和 jdbc 数据类型之间的映射和转换**\n  * **MappedStatement :MappedStatement 维护了一条 <select|update|delete|insert> 节点的封装**\n  * **SqlSource :负责根据用户传递的 parameterObject，动态地生成 SQL 语句，将信息封装到 BoundSql 对象中并返回**\n  * **BoundSql :表示动态生成的 SQL 语句以及相应的参数信息**\n\n* **Mybatis启动过程**\n\n  **这个类是个建造者 会创建sqlsessionFactory,提供了挺多的build方法。**\n\n  上源码\n\n  ```\n  public class SqlSessionFactoryBuilder {\n  ...\n   public SqlSessionFactory build(Reader reader) {\n      return build(reader, null, null);\n    }\n  \n    public SqlSessionFactory build(Reader reader, String environment) {\n      return build(reader, environment, null);\n    }\n  \n    public SqlSessionFactory build(Reader reader, Properties properties) {\n      return build(reader, null, properties);\n    }\n  \n    public SqlSessionFactory build(Reader reader, String environment, Properties properties) {\n      try {\n        XMLConfigBuilder parser = new XMLConfigBuilder(reader, environment, properties);\n        //注意这里的parser.parse();\n        return build(parser.parse());\n      } catch (Exception e) {\n        throw ExceptionFactory.wrapException(\"Error building SqlSession.\", e);\n      } finally {\n        //重置错误上下文实例\n        ErrorContext.instance().reset();\n        try {\n          reader.close();\n        } catch (IOException e) {\n          // Intentionally ignore. Prefer previous error.\n        }\n      }\n    }\n    //parse方法\n    public Configuration parse() {\n      if (parsed) {\n        throw new BuilderException(\"Each XMLConfigBuilder can only be used once.\");\n      }\n      parsed = true;\n      parseConfiguration(parser.evalNode(\"/configuration\"));\n      return configuration;\n    }\n   //具体的解析\n    private void parseConfiguration(XNode root) {\n      try {\n        //issue #117 read properties first\n        // 解析<properties>节点\n        propertiesElement(root.evalNode(\"properties\"));\n        //解析settings节点\n        Properties settings = settingsAsProperties(root.evalNode(\"settings\"));\n        //加载自定义的settings\n        loadCustomVfs(settings);\n        /// 解析<typeAliases>节点\n        typeAliasesElement(root.evalNode(\"typeAliases\"));\n        // 解析<plugins>节点\n        pluginElement(root.evalNode(\"plugins\"));\n        // 解析<objectFactory>节点\n        objectFactoryElement(root.evalNode(\"objectFactory\"));\n        objectWrapperFactoryElement(root.evalNode(\"objectWrapperFactory\"));\n        // 解析<reflectorFactory>节点\n        reflectorFactoryElement(root.evalNode(\"reflectorFactory\"));\n        settingsElement(settings);\n         // 解析<environments>节点\n        // read it after objectFactory and objectWrapperFactory issue #631\n        environmentsElement(root.evalNode(\"environments\"));\n        //多数据源的话解析dbid\n        databaseIdProviderElement(root.evalNode(\"databaseIdProvider\"));\n        typeHandlerElement(root.evalNode(\"typeHandlers\"));\n         // 解析<mappers>节点\n        mapperElement(root.evalNode(\"mappers\"));\n      } catch (Exception e) {\n        throw new BuilderException(\"Error parsing SQL Mapper Configuration. Cause: \" + e, e);\n      }\n    }\n  \n    public SqlSessionFactory build(InputStream inputStream) {\n      return build(inputStream, null, null);\n    }\n  \n    public SqlSessionFactory build(InputStream inputStream, String environment) {\n      return build(inputStream, environment, null);\n    }\n  \n    public SqlSessionFactory build(InputStream inputStream, Properties properties) {\n      return build(inputStream, null, properties);\n    }\n  \n    public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {\n      try {\n        XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);\n        return build(parser.parse());\n      } catch (Exception e) {\n        throw ExceptionFactory.wrapException(\"Error building SqlSession.\", e);\n      } finally {\n        ErrorContext.instance().reset();\n        try {\n          inputStream.close();\n        } catch (IOException e) {\n          // Intentionally ignore. Prefer previous error.\n        }\n      }\n    }\n  ```\n\n  **在项目启动的适合，我这里用的springboot集成的项目当然配置文件是写在application.properties的，springmvc项目一般在xml文件中配置的**\n\n  ```\n  ...\n  mybatis.type-aliases-package=com.convergence.domain\n  mybatis.mapper-locations=classpath:/mapper/*.xml\n  mybatis.config-location=\n  mybatis.configuration.map-underscore-to-camel-case=true\n  mybatis.configuration.multiple-result-sets-enabled=true\n  mybatis.configuration.useColumnLabel=true\n  ...\n  ```\n\n  **创建factory**\n\n  ```\n    public class SqlSessionFactoryBuilder {\n    ...\n    public SqlSessionFactory build(Configuration config) {\n      return new DefaultSqlSessionFactory(config);\n    }\n    ...\n    }\n  ```\n\n  **Configuration类记录了mybatis的一些配置**\n\n  ```\n  /**\n   *    Copyright 2009-2017 the original author or authors.\n   *\n   *    Licensed under the Apache License, Version 2.0 (the \"License\");\n   *    you may not use this file except in compliance with the License.\n   *    You may obtain a copy of the License at\n   *\n   *       http://www.apache.org/licenses/LICENSE-2.0\n   *\n   *    Unless required by applicable law or agreed to in writing, software\n   *    distributed under the License is distributed on an \"AS IS\" BASIS,\n   *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   *    See the License for the specific language governing permissions and\n   *    limitations under the License.\n   */\n  package org.apache.ibatis.session;\n  \n  import java.util.Arrays;\n  import java.util.Collection;\n  import java.util.HashMap;\n  import java.util.HashSet;\n  import java.util.LinkedList;\n  import java.util.List;\n  import java.util.Map;\n  import java.util.Properties;\n  import java.util.Set;\n  \n  import org.apache.ibatis.binding.MapperRegistry;\n  import org.apache.ibatis.builder.CacheRefResolver;\n  import org.apache.ibatis.builder.ResultMapResolver;\n  import org.apache.ibatis.builder.annotation.MethodResolver;\n  import org.apache.ibatis.builder.xml.XMLStatementBuilder;\n  import org.apache.ibatis.cache.Cache;\n  import org.apache.ibatis.cache.decorators.FifoCache;\n  import org.apache.ibatis.cache.decorators.LruCache;\n  import org.apache.ibatis.cache.decorators.SoftCache;\n  import org.apache.ibatis.cache.decorators.WeakCache;\n  import org.apache.ibatis.cache.impl.PerpetualCache;\n  import org.apache.ibatis.datasource.jndi.JndiDataSourceFactory;\n  import org.apache.ibatis.datasource.pooled.PooledDataSourceFactory;\n  import org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;\n  import org.apache.ibatis.executor.BatchExecutor;\n  import org.apache.ibatis.executor.CachingExecutor;\n  import org.apache.ibatis.executor.Executor;\n  import org.apache.ibatis.executor.ReuseExecutor;\n  import org.apache.ibatis.executor.SimpleExecutor;\n  import org.apache.ibatis.executor.keygen.KeyGenerator;\n  import org.apache.ibatis.executor.loader.ProxyFactory;\n  import org.apache.ibatis.executor.loader.cglib.CglibProxyFactory;\n  import org.apache.ibatis.executor.loader.javassist.JavassistProxyFactory;\n  import org.apache.ibatis.executor.parameter.ParameterHandler;\n  import org.apache.ibatis.executor.resultset.DefaultResultSetHandler;\n  import org.apache.ibatis.executor.resultset.ResultSetHandler;\n  import org.apache.ibatis.executor.statement.RoutingStatementHandler;\n  import org.apache.ibatis.executor.statement.StatementHandler;\n  import org.apache.ibatis.io.VFS;\n  import org.apache.ibatis.logging.Log;\n  import org.apache.ibatis.logging.LogFactory;\n  import org.apache.ibatis.logging.commons.JakartaCommonsLoggingImpl;\n  import org.apache.ibatis.logging.jdk14.Jdk14LoggingImpl;\n  import org.apache.ibatis.logging.log4j.Log4jImpl;\n  import org.apache.ibatis.logging.log4j2.Log4j2Impl;\n  import org.apache.ibatis.logging.nologging.NoLoggingImpl;\n  import org.apache.ibatis.logging.slf4j.Slf4jImpl;\n  import org.apache.ibatis.logging.stdout.StdOutImpl;\n  import org.apache.ibatis.mapping.BoundSql;\n  import org.apache.ibatis.mapping.Environment;\n  import org.apache.ibatis.mapping.MappedStatement;\n  import org.apache.ibatis.mapping.ParameterMap;\n  import org.apache.ibatis.mapping.ResultMap;\n  import org.apache.ibatis.mapping.VendorDatabaseIdProvider;\n  import org.apache.ibatis.parsing.XNode;\n  import org.apache.ibatis.plugin.Interceptor;\n  import org.apache.ibatis.plugin.InterceptorChain;\n  import org.apache.ibatis.reflection.DefaultReflectorFactory;\n  import org.apache.ibatis.reflection.MetaObject;\n  import org.apache.ibatis.reflection.ReflectorFactory;\n  import org.apache.ibatis.reflection.factory.DefaultObjectFactory;\n  import org.apache.ibatis.reflection.factory.ObjectFactory;\n  import org.apache.ibatis.reflection.wrapper.DefaultObjectWrapperFactory;\n  import org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory;\n  import org.apache.ibatis.scripting.LanguageDriver;\n  import org.apache.ibatis.scripting.LanguageDriverRegistry;\n  import org.apache.ibatis.scripting.defaults.RawLanguageDriver;\n  import org.apache.ibatis.scripting.xmltags.XMLLanguageDriver;\n  import org.apache.ibatis.transaction.Transaction;\n  import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;\n  import org.apache.ibatis.transaction.managed.ManagedTransactionFactory;\n  import org.apache.ibatis.type.JdbcType;\n  import org.apache.ibatis.type.TypeAliasRegistry;\n  import org.apache.ibatis.type.TypeHandler;\n  import org.apache.ibatis.type.TypeHandlerRegistry;\n  \n  /**\n   * @author Clinton Begin\n   */\n  public class Configuration {\n    //上下文环境对象\n    protected Environment environment;\n  \n    protected boolean safeRowBoundsEnabled;\n    protected boolean safeResultHandlerEnabled = true;\n    protected boolean mapUnderscoreToCamelCase;\n    //当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载\n    protected boolean aggressiveLazyLoading;\n    //允许或不允许多种结果集从一个单独的语句中返回（需要适合的驱动）。\n    protected boolean multipleResultSetsEnabled = true;\n    //允许 JDBC 支持生成的键。需要适合的驱动。如果设置为 true 则这个设置强制生成的键被使用，尽管一些\t//驱动拒绝兼容但仍然有效（比如 Derby\n    protected boolean useGeneratedKeys;\n    //使用列标签代替列名。不同的驱动在这方便表现不同。参考驱动文档或充分测试两种方法来决定所使用的驱动\n    protected boolean useColumnLabel = true;\n    //是否全局启用缓存 默认开启\n    protected boolean cacheEnabled = true;\n    protected boolean callSettersOnNulls;\n    protected boolean useActualParamName = true;\n    protected boolean returnInstanceForEmptyRow;\n  \n    protected String logPrefix;\n    protected Class <? extends Log> logImpl;\n    protected Class <? extends VFS> vfsImpl;\n    protected LocalCacheScope localCacheScope = LocalCacheScope.SESSION;\n    protected JdbcType jdbcTypeForNull = JdbcType.OTHER;\n    protected Set<String> lazyLoadTriggerMethods = new HashSet<String>(Arrays.asList(new String[] { \"equals\", \"clone\", \"hashCode\", \"toString\" }));\n    protected Integer defaultStatementTimeout;\n    protected Integer defaultFetchSize;\n    protected ExecutorType defaultExecutorType = ExecutorType.SIMPLE;\n    //指定 MyBatis 如何自动映射列到字段 / 属性。PARTIAL 只会自动映射简单，没有嵌套的结果。FULL 会自//动映射任意复杂的结果（嵌套的或其他情况）。\n    protected AutoMappingBehavior autoMappingBehavior = AutoMappingBehavior.PARTIAL;\n    protected AutoMappingUnknownColumnBehavior autoMappingUnknownColumnBehavior = AutoMappingUnknownColumnBehavior.NONE;\n  \n    protected Properties variables = new Properties();\n    protected ReflectorFactory reflectorFactory = new DefaultReflectorFactory();\n    protected ObjectFactory objectFactory = new DefaultObjectFactory();\n    protected ObjectWrapperFactory objectWrapperFactory = new DefaultObjectWrapperFactory();\n    //全局是否启用活禁用懒加载，默认关闭 \n    protected boolean lazyLoadingEnabled = false;\n    protected ProxyFactory proxyFactory = new JavassistProxyFactory(); // #224 Using internal Javassist instead of OGNL\n  \n    protected String databaseId;\n    /**\n     * Configuration factory class.\n     * Used to create Configuration for loading deserialized unread properties.\n     *\n     * @see <a href='https://code.google.com/p/mybatis/issues/detail?id=300'>Issue 300 (google code)</a>\n     */\n    protected Class<?> configurationFactory;\n  \n    protected final MapperRegistry mapperRegistry = new MapperRegistry(this);\n    protected final InterceptorChain interceptorChain = new InterceptorChain();\n    protected final TypeHandlerRegistry typeHandlerRegistry = new TypeHandlerRegistry();\n    protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry();\n    protected final LanguageDriverRegistry languageRegistry = new LanguageDriverRegistry();\n  \n    protected final Map<String, MappedStatement> mappedStatements = new StrictMap<MappedStatement>(\"Mapped Statements collection\");\n    protected final Map<String, Cache> caches = new StrictMap<Cache>(\"Caches collection\");\n    protected final Map<String, ResultMap> resultMaps = new StrictMap<ResultMap>(\"Result Maps collection\");\n    protected final Map<String, ParameterMap> parameterMaps = new StrictMap<ParameterMap>(\"Parameter Maps collection\");\n    protected final Map<String, KeyGenerator> keyGenerators = new StrictMap<KeyGenerator>(\"Key Generators collection\");\n  \n    protected final Set<String> loadedResources = new HashSet<String>();\n    protected final Map<String, XNode> sqlFragments = new StrictMap<XNode>(\"XML fragments parsed from previous mappers\");\n  \n    protected final Collection<XMLStatementBuilder> incompleteStatements = new LinkedList<XMLStatementBuilder>();\n    protected final Collection<CacheRefResolver> incompleteCacheRefs = new LinkedList<CacheRefResolver>();\n    protected final Collection<ResultMapResolver> incompleteResultMaps = new LinkedList<ResultMapResolver>();\n    protected final Collection<MethodResolver> incompleteMethods = new LinkedList<MethodResolver>();\n  \n    /*\n     * A map holds cache-ref relationship. The key is the namespace that\n     * references a cache bound to another namespace and the value is the\n     * namespace which the actual cache is bound to.\n     */\n    protected final Map<String, String> cacheRefMap = new HashMap<String, String>();\n  \n    public Configuration(Environment environment) {\n      this();\n      this.environment = environment;\n    }\n  \n    public Configuration() {\n      typeAliasRegistry.registerAlias(\"JDBC\", JdbcTransactionFactory.class);\n      typeAliasRegistry.registerAlias(\"MANAGED\", ManagedTransactionFactory.class);\n  \n      typeAliasRegistry.registerAlias(\"JNDI\", JndiDataSourceFactory.class);\n      typeAliasRegistry.registerAlias(\"POOLED\", PooledDataSourceFactory.class);\n      typeAliasRegistry.registerAlias(\"UNPOOLED\", UnpooledDataSourceFactory.class);\n  \n      typeAliasRegistry.registerAlias(\"PERPETUAL\", PerpetualCache.class);\n      typeAliasRegistry.registerAlias(\"FIFO\", FifoCache.class);\n      typeAliasRegistry.registerAlias(\"LRU\", LruCache.class);\n      typeAliasRegistry.registerAlias(\"SOFT\", SoftCache.class);\n      typeAliasRegistry.registerAlias(\"WEAK\", WeakCache.class);\n  \n      typeAliasRegistry.registerAlias(\"DB_VENDOR\", VendorDatabaseIdProvider.class);\n  \n      typeAliasRegistry.registerAlias(\"XML\", XMLLanguageDriver.class);\n      typeAliasRegistry.registerAlias(\"RAW\", RawLanguageDriver.class);\n  \n      typeAliasRegistry.registerAlias(\"SLF4J\", Slf4jImpl.class);\n      typeAliasRegistry.registerAlias(\"COMMONS_LOGGING\", JakartaCommonsLoggingImpl.class);\n      typeAliasRegistry.registerAlias(\"LOG4J\", Log4jImpl.class);\n      typeAliasRegistry.registerAlias(\"LOG4J2\", Log4j2Impl.class);\n      typeAliasRegistry.registerAlias(\"JDK_LOGGING\", Jdk14LoggingImpl.class);\n      typeAliasRegistry.registerAlias(\"STDOUT_LOGGING\", StdOutImpl.class);\n      typeAliasRegistry.registerAlias(\"NO_LOGGING\", NoLoggingImpl.class);\n  \n      typeAliasRegistry.registerAlias(\"CGLIB\", CglibProxyFactory.class);\n      typeAliasRegistry.registerAlias(\"JAVASSIST\", JavassistProxyFactory.class);\n  \n      languageRegistry.setDefaultDriverClass(XMLLanguageDriver.class);\n      languageRegistry.register(RawLanguageDriver.class);\n    }\n  \n    public String getLogPrefix() {\n      return logPrefix;\n    }\n  \n    public void setLogPrefix(String logPrefix) {\n      this.logPrefix = logPrefix;\n    }\n  \n    public Class<? extends Log> getLogImpl() {\n      return logImpl;\n    }\n  \n    public void setLogImpl(Class<? extends Log> logImpl) {\n      if (logImpl != null) {\n        this.logImpl = logImpl;\n        LogFactory.useCustomLogging(this.logImpl);\n      }\n    }\n  \n    public Class<? extends VFS> getVfsImpl() {\n      return this.vfsImpl;\n    }\n  \n    public void setVfsImpl(Class<? extends VFS> vfsImpl) {\n      if (vfsImpl != null) {\n        this.vfsImpl = vfsImpl;\n        VFS.addImplClass(this.vfsImpl);\n      }\n    }\n  \n    public boolean isCallSettersOnNulls() {\n      return callSettersOnNulls;\n    }\n  \n    public void setCallSettersOnNulls(boolean callSettersOnNulls) {\n      this.callSettersOnNulls = callSettersOnNulls;\n    }\n  \n    public boolean isUseActualParamName() {\n      return useActualParamName;\n    }\n  \n    public void setUseActualParamName(boolean useActualParamName) {\n      this.useActualParamName = useActualParamName;\n    }\n  \n    public boolean isReturnInstanceForEmptyRow() {\n      return returnInstanceForEmptyRow;\n    }\n  \n    public void setReturnInstanceForEmptyRow(boolean returnEmptyInstance) {\n      this.returnInstanceForEmptyRow = returnEmptyInstance;\n    }\n  \n    public String getDatabaseId() {\n      return databaseId;\n    }\n  \n    public void setDatabaseId(String databaseId) {\n      this.databaseId = databaseId;\n    }\n  \n    public Class<?> getConfigurationFactory() {\n      return configurationFactory;\n    }\n  \n    public void setConfigurationFactory(Class<?> configurationFactory) {\n      this.configurationFactory = configurationFactory;\n    }\n  \n    public boolean isSafeResultHandlerEnabled() {\n      return safeResultHandlerEnabled;\n    }\n  \n    public void setSafeResultHandlerEnabled(boolean safeResultHandlerEnabled) {\n      this.safeResultHandlerEnabled = safeResultHandlerEnabled;\n    }\n  \n    public boolean isSafeRowBoundsEnabled() {\n      return safeRowBoundsEnabled;\n    }\n  \n    public void setSafeRowBoundsEnabled(boolean safeRowBoundsEnabled) {\n      this.safeRowBoundsEnabled = safeRowBoundsEnabled;\n    }\n  \n    public boolean isMapUnderscoreToCamelCase() {\n      return mapUnderscoreToCamelCase;\n    }\n  \n    public void setMapUnderscoreToCamelCase(boolean mapUnderscoreToCamelCase) {\n      this.mapUnderscoreToCamelCase = mapUnderscoreToCamelCase;\n    }\n  \n    public void addLoadedResource(String resource) {\n      loadedResources.add(resource);\n    }\n  \n    public boolean isResourceLoaded(String resource) {\n      return loadedResources.contains(resource);\n    }\n  \n    public Environment getEnvironment() {\n      return environment;\n    }\n  \n    public void setEnvironment(Environment environment) {\n      this.environment = environment;\n    }\n  \n    public AutoMappingBehavior getAutoMappingBehavior() {\n      return autoMappingBehavior;\n    }\n  \n    public void setAutoMappingBehavior(AutoMappingBehavior autoMappingBehavior) {\n      this.autoMappingBehavior = autoMappingBehavior;\n    }\n  \n    /**\n     * @since 3.4.0\n     */\n    public AutoMappingUnknownColumnBehavior getAutoMappingUnknownColumnBehavior() {\n      return autoMappingUnknownColumnBehavior;\n    }\n  \n    /**\n     * @since 3.4.0\n     */\n    public void setAutoMappingUnknownColumnBehavior(AutoMappingUnknownColumnBehavior autoMappingUnknownColumnBehavior) {\n      this.autoMappingUnknownColumnBehavior = autoMappingUnknownColumnBehavior;\n    }\n  \n    public boolean isLazyLoadingEnabled() {\n      return lazyLoadingEnabled;\n    }\n  \n    public void setLazyLoadingEnabled(boolean lazyLoadingEnabled) {\n      this.lazyLoadingEnabled = lazyLoadingEnabled;\n    }\n  \n    public ProxyFactory getProxyFactory() {\n      return proxyFactory;\n    }\n  \n    public void setProxyFactory(ProxyFactory proxyFactory) {\n      if (proxyFactory == null) {\n        proxyFactory = new JavassistProxyFactory();\n      }\n      this.proxyFactory = proxyFactory;\n    }\n  \n    public boolean isAggressiveLazyLoading() {\n      return aggressiveLazyLoading;\n    }\n  \n    public void setAggressiveLazyLoading(boolean aggressiveLazyLoading) {\n      this.aggressiveLazyLoading = aggressiveLazyLoading;\n    }\n  \n    public boolean isMultipleResultSetsEnabled() {\n      return multipleResultSetsEnabled;\n    }\n  \n    public void setMultipleResultSetsEnabled(boolean multipleResultSetsEnabled) {\n      this.multipleResultSetsEnabled = multipleResultSetsEnabled;\n    }\n  \n    public Set<String> getLazyLoadTriggerMethods() {\n      return lazyLoadTriggerMethods;\n    }\n  \n    public void setLazyLoadTriggerMethods(Set<String> lazyLoadTriggerMethods) {\n      this.lazyLoadTriggerMethods = lazyLoadTriggerMethods;\n    }\n  \n    public boolean isUseGeneratedKeys() {\n      return useGeneratedKeys;\n    }\n  \n    public void setUseGeneratedKeys(boolean useGeneratedKeys) {\n      this.useGeneratedKeys = useGeneratedKeys;\n    }\n  \n    public ExecutorType getDefaultExecutorType() {\n      return defaultExecutorType;\n    }\n  \n    public void setDefaultExecutorType(ExecutorType defaultExecutorType) {\n      this.defaultExecutorType = defaultExecutorType;\n    }\n  \n    public boolean isCacheEnabled() {\n      return cacheEnabled;\n    }\n  \n    public void setCacheEnabled(boolean cacheEnabled) {\n      this.cacheEnabled = cacheEnabled;\n    }\n  \n    public Integer getDefaultStatementTimeout() {\n      return defaultStatementTimeout;\n    }\n  \n    public void setDefaultStatementTimeout(Integer defaultStatementTimeout) {\n      this.defaultStatementTimeout = defaultStatementTimeout;\n    }\n  \n    /**\n     * @since 3.3.0\n     */\n    public Integer getDefaultFetchSize() {\n      return defaultFetchSize;\n    }\n  \n    /**\n     * @since 3.3.0\n     */\n    public void setDefaultFetchSize(Integer defaultFetchSize) {\n      this.defaultFetchSize = defaultFetchSize;\n    }\n  \n    public boolean isUseColumnLabel() {\n      return useColumnLabel;\n    }\n  \n    public void setUseColumnLabel(boolean useColumnLabel) {\n      this.useColumnLabel = useColumnLabel;\n    }\n  \n    public LocalCacheScope getLocalCacheScope() {\n      return localCacheScope;\n    }\n  \n    public void setLocalCacheScope(LocalCacheScope localCacheScope) {\n      this.localCacheScope = localCacheScope;\n    }\n  \n    public JdbcType getJdbcTypeForNull() {\n      return jdbcTypeForNull;\n    }\n  \n    public void setJdbcTypeForNull(JdbcType jdbcTypeForNull) {\n      this.jdbcTypeForNull = jdbcTypeForNull;\n    }\n  \n    public Properties getVariables() {\n      return variables;\n    }\n  \n    public void setVariables(Properties variables) {\n      this.variables = variables;\n    }\n  \n    public TypeHandlerRegistry getTypeHandlerRegistry() {\n      return typeHandlerRegistry;\n    }\n  \n    /**\n     * Set a default {@link TypeHandler} class for {@link Enum}.\n     * A default {@link TypeHandler} is {@link org.apache.ibatis.type.EnumTypeHandler}.\n     * @param typeHandler a type handler class for {@link Enum}\n     * @since 3.4.5\n     */\n    public void setDefaultEnumTypeHandler(Class<? extends TypeHandler> typeHandler) {\n      if (typeHandler != null) {\n        getTypeHandlerRegistry().setDefaultEnumTypeHandler(typeHandler);\n      }\n    }\n  \n    public TypeAliasRegistry getTypeAliasRegistry() {\n      return typeAliasRegistry;\n    }\n  \n    /**\n     * @since 3.2.2\n     */\n    public MapperRegistry getMapperRegistry() {\n      return mapperRegistry;\n    }\n  \n    public ReflectorFactory getReflectorFactory() {\n  \t  return reflectorFactory;\n    }\n  \n    public void setReflectorFactory(ReflectorFactory reflectorFactory) {\n  \t  this.reflectorFactory = reflectorFactory;\n    }\n  \n    public ObjectFactory getObjectFactory() {\n      return objectFactory;\n    }\n  \n    public void setObjectFactory(ObjectFactory objectFactory) {\n      this.objectFactory = objectFactory;\n    }\n  \n    public ObjectWrapperFactory getObjectWrapperFactory() {\n      return objectWrapperFactory;\n    }\n  \n    public void setObjectWrapperFactory(ObjectWrapperFactory objectWrapperFactory) {\n      this.objectWrapperFactory = objectWrapperFactory;\n    }\n  \n    /**\n     * @since 3.2.2\n     */\n    public List<Interceptor> getInterceptors() {\n      return interceptorChain.getInterceptors();\n    }\n  \n    public LanguageDriverRegistry getLanguageRegistry() {\n      return languageRegistry;\n    }\n  \n    public void setDefaultScriptingLanguage(Class<?> driver) {\n      if (driver == null) {\n        driver = XMLLanguageDriver.class;\n      }\n      getLanguageRegistry().setDefaultDriverClass(driver);\n    }\n  \n    public LanguageDriver getDefaultScriptingLanguageInstance() {\n      return languageRegistry.getDefaultDriver();\n    }\n  \n    /** @deprecated Use {@link #getDefaultScriptingLanguageInstance()} */\n    @Deprecated\n    public LanguageDriver getDefaultScriptingLanuageInstance() {\n      return getDefaultScriptingLanguageInstance();\n    }\n  \n    public MetaObject newMetaObject(Object object) {\n      return MetaObject.forObject(object, objectFactory, objectWrapperFactory, reflectorFactory);\n    }\n  \n    public ParameterHandler newParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {\n      ParameterHandler parameterHandler = mappedStatement.getLang().createParameterHandler(mappedStatement, parameterObject, boundSql);\n      parameterHandler = (ParameterHandler) interceptorChain.pluginAll(parameterHandler);\n      return parameterHandler;\n    }\n  \n    public ResultSetHandler newResultSetHandler(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds, ParameterHandler parameterHandler,\n        ResultHandler resultHandler, BoundSql boundSql) {\n      ResultSetHandler resultSetHandler = new DefaultResultSetHandler(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);\n      resultSetHandler = (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);\n      return resultSetHandler;\n    }\n  \n    public StatementHandler newStatementHandler(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) {\n      StatementHandler statementHandler = new RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);\n      statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);\n      return statementHandler;\n    }\n  \n    public Executor newExecutor(Transaction transaction) {\n      return newExecutor(transaction, defaultExecutorType);\n    }\n  \n    public Executor newExecutor(Transaction transaction, ExecutorType executorType) {\n      executorType = executorType == null ? defaultExecutorType : executorType;\n      executorType = executorType == null ? ExecutorType.SIMPLE : executorType;\n      Executor executor;\n      if (ExecutorType.BATCH == executorType) {\n        executor = new BatchExecutor(this, transaction);\n      } else if (ExecutorType.REUSE == executorType) {\n        executor = new ReuseExecutor(this, transaction);\n      } else {\n        executor = new SimpleExecutor(this, transaction);\n      }\n      if (cacheEnabled) {\n        executor = new CachingExecutor(executor);\n      }\n      executor = (Executor) interceptorChain.pluginAll(executor);\n      return executor;\n    }\n  \n    public void addKeyGenerator(String id, KeyGenerator keyGenerator) {\n      keyGenerators.put(id, keyGenerator);\n    }\n  \n    public Collection<String> getKeyGeneratorNames() {\n      return keyGenerators.keySet();\n    }\n  \n    public Collection<KeyGenerator> getKeyGenerators() {\n      return keyGenerators.values();\n    }\n  \n    public KeyGenerator getKeyGenerator(String id) {\n      return keyGenerators.get(id);\n    }\n  \n    public boolean hasKeyGenerator(String id) {\n      return keyGenerators.containsKey(id);\n    }\n  \n    public void addCache(Cache cache) {\n      caches.put(cache.getId(), cache);\n    }\n  \n    public Collection<String> getCacheNames() {\n      return caches.keySet();\n    }\n  \n    public Collection<Cache> getCaches() {\n      return caches.values();\n    }\n  \n    public Cache getCache(String id) {\n      return caches.get(id);\n    }\n  \n    public boolean hasCache(String id) {\n      return caches.containsKey(id);\n    }\n  \n    public void addResultMap(ResultMap rm) {\n      resultMaps.put(rm.getId(), rm);\n      checkLocallyForDiscriminatedNestedResultMaps(rm);\n      checkGloballyForDiscriminatedNestedResultMaps(rm);\n    }\n  \n    public Collection<String> getResultMapNames() {\n      return resultMaps.keySet();\n    }\n  \n    public Collection<ResultMap> getResultMaps() {\n      return resultMaps.values();\n    }\n  \n    public ResultMap getResultMap(String id) {\n      return resultMaps.get(id);\n    }\n  \n    public boolean hasResultMap(String id) {\n      return resultMaps.containsKey(id);\n    }\n  \n    public void addParameterMap(ParameterMap pm) {\n      parameterMaps.put(pm.getId(), pm);\n    }\n  \n    public Collection<String> getParameterMapNames() {\n      return parameterMaps.keySet();\n    }\n  \n    public Collection<ParameterMap> getParameterMaps() {\n      return parameterMaps.values();\n    }\n  \n    public ParameterMap getParameterMap(String id) {\n      return parameterMaps.get(id);\n    }\n  \n    public boolean hasParameterMap(String id) {\n      return parameterMaps.containsKey(id);\n    }\n  \n    public void addMappedStatement(MappedStatement ms) {\n      mappedStatements.put(ms.getId(), ms);\n    }\n  \n    public Collection<String> getMappedStatementNames() {\n      buildAllStatements();\n      return mappedStatements.keySet();\n    }\n  \n    public Collection<MappedStatement> getMappedStatements() {\n      buildAllStatements();\n      return mappedStatements.values();\n    }\n  \n    public Collection<XMLStatementBuilder> getIncompleteStatements() {\n      return incompleteStatements;\n    }\n  \n    public void addIncompleteStatement(XMLStatementBuilder incompleteStatement) {\n      incompleteStatements.add(incompleteStatement);\n    }\n  \n    public Collection<CacheRefResolver> getIncompleteCacheRefs() {\n      return incompleteCacheRefs;\n    }\n  \n    public void addIncompleteCacheRef(CacheRefResolver incompleteCacheRef) {\n      incompleteCacheRefs.add(incompleteCacheRef);\n    }\n  \n    public Collection<ResultMapResolver> getIncompleteResultMaps() {\n      return incompleteResultMaps;\n    }\n  \n    public void addIncompleteResultMap(ResultMapResolver resultMapResolver) {\n      incompleteResultMaps.add(resultMapResolver);\n    }\n  \n    public void addIncompleteMethod(MethodResolver builder) {\n      incompleteMethods.add(builder);\n    }\n  \n    public Collection<MethodResolver> getIncompleteMethods() {\n      return incompleteMethods;\n    }\n  \n    public MappedStatement getMappedStatement(String id) {\n      return this.getMappedStatement(id, true);\n    }\n  \n    public MappedStatement getMappedStatement(String id, boolean validateIncompleteStatements) {\n      if (validateIncompleteStatements) {\n        buildAllStatements();\n      }\n      return mappedStatements.get(id);\n    }\n  \n    public Map<String, XNode> getSqlFragments() {\n      return sqlFragments;\n    }\n  \n    public void addInterceptor(Interceptor interceptor) {\n      interceptorChain.addInterceptor(interceptor);\n    }\n  \n    public void addMappers(String packageName, Class<?> superType) {\n      mapperRegistry.addMappers(packageName, superType);\n    }\n  \n    public void addMappers(String packageName) {\n      mapperRegistry.addMappers(packageName);\n    }\n  \n    public <T> void addMapper(Class<T> type) {\n      mapperRegistry.addMapper(type);\n    }\n  \n    public <T> T getMapper(Class<T> type, SqlSession sqlSession) {\n      return mapperRegistry.getMapper(type, sqlSession);\n    }\n  \n    public boolean hasMapper(Class<?> type) {\n      return mapperRegistry.hasMapper(type);\n    }\n  \n    public boolean hasStatement(String statementName) {\n      return hasStatement(statementName, true);\n    }\n  \n    public boolean hasStatement(String statementName, boolean validateIncompleteStatements) {\n      if (validateIncompleteStatements) {\n        buildAllStatements();\n      }\n      return mappedStatements.containsKey(statementName);\n    }\n  \n    public void addCacheRef(String namespace, String referencedNamespace) {\n      cacheRefMap.put(namespace, referencedNamespace);\n    }\n  \n    /*\n     * Parses all the unprocessed statement nodes in the cache. It is recommended\n     * to call this method once all the mappers are added as it provides fail-fast\n     * statement validation.\n     */\n    protected void buildAllStatements() {\n      if (!incompleteResultMaps.isEmpty()) {\n        synchronized (incompleteResultMaps) {\n          // This always throws a BuilderException.\n          incompleteResultMaps.iterator().next().resolve();\n        }\n      }\n      if (!incompleteCacheRefs.isEmpty()) {\n        synchronized (incompleteCacheRefs) {\n          // This always throws a BuilderException.\n          incompleteCacheRefs.iterator().next().resolveCacheRef();\n        }\n      }\n      if (!incompleteStatements.isEmpty()) {\n        synchronized (incompleteStatements) {\n          // This always throws a BuilderException.\n          incompleteStatements.iterator().next().parseStatementNode();\n        }\n      }\n      if (!incompleteMethods.isEmpty()) {\n        synchronized (incompleteMethods) {\n          // This always throws a BuilderException.\n          incompleteMethods.iterator().next().resolve();\n        }\n      }\n    }\n  \n    /*\n     * Extracts namespace from fully qualified statement id.\n     *\n     * @param statementId\n     * @return namespace or null when id does not contain period.\n     */\n    protected String extractNamespace(String statementId) {\n      int lastPeriod = statementId.lastIndexOf('.');\n      return lastPeriod > 0 ? statementId.substring(0, lastPeriod) : null;\n    }\n  \n    // Slow but a one time cost. A better solution is welcome.\n    protected void checkGloballyForDiscriminatedNestedResultMaps(ResultMap rm) {\n      if (rm.hasNestedResultMaps()) {\n        for (Map.Entry<String, ResultMap> entry : resultMaps.entrySet()) {\n          Object value = entry.getValue();\n          if (value instanceof ResultMap) {\n            ResultMap entryResultMap = (ResultMap) value;\n            if (!entryResultMap.hasNestedResultMaps() && entryResultMap.getDiscriminator() != null) {\n              Collection<String> discriminatedResultMapNames = entryResultMap.getDiscriminator().getDiscriminatorMap().values();\n              if (discriminatedResultMapNames.contains(rm.getId())) {\n                entryResultMap.forceNestedResultMaps();\n              }\n            }\n          }\n        }\n      }\n    }\n  \n    // Slow but a one time cost. A better solution is welcome.\n    protected void checkLocallyForDiscriminatedNestedResultMaps(ResultMap rm) {\n      if (!rm.hasNestedResultMaps() && rm.getDiscriminator() != null) {\n        for (Map.Entry<String, String> entry : rm.getDiscriminator().getDiscriminatorMap().entrySet()) {\n          String discriminatedResultMapName = entry.getValue();\n          if (hasResultMap(discriminatedResultMapName)) {\n            ResultMap discriminatedResultMap = resultMaps.get(discriminatedResultMapName);\n            if (discriminatedResultMap.hasNestedResultMaps()) {\n              rm.forceNestedResultMaps();\n              break;\n            }\n          }\n        }\n      }\n    }\n  \n    protected static class StrictMap<V> extends HashMap<String, V> {\n  \n      private static final long serialVersionUID = -4950446264854982944L;\n      private final String name;\n  \n      public StrictMap(String name, int initialCapacity, float loadFactor) {\n        super(initialCapacity, loadFactor);\n        this.name = name;\n      }\n  \n      public StrictMap(String name, int initialCapacity) {\n        super(initialCapacity);\n        this.name = name;\n      }\n  \n      public StrictMap(String name) {\n        super();\n        this.name = name;\n      }\n  \n      public StrictMap(String name, Map<String, ? extends V> m) {\n        super(m);\n        this.name = name;\n      }\n  \n      @SuppressWarnings(\"unchecked\")\n      public V put(String key, V value) {\n        if (containsKey(key)) {\n          throw new IllegalArgumentException(name + \" already contains value for \" + key);\n        }\n        if (key.contains(\".\")) {\n          final String shortKey = getShortName(key);\n          if (super.get(shortKey) == null) {\n            super.put(shortKey, value);\n          } else {\n            super.put(shortKey, (V) new Ambiguity(shortKey));\n          }\n        }\n        return super.put(key, value);\n      }\n  \n      public V get(Object key) {\n        V value = super.get(key);\n        if (value == null) {\n          throw new IllegalArgumentException(name + \" does not contain value for \" + key);\n        }\n        if (value instanceof Ambiguity) {\n          throw new IllegalArgumentException(((Ambiguity) value).getSubject() + \" is ambiguous in \" + name\n              + \" (try using the full name including the namespace, or rename one of the entries)\");\n        }\n        return value;\n      }\n  \n      private String getShortName(String key) {\n        final String[] keyParts = key.split(\"\\\\.\");\n        return keyParts[keyParts.length - 1];\n      }\n  \n      protected static class Ambiguity {\n        final private String subject;\n  \n        public Ambiguity(String subject) {\n          this.subject = subject;\n        }\n  \n        public String getSubject() {\n          return subject;\n        }\n      }\n    }\n  \n  }\n  \n  ```\n\n  **然后代码跳到这里**\n\n  ```\n  public class SqlSessionFactoryBean implements FactoryBean<SqlSessionFactory>, InitializingBean, ApplicationListener<ApplicationEvent> {\n  ...\n  //这里是创建唯一的sqlsessionFactory注意这个注解ConditionalOnMissingBean\n    @Bean\n    @ConditionalOnMissingBean\n    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n      SqlSessionFactoryBean factory = new SqlSessionFactoryBean();\n      factory.setDataSource(dataSource);\n      factory.setVfs(SpringBootVFS.class);\n      if (StringUtils.hasText(this.properties.getConfigLocation())) {\n        factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n      }\n      Configuration configuration = this.properties.getConfiguration();\n      if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n        configuration = new Configuration();\n      }\n      if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n        for (ConfigurationCustomizer customizer : this.configurationCustomizers) {\n          customizer.customize(configuration);\n        }\n      }\n      factory.setConfiguration(configuration);\n      if (this.properties.getConfigurationProperties() != null) {\n        factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n      }\n      if (!ObjectUtils.isEmpty(this.interceptors)) {\n        factory.setPlugins(this.interceptors);\n      }\n      if (this.databaseIdProvider != null) {\n        factory.setDatabaseIdProvider(this.databaseIdProvider);\n      }\n      if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n        factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n      }\n      if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n        factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n      }\n      if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n        factory.setMapperLocations(this.properties.resolveMapperLocations());\n      }\n  \t//创建工厂\n      return factory.getObject();\n    }\n  ...\n    /**\n     * {@inheritDoc}\n     */\n     //先走这个方法\n    @Override\n    public void afterPropertiesSet() throws Exception {\n      notNull(dataSource, \"Property 'dataSource' is required\");\n      notNull(sqlSessionFactoryBuilder, \"Property 'sqlSessionFactoryBuilder' is required\");\n      state((configuration == null && configLocation == null) || !(configuration != null && configLocation != null),\n                \"Property 'configuration' and 'configLocation' can not specified with together\");\n  \t//走这里进行build工厂类\n      this.sqlSessionFactory = buildSqlSessionFactory();\n    }\n    ...\n    //注意了具体的配置过程在这里\n      protected SqlSessionFactory buildSqlSessionFactory() throws IOException {\n  \n      Configuration configuration;\n  \n      XMLConfigBuilder xmlConfigBuilder = null;\n      if (this.configuration != null) {\n        configuration = this.configuration;\n        if (configuration.getVariables() == null) {\n          configuration.setVariables(this.configurationProperties);\n        } else if (this.configurationProperties != null) {\n          configuration.getVariables().putAll(this.configurationProperties);\n        }\n      } else if (this.configLocation != null) {\n        xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null, this.configurationProperties);\n        configuration = xmlConfigBuilder.getConfiguration();\n      } else {\n        if (LOGGER.isDebugEnabled()) {\n          LOGGER.debug(\"Property 'configuration' or 'configLocation' not specified, using default MyBatis Configuration\");\n        }\n        configuration = new Configuration();\n        if (this.configurationProperties != null) {\n          configuration.setVariables(this.configurationProperties);\n        }\n      }\n  \n      if (this.objectFactory != null) {\n        configuration.setObjectFactory(this.objectFactory);\n      }\n  \n      if (this.objectWrapperFactory != null) {\n        configuration.setObjectWrapperFactory(this.objectWrapperFactory);\n      }\n  \n      if (this.vfs != null) {\n        configuration.setVfsImpl(this.vfs);\n      }\n  \t//this.typeAliasesPackage=application.properties中的mybatis.type-aliases-package\n      if (hasLength(this.typeAliasesPackage)) {\n        String[] typeAliasPackageArray = tokenizeToStringArray(this.typeAliasesPackage,\n            ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n        for (String packageToScan : typeAliasPackageArray) {\n          configuration.getTypeAliasRegistry().registerAliases(packageToScan,\n                  typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);\n          if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for aliases\");\n          }\n        }\n      }\n  \t//注册别名类到configuration\n      if (!isEmpty(this.typeAliases)) {\n        for (Class<?> typeAlias : this.typeAliases) {\n          configuration.getTypeAliasRegistry().registerAlias(typeAlias);\n          if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Registered type alias: '\" + typeAlias + \"'\");\n          }\n        }\n      }\n  \t//看看有没有配置插件有的话加入到拦截器组\n      if (!isEmpty(this.plugins)) {\n        for (Interceptor plugin : this.plugins) {\n          configuration.addInterceptor(plugin);\n          if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Registered plugin: '\" + plugin + \"'\");\n          }\n        }\n      }\n  \t//看看有没有typeHandlersPackage，有的话注册到cfg类中\n      if (hasLength(this.typeHandlersPackage)) {\n        String[] typeHandlersPackageArray = tokenizeToStringArray(this.typeHandlersPackage,\n            ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n        for (String packageToScan : typeHandlersPackageArray) {\n          configuration.getTypeHandlerRegistry().register(packageToScan);\n          if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for type handlers\");\n          }\n        }\n      }\n  \t//看看有没有typeHandlers，有的话注册到cfg类中\n      if (!isEmpty(this.typeHandlers)) {\n        for (TypeHandler<?> typeHandler : this.typeHandlers) {\n          configuration.getTypeHandlerRegistry().register(typeHandler);\n          if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Registered type handler: '\" + typeHandler + \"'\");\n          }\n        }\n      }\n  \t//看看有没有设置databaseid 有的话配置到cfg类中\n      if (this.databaseIdProvider != null) {//fix #64 set databaseId before parse mapper xmls\n        try {\n          configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\n        } catch (SQLException e) {\n          throw new NestedIOException(\"Failed getting a databaseId\", e);\n        }\n      }\n  \n      if (this.cache != null) {\n        configuration.addCache(this.cache);\n      }\n  \n      if (xmlConfigBuilder != null) {\n        try {\n          xmlConfigBuilder.parse();\n  \n          if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Parsed configuration file: '\" + this.configLocation + \"'\");\n          }\n        } catch (Exception ex) {\n          throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation, ex);\n        } finally {\n          ErrorContext.instance().reset();\n        }\n      }\n  //如果transactionFactory是空的话 new一个 Spring的事务工厂\n      if (this.transactionFactory == null) {\n        this.transactionFactory = new SpringManagedTransactionFactory();\n      }\n  \t//这里很重要 将spring的环境对象 和事务工厂还有数据源对象注册到cfg类中\n      configuration.setEnvironment(new Environment(this.environment, this.transactionFactory, this.dataSource));\n  \t//this.mapperLocation=application.properties中配置的mybatis.mapper-locations\n  \t//拿到mapper文件的配置类\n      if (!isEmpty(this.mapperLocations)) {\n        for (Resource mapperLocation : this.mapperLocations) {\n          if (mapperLocation == null) {\n            continue;\n          }\n  \n          try {\n          //构建xmlMapperBuilder\n            XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(mapperLocation.getInputStream(),\n                configuration, mapperLocation.toString(), configuration.getSqlFragments());\n                //\n            xmlMapperBuilder.parse();\n          } catch (Exception e) {\n            throw new NestedIOException(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\", e);\n          } finally {\n            ErrorContext.instance().reset();\n          }\n  \n          if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Parsed mapper file: '\" + mapperLocation + \"'\");\n          }\n        }\n      } else {\n        if (LOGGER.isDebugEnabled()) {\n          LOGGER.debug(\"Property 'mapperLocations' was not specified or no matching resources found\");\n        }\n      }\n  \t//最后创建sqlsessionFactory\n      return this.sqlSessionFactoryBuilder.build(configuration);\n    }\n  \n  ```\n\n  **configuration.getTypeAliasRegistry().registerAliases的操作**\n\n  ```\n   public void registerAliases(String packageName, Class<?> superType){\n      ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<Class<?>>();\n      resolverUtil.find(new ResolverUtil.IsA(superType), packageName);\n      Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();\n      for(Class<?> type : typeSet){\n        // Ignore inner classes and interfaces (including package-info.java)\n        // Skip also inner classes. See issue #6\n        if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {\n          //注册别名\n          registerAlias(type);\n        }\n      }\n    }\n    //上面代码调到这里\n    public void registerAlias(Class<?> type) {\n      String alias = type.getSimpleName();\n      //先获得class上的注解 \n      Alias aliasAnnotation = type.getAnnotation(Alias.class);\n      if (aliasAnnotation != null) {\n        //如果有的话拿到注解的值\n        alias = aliasAnnotation.value();\n      } \n      //\n      registerAlias(alias, type);\n    }\n    //再跳到这里\n    public void registerAlias(String alias, Class<?> value) {\n      if (alias == null) {\n        throw new TypeException(\"The parameter alias cannot be null\");\n      }\n      // issue #748\n      String key = alias.toLowerCase(Locale.ENGLISH);\n      if (TYPE_ALIASES.containsKey(key) && TYPE_ALIASES.get(key) != null && !TYPE_ALIASES.get(key).equals(value)) {\n        throw new TypeException(\"The alias '\" + alias + \"' is already mapped to the value '\" + TYPE_ALIASES.get(key).getName() + \"'.\");\n      }\n      //这里key=userroledto value=class com.convergence.domain.UserRoleDTO\n      TYPE_ALIASES.put(key, value);\n    }\n  ```\n\n  **进行解析**\n\n  ```\n  public void parse() {\n      if (!configuration.isResourceLoaded(resource)) {\n        configurationElement(parser.evalNode(\"/mapper\"));\n        configuration.addLoadedResource(resource);\n        //绑定namespace\n        bindMapperForNamespace();\n      }\n  \t//解析resultMaps\n      parsePendingResultMaps();\n      parsePendingCacheRefs();\n      parsePendingStatements();\n    }\n    //解析xml文件\n    private void configurationElement(XNode context) {\n      try {\n        String namespace = context.getStringAttribute(\"namespace\");\n        if (namespace == null || namespace.equals(\"\")) {\n          throw new BuilderException(\"Mapper's namespace cannot be empty\");\n        }\n        builderAssistant.setCurrentNamespace(namespace);\n        //这里的context就是xml文件内容了\n        cacheRefElement(context.evalNode(\"cache-ref\"));\n        cacheElement(context.evalNode(\"cache\"));\n        parameterMapElement(context.evalNodes(\"/mapper/parameterMap\"));\n        resultMapElements(context.evalNodes(\"/mapper/resultMap\"));\n        sqlElement(context.evalNodes(\"/mapper/sql\"));\n        buildStatementFromContext(context.evalNodes(\"select|insert|update|delete\"));\n      } catch (Exception e) {\n        throw new BuilderException(\"Error parsing Mapper XML. Cause: \" + e, e);\n      }\n    }\n    //将mapper.java和xml进行绑定\n    private void bindMapperForNamespace() {\n      String namespace = builderAssistant.getCurrentNamespace();\n      if (namespace != null) {\n        Class<?> boundType = null;\n        try {\n          boundType = Resources.classForName(namespace);\n        } catch (ClassNotFoundException e) {\n          //ignore, bound type is not required\n        }\n        if (boundType != null) {\n          if (!configuration.hasMapper(boundType)) {\n            // Spring may not know the real resource name so we set a flag\n            // to prevent loading again this resource from the mapper interface\n            // look at MapperAnnotationBuilder#loadXmlResource\n            configuration.addLoadedResource(\"namespace:\" + namespace);\n            configuration.addMapper(boundType);\n          }\n        }\n      }\n    }\n    //解析resultmap\n   private void parsePendingResultMaps() {\n      Collection<ResultMapResolver> incompleteResultMaps = configuration.getIncompleteResultMaps();\n      synchronized (incompleteResultMaps) {\n        Iterator<ResultMapResolver> iter = incompleteResultMaps.iterator();\n        while (iter.hasNext()) {\n          try {\n            iter.next().resolve();\n            iter.remove();\n          } catch (IncompleteElementException e) {\n            // ResultMap is still missing a resource...\n          }\n        }\n      }\n    }\n    //缓存解析\n    private void parsePendingCacheRefs() {\n      Collection<CacheRefResolver> incompleteCacheRefs = configuration.getIncompleteCacheRefs();\n      synchronized (incompleteCacheRefs) {\n        Iterator<CacheRefResolver> iter = incompleteCacheRefs.iterator();\n        while (iter.hasNext()) {\n          try {\n            iter.next().resolveCacheRef();\n            iter.remove();\n          } catch (IncompleteElementException e) {\n            // Cache ref is still missing a resource...\n          }\n        }\n      }\n    }\n    //statment解析\n      private void parsePendingStatements() {\n      Collection<XMLStatementBuilder> incompleteStatements = configuration.getIncompleteStatements();\n      synchronized (incompleteStatements) {\n        Iterator<XMLStatementBuilder> iter = incompleteStatements.iterator();\n        while (iter.hasNext()) {\n          try {\n            iter.next().parseStatementNode();\n            iter.remove();\n          } catch (IncompleteElementException e) {\n            // Statement is still missing a resource...\n          }\n        }\n      }\n    }\n  ```\n\n  **上面的工厂实例完了 进入sqlsessiontemplate实例**\n\n  ```\n    //这里需要上面构建的sqlSessionFactory\n    @Bean\n    @ConditionalOnMissingBean\n    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {\n      ExecutorType executorType = this.properties.getExecutorType();\n      if (executorType != null) {\n        return new SqlSessionTemplate(sqlSessionFactory, executorType);\n      } else {\n        return new SqlSessionTemplate(sqlSessionFactory);\n      }\n    }\n  ```\n\n  **构建SqlSessionTemplate**\n\n  ```\n   public class SqlSessionTemplate implements SqlSession, DisposableBean {\n   ...\n   /**\n     * Constructs a Spring managed {@code SqlSession} with the given\n     * {@code SqlSessionFactory} and {@code ExecutorType}.\n     * A custom {@code SQLExceptionTranslator} can be provided as an\n     * argument so any {@code PersistenceException} thrown by MyBatis\n     * can be custom translated to a {@code RuntimeException}\n     * The {@code SQLExceptionTranslator} can also be null and thus no\n     * exception translation will be done and MyBatis exceptions will be\n     * thrown\n     *\n     * @param sqlSessionFactory\n     * @param executorType\n     * @param exceptionTranslator\n     */\n    public SqlSessionTemplate(SqlSessionFactory sqlSessionFactory, ExecutorType executorType,\n        PersistenceExceptionTranslator exceptionTranslator) {\n  \n      notNull(sqlSessionFactory, \"Property 'sqlSessionFactory' is required\");\n      notNull(executorType, \"Property 'executorType' is required\");\n  \n      this.sqlSessionFactory = sqlSessionFactory;\n      this.executorType = executorType;\n      this.exceptionTranslator = exceptionTranslator;\n      //获得一个sqlsession代理类 里面填充了sqlSessionInterceptor\n      this.sqlSessionProxy = (SqlSession) newProxyInstance(\n          SqlSessionFactory.class.getClassLoader(),\n          new Class[] { SqlSession.class },\n          new SqlSessionInterceptor());\n    }\n    ...\n    }\n  ```\n\n  **这里说下ExecutorType **\n\n  * **simple 默认的 **\n  * **reuse 这个类型不做特殊的事情，它只为每个语句创建一个 PreparedStatement。**\n  * **batch 批处理语句使用 需要关闭autocommit      **\n\n  ```\n  public enum ExecutorType {\n    SIMPLE, REUSE, BATCH\n  }\n  ```\n\n  **在创建sqlSessionTemplate的时候会创建一个SqlSessionInterceptor**\n\n  ```\n    private class SqlSessionInterceptor implements InvocationHandler {\n  ...\n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n      //首先获取到sqlsession\n        SqlSession sqlSession = getSqlSession(\n            SqlSessionTemplate.this.sqlSessionFactory,\n            SqlSessionTemplate.this.executorType,\n            SqlSessionTemplate.this.exceptionTranslator);\n        try {\n        //进行involke 拿到具体的结果集\n          Object result = method.invoke(sqlSession, args);\n          //这个if判断：    return (holder != null) && (holder.getSqlSession() == session);\n          if (!isSqlSessionTransactional(sqlSession, SqlSessionTemplate.this.sqlSessionFactory)) {\n            // force commit even on non-dirty sessions because some databases require\n            // a commit/rollback before calling close()\n            //然后commit\n            sqlSession.commit(true);\n          }\n          return result;\n        } catch (Throwable t) {\n          Throwable unwrapped = unwrapThrowable(t);\n          if (SqlSessionTemplate.this.exceptionTranslator != null && unwrapped instanceof PersistenceException) {\n            // release the connection to avoid a deadlock if the translator is no loaded. See issue #22\n            closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);\n            sqlSession = null;\n            Throwable translated = SqlSessionTemplate.this.exceptionTranslator.translateExceptionIfPossible((PersistenceException) unwrapped);\n            if (translated != null) {\n              unwrapped = translated;\n            }\n          }\n          throw unwrapped;\n        } finally {\n          if (sqlSession != null) {\n          //关闭会话\n            closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);\n          }\n        }\n      }\n    }\n    }\n  ```\n\n  **getSqlSession:**\n\n  ```\n    public static SqlSession getSqlSession(SqlSessionFactory sessionFactory, ExecutorType executorType, PersistenceExceptionTranslator exceptionTranslator) {\n  \n      notNull(sessionFactory, NO_SQL_SESSION_FACTORY_SPECIFIED);\n      notNull(executorType, NO_EXECUTOR_TYPE_SPECIFIED);\n  \t//holder\n      SqlSessionHolder holder = (SqlSessionHolder) \n      //事务管理器拿到holder\n      TransactionSynchronizationManager.getResource(sessionFactory);\n  \t//获得session\n      SqlSession session = sessionHolder(executorType, holder);\n      if (session != null) {\n        return session;\n      }\n  \n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Creating a new SqlSession\");\n      }\n  \t//工厂打开session\n      session = sessionFactory.openSession(executorType);\n  \t//注册session,工厂到holder\n      registerSessionHolder(sessionFactory, executorType, exceptionTranslator, session);\n  \n      return session;\n    }\n  ```\n\n  **registerSessionHolder:**\n\n  ```\n    private static void registerSessionHolder(SqlSessionFactory sessionFactory, ExecutorType executorType,\n        PersistenceExceptionTranslator exceptionTranslator, SqlSession session) {\n      SqlSessionHolder holder;\n      if (TransactionSynchronizationManager.isSynchronizationActive()) {\n        Environment environment = sessionFactory.getConfiguration().getEnvironment();\n  \t  //如果当前的事务工厂是spring的事务管理工厂的实例的话\n        if (environment.getTransactionFactory() instanceof SpringManagedTransactionFactory) {\n          if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Registering transaction synchronization for SqlSession [\" + session + \"]\");\n          }\n  \t   //创建holder\n          holder = new SqlSessionHolder(session, executorType, exceptionTranslator);\n          //底下是事务的一系列管理操作\n          TransactionSynchronizationManager.bindResource(sessionFactory, holder);\n          TransactionSynchronizationManager.registerSynchronization(new SqlSessionSynchronization(holder, sessionFactory));\n          holder.setSynchronizedWithTransaction(true);\n          holder.requested();\n        } else {\n          if (TransactionSynchronizationManager.getResource(environment.getDataSource()) == null) {\n            if (LOGGER.isDebugEnabled()) {\n              LOGGER.debug(\"SqlSession [\" + session + \"] was not registered for synchronization because DataSource is not transactional\");\n            }\n          } else {\n            throw new TransientDataAccessResourceException(\n                \"SqlSessionFactory must be using a SpringManagedTransactionFactory in order to use Spring transaction synchronization\");\n          }\n        }\n      } else {\n        if (LOGGER.isDebugEnabled()) {\n          LOGGER.debug(\"SqlSession [\" + session + \"] was not registered for synchronization because synchronization is not active\");\n        }\n      }\n  }\n  ```\n\n  **具体的sql执行过程**\n\n  \n\n  **mybatis中的每个dao都会继承SqlSessionDaoSupport，在于spring集成的时候，需要依赖spring-mybatis这个jar，而这个SqlSessionDaoSupport类就在这个jar中**\n\n  **这是个抽象类。**\n\n  ```\n  package org.mybatis.spring.support;\n  \n  import static org.springframework.util.Assert.notNull;\n  \n  import org.apache.ibatis.session.SqlSession;\n  import org.apache.ibatis.session.SqlSessionFactory;\n  import org.mybatis.spring.SqlSessionTemplate;\n  import org.springframework.dao.support.DaoSupport;\n  \n  /**\n   * Convenient super class for MyBatis SqlSession data access objects.\n   * It gives you access to the template which can then be used to execute SQL methods.\n   * <p>\n   * This class needs a SqlSessionTemplate or a SqlSessionFactory.\n   * If both are set the SqlSessionFactory will be ignored.\n   * <p>\n   * {code Autowired} was removed from setSqlSessionTemplate and setSqlSessionFactory\n   * in version 1.2.0.\n   * \n   * @author Putthibong Boonbong\n   *\n   * @see #setSqlSessionFactory\n   * @see #setSqlSessionTemplate\n   * @see SqlSessionTemplate\n   */\n  public abstract class SqlSessionDaoSupport extends DaoSupport {\n  \n    private SqlSession sqlSession;\n  \n    private boolean externalSqlSession;\n  \n    public void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) {\n      if (!this.externalSqlSession) {\n        this.sqlSession = new SqlSessionTemplate(sqlSessionFactory);\n      }\n    }\n  \n    public void setSqlSessionTemplate(SqlSessionTemplate sqlSessionTemplate) {\n      this.sqlSession = sqlSessionTemplate;\n      this.externalSqlSession = true;\n    }\n  \n    /**\n     * Users should use this method to get a SqlSession to call its statement methods\n     * This is SqlSession is managed by spring. Users should not commit/rollback/close it\n     * because it will be automatically done.\n     *\n     * @return Spring managed thread safe SqlSession\n     */\n    public SqlSession getSqlSession() {\n      return this.sqlSession;\n    }\n  \n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void checkDaoConfig() {\n      notNull(this.sqlSession, \"Property 'sqlSessionFactory' or 'sqlSessionTemplate' are required\");\n    }\n  \n  }\n  ```\n\n  **那么它的父类DaoSupport什么时候**\n\n  **注意实现了InitializingBean这个是由spring管理的**\n\n  ```\n  public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory\n  \t\timplements AutowireCapableBeanFactory {\n  \t\t//\n  \t/**\n  \t * Give a bean a chance to react now all its properties are set,\n  \t * and a chance to know about its owning bean factory (this object).\n  \t * This means checking whether the bean implements InitializingBean or defines\n  \t * a custom init method, and invoking the necessary callback(s) if it does.\n  \t * @param beanName the bean name in the factory (for debugging purposes)\n  \t * @param bean the new bean instance we may need to initialize\n  \t * @param mbd the merged bean definition that the bean was created with\n  \t * (can also be {@code null}, if given an existing bean instance)\n  \t * @throws Throwable if thrown by init methods or by the invocation process\n  \t * @see #invokeCustomInitMethod\n  \t */\n  \t //根据bean的name来反射加载初始方法 当bean DataSourceInitializerInvoker被加载时候会触发事件驱动 去构建sqlsessionFactory\n  \t //当bean=MapperFactoryBean的时候 先走父类DaoSupport的afterPropertiesSet\n  \tprotected void invokeInitMethods(String beanName, final Object bean, @Nullable RootBeanDefinition mbd)\n  \t\t\tthrows Throwable {\n  \n  \t\tboolean isInitializingBean = (bean instanceof InitializingBean);\n  \t\tif (isInitializingBean && (mbd == null || !mbd.isExternallyManagedInitMethod(\"afterPropertiesSet\"))) {\n  \t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\tlogger.debug(\"Invoking afterPropertiesSet() on bean with name '\" + beanName + \"'\");\n  \t\t\t}\n  \t\t\tif (System.getSecurityManager() != null) {\n  \t\t\t\ttry {\n  \t\t\t\t\tAccessController.doPrivileged((PrivilegedExceptionAction<Object>) () -> {\n  \t\t\t\t\t\t((InitializingBean) bean).afterPropertiesSet();\n  \t\t\t\t\t\treturn null;\n  \t\t\t\t\t}, getAccessControlContext());\n  \t\t\t\t}\n  \t\t\t\tcatch (PrivilegedActionException pae) {\n  \t\t\t\t\tthrow pae.getException();\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\telse {\n  \t\t\t//在这里会初始化dao\n  \t\t\t\t((InitializingBean) bean).afterPropertiesSet();\n  \t\t\t}\n  \t\t}\n  \n  \t\tif (mbd != null && bean.getClass() != NullBean.class) {\n  \t\t\tString initMethodName = mbd.getInitMethodName();\n  \t\t\tif (StringUtils.hasLength(initMethodName) &&\n  \t\t\t\t\t!(isInitializingBean && \"afterPropertiesSet\".equals(initMethodName)) &&\t\n  \t\t\t\t\t!mbd.isExternallyManagedInitMethod(initMethodName)) {\n  \t\t\t\tinvokeCustomInitMethod(beanName, bean, mbd);\n  \t\t\t}\n  \t\t}\n  \t}\n  \n  ```\n\n  **当bean=MapperFactoryBean的时候 先走父类DaoSupport的afterPropertiesSet：**\n\n  ```\n  public abstract class DaoSupport implements InitializingBean {\n  ...\n  \t@Override\n  \tpublic final void afterPropertiesSet() throws IllegalArgumentException, BeanInitializationException {\n  \t\t// Let abstract subclasses check their configuration.\n  \t\t//检查dao的cfg\n  \t\tcheckDaoConfig();\n  \n  \t\t// Let concrete implementations initialize themselves.\n  \t\ttry {\n  \t\t//初始化加载dao 父类空实现\n  \t\t\tinitDao();\n  \t\t}\n  \t\tcatch (Exception ex) {\n  \t\t\tthrow new BeanInitializationException(\"Initialization of DAO failed\", ex);\n  \t\t}\n  \t}\n  ```\n\n  \n\n  **具体实现MapperFactoryBean：**\n\n  ```\n  package org.mybatis.spring.mapper;\n  \n  import static org.springframework.util.Assert.notNull;\n  \n  import org.apache.ibatis.executor.ErrorContext;\n  import org.apache.ibatis.session.Configuration;\n  import org.mybatis.spring.SqlSessionTemplate;\n  import org.mybatis.spring.support.SqlSessionDaoSupport;\n  import org.springframework.beans.factory.FactoryBean;\n  \n  /**\n   * BeanFactory that enables injection of MyBatis mapper interfaces. It can be set up with a\n   * SqlSessionFactory or a pre-configured SqlSessionTemplate.\n   * <p>\n   * Sample configuration:\n   *\n   * <pre class=\"code\">\n   * {@code\n   *   <bean id=\"baseMapper\" class=\"org.mybatis.spring.mapper.MapperFactoryBean\" abstract=\"true\" lazy-init=\"true\">\n   *     <property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\" />\n   *   </bean>\n   *\n   *   <bean id=\"oneMapper\" parent=\"baseMapper\">\n   *     <property name=\"mapperInterface\" value=\"my.package.MyMapperInterface\" />\n   *   </bean>\n   *\n   *   <bean id=\"anotherMapper\" parent=\"baseMapper\">\n   *     <property name=\"mapperInterface\" value=\"my.package.MyAnotherMapperInterface\" />\n   *   </bean>\n   * }\n   * </pre>\n   * <p>\n   * Note that this factory can only inject <em>interfaces</em>, not concrete classes.\n   *\n   * @author Eduardo Macarron\n   *\n   * @see SqlSessionTemplate\n   */\n  public class MapperFactoryBean<T> extends SqlSessionDaoSupport implements FactoryBean<T> {\n  \n    private Class<T> mapperInterface;\n  \n    private boolean addToConfig = true;\n  \n    public MapperFactoryBean() {\n      //intentionally empty \n    }\n    \n    public MapperFactoryBean(Class<T> mapperInterface) {\n      this.mapperInterface = mapperInterface;\n    }\n  \n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void checkDaoConfig() {\n    //进入父类DaoSupport的checkDaoConfig方法\n      super.checkDaoConfig();\n  \n      notNull(this.mapperInterface, \"Property 'mapperInterface' is required\");\n  \t//获取到mybatis的configuration\n      Configuration configuration = getSqlSession().getConfiguration();\n      //如果配置中没有当前执行sql的dao\n      if (this.addToConfig && !configuration.hasMapper(this.mapperInterface)) {\n        try {\n        //加入该dao到配置类中\n          configuration.addMapper(this.mapperInterface);\n        } catch (Exception e) {\n          logger.error(\"Error while adding the mapper '\" + this.mapperInterface + \"' to configuration.\", e);\n          throw new IllegalArgumentException(e);\n        } finally {\n          ErrorContext.instance().reset();\n        }\n      }\n    }\n  \n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public T getObject() throws Exception {\n      return getSqlSession().getMapper(this.mapperInterface);\n    }\n  \n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public Class<T> getObjectType() {\n      return this.mapperInterface;\n    }\n  \n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean isSingleton() {\n      return true;\n    }\n  \n    //------------- mutators --------------\n  \n    /**\n     * Sets the mapper interface of the MyBatis mapper\n     *\n     * @param mapperInterface class of the interface\n     */\n    public void setMapperInterface(Class<T> mapperInterface) {\n      this.mapperInterface = mapperInterface;\n    }\n  \n    /**\n     * Return the mapper interface of the MyBatis mapper\n     *\n     * @return class of the interface\n     */\n    public Class<T> getMapperInterface() {\n      return mapperInterface;\n    }\n  \n    /**\n     * If addToConfig is false the mapper will not be added to MyBatis. This means\n     * it must have been included in mybatis-config.xml.\n     * <p/>\n     * If it is true, the mapper will be added to MyBatis in the case it is not already\n     * registered.\n     * <p/>\n     * By default addToCofig is true.\n     *\n     * @param addToConfig\n     */\n    public void setAddToConfig(boolean addToConfig) {\n      this.addToConfig = addToConfig;\n    }\n  \n    /**\n     * Return the flag for addition into MyBatis config.\n     *\n     * @return true if the mapper will be added to MyBatis in the case it is not already\n     * registered.\n     */\n    public boolean isAddToConfig() {\n      return addToConfig;\n    }\n  }\n  \n  ```\n\n  **走完上面的代码，console打印日志：**\n\n  ```\n  2018-11-07 23:51:11.500 INFO [restartedMain][Jdk14Logger.java:99] - Bean 'resourceDao' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\n  ```\n\n  **那么底下会创建bean **\n\n  ```\n  public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory\n  \t\timplements AutowireCapableBeanFactory {\n  \t...\n  \t@Override\n  \tprotected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)\n  \t\t\tthrows BeanCreationException {\n  \n  \t\tif (logger.isDebugEnabled()) {\n  \t\t\tlogger.debug(\"Creating instance of bean '\" + beanName + \"'\");\n  \t\t}\n  \t\tRootBeanDefinition mbdToUse = mbd;\n  \n  \t\t// Make sure bean class is actually resolved at this point, and\n  \t\t// clone the bean definition in case of a dynamically resolved Class\n  \t\t// which cannot be stored in the shared merged bean definition.\n  \t\tClass<?> resolvedClass = resolveBeanClass(mbd, beanName);\n  \t\tif (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {\n  \t\t\tmbdToUse = new RootBeanDefinition(mbd);\n  \t\t\tmbdToUse.setBeanClass(resolvedClass);\n  \t\t}\n  \n  \t\t// Prepare method overrides.\n  \t\ttry {\n  \t\t\tmbdToUse.prepareMethodOverrides();\n  \t\t}\n  \t\tcatch (BeanDefinitionValidationException ex) {\n  \t\t\tthrow new BeanDefinitionStoreException(mbdToUse.getResourceDescription(),\n  \t\t\t\t\tbeanName, \"Validation of method overrides failed\", ex);\n  \t\t}\n  \n  \t\ttry {\n  \t\t\t// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.\n  \t\t\tObject bean = resolveBeforeInstantiation(beanName, mbdToUse);\n  \t\t\tif (bean != null) {\n  \t\t\t\treturn bean;\n  \t\t\t}\n  \t\t}\n  \t\tcatch (Throwable ex) {\n  \t\t\tthrow new BeanCreationException(mbdToUse.getResourceDescription(), beanName,\n  \t\t\t\t\t\"BeanPostProcessor before instantiation of bean failed\", ex);\n  \t\t}\n  \n  \t\ttry {\n  \t\t//创建bean\n  \t\t\tObject beanInstance = doCreateBean(beanName, mbdToUse, args);\n  \t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\tlogger.debug(\"Finished creating instance of bean '\" + beanName + \"'\");\n  \t\t\t}\n  \t\t\treturn beanInstance;\n  \t\t}\n  \t\tcatch (BeanCreationException | ImplicitlyAppearedSingletonException ex) {\n  \t\t\t// A previously detected exception with proper bean creation context already,\n  \t\t\t// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.\n  \t\t\tthrow ex;\n  \t\t}\n  \t\tcatch (Throwable ex) {\n  \t\t\tthrow new BeanCreationException(\n  \t\t\t\t\tmbdToUse.getResourceDescription(), beanName, \"Unexpected exception during bean creation\", ex);\n  \t\t}\n  \t}\n  \t...\n  \t//doCreateBean 创建bean\n  \t\tprotected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args)\n  \t\t\tthrows BeanCreationException {\n  \n  \t\t// Instantiate the bean.\n  \t\tBeanWrapper instanceWrapper = null;\n  \t\tif (mbd.isSingleton()) {\n  \t\t\tinstanceWrapper = this.factoryBeanInstanceCache.remove(beanName);\n  \t\t}\n  \t\tif (instanceWrapper == null) {\n  \t\t\tinstanceWrapper = createBeanInstance(beanName, mbd, args);\n  \t\t}\n  \t\tfinal Object bean = instanceWrapper.getWrappedInstance();\n  \t\tClass<?> beanType = instanceWrapper.getWrappedClass();\n  \t\tif (beanType != NullBean.class) {\n  \t\t\tmbd.resolvedTargetType = beanType;\n  \t\t}\n  \n  \t\t// Allow post-processors to modify the merged bean definition.\n  \t\tsynchronized (mbd.postProcessingLock) {\n  \t\t\tif (!mbd.postProcessed) {\n  \t\t\t\ttry {\n  \t\t\t\t\tapplyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);\n  \t\t\t\t}\n  \t\t\t\tcatch (Throwable ex) {\n  \t\t\t\t\tthrow new BeanCreationException(mbd.getResourceDescription(), beanName,\n  \t\t\t\t\t\t\t\"Post-processing of merged bean definition failed\", ex);\n  \t\t\t\t}\n  \t\t\t\tmbd.postProcessed = true;\n  \t\t\t}\n  \t\t}\n  \n  \t\t// Eagerly cache singletons to be able to resolve circular references\n  \t\t// even when triggered by lifecycle interfaces like BeanFactoryAware.\n  \t\tboolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences &&\n  \t\t\t\tisSingletonCurrentlyInCreation(beanName));\n  \t\tif (earlySingletonExposure) {\n  \t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\tlogger.debug(\"Eagerly caching bean '\" + beanName +\n  \t\t\t\t\t\t\"' to allow for resolving potential circular references\");\n  \t\t\t}\n  \t\t\taddSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean));\n  \t\t}\n  \n  \t\t// Initialize the bean instance.\n  \t\tObject exposedObject = bean;\n  \t\ttry {\n  \t\t\tpopulateBean(beanName, mbd, instanceWrapper);\n  \t\t\texposedObject = initializeBean(beanName, exposedObject, mbd);\n  \t\t}\n  \t\tcatch (Throwable ex) {\n  \t\t\tif (ex instanceof BeanCreationException && beanName.equals(((BeanCreationException) ex).getBeanName())) {\n  \t\t\t\tthrow (BeanCreationException) ex;\n  \t\t\t}\n  \t\t\telse {\n  \t\t\t\tthrow new BeanCreationException(\n  \t\t\t\t\t\tmbd.getResourceDescription(), beanName, \"Initialization of bean failed\", ex);\n  \t\t\t}\n  \t\t}\n  \n  \t\tif (earlySingletonExposure) {\n  \t\t\tObject earlySingletonReference = getSingleton(beanName, false);\n  \t\t\tif (earlySingletonReference != null) {\n  \t\t\t\tif (exposedObject == bean) {\n  \t\t\t\t\texposedObject = earlySingletonReference;\n  \t\t\t\t}\n  \t\t\t\telse if (!this.allowRawInjectionDespiteWrapping && hasDependentBean(beanName)) {\n  \t\t\t\t\tString[] dependentBeans = getDependentBeans(beanName);\n  \t\t\t\t\tSet<String> actualDependentBeans = new LinkedHashSet<>(dependentBeans.length);\n  \t\t\t\t\tfor (String dependentBean : dependentBeans) {\n  \t\t\t\t\t\tif (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {\n  \t\t\t\t\t\t\tactualDependentBeans.add(dependentBean);\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t\tif (!actualDependentBeans.isEmpty()) {\n  \t\t\t\t\t\tthrow new BeanCurrentlyInCreationException(beanName,\n  \t\t\t\t\t\t\t\t\"Bean with name '\" + beanName + \"' has been injected into other beans [\" +\n  \t\t\t\t\t\t\t\tStringUtils.collectionToCommaDelimitedString(actualDependentBeans) +\n  \t\t\t\t\t\t\t\t\"] in its raw version as part of a circular reference, but has eventually been \" +\n  \t\t\t\t\t\t\t\t\"wrapped. This means that said other beans do not use the final version of the \" +\n  \t\t\t\t\t\t\t\t\"bean. This is often the result of over-eager type matching - consider using \" +\n  \t\t\t\t\t\t\t\t\"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.\");\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \n  \t\t// Register bean as disposable \n  \t\t//将这个dao注册为一次性的bean\n  \t\ttry {\n  \t\t\tregisterDisposableBeanIfNecessary(beanName, bean, mbd);\n  \t\t}\n  \t\tcatch (BeanDefinitionValidationException ex) {\n  \t\t\tthrow new BeanCreationException(\n  \t\t\t\t\tmbd.getResourceDescription(), beanName, \"Invalid destruction signature\", ex);\n  \t\t}\n  \n  \t\treturn exposedObject;\n  \t}\n  \n  \t}\n  \t\n  ```\n\n  **//注册为单例**\n\n  ```\n  \tpublic abstract class AbstractBeanFactory extends FactoryBeanRegistrySupport implements ConfigurableBeanFactory {\n  ...\n  \t/**\n  \t * Add the given bean to the list of disposable beans in this factory,\n  \t * registering its DisposableBean interface and/or the given destroy method\n  \t * to be called on factory shutdown (if applicable). Only applies to singletons.\n  \t * @param beanName the name of the bean\n  \t * @param bean the bean instance\n  \t * @param mbd the bean definition for the bean\n  \t * @see RootBeanDefinition#isSingleton\n  \t * @see RootBeanDefinition#getDependsOn\n  \t * @see #registerDisposableBean\n  \t * @see #registerDependentBean\n  \t */\n  \tprotected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) {\n  \t\tAccessControlContext acc = (System.getSecurityManager() != null ? getAccessControlContext() : null);\n  \t\tif (!mbd.isPrototype() && requiresDestruction(bean, mbd)) {\n  \t\t\tif (mbd.isSingleton()) {\n  \t\t\t\t// Register a DisposableBean implementation that performs all destruction\n  \t\t\t\t// work for the given bean: DestructionAwareBeanPostProcessors,\n  \t\t\t\t// DisposableBean interface, custom destroy method.\n  \t\t\t\tregisterDisposableBean(beanName,\n  \t\t\t\t\t\tnew DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));\n  \t\t\t}\n  \t\t\telse {\n  \t\t\t\t// A bean with a custom scope...\n  \t\t\t\tScope scope = this.scopes.get(mbd.getScope());\n  \t\t\t\tif (scope == null) {\n  \t\t\t\t\tthrow new IllegalStateException(\"No Scope registered for scope name '\" + mbd.getScope() + \"'\");\n  \t\t\t\t}\n  \t\t\t\tscope.registerDestructionCallback(beanName,\n  \t\t\t\t\t\tnew DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));\n  \t\t\t}\n  \t\t}\n  \t}\n  \t...\n  \t}\n  ```\n\n  **当要执行dao层的sql操作时候**\n\n  ```\n  org.apache.ibatis.binding.MapperProxy@14e19901\n  ```\n\n  **这个是一个代理类**\n\n  ```\n  /**\n   *    Copyright 2009-2017 the original author or authors.\n   *\n   *    Licensed under the Apache License, Version 2.0 (the \"License\");\n   *    you may not use this file except in compliance with the License.\n   *    You may obtain a copy of the License at\n   *\n   *       http://www.apache.org/licenses/LICENSE-2.0\n   *\n   *    Unless required by applicable law or agreed to in writing, software\n   *    distributed under the License is distributed on an \"AS IS\" BASIS,\n   *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   *    See the License for the specific language governing permissions and\n   *    limitations under the License.\n   */\n  package org.apache.ibatis.binding;\n  \n  import java.io.Serializable;\n  import java.lang.invoke.MethodHandles;\n  import java.lang.reflect.Constructor;\n  import java.lang.reflect.InvocationHandler;\n  import java.lang.reflect.Method;\n  import java.lang.reflect.Modifier;\n  import java.util.Map;\n  \n  import org.apache.ibatis.lang.UsesJava7;\n  import org.apache.ibatis.reflection.ExceptionUtil;\n  import org.apache.ibatis.session.SqlSession;\n  \n  /**\n   * @author Clinton Begin\n   * @author Eduardo Macarron\n   */\n  public class MapperProxy<T> implements InvocationHandler, Serializable {\n  \n    private static final long serialVersionUID = -6424540398559729838L;\n    private final SqlSession sqlSession;\n    private final Class<T> mapperInterface;\n    private final Map<Method, MapperMethod> methodCache;\n  \n    public MapperProxy(SqlSession sqlSession, Class<T> mapperInterface, Map<Method, MapperMethod> methodCache) {\n      this.sqlSession = sqlSession;\n      this.mapperInterface = mapperInterface;\n      this.methodCache = methodCache;\n    }\n    //具体的sql操作会走这里\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n      try {\n      //判断是否是生命的类\n        if (Object.class.equals(method.getDeclaringClass())) {\n          return method.invoke(this, args);\n          //是否是原生方法\n        } else if (isDefaultMethod(method)) {\n          return invokeDefaultMethod(proxy, method, args);\n        }\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n      //将具体的sql操作缓存并返回\n      final MapperMethod mapperMethod = cachedMapperMethod(method);\n      //进行执行\n      return mapperMethod.execute(sqlSession, args);\n    }\n   //将具体的sql操作method缓存\n    private MapperMethod cachedMapperMethod(Method method) {\n      MapperMethod mapperMethod = methodCache.get(method);\n      if (mapperMethod == null) {\n        mapperMethod = new MapperMethod(mapperInterface, method, sqlSession.getConfiguration());\n        methodCache.put(method, mapperMethod);\n      }\n      return mapperMethod;\n    }\n  \n    @UsesJava7\n    private Object invokeDefaultMethod(Object proxy, Method method, Object[] args)\n        throws Throwable {\n      final Constructor<MethodHandles.Lookup> constructor = MethodHandles.Lookup.class\n          .getDeclaredConstructor(Class.class, int.class);\n      if (!constructor.isAccessible()) {\n        constructor.setAccessible(true);\n      }\n      final Class<?> declaringClass = method.getDeclaringClass();\n      return constructor\n          .newInstance(declaringClass,\n              MethodHandles.Lookup.PRIVATE | MethodHandles.Lookup.PROTECTED\n                  | MethodHandles.Lookup.PACKAGE | MethodHandles.Lookup.PUBLIC)\n          .unreflectSpecial(method, declaringClass).bindTo(proxy).invokeWithArguments(args);\n    }\n  \n    /**\n     * Backport of java.lang.reflect.Method#isDefault()\n     */\n    private boolean isDefaultMethod(Method method) {\n      return ((method.getModifiers()\n          & (Modifier.ABSTRACT | Modifier.PUBLIC | Modifier.STATIC)) == Modifier.PUBLIC)\n          && method.getDeclaringClass().isInterface();\n    }\n  }\n  \n  ```\n\n  **MapperMethod:**\n\n  ```\n  public class MapperMethod {\n  \n    private final SqlCommand command;\n    private final MethodSignature method;\n  \n    public MapperMethod(Class<?> mapperInterface, Method method, Configuration config) {\n      this.command = new SqlCommand(config, mapperInterface, method);\n      this.method = new MethodSignature(config, mapperInterface, method);\n    }\n   //这里进行执行sql\n    public Object execute(SqlSession sqlSession, Object[] args) {\n      Object result;\n      //判断crud操作\n      switch (command.getType()) {\n        case INSERT: {\n      \tObject param = method.convertArgsToSqlCommandParam(args);\n          result = rowCountResult(sqlSession.insert(command.getName(), param));\n          break;\n        }\n        case UPDATE: {\n          Object param = method.convertArgsToSqlCommandParam(args);\n          result = rowCountResult(sqlSession.update(command.getName(), param));\n          break;\n        }\n        case DELETE: {\n          Object param = method.convertArgsToSqlCommandParam(args);\n          result = rowCountResult(sqlSession.delete(command.getName(), param));\n          break;\n        }\n        case SELECT:\n          if (method.returnsVoid() && method.hasResultHandler()) {\n            executeWithResultHandler(sqlSession, args);\n            result = null;\n          } else if (method.returnsMany()) {\n          //这里是一个many的result跳到这里\n            result = executeForMany(sqlSession, args);\n          } else if (method.returnsMap()) {\n            result = executeForMap(sqlSession, args);\n          } else if (method.returnsCursor()) {\n            result = executeForCursor(sqlSession, args);\n          } else {\n            Object param = method.convertArgsToSqlCommandParam(args);\n            result = sqlSession.selectOne(command.getName(), param);\n          }\n          break;\n        case FLUSH:\n          result = sqlSession.flushStatements();\n          break;\n        default:\n          throw new BindingException(\"Unknown execution method for: \" + command.getName());\n      }\n      if (result == null && method.getReturnType().isPrimitive() && !method.returnsVoid()) {\n        throw new BindingException(\"Mapper method '\" + command.getName() \n            + \" attempted to return null from a method with a primitive return type (\" + method.getReturnType() + \").\");\n      }\n      return result;\n    }\n  \n    private Object rowCountResult(int rowCount) {\n      final Object result;\n      if (method.returnsVoid()) {\n        result = null;\n      } else if (Integer.class.equals(method.getReturnType()) || Integer.TYPE.equals(method.getReturnType())) {\n        result = rowCount;\n      } else if (Long.class.equals(method.getReturnType()) || Long.TYPE.equals(method.getReturnType())) {\n        result = (long)rowCount;\n      } else if (Boolean.class.equals(method.getReturnType()) || Boolean.TYPE.equals(method.getReturnType())) {\n        result = rowCount > 0;\n      } else {\n        throw new BindingException(\"Mapper method '\" + command.getName() + \"' has an unsupported return type: \" + method.getReturnType());\n      }\n      return result;\n    }\n  \n    private void executeWithResultHandler(SqlSession sqlSession, Object[] args) {\n      MappedStatement ms = sqlSession.getConfiguration().getMappedStatement(command.getName());\n      if (void.class.equals(ms.getResultMaps().get(0).getType())) {\n        throw new BindingException(\"method \" + command.getName() \n            + \" needs either a @ResultMap annotation, a @ResultType annotation,\" \n            + \" or a resultType attribute in XML so a ResultHandler can be used as a parameter.\");\n      }\n      Object param = method.convertArgsToSqlCommandParam(args);\n      if (method.hasRowBounds()) {\n        RowBounds rowBounds = method.extractRowBounds(args);\n        sqlSession.select(command.getName(), param, rowBounds, method.extractResultHandler(args));\n      } else {\n        sqlSession.select(command.getName(), param, method.extractResultHandler(args));\n      }\n    }\n  \t//多结果集的跳到这里\n    private <E> Object executeForMany(SqlSession sqlSession, Object[] args) {\n      List<E> result;\n      Object param = method.convertArgsToSqlCommandParam(args);\n      if (method.hasRowBounds()) {\n        RowBounds rowBounds = method.extractRowBounds(args);\n        //重点 交给sqlSession进行处理\n        result = sqlSession.<E>selectList(command.getName(), param, rowBounds);\n      } else {\n        result = sqlSession.<E>selectList(command.getName(), param);\n      }\n      // issue #510 Collections & arrays support\n      if (!method.getReturnType().isAssignableFrom(result.getClass())) {\n        if (method.getReturnType().isArray()) {\n          return convertToArray(result);\n        } else {\n          return convertToDeclaredCollection(sqlSession.getConfiguration(), result);\n        }\n      }\n      return result;\n    }\n  \n    private <T> Cursor<T> executeForCursor(SqlSession sqlSession, Object[] args) {\n      Cursor<T> result;\n      Object param = method.convertArgsToSqlCommandParam(args);\n      if (method.hasRowBounds()) {\n        RowBounds rowBounds = method.extractRowBounds(args);\n        result = sqlSession.<T>selectCursor(command.getName(), param, rowBounds);\n      } else {\n        result = sqlSession.<T>selectCursor(command.getName(), param);\n      }\n      return result;\n    }\n  \n    private <E> Object convertToDeclaredCollection(Configuration config, List<E> list) {\n      Object collection = config.getObjectFactory().create(method.getReturnType());\n      MetaObject metaObject = config.newMetaObject(collection);\n      metaObject.addAll(list);\n      return collection;\n    }\n  \n    @SuppressWarnings(\"unchecked\")\n    private <E> Object convertToArray(List<E> list) {\n      Class<?> arrayComponentType = method.getReturnType().getComponentType();\n      Object array = Array.newInstance(arrayComponentType, list.size());\n      if (arrayComponentType.isPrimitive()) {\n        for (int i = 0; i < list.size(); i++) {\n          Array.set(array, i, list.get(i));\n        }\n        return array;\n      } else {\n        return list.toArray((E[])array);\n      }\n    }\n  \n    private <K, V> Map<K, V> executeForMap(SqlSession sqlSession, Object[] args) {\n      Map<K, V> result;\n      Object param = method.convertArgsToSqlCommandParam(args);\n      if (method.hasRowBounds()) {\n        RowBounds rowBounds = method.extractRowBounds(args);\n        result = sqlSession.<K, V>selectMap(command.getName(), param, method.getMapKey(), rowBounds);\n      } else {\n        result = sqlSession.<K, V>selectMap(command.getName(), param, method.getMapKey());\n      }\n      return result;\n    }\n  \n    public static class ParamMap<V> extends HashMap<String, V> {\n  \n      private static final long serialVersionUID = -2212268410512043556L;\n  \n      @Override\n      public V get(Object key) {\n        if (!super.containsKey(key)) {\n          throw new BindingException(\"Parameter '\" + key + \"' not found. Available parameters are \" + keySet());\n        }\n        return super.get(key);\n      }\n  \n    }\n  \n    public static class SqlCommand {\n  \n      private final String name;\n      private final SqlCommandType type;\n  \n      public SqlCommand(Configuration configuration, Class<?> mapperInterface, Method method) {\n        final String methodName = method.getName();\n        final Class<?> declaringClass = method.getDeclaringClass();\n        MappedStatement ms = resolveMappedStatement(mapperInterface, methodName, declaringClass,\n            configuration);\n        if (ms == null) {\n          if (method.getAnnotation(Flush.class) != null) {\n            name = null;\n            type = SqlCommandType.FLUSH;\n          } else {\n            throw new BindingException(\"Invalid bound statement (not found): \"\n                + mapperInterface.getName() + \".\" + methodName);\n          }\n        } else {\n          name = ms.getId();\n          type = ms.getSqlCommandType();\n          if (type == SqlCommandType.UNKNOWN) {\n            throw new BindingException(\"Unknown execution method for: \" + name);\n          }\n        }\n      }\n  \n      public String getName() {\n        return name;\n      }\n  \n      public SqlCommandType getType() {\n        return type;\n      }\n  \n      private MappedStatement resolveMappedStatement(Class<?> mapperInterface, String methodName,\n          Class<?> declaringClass, Configuration configuration) {\n        String statementId = mapperInterface.getName() + \".\" + methodName;\n        if (configuration.hasStatement(statementId)) {\n          return configuration.getMappedStatement(statementId);\n        } else if (mapperInterface.equals(declaringClass)) {\n          return null;\n        }\n        for (Class<?> superInterface : mapperInterface.getInterfaces()) {\n          if (declaringClass.isAssignableFrom(superInterface)) {\n            MappedStatement ms = resolveMappedStatement(superInterface, methodName,\n                declaringClass, configuration);\n            if (ms != null) {\n              return ms;\n            }\n          }\n        }\n        return null;\n      }\n    }\n  \n    public static class MethodSignature {\n  \n      private final boolean returnsMany;\n      private final boolean returnsMap;\n      private final boolean returnsVoid;\n      private final boolean returnsCursor;\n      private final Class<?> returnType;\n      private final String mapKey;\n      private final Integer resultHandlerIndex;\n      private final Integer rowBoundsIndex;\n      private final ParamNameResolver paramNameResolver;\n  \n      public MethodSignature(Configuration configuration, Class<?> mapperInterface, Method method) {\n        Type resolvedReturnType = TypeParameterResolver.resolveReturnType(method, mapperInterface);\n        if (resolvedReturnType instanceof Class<?>) {\n          this.returnType = (Class<?>) resolvedReturnType;\n        } else if (resolvedReturnType instanceof ParameterizedType) {\n          this.returnType = (Class<?>) ((ParameterizedType) resolvedReturnType).getRawType();\n        } else {\n          this.returnType = method.getReturnType();\n        }\n        this.returnsVoid = void.class.equals(this.returnType);\n        this.returnsMany = (configuration.getObjectFactory().isCollection(this.returnType) || this.returnType.isArray());\n        this.returnsCursor = Cursor.class.equals(this.returnType);\n        this.mapKey = getMapKey(method);\n        this.returnsMap = (this.mapKey != null);\n        this.rowBoundsIndex = getUniqueParamIndex(method, RowBounds.class);\n        this.resultHandlerIndex = getUniqueParamIndex(method, ResultHandler.class);\n        this.paramNameResolver = new ParamNameResolver(configuration, method);\n      }\n  \n      public Object convertArgsToSqlCommandParam(Object[] args) {\n        return paramNameResolver.getNamedParams(args);\n      }\n  \n      public boolean hasRowBounds() {\n        return rowBoundsIndex != null;\n      }\n  \n      public RowBounds extractRowBounds(Object[] args) {\n        return hasRowBounds() ? (RowBounds) args[rowBoundsIndex] : null;\n      }\n  \n      public boolean hasResultHandler() {\n        return resultHandlerIndex != null;\n      }\n  \n      public ResultHandler extractResultHandler(Object[] args) {\n        return hasResultHandler() ? (ResultHandler) args[resultHandlerIndex] : null;\n      }\n  \n      public String getMapKey() {\n        return mapKey;\n      }\n  \n      public Class<?> getReturnType() {\n        return returnType;\n      }\n  \n      public boolean returnsMany() {\n        return returnsMany;\n      }\n  \n      public boolean returnsMap() {\n        return returnsMap;\n      }\n  \n      public boolean returnsVoid() {\n        return returnsVoid;\n      }\n  \n      public boolean returnsCursor() {\n        return returnsCursor;\n      }\n  \n      private Integer getUniqueParamIndex(Method method, Class<?> paramType) {\n        Integer index = null;\n        final Class<?>[] argTypes = method.getParameterTypes();\n        for (int i = 0; i < argTypes.length; i++) {\n          if (paramType.isAssignableFrom(argTypes[i])) {\n            if (index == null) {\n              index = i;\n            } else {\n              throw new BindingException(method.getName() + \" cannot have multiple \" + paramType.getSimpleName() + \" parameters\");\n            }\n          }\n        }\n        return index;\n      }\n  \n      private String getMapKey(Method method) {\n        String mapKey = null;\n        if (Map.class.isAssignableFrom(method.getReturnType())) {\n          final MapKey mapKeyAnnotation = method.getAnnotation(MapKey.class);\n          if (mapKeyAnnotation != null) {\n            mapKey = mapKeyAnnotation.value();\n          }\n        }\n        return mapKey;\n      }\n    }\n  \n  }\n  \n  ```\n\n  **上述的sqlsession的操作跳到 DefaultSqlSession **\n\n  ```\n  public class DefaultSqlSession implements SqlSession {\n  ...\n    @Override\n    public <E> List<E> selectList(String statement, Object parameter) {\n      return this.selectList(statement, parameter, RowBounds.DEFAULT);\n    }\n    @Override\n    public <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds) {\n      try {\n      //根据语句statement拿到MappedStatement\n        MappedStatement ms = configuration.getMappedStatement(statement);\n        //重点来了 executor执行器来执行具体的sql\n        return ,executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);\n      } catch (Exception e) {\n        throw ExceptionFactory.wrapException(\"Error querying database.  Cause: \" + e, e);\n      } finally {\n        ErrorContext.instance().reset();\n      }\n    }\n    ...\n    }\n  ```\n\n  **executor有两个实现：BaseExecutor 和CachingExecutor**\n\n  **这里走CachingExecutor：**\n\n  ```\n  public class CachingExecutor implements Executor {\n  ...\n    @Override\n    public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {\n    //拿到sql boundSql里面存储有要执行的sql\n      BoundSql boundSql = ms.getBoundSql(parameterObject);\n      CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);\n      //返回具体的query方法的执行结果集\n      return query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n    }\n    //缓存sql\n      @Override\n    public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql) {\n        //没有的话走BaseExecutor\n      return delegate.createCacheKey(ms, parameterObject, rowBounds, boundSql);\n    }\n    //具体的query方法\n      @Override\n    public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)\n        throws SQLException {\n      Cache cache = ms.getCache();\n      //这里用到缓存 看之前是否用过sql查询 有的话酒从缓存拿了\n      if (cache != null) {\n        flushCacheIfRequired(ms);\n        if (ms.isUseCache() && resultHandler == null) {\n          ensureNoOutParams(ms, parameterObject, boundSql);\n          @SuppressWarnings(\"unchecked\")\n          List<E> list = (List<E>) tcm.getObject(cache, key);\n          if (list == null) {\n            list = delegate.<E> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n            tcm.putObject(cache, key, list); // issue #578 and #116\n          }\n          return list;\n        }\n      }\n      //没有的话走BaseExecutor\n      return delegate.<E> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n    }\n  \n  ```\n\n  **BaseExecutor：**\n\n  ```\n  //如果没有缓存走这里的query\n  @SuppressWarnings(\"unchecked\")\n    @Override\n    public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n      ErrorContext.instance().resource(ms.getResource()).activity(\"executing a query\").object(ms.getId());\n      if (closed) {\n        throw new ExecutorException(\"Executor was closed.\");\n      }\n      if (queryStack == 0 && ms.isFlushCacheRequired()) {\n        clearLocalCache();\n      }\n      List<E> list;\n      try {\n        queryStack++;\n        list = resultHandler == null ? (List<E>) localCache.getObject(key) : null;\n        if (list != null) {\n          handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);\n        } else {\n          list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);\n        }\n      } finally {\n        queryStack--;\n      }\n      if (queryStack == 0) {\n        for (DeferredLoad deferredLoad : deferredLoads) {\n          deferredLoad.load();\n        }\n        // issue #601\n        deferredLoads.clear();\n        if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {\n          // issue #482\n          clearLocalCache();\n        }\n      }\n      return list;\n    }\n  \n    //再往里的queryFromDatabase\n    private <E> List<E> queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n      List<E> list;\n      localCache.putObject(key, EXECUTION_PLACEHOLDER);\n      try {\n      //这里再次跳转 走SimpleExecutor\n        list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);\n      } finally {\n        localCache.removeObject(key);\n      }\n      localCache.putObject(key, list);\n      if (ms.getStatementType() == StatementType.CALLABLE) {\n        localOutputParameterCache.putObject(key, parameter);\n      }\n      return list;\n    }\n   ...\n   }\n  ```\n\n  **SimpleExecutor:类似的类还有ReuseExecutor，ClosedExecutor，BatchExecutor 都是BaseExecutor的子类**\n\n  **值得一提的是再openSessionFromConnection或openSessionFromConnection的时候就会创建一个新的executor并制定类型:**\n\n  ```\n    public Executor newExecutor(Transaction transaction, ExecutorType executorType) {\n      executorType = executorType == null ? defaultExecutorType : executorType;\n      executorType = executorType == null ? ExecutorType.SIMPLE : executorType;\n      Executor executor;\n      if (ExecutorType.BATCH == executorType) {\n        executor = new BatchExecutor(this, transaction);\n      } else if (ExecutorType.REUSE == executorType) {\n        executor = new ReuseExecutor(this, transaction);\n      } else {\n        executor = new SimpleExecutor(this, transaction);\n      }\n      if (cacheEnabled) {\n        executor = new CachingExecutor(executor);\n      }\n      executor = (Executor) interceptorChain.pluginAll(executor);\n      return executor;\n    }\n  ```\n\n  ```\n    @Override\n    public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {\n      Statement stmt = null;\n      try {\n        Configuration configuration = ms.getConfiguration();\n       //获得一个StatementHandler\n        StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);\n       //进行预编译sql\n        stmt = prepareStatement(handler, ms.getStatementLog());\n        //交给handler去执行\n        return handler.<E>query(stmt, resultHandler);\n      } finally {\n        closeStatement(stmt);\n      }\n    }\n          //进行预编译sql\n      private Statement prepareStatement(StatementHandler handler, Log statementLog) throws SQLException {\n      Statement stmt;\n      Connection connection = getConnection(statementLog);\n      stmt = handler.prepare(connection, transaction.getTimeout());\n      handler.parameterize(stmt);\n      return stmt;\n    }\n  ```\n\n  **交给StatementHandler去执行了,有几个实现类：这里走的PreparedStatementHandler**\n\n  ```\n   public class PreparedStatementHandler extends BaseStatementHandler {\n  ...\n   @Override\n    public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {\n      PreparedStatement ps = (PreparedStatement) statement;\n      ps.execute();\n      return resultSetHandler.<E> handleResultSets(ps);\n    }\n    ...\n    }\n  ```\n\n  **最后交给DefaultResultSetHandler来做**\n\n  ```\n  public class DefaultResultSetHandler implements ResultSetHandler {\n  \n    @Override\n    public List<Object> handleResultSets(Statement stmt) throws SQLException {\n      ErrorContext.instance().activity(\"handling results\").object(mappedStatement.getId());\n  \n      final List<Object> multipleResults = new ArrayList<Object>();\n  \n      int resultSetCount = 0;\n      ResultSetWrapper rsw = getFirstResultSet(stmt);\n  \n      List<ResultMap> resultMaps = mappedStatement.getResultMaps();\n      int resultMapCount = resultMaps.size();\n      validateResultMapsCount(rsw, resultMapCount);\n      while (rsw != null && resultMapCount > resultSetCount) {\n        ResultMap resultMap = resultMaps.get(resultSetCount);\n        handleResultSet(rsw, resultMap, multipleResults, null);\n        rsw = getNextResultSet(stmt);\n        cleanUpAfterHandlingResultSet();\n        resultSetCount++;\n      }\n  \n      String[] resultSets = mappedStatement.getResultSets();\n      if (resultSets != null) {\n        while (rsw != null && resultSetCount < resultSets.length) {\n          ResultMapping parentMapping = nextResultMaps.get(resultSets[resultSetCount]);\n          if (parentMapping != null) {\n            String nestedResultMapId = parentMapping.getNestedResultMapId();\n            ResultMap resultMap = configuration.getResultMap(nestedResultMapId);\n            handleResultSet(rsw, resultMap, null, parentMapping);\n          }\n          rsw = getNextResultSet(stmt);\n          cleanUpAfterHandlingResultSet();\n          resultSetCount++;\n        }\n      }\n  \n      return collapseSingleResultList(multipleResults);\n    }\n      @SuppressWarnings(\"unchecked\")\n    private List<Object> collapseSingleResultList(List<Object> multipleResults) {\n      return multipleResults.size() == 1 ? (List<Object>) multipleResults.get(0) : multipleResults;\n    }\n  \n  \n  ```\n\n  **整体流程**\n\n  **Mapper.selectOne()-->MapperProxy.invoke-->mapperMethod-->SqlSession.selectOne-->Executor.query()-->SimpleExecutor.doQuery-->PreparedStatementHandler.query-->DefaultResultSetHandler.query**\n\n  ","source":"_posts/Mybatis源码分析-二.md","raw":"---\ntitle: Mybatis源码分析(二)\ndate: 2018-11-07 18:22:20\ntags: Mybatis\ncategories: Mybatis\n---\n\nMybatis源码分析二<!--more-->\n\n**基于3.4.5版本。与springboot2.0.5 mybatis-spring1.3.2**\n\n* 主要的核心类\n  * **Configuration: MyBatis 所有的配置信息都维持在 Configuration 对象之中。**\n  * **SqlSession :作为 MyBatis 工作的主要顶层 API，表示和数据库交互的会话，完成必要数据库增删改查功能**\n  * **Executor :MyBatis 执行器，是 MyBatis 调度的核心，负责 SQL 语句的生成和查询缓存的维护**\n  * **StatementHandler :封装了 JDBC Statement 操作，负责对 JDBC statement 的操作，如设置参数、将 Statement 结果集转换成 List 集合。**\n  * **ParameterHandler :负责对用户传递的参数转换成 JDBC Statement 所需要的参数 **\n  * **ResultSetHandler :负责将 JDBC 返回的 ResultSet 结果集对象转换成 List 类型的集合**\n  * **TypeHandler:负责 java 数据类型和 jdbc 数据类型之间的映射和转换**\n  * **MappedStatement :MappedStatement 维护了一条 <select|update|delete|insert> 节点的封装**\n  * **SqlSource :负责根据用户传递的 parameterObject，动态地生成 SQL 语句，将信息封装到 BoundSql 对象中并返回**\n  * **BoundSql :表示动态生成的 SQL 语句以及相应的参数信息**\n\n* **Mybatis启动过程**\n\n  **这个类是个建造者 会创建sqlsessionFactory,提供了挺多的build方法。**\n\n  上源码\n\n  ```\n  public class SqlSessionFactoryBuilder {\n  ...\n   public SqlSessionFactory build(Reader reader) {\n      return build(reader, null, null);\n    }\n  \n    public SqlSessionFactory build(Reader reader, String environment) {\n      return build(reader, environment, null);\n    }\n  \n    public SqlSessionFactory build(Reader reader, Properties properties) {\n      return build(reader, null, properties);\n    }\n  \n    public SqlSessionFactory build(Reader reader, String environment, Properties properties) {\n      try {\n        XMLConfigBuilder parser = new XMLConfigBuilder(reader, environment, properties);\n        //注意这里的parser.parse();\n        return build(parser.parse());\n      } catch (Exception e) {\n        throw ExceptionFactory.wrapException(\"Error building SqlSession.\", e);\n      } finally {\n        //重置错误上下文实例\n        ErrorContext.instance().reset();\n        try {\n          reader.close();\n        } catch (IOException e) {\n          // Intentionally ignore. Prefer previous error.\n        }\n      }\n    }\n    //parse方法\n    public Configuration parse() {\n      if (parsed) {\n        throw new BuilderException(\"Each XMLConfigBuilder can only be used once.\");\n      }\n      parsed = true;\n      parseConfiguration(parser.evalNode(\"/configuration\"));\n      return configuration;\n    }\n   //具体的解析\n    private void parseConfiguration(XNode root) {\n      try {\n        //issue #117 read properties first\n        // 解析<properties>节点\n        propertiesElement(root.evalNode(\"properties\"));\n        //解析settings节点\n        Properties settings = settingsAsProperties(root.evalNode(\"settings\"));\n        //加载自定义的settings\n        loadCustomVfs(settings);\n        /// 解析<typeAliases>节点\n        typeAliasesElement(root.evalNode(\"typeAliases\"));\n        // 解析<plugins>节点\n        pluginElement(root.evalNode(\"plugins\"));\n        // 解析<objectFactory>节点\n        objectFactoryElement(root.evalNode(\"objectFactory\"));\n        objectWrapperFactoryElement(root.evalNode(\"objectWrapperFactory\"));\n        // 解析<reflectorFactory>节点\n        reflectorFactoryElement(root.evalNode(\"reflectorFactory\"));\n        settingsElement(settings);\n         // 解析<environments>节点\n        // read it after objectFactory and objectWrapperFactory issue #631\n        environmentsElement(root.evalNode(\"environments\"));\n        //多数据源的话解析dbid\n        databaseIdProviderElement(root.evalNode(\"databaseIdProvider\"));\n        typeHandlerElement(root.evalNode(\"typeHandlers\"));\n         // 解析<mappers>节点\n        mapperElement(root.evalNode(\"mappers\"));\n      } catch (Exception e) {\n        throw new BuilderException(\"Error parsing SQL Mapper Configuration. Cause: \" + e, e);\n      }\n    }\n  \n    public SqlSessionFactory build(InputStream inputStream) {\n      return build(inputStream, null, null);\n    }\n  \n    public SqlSessionFactory build(InputStream inputStream, String environment) {\n      return build(inputStream, environment, null);\n    }\n  \n    public SqlSessionFactory build(InputStream inputStream, Properties properties) {\n      return build(inputStream, null, properties);\n    }\n  \n    public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {\n      try {\n        XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);\n        return build(parser.parse());\n      } catch (Exception e) {\n        throw ExceptionFactory.wrapException(\"Error building SqlSession.\", e);\n      } finally {\n        ErrorContext.instance().reset();\n        try {\n          inputStream.close();\n        } catch (IOException e) {\n          // Intentionally ignore. Prefer previous error.\n        }\n      }\n    }\n  ```\n\n  **在项目启动的适合，我这里用的springboot集成的项目当然配置文件是写在application.properties的，springmvc项目一般在xml文件中配置的**\n\n  ```\n  ...\n  mybatis.type-aliases-package=com.convergence.domain\n  mybatis.mapper-locations=classpath:/mapper/*.xml\n  mybatis.config-location=\n  mybatis.configuration.map-underscore-to-camel-case=true\n  mybatis.configuration.multiple-result-sets-enabled=true\n  mybatis.configuration.useColumnLabel=true\n  ...\n  ```\n\n  **创建factory**\n\n  ```\n    public class SqlSessionFactoryBuilder {\n    ...\n    public SqlSessionFactory build(Configuration config) {\n      return new DefaultSqlSessionFactory(config);\n    }\n    ...\n    }\n  ```\n\n  **Configuration类记录了mybatis的一些配置**\n\n  ```\n  /**\n   *    Copyright 2009-2017 the original author or authors.\n   *\n   *    Licensed under the Apache License, Version 2.0 (the \"License\");\n   *    you may not use this file except in compliance with the License.\n   *    You may obtain a copy of the License at\n   *\n   *       http://www.apache.org/licenses/LICENSE-2.0\n   *\n   *    Unless required by applicable law or agreed to in writing, software\n   *    distributed under the License is distributed on an \"AS IS\" BASIS,\n   *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   *    See the License for the specific language governing permissions and\n   *    limitations under the License.\n   */\n  package org.apache.ibatis.session;\n  \n  import java.util.Arrays;\n  import java.util.Collection;\n  import java.util.HashMap;\n  import java.util.HashSet;\n  import java.util.LinkedList;\n  import java.util.List;\n  import java.util.Map;\n  import java.util.Properties;\n  import java.util.Set;\n  \n  import org.apache.ibatis.binding.MapperRegistry;\n  import org.apache.ibatis.builder.CacheRefResolver;\n  import org.apache.ibatis.builder.ResultMapResolver;\n  import org.apache.ibatis.builder.annotation.MethodResolver;\n  import org.apache.ibatis.builder.xml.XMLStatementBuilder;\n  import org.apache.ibatis.cache.Cache;\n  import org.apache.ibatis.cache.decorators.FifoCache;\n  import org.apache.ibatis.cache.decorators.LruCache;\n  import org.apache.ibatis.cache.decorators.SoftCache;\n  import org.apache.ibatis.cache.decorators.WeakCache;\n  import org.apache.ibatis.cache.impl.PerpetualCache;\n  import org.apache.ibatis.datasource.jndi.JndiDataSourceFactory;\n  import org.apache.ibatis.datasource.pooled.PooledDataSourceFactory;\n  import org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;\n  import org.apache.ibatis.executor.BatchExecutor;\n  import org.apache.ibatis.executor.CachingExecutor;\n  import org.apache.ibatis.executor.Executor;\n  import org.apache.ibatis.executor.ReuseExecutor;\n  import org.apache.ibatis.executor.SimpleExecutor;\n  import org.apache.ibatis.executor.keygen.KeyGenerator;\n  import org.apache.ibatis.executor.loader.ProxyFactory;\n  import org.apache.ibatis.executor.loader.cglib.CglibProxyFactory;\n  import org.apache.ibatis.executor.loader.javassist.JavassistProxyFactory;\n  import org.apache.ibatis.executor.parameter.ParameterHandler;\n  import org.apache.ibatis.executor.resultset.DefaultResultSetHandler;\n  import org.apache.ibatis.executor.resultset.ResultSetHandler;\n  import org.apache.ibatis.executor.statement.RoutingStatementHandler;\n  import org.apache.ibatis.executor.statement.StatementHandler;\n  import org.apache.ibatis.io.VFS;\n  import org.apache.ibatis.logging.Log;\n  import org.apache.ibatis.logging.LogFactory;\n  import org.apache.ibatis.logging.commons.JakartaCommonsLoggingImpl;\n  import org.apache.ibatis.logging.jdk14.Jdk14LoggingImpl;\n  import org.apache.ibatis.logging.log4j.Log4jImpl;\n  import org.apache.ibatis.logging.log4j2.Log4j2Impl;\n  import org.apache.ibatis.logging.nologging.NoLoggingImpl;\n  import org.apache.ibatis.logging.slf4j.Slf4jImpl;\n  import org.apache.ibatis.logging.stdout.StdOutImpl;\n  import org.apache.ibatis.mapping.BoundSql;\n  import org.apache.ibatis.mapping.Environment;\n  import org.apache.ibatis.mapping.MappedStatement;\n  import org.apache.ibatis.mapping.ParameterMap;\n  import org.apache.ibatis.mapping.ResultMap;\n  import org.apache.ibatis.mapping.VendorDatabaseIdProvider;\n  import org.apache.ibatis.parsing.XNode;\n  import org.apache.ibatis.plugin.Interceptor;\n  import org.apache.ibatis.plugin.InterceptorChain;\n  import org.apache.ibatis.reflection.DefaultReflectorFactory;\n  import org.apache.ibatis.reflection.MetaObject;\n  import org.apache.ibatis.reflection.ReflectorFactory;\n  import org.apache.ibatis.reflection.factory.DefaultObjectFactory;\n  import org.apache.ibatis.reflection.factory.ObjectFactory;\n  import org.apache.ibatis.reflection.wrapper.DefaultObjectWrapperFactory;\n  import org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory;\n  import org.apache.ibatis.scripting.LanguageDriver;\n  import org.apache.ibatis.scripting.LanguageDriverRegistry;\n  import org.apache.ibatis.scripting.defaults.RawLanguageDriver;\n  import org.apache.ibatis.scripting.xmltags.XMLLanguageDriver;\n  import org.apache.ibatis.transaction.Transaction;\n  import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;\n  import org.apache.ibatis.transaction.managed.ManagedTransactionFactory;\n  import org.apache.ibatis.type.JdbcType;\n  import org.apache.ibatis.type.TypeAliasRegistry;\n  import org.apache.ibatis.type.TypeHandler;\n  import org.apache.ibatis.type.TypeHandlerRegistry;\n  \n  /**\n   * @author Clinton Begin\n   */\n  public class Configuration {\n    //上下文环境对象\n    protected Environment environment;\n  \n    protected boolean safeRowBoundsEnabled;\n    protected boolean safeResultHandlerEnabled = true;\n    protected boolean mapUnderscoreToCamelCase;\n    //当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载\n    protected boolean aggressiveLazyLoading;\n    //允许或不允许多种结果集从一个单独的语句中返回（需要适合的驱动）。\n    protected boolean multipleResultSetsEnabled = true;\n    //允许 JDBC 支持生成的键。需要适合的驱动。如果设置为 true 则这个设置强制生成的键被使用，尽管一些\t//驱动拒绝兼容但仍然有效（比如 Derby\n    protected boolean useGeneratedKeys;\n    //使用列标签代替列名。不同的驱动在这方便表现不同。参考驱动文档或充分测试两种方法来决定所使用的驱动\n    protected boolean useColumnLabel = true;\n    //是否全局启用缓存 默认开启\n    protected boolean cacheEnabled = true;\n    protected boolean callSettersOnNulls;\n    protected boolean useActualParamName = true;\n    protected boolean returnInstanceForEmptyRow;\n  \n    protected String logPrefix;\n    protected Class <? extends Log> logImpl;\n    protected Class <? extends VFS> vfsImpl;\n    protected LocalCacheScope localCacheScope = LocalCacheScope.SESSION;\n    protected JdbcType jdbcTypeForNull = JdbcType.OTHER;\n    protected Set<String> lazyLoadTriggerMethods = new HashSet<String>(Arrays.asList(new String[] { \"equals\", \"clone\", \"hashCode\", \"toString\" }));\n    protected Integer defaultStatementTimeout;\n    protected Integer defaultFetchSize;\n    protected ExecutorType defaultExecutorType = ExecutorType.SIMPLE;\n    //指定 MyBatis 如何自动映射列到字段 / 属性。PARTIAL 只会自动映射简单，没有嵌套的结果。FULL 会自//动映射任意复杂的结果（嵌套的或其他情况）。\n    protected AutoMappingBehavior autoMappingBehavior = AutoMappingBehavior.PARTIAL;\n    protected AutoMappingUnknownColumnBehavior autoMappingUnknownColumnBehavior = AutoMappingUnknownColumnBehavior.NONE;\n  \n    protected Properties variables = new Properties();\n    protected ReflectorFactory reflectorFactory = new DefaultReflectorFactory();\n    protected ObjectFactory objectFactory = new DefaultObjectFactory();\n    protected ObjectWrapperFactory objectWrapperFactory = new DefaultObjectWrapperFactory();\n    //全局是否启用活禁用懒加载，默认关闭 \n    protected boolean lazyLoadingEnabled = false;\n    protected ProxyFactory proxyFactory = new JavassistProxyFactory(); // #224 Using internal Javassist instead of OGNL\n  \n    protected String databaseId;\n    /**\n     * Configuration factory class.\n     * Used to create Configuration for loading deserialized unread properties.\n     *\n     * @see <a href='https://code.google.com/p/mybatis/issues/detail?id=300'>Issue 300 (google code)</a>\n     */\n    protected Class<?> configurationFactory;\n  \n    protected final MapperRegistry mapperRegistry = new MapperRegistry(this);\n    protected final InterceptorChain interceptorChain = new InterceptorChain();\n    protected final TypeHandlerRegistry typeHandlerRegistry = new TypeHandlerRegistry();\n    protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry();\n    protected final LanguageDriverRegistry languageRegistry = new LanguageDriverRegistry();\n  \n    protected final Map<String, MappedStatement> mappedStatements = new StrictMap<MappedStatement>(\"Mapped Statements collection\");\n    protected final Map<String, Cache> caches = new StrictMap<Cache>(\"Caches collection\");\n    protected final Map<String, ResultMap> resultMaps = new StrictMap<ResultMap>(\"Result Maps collection\");\n    protected final Map<String, ParameterMap> parameterMaps = new StrictMap<ParameterMap>(\"Parameter Maps collection\");\n    protected final Map<String, KeyGenerator> keyGenerators = new StrictMap<KeyGenerator>(\"Key Generators collection\");\n  \n    protected final Set<String> loadedResources = new HashSet<String>();\n    protected final Map<String, XNode> sqlFragments = new StrictMap<XNode>(\"XML fragments parsed from previous mappers\");\n  \n    protected final Collection<XMLStatementBuilder> incompleteStatements = new LinkedList<XMLStatementBuilder>();\n    protected final Collection<CacheRefResolver> incompleteCacheRefs = new LinkedList<CacheRefResolver>();\n    protected final Collection<ResultMapResolver> incompleteResultMaps = new LinkedList<ResultMapResolver>();\n    protected final Collection<MethodResolver> incompleteMethods = new LinkedList<MethodResolver>();\n  \n    /*\n     * A map holds cache-ref relationship. The key is the namespace that\n     * references a cache bound to another namespace and the value is the\n     * namespace which the actual cache is bound to.\n     */\n    protected final Map<String, String> cacheRefMap = new HashMap<String, String>();\n  \n    public Configuration(Environment environment) {\n      this();\n      this.environment = environment;\n    }\n  \n    public Configuration() {\n      typeAliasRegistry.registerAlias(\"JDBC\", JdbcTransactionFactory.class);\n      typeAliasRegistry.registerAlias(\"MANAGED\", ManagedTransactionFactory.class);\n  \n      typeAliasRegistry.registerAlias(\"JNDI\", JndiDataSourceFactory.class);\n      typeAliasRegistry.registerAlias(\"POOLED\", PooledDataSourceFactory.class);\n      typeAliasRegistry.registerAlias(\"UNPOOLED\", UnpooledDataSourceFactory.class);\n  \n      typeAliasRegistry.registerAlias(\"PERPETUAL\", PerpetualCache.class);\n      typeAliasRegistry.registerAlias(\"FIFO\", FifoCache.class);\n      typeAliasRegistry.registerAlias(\"LRU\", LruCache.class);\n      typeAliasRegistry.registerAlias(\"SOFT\", SoftCache.class);\n      typeAliasRegistry.registerAlias(\"WEAK\", WeakCache.class);\n  \n      typeAliasRegistry.registerAlias(\"DB_VENDOR\", VendorDatabaseIdProvider.class);\n  \n      typeAliasRegistry.registerAlias(\"XML\", XMLLanguageDriver.class);\n      typeAliasRegistry.registerAlias(\"RAW\", RawLanguageDriver.class);\n  \n      typeAliasRegistry.registerAlias(\"SLF4J\", Slf4jImpl.class);\n      typeAliasRegistry.registerAlias(\"COMMONS_LOGGING\", JakartaCommonsLoggingImpl.class);\n      typeAliasRegistry.registerAlias(\"LOG4J\", Log4jImpl.class);\n      typeAliasRegistry.registerAlias(\"LOG4J2\", Log4j2Impl.class);\n      typeAliasRegistry.registerAlias(\"JDK_LOGGING\", Jdk14LoggingImpl.class);\n      typeAliasRegistry.registerAlias(\"STDOUT_LOGGING\", StdOutImpl.class);\n      typeAliasRegistry.registerAlias(\"NO_LOGGING\", NoLoggingImpl.class);\n  \n      typeAliasRegistry.registerAlias(\"CGLIB\", CglibProxyFactory.class);\n      typeAliasRegistry.registerAlias(\"JAVASSIST\", JavassistProxyFactory.class);\n  \n      languageRegistry.setDefaultDriverClass(XMLLanguageDriver.class);\n      languageRegistry.register(RawLanguageDriver.class);\n    }\n  \n    public String getLogPrefix() {\n      return logPrefix;\n    }\n  \n    public void setLogPrefix(String logPrefix) {\n      this.logPrefix = logPrefix;\n    }\n  \n    public Class<? extends Log> getLogImpl() {\n      return logImpl;\n    }\n  \n    public void setLogImpl(Class<? extends Log> logImpl) {\n      if (logImpl != null) {\n        this.logImpl = logImpl;\n        LogFactory.useCustomLogging(this.logImpl);\n      }\n    }\n  \n    public Class<? extends VFS> getVfsImpl() {\n      return this.vfsImpl;\n    }\n  \n    public void setVfsImpl(Class<? extends VFS> vfsImpl) {\n      if (vfsImpl != null) {\n        this.vfsImpl = vfsImpl;\n        VFS.addImplClass(this.vfsImpl);\n      }\n    }\n  \n    public boolean isCallSettersOnNulls() {\n      return callSettersOnNulls;\n    }\n  \n    public void setCallSettersOnNulls(boolean callSettersOnNulls) {\n      this.callSettersOnNulls = callSettersOnNulls;\n    }\n  \n    public boolean isUseActualParamName() {\n      return useActualParamName;\n    }\n  \n    public void setUseActualParamName(boolean useActualParamName) {\n      this.useActualParamName = useActualParamName;\n    }\n  \n    public boolean isReturnInstanceForEmptyRow() {\n      return returnInstanceForEmptyRow;\n    }\n  \n    public void setReturnInstanceForEmptyRow(boolean returnEmptyInstance) {\n      this.returnInstanceForEmptyRow = returnEmptyInstance;\n    }\n  \n    public String getDatabaseId() {\n      return databaseId;\n    }\n  \n    public void setDatabaseId(String databaseId) {\n      this.databaseId = databaseId;\n    }\n  \n    public Class<?> getConfigurationFactory() {\n      return configurationFactory;\n    }\n  \n    public void setConfigurationFactory(Class<?> configurationFactory) {\n      this.configurationFactory = configurationFactory;\n    }\n  \n    public boolean isSafeResultHandlerEnabled() {\n      return safeResultHandlerEnabled;\n    }\n  \n    public void setSafeResultHandlerEnabled(boolean safeResultHandlerEnabled) {\n      this.safeResultHandlerEnabled = safeResultHandlerEnabled;\n    }\n  \n    public boolean isSafeRowBoundsEnabled() {\n      return safeRowBoundsEnabled;\n    }\n  \n    public void setSafeRowBoundsEnabled(boolean safeRowBoundsEnabled) {\n      this.safeRowBoundsEnabled = safeRowBoundsEnabled;\n    }\n  \n    public boolean isMapUnderscoreToCamelCase() {\n      return mapUnderscoreToCamelCase;\n    }\n  \n    public void setMapUnderscoreToCamelCase(boolean mapUnderscoreToCamelCase) {\n      this.mapUnderscoreToCamelCase = mapUnderscoreToCamelCase;\n    }\n  \n    public void addLoadedResource(String resource) {\n      loadedResources.add(resource);\n    }\n  \n    public boolean isResourceLoaded(String resource) {\n      return loadedResources.contains(resource);\n    }\n  \n    public Environment getEnvironment() {\n      return environment;\n    }\n  \n    public void setEnvironment(Environment environment) {\n      this.environment = environment;\n    }\n  \n    public AutoMappingBehavior getAutoMappingBehavior() {\n      return autoMappingBehavior;\n    }\n  \n    public void setAutoMappingBehavior(AutoMappingBehavior autoMappingBehavior) {\n      this.autoMappingBehavior = autoMappingBehavior;\n    }\n  \n    /**\n     * @since 3.4.0\n     */\n    public AutoMappingUnknownColumnBehavior getAutoMappingUnknownColumnBehavior() {\n      return autoMappingUnknownColumnBehavior;\n    }\n  \n    /**\n     * @since 3.4.0\n     */\n    public void setAutoMappingUnknownColumnBehavior(AutoMappingUnknownColumnBehavior autoMappingUnknownColumnBehavior) {\n      this.autoMappingUnknownColumnBehavior = autoMappingUnknownColumnBehavior;\n    }\n  \n    public boolean isLazyLoadingEnabled() {\n      return lazyLoadingEnabled;\n    }\n  \n    public void setLazyLoadingEnabled(boolean lazyLoadingEnabled) {\n      this.lazyLoadingEnabled = lazyLoadingEnabled;\n    }\n  \n    public ProxyFactory getProxyFactory() {\n      return proxyFactory;\n    }\n  \n    public void setProxyFactory(ProxyFactory proxyFactory) {\n      if (proxyFactory == null) {\n        proxyFactory = new JavassistProxyFactory();\n      }\n      this.proxyFactory = proxyFactory;\n    }\n  \n    public boolean isAggressiveLazyLoading() {\n      return aggressiveLazyLoading;\n    }\n  \n    public void setAggressiveLazyLoading(boolean aggressiveLazyLoading) {\n      this.aggressiveLazyLoading = aggressiveLazyLoading;\n    }\n  \n    public boolean isMultipleResultSetsEnabled() {\n      return multipleResultSetsEnabled;\n    }\n  \n    public void setMultipleResultSetsEnabled(boolean multipleResultSetsEnabled) {\n      this.multipleResultSetsEnabled = multipleResultSetsEnabled;\n    }\n  \n    public Set<String> getLazyLoadTriggerMethods() {\n      return lazyLoadTriggerMethods;\n    }\n  \n    public void setLazyLoadTriggerMethods(Set<String> lazyLoadTriggerMethods) {\n      this.lazyLoadTriggerMethods = lazyLoadTriggerMethods;\n    }\n  \n    public boolean isUseGeneratedKeys() {\n      return useGeneratedKeys;\n    }\n  \n    public void setUseGeneratedKeys(boolean useGeneratedKeys) {\n      this.useGeneratedKeys = useGeneratedKeys;\n    }\n  \n    public ExecutorType getDefaultExecutorType() {\n      return defaultExecutorType;\n    }\n  \n    public void setDefaultExecutorType(ExecutorType defaultExecutorType) {\n      this.defaultExecutorType = defaultExecutorType;\n    }\n  \n    public boolean isCacheEnabled() {\n      return cacheEnabled;\n    }\n  \n    public void setCacheEnabled(boolean cacheEnabled) {\n      this.cacheEnabled = cacheEnabled;\n    }\n  \n    public Integer getDefaultStatementTimeout() {\n      return defaultStatementTimeout;\n    }\n  \n    public void setDefaultStatementTimeout(Integer defaultStatementTimeout) {\n      this.defaultStatementTimeout = defaultStatementTimeout;\n    }\n  \n    /**\n     * @since 3.3.0\n     */\n    public Integer getDefaultFetchSize() {\n      return defaultFetchSize;\n    }\n  \n    /**\n     * @since 3.3.0\n     */\n    public void setDefaultFetchSize(Integer defaultFetchSize) {\n      this.defaultFetchSize = defaultFetchSize;\n    }\n  \n    public boolean isUseColumnLabel() {\n      return useColumnLabel;\n    }\n  \n    public void setUseColumnLabel(boolean useColumnLabel) {\n      this.useColumnLabel = useColumnLabel;\n    }\n  \n    public LocalCacheScope getLocalCacheScope() {\n      return localCacheScope;\n    }\n  \n    public void setLocalCacheScope(LocalCacheScope localCacheScope) {\n      this.localCacheScope = localCacheScope;\n    }\n  \n    public JdbcType getJdbcTypeForNull() {\n      return jdbcTypeForNull;\n    }\n  \n    public void setJdbcTypeForNull(JdbcType jdbcTypeForNull) {\n      this.jdbcTypeForNull = jdbcTypeForNull;\n    }\n  \n    public Properties getVariables() {\n      return variables;\n    }\n  \n    public void setVariables(Properties variables) {\n      this.variables = variables;\n    }\n  \n    public TypeHandlerRegistry getTypeHandlerRegistry() {\n      return typeHandlerRegistry;\n    }\n  \n    /**\n     * Set a default {@link TypeHandler} class for {@link Enum}.\n     * A default {@link TypeHandler} is {@link org.apache.ibatis.type.EnumTypeHandler}.\n     * @param typeHandler a type handler class for {@link Enum}\n     * @since 3.4.5\n     */\n    public void setDefaultEnumTypeHandler(Class<? extends TypeHandler> typeHandler) {\n      if (typeHandler != null) {\n        getTypeHandlerRegistry().setDefaultEnumTypeHandler(typeHandler);\n      }\n    }\n  \n    public TypeAliasRegistry getTypeAliasRegistry() {\n      return typeAliasRegistry;\n    }\n  \n    /**\n     * @since 3.2.2\n     */\n    public MapperRegistry getMapperRegistry() {\n      return mapperRegistry;\n    }\n  \n    public ReflectorFactory getReflectorFactory() {\n  \t  return reflectorFactory;\n    }\n  \n    public void setReflectorFactory(ReflectorFactory reflectorFactory) {\n  \t  this.reflectorFactory = reflectorFactory;\n    }\n  \n    public ObjectFactory getObjectFactory() {\n      return objectFactory;\n    }\n  \n    public void setObjectFactory(ObjectFactory objectFactory) {\n      this.objectFactory = objectFactory;\n    }\n  \n    public ObjectWrapperFactory getObjectWrapperFactory() {\n      return objectWrapperFactory;\n    }\n  \n    public void setObjectWrapperFactory(ObjectWrapperFactory objectWrapperFactory) {\n      this.objectWrapperFactory = objectWrapperFactory;\n    }\n  \n    /**\n     * @since 3.2.2\n     */\n    public List<Interceptor> getInterceptors() {\n      return interceptorChain.getInterceptors();\n    }\n  \n    public LanguageDriverRegistry getLanguageRegistry() {\n      return languageRegistry;\n    }\n  \n    public void setDefaultScriptingLanguage(Class<?> driver) {\n      if (driver == null) {\n        driver = XMLLanguageDriver.class;\n      }\n      getLanguageRegistry().setDefaultDriverClass(driver);\n    }\n  \n    public LanguageDriver getDefaultScriptingLanguageInstance() {\n      return languageRegistry.getDefaultDriver();\n    }\n  \n    /** @deprecated Use {@link #getDefaultScriptingLanguageInstance()} */\n    @Deprecated\n    public LanguageDriver getDefaultScriptingLanuageInstance() {\n      return getDefaultScriptingLanguageInstance();\n    }\n  \n    public MetaObject newMetaObject(Object object) {\n      return MetaObject.forObject(object, objectFactory, objectWrapperFactory, reflectorFactory);\n    }\n  \n    public ParameterHandler newParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {\n      ParameterHandler parameterHandler = mappedStatement.getLang().createParameterHandler(mappedStatement, parameterObject, boundSql);\n      parameterHandler = (ParameterHandler) interceptorChain.pluginAll(parameterHandler);\n      return parameterHandler;\n    }\n  \n    public ResultSetHandler newResultSetHandler(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds, ParameterHandler parameterHandler,\n        ResultHandler resultHandler, BoundSql boundSql) {\n      ResultSetHandler resultSetHandler = new DefaultResultSetHandler(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);\n      resultSetHandler = (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);\n      return resultSetHandler;\n    }\n  \n    public StatementHandler newStatementHandler(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) {\n      StatementHandler statementHandler = new RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);\n      statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);\n      return statementHandler;\n    }\n  \n    public Executor newExecutor(Transaction transaction) {\n      return newExecutor(transaction, defaultExecutorType);\n    }\n  \n    public Executor newExecutor(Transaction transaction, ExecutorType executorType) {\n      executorType = executorType == null ? defaultExecutorType : executorType;\n      executorType = executorType == null ? ExecutorType.SIMPLE : executorType;\n      Executor executor;\n      if (ExecutorType.BATCH == executorType) {\n        executor = new BatchExecutor(this, transaction);\n      } else if (ExecutorType.REUSE == executorType) {\n        executor = new ReuseExecutor(this, transaction);\n      } else {\n        executor = new SimpleExecutor(this, transaction);\n      }\n      if (cacheEnabled) {\n        executor = new CachingExecutor(executor);\n      }\n      executor = (Executor) interceptorChain.pluginAll(executor);\n      return executor;\n    }\n  \n    public void addKeyGenerator(String id, KeyGenerator keyGenerator) {\n      keyGenerators.put(id, keyGenerator);\n    }\n  \n    public Collection<String> getKeyGeneratorNames() {\n      return keyGenerators.keySet();\n    }\n  \n    public Collection<KeyGenerator> getKeyGenerators() {\n      return keyGenerators.values();\n    }\n  \n    public KeyGenerator getKeyGenerator(String id) {\n      return keyGenerators.get(id);\n    }\n  \n    public boolean hasKeyGenerator(String id) {\n      return keyGenerators.containsKey(id);\n    }\n  \n    public void addCache(Cache cache) {\n      caches.put(cache.getId(), cache);\n    }\n  \n    public Collection<String> getCacheNames() {\n      return caches.keySet();\n    }\n  \n    public Collection<Cache> getCaches() {\n      return caches.values();\n    }\n  \n    public Cache getCache(String id) {\n      return caches.get(id);\n    }\n  \n    public boolean hasCache(String id) {\n      return caches.containsKey(id);\n    }\n  \n    public void addResultMap(ResultMap rm) {\n      resultMaps.put(rm.getId(), rm);\n      checkLocallyForDiscriminatedNestedResultMaps(rm);\n      checkGloballyForDiscriminatedNestedResultMaps(rm);\n    }\n  \n    public Collection<String> getResultMapNames() {\n      return resultMaps.keySet();\n    }\n  \n    public Collection<ResultMap> getResultMaps() {\n      return resultMaps.values();\n    }\n  \n    public ResultMap getResultMap(String id) {\n      return resultMaps.get(id);\n    }\n  \n    public boolean hasResultMap(String id) {\n      return resultMaps.containsKey(id);\n    }\n  \n    public void addParameterMap(ParameterMap pm) {\n      parameterMaps.put(pm.getId(), pm);\n    }\n  \n    public Collection<String> getParameterMapNames() {\n      return parameterMaps.keySet();\n    }\n  \n    public Collection<ParameterMap> getParameterMaps() {\n      return parameterMaps.values();\n    }\n  \n    public ParameterMap getParameterMap(String id) {\n      return parameterMaps.get(id);\n    }\n  \n    public boolean hasParameterMap(String id) {\n      return parameterMaps.containsKey(id);\n    }\n  \n    public void addMappedStatement(MappedStatement ms) {\n      mappedStatements.put(ms.getId(), ms);\n    }\n  \n    public Collection<String> getMappedStatementNames() {\n      buildAllStatements();\n      return mappedStatements.keySet();\n    }\n  \n    public Collection<MappedStatement> getMappedStatements() {\n      buildAllStatements();\n      return mappedStatements.values();\n    }\n  \n    public Collection<XMLStatementBuilder> getIncompleteStatements() {\n      return incompleteStatements;\n    }\n  \n    public void addIncompleteStatement(XMLStatementBuilder incompleteStatement) {\n      incompleteStatements.add(incompleteStatement);\n    }\n  \n    public Collection<CacheRefResolver> getIncompleteCacheRefs() {\n      return incompleteCacheRefs;\n    }\n  \n    public void addIncompleteCacheRef(CacheRefResolver incompleteCacheRef) {\n      incompleteCacheRefs.add(incompleteCacheRef);\n    }\n  \n    public Collection<ResultMapResolver> getIncompleteResultMaps() {\n      return incompleteResultMaps;\n    }\n  \n    public void addIncompleteResultMap(ResultMapResolver resultMapResolver) {\n      incompleteResultMaps.add(resultMapResolver);\n    }\n  \n    public void addIncompleteMethod(MethodResolver builder) {\n      incompleteMethods.add(builder);\n    }\n  \n    public Collection<MethodResolver> getIncompleteMethods() {\n      return incompleteMethods;\n    }\n  \n    public MappedStatement getMappedStatement(String id) {\n      return this.getMappedStatement(id, true);\n    }\n  \n    public MappedStatement getMappedStatement(String id, boolean validateIncompleteStatements) {\n      if (validateIncompleteStatements) {\n        buildAllStatements();\n      }\n      return mappedStatements.get(id);\n    }\n  \n    public Map<String, XNode> getSqlFragments() {\n      return sqlFragments;\n    }\n  \n    public void addInterceptor(Interceptor interceptor) {\n      interceptorChain.addInterceptor(interceptor);\n    }\n  \n    public void addMappers(String packageName, Class<?> superType) {\n      mapperRegistry.addMappers(packageName, superType);\n    }\n  \n    public void addMappers(String packageName) {\n      mapperRegistry.addMappers(packageName);\n    }\n  \n    public <T> void addMapper(Class<T> type) {\n      mapperRegistry.addMapper(type);\n    }\n  \n    public <T> T getMapper(Class<T> type, SqlSession sqlSession) {\n      return mapperRegistry.getMapper(type, sqlSession);\n    }\n  \n    public boolean hasMapper(Class<?> type) {\n      return mapperRegistry.hasMapper(type);\n    }\n  \n    public boolean hasStatement(String statementName) {\n      return hasStatement(statementName, true);\n    }\n  \n    public boolean hasStatement(String statementName, boolean validateIncompleteStatements) {\n      if (validateIncompleteStatements) {\n        buildAllStatements();\n      }\n      return mappedStatements.containsKey(statementName);\n    }\n  \n    public void addCacheRef(String namespace, String referencedNamespace) {\n      cacheRefMap.put(namespace, referencedNamespace);\n    }\n  \n    /*\n     * Parses all the unprocessed statement nodes in the cache. It is recommended\n     * to call this method once all the mappers are added as it provides fail-fast\n     * statement validation.\n     */\n    protected void buildAllStatements() {\n      if (!incompleteResultMaps.isEmpty()) {\n        synchronized (incompleteResultMaps) {\n          // This always throws a BuilderException.\n          incompleteResultMaps.iterator().next().resolve();\n        }\n      }\n      if (!incompleteCacheRefs.isEmpty()) {\n        synchronized (incompleteCacheRefs) {\n          // This always throws a BuilderException.\n          incompleteCacheRefs.iterator().next().resolveCacheRef();\n        }\n      }\n      if (!incompleteStatements.isEmpty()) {\n        synchronized (incompleteStatements) {\n          // This always throws a BuilderException.\n          incompleteStatements.iterator().next().parseStatementNode();\n        }\n      }\n      if (!incompleteMethods.isEmpty()) {\n        synchronized (incompleteMethods) {\n          // This always throws a BuilderException.\n          incompleteMethods.iterator().next().resolve();\n        }\n      }\n    }\n  \n    /*\n     * Extracts namespace from fully qualified statement id.\n     *\n     * @param statementId\n     * @return namespace or null when id does not contain period.\n     */\n    protected String extractNamespace(String statementId) {\n      int lastPeriod = statementId.lastIndexOf('.');\n      return lastPeriod > 0 ? statementId.substring(0, lastPeriod) : null;\n    }\n  \n    // Slow but a one time cost. A better solution is welcome.\n    protected void checkGloballyForDiscriminatedNestedResultMaps(ResultMap rm) {\n      if (rm.hasNestedResultMaps()) {\n        for (Map.Entry<String, ResultMap> entry : resultMaps.entrySet()) {\n          Object value = entry.getValue();\n          if (value instanceof ResultMap) {\n            ResultMap entryResultMap = (ResultMap) value;\n            if (!entryResultMap.hasNestedResultMaps() && entryResultMap.getDiscriminator() != null) {\n              Collection<String> discriminatedResultMapNames = entryResultMap.getDiscriminator().getDiscriminatorMap().values();\n              if (discriminatedResultMapNames.contains(rm.getId())) {\n                entryResultMap.forceNestedResultMaps();\n              }\n            }\n          }\n        }\n      }\n    }\n  \n    // Slow but a one time cost. A better solution is welcome.\n    protected void checkLocallyForDiscriminatedNestedResultMaps(ResultMap rm) {\n      if (!rm.hasNestedResultMaps() && rm.getDiscriminator() != null) {\n        for (Map.Entry<String, String> entry : rm.getDiscriminator().getDiscriminatorMap().entrySet()) {\n          String discriminatedResultMapName = entry.getValue();\n          if (hasResultMap(discriminatedResultMapName)) {\n            ResultMap discriminatedResultMap = resultMaps.get(discriminatedResultMapName);\n            if (discriminatedResultMap.hasNestedResultMaps()) {\n              rm.forceNestedResultMaps();\n              break;\n            }\n          }\n        }\n      }\n    }\n  \n    protected static class StrictMap<V> extends HashMap<String, V> {\n  \n      private static final long serialVersionUID = -4950446264854982944L;\n      private final String name;\n  \n      public StrictMap(String name, int initialCapacity, float loadFactor) {\n        super(initialCapacity, loadFactor);\n        this.name = name;\n      }\n  \n      public StrictMap(String name, int initialCapacity) {\n        super(initialCapacity);\n        this.name = name;\n      }\n  \n      public StrictMap(String name) {\n        super();\n        this.name = name;\n      }\n  \n      public StrictMap(String name, Map<String, ? extends V> m) {\n        super(m);\n        this.name = name;\n      }\n  \n      @SuppressWarnings(\"unchecked\")\n      public V put(String key, V value) {\n        if (containsKey(key)) {\n          throw new IllegalArgumentException(name + \" already contains value for \" + key);\n        }\n        if (key.contains(\".\")) {\n          final String shortKey = getShortName(key);\n          if (super.get(shortKey) == null) {\n            super.put(shortKey, value);\n          } else {\n            super.put(shortKey, (V) new Ambiguity(shortKey));\n          }\n        }\n        return super.put(key, value);\n      }\n  \n      public V get(Object key) {\n        V value = super.get(key);\n        if (value == null) {\n          throw new IllegalArgumentException(name + \" does not contain value for \" + key);\n        }\n        if (value instanceof Ambiguity) {\n          throw new IllegalArgumentException(((Ambiguity) value).getSubject() + \" is ambiguous in \" + name\n              + \" (try using the full name including the namespace, or rename one of the entries)\");\n        }\n        return value;\n      }\n  \n      private String getShortName(String key) {\n        final String[] keyParts = key.split(\"\\\\.\");\n        return keyParts[keyParts.length - 1];\n      }\n  \n      protected static class Ambiguity {\n        final private String subject;\n  \n        public Ambiguity(String subject) {\n          this.subject = subject;\n        }\n  \n        public String getSubject() {\n          return subject;\n        }\n      }\n    }\n  \n  }\n  \n  ```\n\n  **然后代码跳到这里**\n\n  ```\n  public class SqlSessionFactoryBean implements FactoryBean<SqlSessionFactory>, InitializingBean, ApplicationListener<ApplicationEvent> {\n  ...\n  //这里是创建唯一的sqlsessionFactory注意这个注解ConditionalOnMissingBean\n    @Bean\n    @ConditionalOnMissingBean\n    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n      SqlSessionFactoryBean factory = new SqlSessionFactoryBean();\n      factory.setDataSource(dataSource);\n      factory.setVfs(SpringBootVFS.class);\n      if (StringUtils.hasText(this.properties.getConfigLocation())) {\n        factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n      }\n      Configuration configuration = this.properties.getConfiguration();\n      if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n        configuration = new Configuration();\n      }\n      if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n        for (ConfigurationCustomizer customizer : this.configurationCustomizers) {\n          customizer.customize(configuration);\n        }\n      }\n      factory.setConfiguration(configuration);\n      if (this.properties.getConfigurationProperties() != null) {\n        factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n      }\n      if (!ObjectUtils.isEmpty(this.interceptors)) {\n        factory.setPlugins(this.interceptors);\n      }\n      if (this.databaseIdProvider != null) {\n        factory.setDatabaseIdProvider(this.databaseIdProvider);\n      }\n      if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n        factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n      }\n      if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n        factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n      }\n      if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n        factory.setMapperLocations(this.properties.resolveMapperLocations());\n      }\n  \t//创建工厂\n      return factory.getObject();\n    }\n  ...\n    /**\n     * {@inheritDoc}\n     */\n     //先走这个方法\n    @Override\n    public void afterPropertiesSet() throws Exception {\n      notNull(dataSource, \"Property 'dataSource' is required\");\n      notNull(sqlSessionFactoryBuilder, \"Property 'sqlSessionFactoryBuilder' is required\");\n      state((configuration == null && configLocation == null) || !(configuration != null && configLocation != null),\n                \"Property 'configuration' and 'configLocation' can not specified with together\");\n  \t//走这里进行build工厂类\n      this.sqlSessionFactory = buildSqlSessionFactory();\n    }\n    ...\n    //注意了具体的配置过程在这里\n      protected SqlSessionFactory buildSqlSessionFactory() throws IOException {\n  \n      Configuration configuration;\n  \n      XMLConfigBuilder xmlConfigBuilder = null;\n      if (this.configuration != null) {\n        configuration = this.configuration;\n        if (configuration.getVariables() == null) {\n          configuration.setVariables(this.configurationProperties);\n        } else if (this.configurationProperties != null) {\n          configuration.getVariables().putAll(this.configurationProperties);\n        }\n      } else if (this.configLocation != null) {\n        xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null, this.configurationProperties);\n        configuration = xmlConfigBuilder.getConfiguration();\n      } else {\n        if (LOGGER.isDebugEnabled()) {\n          LOGGER.debug(\"Property 'configuration' or 'configLocation' not specified, using default MyBatis Configuration\");\n        }\n        configuration = new Configuration();\n        if (this.configurationProperties != null) {\n          configuration.setVariables(this.configurationProperties);\n        }\n      }\n  \n      if (this.objectFactory != null) {\n        configuration.setObjectFactory(this.objectFactory);\n      }\n  \n      if (this.objectWrapperFactory != null) {\n        configuration.setObjectWrapperFactory(this.objectWrapperFactory);\n      }\n  \n      if (this.vfs != null) {\n        configuration.setVfsImpl(this.vfs);\n      }\n  \t//this.typeAliasesPackage=application.properties中的mybatis.type-aliases-package\n      if (hasLength(this.typeAliasesPackage)) {\n        String[] typeAliasPackageArray = tokenizeToStringArray(this.typeAliasesPackage,\n            ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n        for (String packageToScan : typeAliasPackageArray) {\n          configuration.getTypeAliasRegistry().registerAliases(packageToScan,\n                  typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);\n          if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for aliases\");\n          }\n        }\n      }\n  \t//注册别名类到configuration\n      if (!isEmpty(this.typeAliases)) {\n        for (Class<?> typeAlias : this.typeAliases) {\n          configuration.getTypeAliasRegistry().registerAlias(typeAlias);\n          if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Registered type alias: '\" + typeAlias + \"'\");\n          }\n        }\n      }\n  \t//看看有没有配置插件有的话加入到拦截器组\n      if (!isEmpty(this.plugins)) {\n        for (Interceptor plugin : this.plugins) {\n          configuration.addInterceptor(plugin);\n          if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Registered plugin: '\" + plugin + \"'\");\n          }\n        }\n      }\n  \t//看看有没有typeHandlersPackage，有的话注册到cfg类中\n      if (hasLength(this.typeHandlersPackage)) {\n        String[] typeHandlersPackageArray = tokenizeToStringArray(this.typeHandlersPackage,\n            ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n        for (String packageToScan : typeHandlersPackageArray) {\n          configuration.getTypeHandlerRegistry().register(packageToScan);\n          if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for type handlers\");\n          }\n        }\n      }\n  \t//看看有没有typeHandlers，有的话注册到cfg类中\n      if (!isEmpty(this.typeHandlers)) {\n        for (TypeHandler<?> typeHandler : this.typeHandlers) {\n          configuration.getTypeHandlerRegistry().register(typeHandler);\n          if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Registered type handler: '\" + typeHandler + \"'\");\n          }\n        }\n      }\n  \t//看看有没有设置databaseid 有的话配置到cfg类中\n      if (this.databaseIdProvider != null) {//fix #64 set databaseId before parse mapper xmls\n        try {\n          configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\n        } catch (SQLException e) {\n          throw new NestedIOException(\"Failed getting a databaseId\", e);\n        }\n      }\n  \n      if (this.cache != null) {\n        configuration.addCache(this.cache);\n      }\n  \n      if (xmlConfigBuilder != null) {\n        try {\n          xmlConfigBuilder.parse();\n  \n          if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Parsed configuration file: '\" + this.configLocation + \"'\");\n          }\n        } catch (Exception ex) {\n          throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation, ex);\n        } finally {\n          ErrorContext.instance().reset();\n        }\n      }\n  //如果transactionFactory是空的话 new一个 Spring的事务工厂\n      if (this.transactionFactory == null) {\n        this.transactionFactory = new SpringManagedTransactionFactory();\n      }\n  \t//这里很重要 将spring的环境对象 和事务工厂还有数据源对象注册到cfg类中\n      configuration.setEnvironment(new Environment(this.environment, this.transactionFactory, this.dataSource));\n  \t//this.mapperLocation=application.properties中配置的mybatis.mapper-locations\n  \t//拿到mapper文件的配置类\n      if (!isEmpty(this.mapperLocations)) {\n        for (Resource mapperLocation : this.mapperLocations) {\n          if (mapperLocation == null) {\n            continue;\n          }\n  \n          try {\n          //构建xmlMapperBuilder\n            XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(mapperLocation.getInputStream(),\n                configuration, mapperLocation.toString(), configuration.getSqlFragments());\n                //\n            xmlMapperBuilder.parse();\n          } catch (Exception e) {\n            throw new NestedIOException(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\", e);\n          } finally {\n            ErrorContext.instance().reset();\n          }\n  \n          if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Parsed mapper file: '\" + mapperLocation + \"'\");\n          }\n        }\n      } else {\n        if (LOGGER.isDebugEnabled()) {\n          LOGGER.debug(\"Property 'mapperLocations' was not specified or no matching resources found\");\n        }\n      }\n  \t//最后创建sqlsessionFactory\n      return this.sqlSessionFactoryBuilder.build(configuration);\n    }\n  \n  ```\n\n  **configuration.getTypeAliasRegistry().registerAliases的操作**\n\n  ```\n   public void registerAliases(String packageName, Class<?> superType){\n      ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<Class<?>>();\n      resolverUtil.find(new ResolverUtil.IsA(superType), packageName);\n      Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();\n      for(Class<?> type : typeSet){\n        // Ignore inner classes and interfaces (including package-info.java)\n        // Skip also inner classes. See issue #6\n        if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {\n          //注册别名\n          registerAlias(type);\n        }\n      }\n    }\n    //上面代码调到这里\n    public void registerAlias(Class<?> type) {\n      String alias = type.getSimpleName();\n      //先获得class上的注解 \n      Alias aliasAnnotation = type.getAnnotation(Alias.class);\n      if (aliasAnnotation != null) {\n        //如果有的话拿到注解的值\n        alias = aliasAnnotation.value();\n      } \n      //\n      registerAlias(alias, type);\n    }\n    //再跳到这里\n    public void registerAlias(String alias, Class<?> value) {\n      if (alias == null) {\n        throw new TypeException(\"The parameter alias cannot be null\");\n      }\n      // issue #748\n      String key = alias.toLowerCase(Locale.ENGLISH);\n      if (TYPE_ALIASES.containsKey(key) && TYPE_ALIASES.get(key) != null && !TYPE_ALIASES.get(key).equals(value)) {\n        throw new TypeException(\"The alias '\" + alias + \"' is already mapped to the value '\" + TYPE_ALIASES.get(key).getName() + \"'.\");\n      }\n      //这里key=userroledto value=class com.convergence.domain.UserRoleDTO\n      TYPE_ALIASES.put(key, value);\n    }\n  ```\n\n  **进行解析**\n\n  ```\n  public void parse() {\n      if (!configuration.isResourceLoaded(resource)) {\n        configurationElement(parser.evalNode(\"/mapper\"));\n        configuration.addLoadedResource(resource);\n        //绑定namespace\n        bindMapperForNamespace();\n      }\n  \t//解析resultMaps\n      parsePendingResultMaps();\n      parsePendingCacheRefs();\n      parsePendingStatements();\n    }\n    //解析xml文件\n    private void configurationElement(XNode context) {\n      try {\n        String namespace = context.getStringAttribute(\"namespace\");\n        if (namespace == null || namespace.equals(\"\")) {\n          throw new BuilderException(\"Mapper's namespace cannot be empty\");\n        }\n        builderAssistant.setCurrentNamespace(namespace);\n        //这里的context就是xml文件内容了\n        cacheRefElement(context.evalNode(\"cache-ref\"));\n        cacheElement(context.evalNode(\"cache\"));\n        parameterMapElement(context.evalNodes(\"/mapper/parameterMap\"));\n        resultMapElements(context.evalNodes(\"/mapper/resultMap\"));\n        sqlElement(context.evalNodes(\"/mapper/sql\"));\n        buildStatementFromContext(context.evalNodes(\"select|insert|update|delete\"));\n      } catch (Exception e) {\n        throw new BuilderException(\"Error parsing Mapper XML. Cause: \" + e, e);\n      }\n    }\n    //将mapper.java和xml进行绑定\n    private void bindMapperForNamespace() {\n      String namespace = builderAssistant.getCurrentNamespace();\n      if (namespace != null) {\n        Class<?> boundType = null;\n        try {\n          boundType = Resources.classForName(namespace);\n        } catch (ClassNotFoundException e) {\n          //ignore, bound type is not required\n        }\n        if (boundType != null) {\n          if (!configuration.hasMapper(boundType)) {\n            // Spring may not know the real resource name so we set a flag\n            // to prevent loading again this resource from the mapper interface\n            // look at MapperAnnotationBuilder#loadXmlResource\n            configuration.addLoadedResource(\"namespace:\" + namespace);\n            configuration.addMapper(boundType);\n          }\n        }\n      }\n    }\n    //解析resultmap\n   private void parsePendingResultMaps() {\n      Collection<ResultMapResolver> incompleteResultMaps = configuration.getIncompleteResultMaps();\n      synchronized (incompleteResultMaps) {\n        Iterator<ResultMapResolver> iter = incompleteResultMaps.iterator();\n        while (iter.hasNext()) {\n          try {\n            iter.next().resolve();\n            iter.remove();\n          } catch (IncompleteElementException e) {\n            // ResultMap is still missing a resource...\n          }\n        }\n      }\n    }\n    //缓存解析\n    private void parsePendingCacheRefs() {\n      Collection<CacheRefResolver> incompleteCacheRefs = configuration.getIncompleteCacheRefs();\n      synchronized (incompleteCacheRefs) {\n        Iterator<CacheRefResolver> iter = incompleteCacheRefs.iterator();\n        while (iter.hasNext()) {\n          try {\n            iter.next().resolveCacheRef();\n            iter.remove();\n          } catch (IncompleteElementException e) {\n            // Cache ref is still missing a resource...\n          }\n        }\n      }\n    }\n    //statment解析\n      private void parsePendingStatements() {\n      Collection<XMLStatementBuilder> incompleteStatements = configuration.getIncompleteStatements();\n      synchronized (incompleteStatements) {\n        Iterator<XMLStatementBuilder> iter = incompleteStatements.iterator();\n        while (iter.hasNext()) {\n          try {\n            iter.next().parseStatementNode();\n            iter.remove();\n          } catch (IncompleteElementException e) {\n            // Statement is still missing a resource...\n          }\n        }\n      }\n    }\n  ```\n\n  **上面的工厂实例完了 进入sqlsessiontemplate实例**\n\n  ```\n    //这里需要上面构建的sqlSessionFactory\n    @Bean\n    @ConditionalOnMissingBean\n    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {\n      ExecutorType executorType = this.properties.getExecutorType();\n      if (executorType != null) {\n        return new SqlSessionTemplate(sqlSessionFactory, executorType);\n      } else {\n        return new SqlSessionTemplate(sqlSessionFactory);\n      }\n    }\n  ```\n\n  **构建SqlSessionTemplate**\n\n  ```\n   public class SqlSessionTemplate implements SqlSession, DisposableBean {\n   ...\n   /**\n     * Constructs a Spring managed {@code SqlSession} with the given\n     * {@code SqlSessionFactory} and {@code ExecutorType}.\n     * A custom {@code SQLExceptionTranslator} can be provided as an\n     * argument so any {@code PersistenceException} thrown by MyBatis\n     * can be custom translated to a {@code RuntimeException}\n     * The {@code SQLExceptionTranslator} can also be null and thus no\n     * exception translation will be done and MyBatis exceptions will be\n     * thrown\n     *\n     * @param sqlSessionFactory\n     * @param executorType\n     * @param exceptionTranslator\n     */\n    public SqlSessionTemplate(SqlSessionFactory sqlSessionFactory, ExecutorType executorType,\n        PersistenceExceptionTranslator exceptionTranslator) {\n  \n      notNull(sqlSessionFactory, \"Property 'sqlSessionFactory' is required\");\n      notNull(executorType, \"Property 'executorType' is required\");\n  \n      this.sqlSessionFactory = sqlSessionFactory;\n      this.executorType = executorType;\n      this.exceptionTranslator = exceptionTranslator;\n      //获得一个sqlsession代理类 里面填充了sqlSessionInterceptor\n      this.sqlSessionProxy = (SqlSession) newProxyInstance(\n          SqlSessionFactory.class.getClassLoader(),\n          new Class[] { SqlSession.class },\n          new SqlSessionInterceptor());\n    }\n    ...\n    }\n  ```\n\n  **这里说下ExecutorType **\n\n  * **simple 默认的 **\n  * **reuse 这个类型不做特殊的事情，它只为每个语句创建一个 PreparedStatement。**\n  * **batch 批处理语句使用 需要关闭autocommit      **\n\n  ```\n  public enum ExecutorType {\n    SIMPLE, REUSE, BATCH\n  }\n  ```\n\n  **在创建sqlSessionTemplate的时候会创建一个SqlSessionInterceptor**\n\n  ```\n    private class SqlSessionInterceptor implements InvocationHandler {\n  ...\n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n      //首先获取到sqlsession\n        SqlSession sqlSession = getSqlSession(\n            SqlSessionTemplate.this.sqlSessionFactory,\n            SqlSessionTemplate.this.executorType,\n            SqlSessionTemplate.this.exceptionTranslator);\n        try {\n        //进行involke 拿到具体的结果集\n          Object result = method.invoke(sqlSession, args);\n          //这个if判断：    return (holder != null) && (holder.getSqlSession() == session);\n          if (!isSqlSessionTransactional(sqlSession, SqlSessionTemplate.this.sqlSessionFactory)) {\n            // force commit even on non-dirty sessions because some databases require\n            // a commit/rollback before calling close()\n            //然后commit\n            sqlSession.commit(true);\n          }\n          return result;\n        } catch (Throwable t) {\n          Throwable unwrapped = unwrapThrowable(t);\n          if (SqlSessionTemplate.this.exceptionTranslator != null && unwrapped instanceof PersistenceException) {\n            // release the connection to avoid a deadlock if the translator is no loaded. See issue #22\n            closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);\n            sqlSession = null;\n            Throwable translated = SqlSessionTemplate.this.exceptionTranslator.translateExceptionIfPossible((PersistenceException) unwrapped);\n            if (translated != null) {\n              unwrapped = translated;\n            }\n          }\n          throw unwrapped;\n        } finally {\n          if (sqlSession != null) {\n          //关闭会话\n            closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);\n          }\n        }\n      }\n    }\n    }\n  ```\n\n  **getSqlSession:**\n\n  ```\n    public static SqlSession getSqlSession(SqlSessionFactory sessionFactory, ExecutorType executorType, PersistenceExceptionTranslator exceptionTranslator) {\n  \n      notNull(sessionFactory, NO_SQL_SESSION_FACTORY_SPECIFIED);\n      notNull(executorType, NO_EXECUTOR_TYPE_SPECIFIED);\n  \t//holder\n      SqlSessionHolder holder = (SqlSessionHolder) \n      //事务管理器拿到holder\n      TransactionSynchronizationManager.getResource(sessionFactory);\n  \t//获得session\n      SqlSession session = sessionHolder(executorType, holder);\n      if (session != null) {\n        return session;\n      }\n  \n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Creating a new SqlSession\");\n      }\n  \t//工厂打开session\n      session = sessionFactory.openSession(executorType);\n  \t//注册session,工厂到holder\n      registerSessionHolder(sessionFactory, executorType, exceptionTranslator, session);\n  \n      return session;\n    }\n  ```\n\n  **registerSessionHolder:**\n\n  ```\n    private static void registerSessionHolder(SqlSessionFactory sessionFactory, ExecutorType executorType,\n        PersistenceExceptionTranslator exceptionTranslator, SqlSession session) {\n      SqlSessionHolder holder;\n      if (TransactionSynchronizationManager.isSynchronizationActive()) {\n        Environment environment = sessionFactory.getConfiguration().getEnvironment();\n  \t  //如果当前的事务工厂是spring的事务管理工厂的实例的话\n        if (environment.getTransactionFactory() instanceof SpringManagedTransactionFactory) {\n          if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Registering transaction synchronization for SqlSession [\" + session + \"]\");\n          }\n  \t   //创建holder\n          holder = new SqlSessionHolder(session, executorType, exceptionTranslator);\n          //底下是事务的一系列管理操作\n          TransactionSynchronizationManager.bindResource(sessionFactory, holder);\n          TransactionSynchronizationManager.registerSynchronization(new SqlSessionSynchronization(holder, sessionFactory));\n          holder.setSynchronizedWithTransaction(true);\n          holder.requested();\n        } else {\n          if (TransactionSynchronizationManager.getResource(environment.getDataSource()) == null) {\n            if (LOGGER.isDebugEnabled()) {\n              LOGGER.debug(\"SqlSession [\" + session + \"] was not registered for synchronization because DataSource is not transactional\");\n            }\n          } else {\n            throw new TransientDataAccessResourceException(\n                \"SqlSessionFactory must be using a SpringManagedTransactionFactory in order to use Spring transaction synchronization\");\n          }\n        }\n      } else {\n        if (LOGGER.isDebugEnabled()) {\n          LOGGER.debug(\"SqlSession [\" + session + \"] was not registered for synchronization because synchronization is not active\");\n        }\n      }\n  }\n  ```\n\n  **具体的sql执行过程**\n\n  \n\n  **mybatis中的每个dao都会继承SqlSessionDaoSupport，在于spring集成的时候，需要依赖spring-mybatis这个jar，而这个SqlSessionDaoSupport类就在这个jar中**\n\n  **这是个抽象类。**\n\n  ```\n  package org.mybatis.spring.support;\n  \n  import static org.springframework.util.Assert.notNull;\n  \n  import org.apache.ibatis.session.SqlSession;\n  import org.apache.ibatis.session.SqlSessionFactory;\n  import org.mybatis.spring.SqlSessionTemplate;\n  import org.springframework.dao.support.DaoSupport;\n  \n  /**\n   * Convenient super class for MyBatis SqlSession data access objects.\n   * It gives you access to the template which can then be used to execute SQL methods.\n   * <p>\n   * This class needs a SqlSessionTemplate or a SqlSessionFactory.\n   * If both are set the SqlSessionFactory will be ignored.\n   * <p>\n   * {code Autowired} was removed from setSqlSessionTemplate and setSqlSessionFactory\n   * in version 1.2.0.\n   * \n   * @author Putthibong Boonbong\n   *\n   * @see #setSqlSessionFactory\n   * @see #setSqlSessionTemplate\n   * @see SqlSessionTemplate\n   */\n  public abstract class SqlSessionDaoSupport extends DaoSupport {\n  \n    private SqlSession sqlSession;\n  \n    private boolean externalSqlSession;\n  \n    public void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) {\n      if (!this.externalSqlSession) {\n        this.sqlSession = new SqlSessionTemplate(sqlSessionFactory);\n      }\n    }\n  \n    public void setSqlSessionTemplate(SqlSessionTemplate sqlSessionTemplate) {\n      this.sqlSession = sqlSessionTemplate;\n      this.externalSqlSession = true;\n    }\n  \n    /**\n     * Users should use this method to get a SqlSession to call its statement methods\n     * This is SqlSession is managed by spring. Users should not commit/rollback/close it\n     * because it will be automatically done.\n     *\n     * @return Spring managed thread safe SqlSession\n     */\n    public SqlSession getSqlSession() {\n      return this.sqlSession;\n    }\n  \n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void checkDaoConfig() {\n      notNull(this.sqlSession, \"Property 'sqlSessionFactory' or 'sqlSessionTemplate' are required\");\n    }\n  \n  }\n  ```\n\n  **那么它的父类DaoSupport什么时候**\n\n  **注意实现了InitializingBean这个是由spring管理的**\n\n  ```\n  public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory\n  \t\timplements AutowireCapableBeanFactory {\n  \t\t//\n  \t/**\n  \t * Give a bean a chance to react now all its properties are set,\n  \t * and a chance to know about its owning bean factory (this object).\n  \t * This means checking whether the bean implements InitializingBean or defines\n  \t * a custom init method, and invoking the necessary callback(s) if it does.\n  \t * @param beanName the bean name in the factory (for debugging purposes)\n  \t * @param bean the new bean instance we may need to initialize\n  \t * @param mbd the merged bean definition that the bean was created with\n  \t * (can also be {@code null}, if given an existing bean instance)\n  \t * @throws Throwable if thrown by init methods or by the invocation process\n  \t * @see #invokeCustomInitMethod\n  \t */\n  \t //根据bean的name来反射加载初始方法 当bean DataSourceInitializerInvoker被加载时候会触发事件驱动 去构建sqlsessionFactory\n  \t //当bean=MapperFactoryBean的时候 先走父类DaoSupport的afterPropertiesSet\n  \tprotected void invokeInitMethods(String beanName, final Object bean, @Nullable RootBeanDefinition mbd)\n  \t\t\tthrows Throwable {\n  \n  \t\tboolean isInitializingBean = (bean instanceof InitializingBean);\n  \t\tif (isInitializingBean && (mbd == null || !mbd.isExternallyManagedInitMethod(\"afterPropertiesSet\"))) {\n  \t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\tlogger.debug(\"Invoking afterPropertiesSet() on bean with name '\" + beanName + \"'\");\n  \t\t\t}\n  \t\t\tif (System.getSecurityManager() != null) {\n  \t\t\t\ttry {\n  \t\t\t\t\tAccessController.doPrivileged((PrivilegedExceptionAction<Object>) () -> {\n  \t\t\t\t\t\t((InitializingBean) bean).afterPropertiesSet();\n  \t\t\t\t\t\treturn null;\n  \t\t\t\t\t}, getAccessControlContext());\n  \t\t\t\t}\n  \t\t\t\tcatch (PrivilegedActionException pae) {\n  \t\t\t\t\tthrow pae.getException();\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\telse {\n  \t\t\t//在这里会初始化dao\n  \t\t\t\t((InitializingBean) bean).afterPropertiesSet();\n  \t\t\t}\n  \t\t}\n  \n  \t\tif (mbd != null && bean.getClass() != NullBean.class) {\n  \t\t\tString initMethodName = mbd.getInitMethodName();\n  \t\t\tif (StringUtils.hasLength(initMethodName) &&\n  \t\t\t\t\t!(isInitializingBean && \"afterPropertiesSet\".equals(initMethodName)) &&\t\n  \t\t\t\t\t!mbd.isExternallyManagedInitMethod(initMethodName)) {\n  \t\t\t\tinvokeCustomInitMethod(beanName, bean, mbd);\n  \t\t\t}\n  \t\t}\n  \t}\n  \n  ```\n\n  **当bean=MapperFactoryBean的时候 先走父类DaoSupport的afterPropertiesSet：**\n\n  ```\n  public abstract class DaoSupport implements InitializingBean {\n  ...\n  \t@Override\n  \tpublic final void afterPropertiesSet() throws IllegalArgumentException, BeanInitializationException {\n  \t\t// Let abstract subclasses check their configuration.\n  \t\t//检查dao的cfg\n  \t\tcheckDaoConfig();\n  \n  \t\t// Let concrete implementations initialize themselves.\n  \t\ttry {\n  \t\t//初始化加载dao 父类空实现\n  \t\t\tinitDao();\n  \t\t}\n  \t\tcatch (Exception ex) {\n  \t\t\tthrow new BeanInitializationException(\"Initialization of DAO failed\", ex);\n  \t\t}\n  \t}\n  ```\n\n  \n\n  **具体实现MapperFactoryBean：**\n\n  ```\n  package org.mybatis.spring.mapper;\n  \n  import static org.springframework.util.Assert.notNull;\n  \n  import org.apache.ibatis.executor.ErrorContext;\n  import org.apache.ibatis.session.Configuration;\n  import org.mybatis.spring.SqlSessionTemplate;\n  import org.mybatis.spring.support.SqlSessionDaoSupport;\n  import org.springframework.beans.factory.FactoryBean;\n  \n  /**\n   * BeanFactory that enables injection of MyBatis mapper interfaces. It can be set up with a\n   * SqlSessionFactory or a pre-configured SqlSessionTemplate.\n   * <p>\n   * Sample configuration:\n   *\n   * <pre class=\"code\">\n   * {@code\n   *   <bean id=\"baseMapper\" class=\"org.mybatis.spring.mapper.MapperFactoryBean\" abstract=\"true\" lazy-init=\"true\">\n   *     <property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\" />\n   *   </bean>\n   *\n   *   <bean id=\"oneMapper\" parent=\"baseMapper\">\n   *     <property name=\"mapperInterface\" value=\"my.package.MyMapperInterface\" />\n   *   </bean>\n   *\n   *   <bean id=\"anotherMapper\" parent=\"baseMapper\">\n   *     <property name=\"mapperInterface\" value=\"my.package.MyAnotherMapperInterface\" />\n   *   </bean>\n   * }\n   * </pre>\n   * <p>\n   * Note that this factory can only inject <em>interfaces</em>, not concrete classes.\n   *\n   * @author Eduardo Macarron\n   *\n   * @see SqlSessionTemplate\n   */\n  public class MapperFactoryBean<T> extends SqlSessionDaoSupport implements FactoryBean<T> {\n  \n    private Class<T> mapperInterface;\n  \n    private boolean addToConfig = true;\n  \n    public MapperFactoryBean() {\n      //intentionally empty \n    }\n    \n    public MapperFactoryBean(Class<T> mapperInterface) {\n      this.mapperInterface = mapperInterface;\n    }\n  \n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void checkDaoConfig() {\n    //进入父类DaoSupport的checkDaoConfig方法\n      super.checkDaoConfig();\n  \n      notNull(this.mapperInterface, \"Property 'mapperInterface' is required\");\n  \t//获取到mybatis的configuration\n      Configuration configuration = getSqlSession().getConfiguration();\n      //如果配置中没有当前执行sql的dao\n      if (this.addToConfig && !configuration.hasMapper(this.mapperInterface)) {\n        try {\n        //加入该dao到配置类中\n          configuration.addMapper(this.mapperInterface);\n        } catch (Exception e) {\n          logger.error(\"Error while adding the mapper '\" + this.mapperInterface + \"' to configuration.\", e);\n          throw new IllegalArgumentException(e);\n        } finally {\n          ErrorContext.instance().reset();\n        }\n      }\n    }\n  \n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public T getObject() throws Exception {\n      return getSqlSession().getMapper(this.mapperInterface);\n    }\n  \n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public Class<T> getObjectType() {\n      return this.mapperInterface;\n    }\n  \n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean isSingleton() {\n      return true;\n    }\n  \n    //------------- mutators --------------\n  \n    /**\n     * Sets the mapper interface of the MyBatis mapper\n     *\n     * @param mapperInterface class of the interface\n     */\n    public void setMapperInterface(Class<T> mapperInterface) {\n      this.mapperInterface = mapperInterface;\n    }\n  \n    /**\n     * Return the mapper interface of the MyBatis mapper\n     *\n     * @return class of the interface\n     */\n    public Class<T> getMapperInterface() {\n      return mapperInterface;\n    }\n  \n    /**\n     * If addToConfig is false the mapper will not be added to MyBatis. This means\n     * it must have been included in mybatis-config.xml.\n     * <p/>\n     * If it is true, the mapper will be added to MyBatis in the case it is not already\n     * registered.\n     * <p/>\n     * By default addToCofig is true.\n     *\n     * @param addToConfig\n     */\n    public void setAddToConfig(boolean addToConfig) {\n      this.addToConfig = addToConfig;\n    }\n  \n    /**\n     * Return the flag for addition into MyBatis config.\n     *\n     * @return true if the mapper will be added to MyBatis in the case it is not already\n     * registered.\n     */\n    public boolean isAddToConfig() {\n      return addToConfig;\n    }\n  }\n  \n  ```\n\n  **走完上面的代码，console打印日志：**\n\n  ```\n  2018-11-07 23:51:11.500 INFO [restartedMain][Jdk14Logger.java:99] - Bean 'resourceDao' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\n  ```\n\n  **那么底下会创建bean **\n\n  ```\n  public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory\n  \t\timplements AutowireCapableBeanFactory {\n  \t...\n  \t@Override\n  \tprotected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)\n  \t\t\tthrows BeanCreationException {\n  \n  \t\tif (logger.isDebugEnabled()) {\n  \t\t\tlogger.debug(\"Creating instance of bean '\" + beanName + \"'\");\n  \t\t}\n  \t\tRootBeanDefinition mbdToUse = mbd;\n  \n  \t\t// Make sure bean class is actually resolved at this point, and\n  \t\t// clone the bean definition in case of a dynamically resolved Class\n  \t\t// which cannot be stored in the shared merged bean definition.\n  \t\tClass<?> resolvedClass = resolveBeanClass(mbd, beanName);\n  \t\tif (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {\n  \t\t\tmbdToUse = new RootBeanDefinition(mbd);\n  \t\t\tmbdToUse.setBeanClass(resolvedClass);\n  \t\t}\n  \n  \t\t// Prepare method overrides.\n  \t\ttry {\n  \t\t\tmbdToUse.prepareMethodOverrides();\n  \t\t}\n  \t\tcatch (BeanDefinitionValidationException ex) {\n  \t\t\tthrow new BeanDefinitionStoreException(mbdToUse.getResourceDescription(),\n  \t\t\t\t\tbeanName, \"Validation of method overrides failed\", ex);\n  \t\t}\n  \n  \t\ttry {\n  \t\t\t// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.\n  \t\t\tObject bean = resolveBeforeInstantiation(beanName, mbdToUse);\n  \t\t\tif (bean != null) {\n  \t\t\t\treturn bean;\n  \t\t\t}\n  \t\t}\n  \t\tcatch (Throwable ex) {\n  \t\t\tthrow new BeanCreationException(mbdToUse.getResourceDescription(), beanName,\n  \t\t\t\t\t\"BeanPostProcessor before instantiation of bean failed\", ex);\n  \t\t}\n  \n  \t\ttry {\n  \t\t//创建bean\n  \t\t\tObject beanInstance = doCreateBean(beanName, mbdToUse, args);\n  \t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\tlogger.debug(\"Finished creating instance of bean '\" + beanName + \"'\");\n  \t\t\t}\n  \t\t\treturn beanInstance;\n  \t\t}\n  \t\tcatch (BeanCreationException | ImplicitlyAppearedSingletonException ex) {\n  \t\t\t// A previously detected exception with proper bean creation context already,\n  \t\t\t// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.\n  \t\t\tthrow ex;\n  \t\t}\n  \t\tcatch (Throwable ex) {\n  \t\t\tthrow new BeanCreationException(\n  \t\t\t\t\tmbdToUse.getResourceDescription(), beanName, \"Unexpected exception during bean creation\", ex);\n  \t\t}\n  \t}\n  \t...\n  \t//doCreateBean 创建bean\n  \t\tprotected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args)\n  \t\t\tthrows BeanCreationException {\n  \n  \t\t// Instantiate the bean.\n  \t\tBeanWrapper instanceWrapper = null;\n  \t\tif (mbd.isSingleton()) {\n  \t\t\tinstanceWrapper = this.factoryBeanInstanceCache.remove(beanName);\n  \t\t}\n  \t\tif (instanceWrapper == null) {\n  \t\t\tinstanceWrapper = createBeanInstance(beanName, mbd, args);\n  \t\t}\n  \t\tfinal Object bean = instanceWrapper.getWrappedInstance();\n  \t\tClass<?> beanType = instanceWrapper.getWrappedClass();\n  \t\tif (beanType != NullBean.class) {\n  \t\t\tmbd.resolvedTargetType = beanType;\n  \t\t}\n  \n  \t\t// Allow post-processors to modify the merged bean definition.\n  \t\tsynchronized (mbd.postProcessingLock) {\n  \t\t\tif (!mbd.postProcessed) {\n  \t\t\t\ttry {\n  \t\t\t\t\tapplyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);\n  \t\t\t\t}\n  \t\t\t\tcatch (Throwable ex) {\n  \t\t\t\t\tthrow new BeanCreationException(mbd.getResourceDescription(), beanName,\n  \t\t\t\t\t\t\t\"Post-processing of merged bean definition failed\", ex);\n  \t\t\t\t}\n  \t\t\t\tmbd.postProcessed = true;\n  \t\t\t}\n  \t\t}\n  \n  \t\t// Eagerly cache singletons to be able to resolve circular references\n  \t\t// even when triggered by lifecycle interfaces like BeanFactoryAware.\n  \t\tboolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences &&\n  \t\t\t\tisSingletonCurrentlyInCreation(beanName));\n  \t\tif (earlySingletonExposure) {\n  \t\t\tif (logger.isDebugEnabled()) {\n  \t\t\t\tlogger.debug(\"Eagerly caching bean '\" + beanName +\n  \t\t\t\t\t\t\"' to allow for resolving potential circular references\");\n  \t\t\t}\n  \t\t\taddSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean));\n  \t\t}\n  \n  \t\t// Initialize the bean instance.\n  \t\tObject exposedObject = bean;\n  \t\ttry {\n  \t\t\tpopulateBean(beanName, mbd, instanceWrapper);\n  \t\t\texposedObject = initializeBean(beanName, exposedObject, mbd);\n  \t\t}\n  \t\tcatch (Throwable ex) {\n  \t\t\tif (ex instanceof BeanCreationException && beanName.equals(((BeanCreationException) ex).getBeanName())) {\n  \t\t\t\tthrow (BeanCreationException) ex;\n  \t\t\t}\n  \t\t\telse {\n  \t\t\t\tthrow new BeanCreationException(\n  \t\t\t\t\t\tmbd.getResourceDescription(), beanName, \"Initialization of bean failed\", ex);\n  \t\t\t}\n  \t\t}\n  \n  \t\tif (earlySingletonExposure) {\n  \t\t\tObject earlySingletonReference = getSingleton(beanName, false);\n  \t\t\tif (earlySingletonReference != null) {\n  \t\t\t\tif (exposedObject == bean) {\n  \t\t\t\t\texposedObject = earlySingletonReference;\n  \t\t\t\t}\n  \t\t\t\telse if (!this.allowRawInjectionDespiteWrapping && hasDependentBean(beanName)) {\n  \t\t\t\t\tString[] dependentBeans = getDependentBeans(beanName);\n  \t\t\t\t\tSet<String> actualDependentBeans = new LinkedHashSet<>(dependentBeans.length);\n  \t\t\t\t\tfor (String dependentBean : dependentBeans) {\n  \t\t\t\t\t\tif (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {\n  \t\t\t\t\t\t\tactualDependentBeans.add(dependentBean);\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t\tif (!actualDependentBeans.isEmpty()) {\n  \t\t\t\t\t\tthrow new BeanCurrentlyInCreationException(beanName,\n  \t\t\t\t\t\t\t\t\"Bean with name '\" + beanName + \"' has been injected into other beans [\" +\n  \t\t\t\t\t\t\t\tStringUtils.collectionToCommaDelimitedString(actualDependentBeans) +\n  \t\t\t\t\t\t\t\t\"] in its raw version as part of a circular reference, but has eventually been \" +\n  \t\t\t\t\t\t\t\t\"wrapped. This means that said other beans do not use the final version of the \" +\n  \t\t\t\t\t\t\t\t\"bean. This is often the result of over-eager type matching - consider using \" +\n  \t\t\t\t\t\t\t\t\"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.\");\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \n  \t\t// Register bean as disposable \n  \t\t//将这个dao注册为一次性的bean\n  \t\ttry {\n  \t\t\tregisterDisposableBeanIfNecessary(beanName, bean, mbd);\n  \t\t}\n  \t\tcatch (BeanDefinitionValidationException ex) {\n  \t\t\tthrow new BeanCreationException(\n  \t\t\t\t\tmbd.getResourceDescription(), beanName, \"Invalid destruction signature\", ex);\n  \t\t}\n  \n  \t\treturn exposedObject;\n  \t}\n  \n  \t}\n  \t\n  ```\n\n  **//注册为单例**\n\n  ```\n  \tpublic abstract class AbstractBeanFactory extends FactoryBeanRegistrySupport implements ConfigurableBeanFactory {\n  ...\n  \t/**\n  \t * Add the given bean to the list of disposable beans in this factory,\n  \t * registering its DisposableBean interface and/or the given destroy method\n  \t * to be called on factory shutdown (if applicable). Only applies to singletons.\n  \t * @param beanName the name of the bean\n  \t * @param bean the bean instance\n  \t * @param mbd the bean definition for the bean\n  \t * @see RootBeanDefinition#isSingleton\n  \t * @see RootBeanDefinition#getDependsOn\n  \t * @see #registerDisposableBean\n  \t * @see #registerDependentBean\n  \t */\n  \tprotected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) {\n  \t\tAccessControlContext acc = (System.getSecurityManager() != null ? getAccessControlContext() : null);\n  \t\tif (!mbd.isPrototype() && requiresDestruction(bean, mbd)) {\n  \t\t\tif (mbd.isSingleton()) {\n  \t\t\t\t// Register a DisposableBean implementation that performs all destruction\n  \t\t\t\t// work for the given bean: DestructionAwareBeanPostProcessors,\n  \t\t\t\t// DisposableBean interface, custom destroy method.\n  \t\t\t\tregisterDisposableBean(beanName,\n  \t\t\t\t\t\tnew DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));\n  \t\t\t}\n  \t\t\telse {\n  \t\t\t\t// A bean with a custom scope...\n  \t\t\t\tScope scope = this.scopes.get(mbd.getScope());\n  \t\t\t\tif (scope == null) {\n  \t\t\t\t\tthrow new IllegalStateException(\"No Scope registered for scope name '\" + mbd.getScope() + \"'\");\n  \t\t\t\t}\n  \t\t\t\tscope.registerDestructionCallback(beanName,\n  \t\t\t\t\t\tnew DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));\n  \t\t\t}\n  \t\t}\n  \t}\n  \t...\n  \t}\n  ```\n\n  **当要执行dao层的sql操作时候**\n\n  ```\n  org.apache.ibatis.binding.MapperProxy@14e19901\n  ```\n\n  **这个是一个代理类**\n\n  ```\n  /**\n   *    Copyright 2009-2017 the original author or authors.\n   *\n   *    Licensed under the Apache License, Version 2.0 (the \"License\");\n   *    you may not use this file except in compliance with the License.\n   *    You may obtain a copy of the License at\n   *\n   *       http://www.apache.org/licenses/LICENSE-2.0\n   *\n   *    Unless required by applicable law or agreed to in writing, software\n   *    distributed under the License is distributed on an \"AS IS\" BASIS,\n   *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   *    See the License for the specific language governing permissions and\n   *    limitations under the License.\n   */\n  package org.apache.ibatis.binding;\n  \n  import java.io.Serializable;\n  import java.lang.invoke.MethodHandles;\n  import java.lang.reflect.Constructor;\n  import java.lang.reflect.InvocationHandler;\n  import java.lang.reflect.Method;\n  import java.lang.reflect.Modifier;\n  import java.util.Map;\n  \n  import org.apache.ibatis.lang.UsesJava7;\n  import org.apache.ibatis.reflection.ExceptionUtil;\n  import org.apache.ibatis.session.SqlSession;\n  \n  /**\n   * @author Clinton Begin\n   * @author Eduardo Macarron\n   */\n  public class MapperProxy<T> implements InvocationHandler, Serializable {\n  \n    private static final long serialVersionUID = -6424540398559729838L;\n    private final SqlSession sqlSession;\n    private final Class<T> mapperInterface;\n    private final Map<Method, MapperMethod> methodCache;\n  \n    public MapperProxy(SqlSession sqlSession, Class<T> mapperInterface, Map<Method, MapperMethod> methodCache) {\n      this.sqlSession = sqlSession;\n      this.mapperInterface = mapperInterface;\n      this.methodCache = methodCache;\n    }\n    //具体的sql操作会走这里\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n      try {\n      //判断是否是生命的类\n        if (Object.class.equals(method.getDeclaringClass())) {\n          return method.invoke(this, args);\n          //是否是原生方法\n        } else if (isDefaultMethod(method)) {\n          return invokeDefaultMethod(proxy, method, args);\n        }\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n      //将具体的sql操作缓存并返回\n      final MapperMethod mapperMethod = cachedMapperMethod(method);\n      //进行执行\n      return mapperMethod.execute(sqlSession, args);\n    }\n   //将具体的sql操作method缓存\n    private MapperMethod cachedMapperMethod(Method method) {\n      MapperMethod mapperMethod = methodCache.get(method);\n      if (mapperMethod == null) {\n        mapperMethod = new MapperMethod(mapperInterface, method, sqlSession.getConfiguration());\n        methodCache.put(method, mapperMethod);\n      }\n      return mapperMethod;\n    }\n  \n    @UsesJava7\n    private Object invokeDefaultMethod(Object proxy, Method method, Object[] args)\n        throws Throwable {\n      final Constructor<MethodHandles.Lookup> constructor = MethodHandles.Lookup.class\n          .getDeclaredConstructor(Class.class, int.class);\n      if (!constructor.isAccessible()) {\n        constructor.setAccessible(true);\n      }\n      final Class<?> declaringClass = method.getDeclaringClass();\n      return constructor\n          .newInstance(declaringClass,\n              MethodHandles.Lookup.PRIVATE | MethodHandles.Lookup.PROTECTED\n                  | MethodHandles.Lookup.PACKAGE | MethodHandles.Lookup.PUBLIC)\n          .unreflectSpecial(method, declaringClass).bindTo(proxy).invokeWithArguments(args);\n    }\n  \n    /**\n     * Backport of java.lang.reflect.Method#isDefault()\n     */\n    private boolean isDefaultMethod(Method method) {\n      return ((method.getModifiers()\n          & (Modifier.ABSTRACT | Modifier.PUBLIC | Modifier.STATIC)) == Modifier.PUBLIC)\n          && method.getDeclaringClass().isInterface();\n    }\n  }\n  \n  ```\n\n  **MapperMethod:**\n\n  ```\n  public class MapperMethod {\n  \n    private final SqlCommand command;\n    private final MethodSignature method;\n  \n    public MapperMethod(Class<?> mapperInterface, Method method, Configuration config) {\n      this.command = new SqlCommand(config, mapperInterface, method);\n      this.method = new MethodSignature(config, mapperInterface, method);\n    }\n   //这里进行执行sql\n    public Object execute(SqlSession sqlSession, Object[] args) {\n      Object result;\n      //判断crud操作\n      switch (command.getType()) {\n        case INSERT: {\n      \tObject param = method.convertArgsToSqlCommandParam(args);\n          result = rowCountResult(sqlSession.insert(command.getName(), param));\n          break;\n        }\n        case UPDATE: {\n          Object param = method.convertArgsToSqlCommandParam(args);\n          result = rowCountResult(sqlSession.update(command.getName(), param));\n          break;\n        }\n        case DELETE: {\n          Object param = method.convertArgsToSqlCommandParam(args);\n          result = rowCountResult(sqlSession.delete(command.getName(), param));\n          break;\n        }\n        case SELECT:\n          if (method.returnsVoid() && method.hasResultHandler()) {\n            executeWithResultHandler(sqlSession, args);\n            result = null;\n          } else if (method.returnsMany()) {\n          //这里是一个many的result跳到这里\n            result = executeForMany(sqlSession, args);\n          } else if (method.returnsMap()) {\n            result = executeForMap(sqlSession, args);\n          } else if (method.returnsCursor()) {\n            result = executeForCursor(sqlSession, args);\n          } else {\n            Object param = method.convertArgsToSqlCommandParam(args);\n            result = sqlSession.selectOne(command.getName(), param);\n          }\n          break;\n        case FLUSH:\n          result = sqlSession.flushStatements();\n          break;\n        default:\n          throw new BindingException(\"Unknown execution method for: \" + command.getName());\n      }\n      if (result == null && method.getReturnType().isPrimitive() && !method.returnsVoid()) {\n        throw new BindingException(\"Mapper method '\" + command.getName() \n            + \" attempted to return null from a method with a primitive return type (\" + method.getReturnType() + \").\");\n      }\n      return result;\n    }\n  \n    private Object rowCountResult(int rowCount) {\n      final Object result;\n      if (method.returnsVoid()) {\n        result = null;\n      } else if (Integer.class.equals(method.getReturnType()) || Integer.TYPE.equals(method.getReturnType())) {\n        result = rowCount;\n      } else if (Long.class.equals(method.getReturnType()) || Long.TYPE.equals(method.getReturnType())) {\n        result = (long)rowCount;\n      } else if (Boolean.class.equals(method.getReturnType()) || Boolean.TYPE.equals(method.getReturnType())) {\n        result = rowCount > 0;\n      } else {\n        throw new BindingException(\"Mapper method '\" + command.getName() + \"' has an unsupported return type: \" + method.getReturnType());\n      }\n      return result;\n    }\n  \n    private void executeWithResultHandler(SqlSession sqlSession, Object[] args) {\n      MappedStatement ms = sqlSession.getConfiguration().getMappedStatement(command.getName());\n      if (void.class.equals(ms.getResultMaps().get(0).getType())) {\n        throw new BindingException(\"method \" + command.getName() \n            + \" needs either a @ResultMap annotation, a @ResultType annotation,\" \n            + \" or a resultType attribute in XML so a ResultHandler can be used as a parameter.\");\n      }\n      Object param = method.convertArgsToSqlCommandParam(args);\n      if (method.hasRowBounds()) {\n        RowBounds rowBounds = method.extractRowBounds(args);\n        sqlSession.select(command.getName(), param, rowBounds, method.extractResultHandler(args));\n      } else {\n        sqlSession.select(command.getName(), param, method.extractResultHandler(args));\n      }\n    }\n  \t//多结果集的跳到这里\n    private <E> Object executeForMany(SqlSession sqlSession, Object[] args) {\n      List<E> result;\n      Object param = method.convertArgsToSqlCommandParam(args);\n      if (method.hasRowBounds()) {\n        RowBounds rowBounds = method.extractRowBounds(args);\n        //重点 交给sqlSession进行处理\n        result = sqlSession.<E>selectList(command.getName(), param, rowBounds);\n      } else {\n        result = sqlSession.<E>selectList(command.getName(), param);\n      }\n      // issue #510 Collections & arrays support\n      if (!method.getReturnType().isAssignableFrom(result.getClass())) {\n        if (method.getReturnType().isArray()) {\n          return convertToArray(result);\n        } else {\n          return convertToDeclaredCollection(sqlSession.getConfiguration(), result);\n        }\n      }\n      return result;\n    }\n  \n    private <T> Cursor<T> executeForCursor(SqlSession sqlSession, Object[] args) {\n      Cursor<T> result;\n      Object param = method.convertArgsToSqlCommandParam(args);\n      if (method.hasRowBounds()) {\n        RowBounds rowBounds = method.extractRowBounds(args);\n        result = sqlSession.<T>selectCursor(command.getName(), param, rowBounds);\n      } else {\n        result = sqlSession.<T>selectCursor(command.getName(), param);\n      }\n      return result;\n    }\n  \n    private <E> Object convertToDeclaredCollection(Configuration config, List<E> list) {\n      Object collection = config.getObjectFactory().create(method.getReturnType());\n      MetaObject metaObject = config.newMetaObject(collection);\n      metaObject.addAll(list);\n      return collection;\n    }\n  \n    @SuppressWarnings(\"unchecked\")\n    private <E> Object convertToArray(List<E> list) {\n      Class<?> arrayComponentType = method.getReturnType().getComponentType();\n      Object array = Array.newInstance(arrayComponentType, list.size());\n      if (arrayComponentType.isPrimitive()) {\n        for (int i = 0; i < list.size(); i++) {\n          Array.set(array, i, list.get(i));\n        }\n        return array;\n      } else {\n        return list.toArray((E[])array);\n      }\n    }\n  \n    private <K, V> Map<K, V> executeForMap(SqlSession sqlSession, Object[] args) {\n      Map<K, V> result;\n      Object param = method.convertArgsToSqlCommandParam(args);\n      if (method.hasRowBounds()) {\n        RowBounds rowBounds = method.extractRowBounds(args);\n        result = sqlSession.<K, V>selectMap(command.getName(), param, method.getMapKey(), rowBounds);\n      } else {\n        result = sqlSession.<K, V>selectMap(command.getName(), param, method.getMapKey());\n      }\n      return result;\n    }\n  \n    public static class ParamMap<V> extends HashMap<String, V> {\n  \n      private static final long serialVersionUID = -2212268410512043556L;\n  \n      @Override\n      public V get(Object key) {\n        if (!super.containsKey(key)) {\n          throw new BindingException(\"Parameter '\" + key + \"' not found. Available parameters are \" + keySet());\n        }\n        return super.get(key);\n      }\n  \n    }\n  \n    public static class SqlCommand {\n  \n      private final String name;\n      private final SqlCommandType type;\n  \n      public SqlCommand(Configuration configuration, Class<?> mapperInterface, Method method) {\n        final String methodName = method.getName();\n        final Class<?> declaringClass = method.getDeclaringClass();\n        MappedStatement ms = resolveMappedStatement(mapperInterface, methodName, declaringClass,\n            configuration);\n        if (ms == null) {\n          if (method.getAnnotation(Flush.class) != null) {\n            name = null;\n            type = SqlCommandType.FLUSH;\n          } else {\n            throw new BindingException(\"Invalid bound statement (not found): \"\n                + mapperInterface.getName() + \".\" + methodName);\n          }\n        } else {\n          name = ms.getId();\n          type = ms.getSqlCommandType();\n          if (type == SqlCommandType.UNKNOWN) {\n            throw new BindingException(\"Unknown execution method for: \" + name);\n          }\n        }\n      }\n  \n      public String getName() {\n        return name;\n      }\n  \n      public SqlCommandType getType() {\n        return type;\n      }\n  \n      private MappedStatement resolveMappedStatement(Class<?> mapperInterface, String methodName,\n          Class<?> declaringClass, Configuration configuration) {\n        String statementId = mapperInterface.getName() + \".\" + methodName;\n        if (configuration.hasStatement(statementId)) {\n          return configuration.getMappedStatement(statementId);\n        } else if (mapperInterface.equals(declaringClass)) {\n          return null;\n        }\n        for (Class<?> superInterface : mapperInterface.getInterfaces()) {\n          if (declaringClass.isAssignableFrom(superInterface)) {\n            MappedStatement ms = resolveMappedStatement(superInterface, methodName,\n                declaringClass, configuration);\n            if (ms != null) {\n              return ms;\n            }\n          }\n        }\n        return null;\n      }\n    }\n  \n    public static class MethodSignature {\n  \n      private final boolean returnsMany;\n      private final boolean returnsMap;\n      private final boolean returnsVoid;\n      private final boolean returnsCursor;\n      private final Class<?> returnType;\n      private final String mapKey;\n      private final Integer resultHandlerIndex;\n      private final Integer rowBoundsIndex;\n      private final ParamNameResolver paramNameResolver;\n  \n      public MethodSignature(Configuration configuration, Class<?> mapperInterface, Method method) {\n        Type resolvedReturnType = TypeParameterResolver.resolveReturnType(method, mapperInterface);\n        if (resolvedReturnType instanceof Class<?>) {\n          this.returnType = (Class<?>) resolvedReturnType;\n        } else if (resolvedReturnType instanceof ParameterizedType) {\n          this.returnType = (Class<?>) ((ParameterizedType) resolvedReturnType).getRawType();\n        } else {\n          this.returnType = method.getReturnType();\n        }\n        this.returnsVoid = void.class.equals(this.returnType);\n        this.returnsMany = (configuration.getObjectFactory().isCollection(this.returnType) || this.returnType.isArray());\n        this.returnsCursor = Cursor.class.equals(this.returnType);\n        this.mapKey = getMapKey(method);\n        this.returnsMap = (this.mapKey != null);\n        this.rowBoundsIndex = getUniqueParamIndex(method, RowBounds.class);\n        this.resultHandlerIndex = getUniqueParamIndex(method, ResultHandler.class);\n        this.paramNameResolver = new ParamNameResolver(configuration, method);\n      }\n  \n      public Object convertArgsToSqlCommandParam(Object[] args) {\n        return paramNameResolver.getNamedParams(args);\n      }\n  \n      public boolean hasRowBounds() {\n        return rowBoundsIndex != null;\n      }\n  \n      public RowBounds extractRowBounds(Object[] args) {\n        return hasRowBounds() ? (RowBounds) args[rowBoundsIndex] : null;\n      }\n  \n      public boolean hasResultHandler() {\n        return resultHandlerIndex != null;\n      }\n  \n      public ResultHandler extractResultHandler(Object[] args) {\n        return hasResultHandler() ? (ResultHandler) args[resultHandlerIndex] : null;\n      }\n  \n      public String getMapKey() {\n        return mapKey;\n      }\n  \n      public Class<?> getReturnType() {\n        return returnType;\n      }\n  \n      public boolean returnsMany() {\n        return returnsMany;\n      }\n  \n      public boolean returnsMap() {\n        return returnsMap;\n      }\n  \n      public boolean returnsVoid() {\n        return returnsVoid;\n      }\n  \n      public boolean returnsCursor() {\n        return returnsCursor;\n      }\n  \n      private Integer getUniqueParamIndex(Method method, Class<?> paramType) {\n        Integer index = null;\n        final Class<?>[] argTypes = method.getParameterTypes();\n        for (int i = 0; i < argTypes.length; i++) {\n          if (paramType.isAssignableFrom(argTypes[i])) {\n            if (index == null) {\n              index = i;\n            } else {\n              throw new BindingException(method.getName() + \" cannot have multiple \" + paramType.getSimpleName() + \" parameters\");\n            }\n          }\n        }\n        return index;\n      }\n  \n      private String getMapKey(Method method) {\n        String mapKey = null;\n        if (Map.class.isAssignableFrom(method.getReturnType())) {\n          final MapKey mapKeyAnnotation = method.getAnnotation(MapKey.class);\n          if (mapKeyAnnotation != null) {\n            mapKey = mapKeyAnnotation.value();\n          }\n        }\n        return mapKey;\n      }\n    }\n  \n  }\n  \n  ```\n\n  **上述的sqlsession的操作跳到 DefaultSqlSession **\n\n  ```\n  public class DefaultSqlSession implements SqlSession {\n  ...\n    @Override\n    public <E> List<E> selectList(String statement, Object parameter) {\n      return this.selectList(statement, parameter, RowBounds.DEFAULT);\n    }\n    @Override\n    public <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds) {\n      try {\n      //根据语句statement拿到MappedStatement\n        MappedStatement ms = configuration.getMappedStatement(statement);\n        //重点来了 executor执行器来执行具体的sql\n        return ,executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);\n      } catch (Exception e) {\n        throw ExceptionFactory.wrapException(\"Error querying database.  Cause: \" + e, e);\n      } finally {\n        ErrorContext.instance().reset();\n      }\n    }\n    ...\n    }\n  ```\n\n  **executor有两个实现：BaseExecutor 和CachingExecutor**\n\n  **这里走CachingExecutor：**\n\n  ```\n  public class CachingExecutor implements Executor {\n  ...\n    @Override\n    public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {\n    //拿到sql boundSql里面存储有要执行的sql\n      BoundSql boundSql = ms.getBoundSql(parameterObject);\n      CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);\n      //返回具体的query方法的执行结果集\n      return query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n    }\n    //缓存sql\n      @Override\n    public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql) {\n        //没有的话走BaseExecutor\n      return delegate.createCacheKey(ms, parameterObject, rowBounds, boundSql);\n    }\n    //具体的query方法\n      @Override\n    public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)\n        throws SQLException {\n      Cache cache = ms.getCache();\n      //这里用到缓存 看之前是否用过sql查询 有的话酒从缓存拿了\n      if (cache != null) {\n        flushCacheIfRequired(ms);\n        if (ms.isUseCache() && resultHandler == null) {\n          ensureNoOutParams(ms, parameterObject, boundSql);\n          @SuppressWarnings(\"unchecked\")\n          List<E> list = (List<E>) tcm.getObject(cache, key);\n          if (list == null) {\n            list = delegate.<E> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n            tcm.putObject(cache, key, list); // issue #578 and #116\n          }\n          return list;\n        }\n      }\n      //没有的话走BaseExecutor\n      return delegate.<E> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n    }\n  \n  ```\n\n  **BaseExecutor：**\n\n  ```\n  //如果没有缓存走这里的query\n  @SuppressWarnings(\"unchecked\")\n    @Override\n    public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n      ErrorContext.instance().resource(ms.getResource()).activity(\"executing a query\").object(ms.getId());\n      if (closed) {\n        throw new ExecutorException(\"Executor was closed.\");\n      }\n      if (queryStack == 0 && ms.isFlushCacheRequired()) {\n        clearLocalCache();\n      }\n      List<E> list;\n      try {\n        queryStack++;\n        list = resultHandler == null ? (List<E>) localCache.getObject(key) : null;\n        if (list != null) {\n          handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);\n        } else {\n          list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);\n        }\n      } finally {\n        queryStack--;\n      }\n      if (queryStack == 0) {\n        for (DeferredLoad deferredLoad : deferredLoads) {\n          deferredLoad.load();\n        }\n        // issue #601\n        deferredLoads.clear();\n        if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {\n          // issue #482\n          clearLocalCache();\n        }\n      }\n      return list;\n    }\n  \n    //再往里的queryFromDatabase\n    private <E> List<E> queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n      List<E> list;\n      localCache.putObject(key, EXECUTION_PLACEHOLDER);\n      try {\n      //这里再次跳转 走SimpleExecutor\n        list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);\n      } finally {\n        localCache.removeObject(key);\n      }\n      localCache.putObject(key, list);\n      if (ms.getStatementType() == StatementType.CALLABLE) {\n        localOutputParameterCache.putObject(key, parameter);\n      }\n      return list;\n    }\n   ...\n   }\n  ```\n\n  **SimpleExecutor:类似的类还有ReuseExecutor，ClosedExecutor，BatchExecutor 都是BaseExecutor的子类**\n\n  **值得一提的是再openSessionFromConnection或openSessionFromConnection的时候就会创建一个新的executor并制定类型:**\n\n  ```\n    public Executor newExecutor(Transaction transaction, ExecutorType executorType) {\n      executorType = executorType == null ? defaultExecutorType : executorType;\n      executorType = executorType == null ? ExecutorType.SIMPLE : executorType;\n      Executor executor;\n      if (ExecutorType.BATCH == executorType) {\n        executor = new BatchExecutor(this, transaction);\n      } else if (ExecutorType.REUSE == executorType) {\n        executor = new ReuseExecutor(this, transaction);\n      } else {\n        executor = new SimpleExecutor(this, transaction);\n      }\n      if (cacheEnabled) {\n        executor = new CachingExecutor(executor);\n      }\n      executor = (Executor) interceptorChain.pluginAll(executor);\n      return executor;\n    }\n  ```\n\n  ```\n    @Override\n    public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {\n      Statement stmt = null;\n      try {\n        Configuration configuration = ms.getConfiguration();\n       //获得一个StatementHandler\n        StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);\n       //进行预编译sql\n        stmt = prepareStatement(handler, ms.getStatementLog());\n        //交给handler去执行\n        return handler.<E>query(stmt, resultHandler);\n      } finally {\n        closeStatement(stmt);\n      }\n    }\n          //进行预编译sql\n      private Statement prepareStatement(StatementHandler handler, Log statementLog) throws SQLException {\n      Statement stmt;\n      Connection connection = getConnection(statementLog);\n      stmt = handler.prepare(connection, transaction.getTimeout());\n      handler.parameterize(stmt);\n      return stmt;\n    }\n  ```\n\n  **交给StatementHandler去执行了,有几个实现类：这里走的PreparedStatementHandler**\n\n  ```\n   public class PreparedStatementHandler extends BaseStatementHandler {\n  ...\n   @Override\n    public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {\n      PreparedStatement ps = (PreparedStatement) statement;\n      ps.execute();\n      return resultSetHandler.<E> handleResultSets(ps);\n    }\n    ...\n    }\n  ```\n\n  **最后交给DefaultResultSetHandler来做**\n\n  ```\n  public class DefaultResultSetHandler implements ResultSetHandler {\n  \n    @Override\n    public List<Object> handleResultSets(Statement stmt) throws SQLException {\n      ErrorContext.instance().activity(\"handling results\").object(mappedStatement.getId());\n  \n      final List<Object> multipleResults = new ArrayList<Object>();\n  \n      int resultSetCount = 0;\n      ResultSetWrapper rsw = getFirstResultSet(stmt);\n  \n      List<ResultMap> resultMaps = mappedStatement.getResultMaps();\n      int resultMapCount = resultMaps.size();\n      validateResultMapsCount(rsw, resultMapCount);\n      while (rsw != null && resultMapCount > resultSetCount) {\n        ResultMap resultMap = resultMaps.get(resultSetCount);\n        handleResultSet(rsw, resultMap, multipleResults, null);\n        rsw = getNextResultSet(stmt);\n        cleanUpAfterHandlingResultSet();\n        resultSetCount++;\n      }\n  \n      String[] resultSets = mappedStatement.getResultSets();\n      if (resultSets != null) {\n        while (rsw != null && resultSetCount < resultSets.length) {\n          ResultMapping parentMapping = nextResultMaps.get(resultSets[resultSetCount]);\n          if (parentMapping != null) {\n            String nestedResultMapId = parentMapping.getNestedResultMapId();\n            ResultMap resultMap = configuration.getResultMap(nestedResultMapId);\n            handleResultSet(rsw, resultMap, null, parentMapping);\n          }\n          rsw = getNextResultSet(stmt);\n          cleanUpAfterHandlingResultSet();\n          resultSetCount++;\n        }\n      }\n  \n      return collapseSingleResultList(multipleResults);\n    }\n      @SuppressWarnings(\"unchecked\")\n    private List<Object> collapseSingleResultList(List<Object> multipleResults) {\n      return multipleResults.size() == 1 ? (List<Object>) multipleResults.get(0) : multipleResults;\n    }\n  \n  \n  ```\n\n  **整体流程**\n\n  **Mapper.selectOne()-->MapperProxy.invoke-->mapperMethod-->SqlSession.selectOne-->Executor.query()-->SimpleExecutor.doQuery-->PreparedStatementHandler.query-->DefaultResultSetHandler.query**\n\n  ","slug":"Mybatis源码分析-二","published":1,"updated":"2022-09-03T07:30:55.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7llz8fk007ftwfajup4ljlq","content":"<p>Mybatis源码分析二<a id=\"more\"></a></p>\n<p><strong>基于3.4.5版本。与springboot2.0.5 mybatis-spring1.3.2</strong></p>\n<ul>\n<li><p>主要的核心类</p>\n<ul>\n<li><strong>Configuration: MyBatis 所有的配置信息都维持在 Configuration 对象之中。</strong></li>\n<li><strong>SqlSession :作为 MyBatis 工作的主要顶层 API，表示和数据库交互的会话，完成必要数据库增删改查功能</strong></li>\n<li><strong>Executor :MyBatis 执行器，是 MyBatis 调度的核心，负责 SQL 语句的生成和查询缓存的维护</strong></li>\n<li><strong>StatementHandler :封装了 JDBC Statement 操作，负责对 JDBC statement 的操作，如设置参数、将 Statement 结果集转换成 List 集合。</strong></li>\n<li>*<em>ParameterHandler :负责对用户传递的参数转换成 JDBC Statement 所需要的参数 *</em></li>\n<li><strong>ResultSetHandler :负责将 JDBC 返回的 ResultSet 结果集对象转换成 List 类型的集合</strong></li>\n<li><strong>TypeHandler:负责 java 数据类型和 jdbc 数据类型之间的映射和转换</strong></li>\n<li><strong>MappedStatement :MappedStatement 维护了一条 &lt;select|update|delete|insert&gt; 节点的封装</strong></li>\n<li><strong>SqlSource :负责根据用户传递的 parameterObject，动态地生成 SQL 语句，将信息封装到 BoundSql 对象中并返回</strong></li>\n<li><strong>BoundSql :表示动态生成的 SQL 语句以及相应的参数信息</strong></li>\n</ul>\n</li>\n<li><p><strong>Mybatis启动过程</strong></p>\n<p><strong>这个类是个建造者 会创建sqlsessionFactory,提供了挺多的build方法。</strong></p>\n<p>上源码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SqlSessionFactoryBuilder &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\"> public SqlSessionFactory build(Reader reader) &#123;</span><br><span class=\"line\">    return build(reader, null, null);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public SqlSessionFactory build(Reader reader, String environment) &#123;</span><br><span class=\"line\">    return build(reader, environment, null);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public SqlSessionFactory build(Reader reader, Properties properties) &#123;</span><br><span class=\"line\">    return build(reader, null, properties);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public SqlSessionFactory build(Reader reader, String environment, Properties properties) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      XMLConfigBuilder parser = new XMLConfigBuilder(reader, environment, properties);</span><br><span class=\"line\">      //注意这里的parser.parse();</span><br><span class=\"line\">      return build(parser.parse());</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">      throw ExceptionFactory.wrapException(&quot;Error building SqlSession.&quot;, e);</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">      //重置错误上下文实例</span><br><span class=\"line\">      ErrorContext.instance().reset();</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        reader.close();</span><br><span class=\"line\">      &#125; catch (IOException e) &#123;</span><br><span class=\"line\">        // Intentionally ignore. Prefer previous error.</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //parse方法</span><br><span class=\"line\">  public Configuration parse() &#123;</span><br><span class=\"line\">    if (parsed) &#123;</span><br><span class=\"line\">      throw new BuilderException(&quot;Each XMLConfigBuilder can only be used once.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parsed = true;</span><br><span class=\"line\">    parseConfiguration(parser.evalNode(&quot;/configuration&quot;));</span><br><span class=\"line\">    return configuration;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> //具体的解析</span><br><span class=\"line\">  private void parseConfiguration(XNode root) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      //issue #117 read properties first</span><br><span class=\"line\">      // 解析&lt;properties&gt;节点</span><br><span class=\"line\">      propertiesElement(root.evalNode(&quot;properties&quot;));</span><br><span class=\"line\">      //解析settings节点</span><br><span class=\"line\">      Properties settings = settingsAsProperties(root.evalNode(&quot;settings&quot;));</span><br><span class=\"line\">      //加载自定义的settings</span><br><span class=\"line\">      loadCustomVfs(settings);</span><br><span class=\"line\">      /// 解析&lt;typeAliases&gt;节点</span><br><span class=\"line\">      typeAliasesElement(root.evalNode(&quot;typeAliases&quot;));</span><br><span class=\"line\">      // 解析&lt;plugins&gt;节点</span><br><span class=\"line\">      pluginElement(root.evalNode(&quot;plugins&quot;));</span><br><span class=\"line\">      // 解析&lt;objectFactory&gt;节点</span><br><span class=\"line\">      objectFactoryElement(root.evalNode(&quot;objectFactory&quot;));</span><br><span class=\"line\">      objectWrapperFactoryElement(root.evalNode(&quot;objectWrapperFactory&quot;));</span><br><span class=\"line\">      // 解析&lt;reflectorFactory&gt;节点</span><br><span class=\"line\">      reflectorFactoryElement(root.evalNode(&quot;reflectorFactory&quot;));</span><br><span class=\"line\">      settingsElement(settings);</span><br><span class=\"line\">       // 解析&lt;environments&gt;节点</span><br><span class=\"line\">      // read it after objectFactory and objectWrapperFactory issue #631</span><br><span class=\"line\">      environmentsElement(root.evalNode(&quot;environments&quot;));</span><br><span class=\"line\">      //多数据源的话解析dbid</span><br><span class=\"line\">      databaseIdProviderElement(root.evalNode(&quot;databaseIdProvider&quot;));</span><br><span class=\"line\">      typeHandlerElement(root.evalNode(&quot;typeHandlers&quot;));</span><br><span class=\"line\">       // 解析&lt;mappers&gt;节点</span><br><span class=\"line\">      mapperElement(root.evalNode(&quot;mappers&quot;));</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">      throw new BuilderException(&quot;Error parsing SQL Mapper Configuration. Cause: &quot; + e, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public SqlSessionFactory build(InputStream inputStream) &#123;</span><br><span class=\"line\">    return build(inputStream, null, null);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public SqlSessionFactory build(InputStream inputStream, String environment) &#123;</span><br><span class=\"line\">    return build(inputStream, environment, null);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public SqlSessionFactory build(InputStream inputStream, Properties properties) &#123;</span><br><span class=\"line\">    return build(inputStream, null, properties);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);</span><br><span class=\"line\">      return build(parser.parse());</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">      throw ExceptionFactory.wrapException(&quot;Error building SqlSession.&quot;, e);</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">      ErrorContext.instance().reset();</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        inputStream.close();</span><br><span class=\"line\">      &#125; catch (IOException e) &#123;</span><br><span class=\"line\">        // Intentionally ignore. Prefer previous error.</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在项目启动的适合，我这里用的springboot集成的项目当然配置文件是写在application.properties的，springmvc项目一般在xml文件中配置的</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">mybatis.type-aliases-package=com.convergence.domain</span><br><span class=\"line\">mybatis.mapper-locations=classpath:/mapper/*.xml</span><br><span class=\"line\">mybatis.config-location=</span><br><span class=\"line\">mybatis.configuration.map-underscore-to-camel-case=true</span><br><span class=\"line\">mybatis.configuration.multiple-result-sets-enabled=true</span><br><span class=\"line\">mybatis.configuration.useColumnLabel=true</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建factory</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SqlSessionFactoryBuilder &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">public SqlSessionFactory build(Configuration config) &#123;</span><br><span class=\"line\">  return new DefaultSqlSessionFactory(config);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Configuration类记录了mybatis的一些配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br><span class=\"line\">913</span><br><span class=\"line\">914</span><br><span class=\"line\">915</span><br><span class=\"line\">916</span><br><span class=\"line\">917</span><br><span class=\"line\">918</span><br><span class=\"line\">919</span><br><span class=\"line\">920</span><br><span class=\"line\">921</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *    Copyright 2009-2017 the original author or authors.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *    Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class=\"line\"> *    you may not use this file except in compliance with the License.</span><br><span class=\"line\"> *    You may obtain a copy of the License at</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *       http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *    Unless required by applicable law or agreed to in writing, software</span><br><span class=\"line\"> *    distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class=\"line\"> *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"line\"> *    See the License for the specific language governing permissions and</span><br><span class=\"line\"> *    limitations under the License.</span><br><span class=\"line\"> */</span><br><span class=\"line\">package org.apache.ibatis.session;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">import java.util.Collection;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.HashSet;</span><br><span class=\"line\">import java.util.LinkedList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\">import java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.ibatis.binding.MapperRegistry;</span><br><span class=\"line\">import org.apache.ibatis.builder.CacheRefResolver;</span><br><span class=\"line\">import org.apache.ibatis.builder.ResultMapResolver;</span><br><span class=\"line\">import org.apache.ibatis.builder.annotation.MethodResolver;</span><br><span class=\"line\">import org.apache.ibatis.builder.xml.XMLStatementBuilder;</span><br><span class=\"line\">import org.apache.ibatis.cache.Cache;</span><br><span class=\"line\">import org.apache.ibatis.cache.decorators.FifoCache;</span><br><span class=\"line\">import org.apache.ibatis.cache.decorators.LruCache;</span><br><span class=\"line\">import org.apache.ibatis.cache.decorators.SoftCache;</span><br><span class=\"line\">import org.apache.ibatis.cache.decorators.WeakCache;</span><br><span class=\"line\">import org.apache.ibatis.cache.impl.PerpetualCache;</span><br><span class=\"line\">import org.apache.ibatis.datasource.jndi.JndiDataSourceFactory;</span><br><span class=\"line\">import org.apache.ibatis.datasource.pooled.PooledDataSourceFactory;</span><br><span class=\"line\">import org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;</span><br><span class=\"line\">import org.apache.ibatis.executor.BatchExecutor;</span><br><span class=\"line\">import org.apache.ibatis.executor.CachingExecutor;</span><br><span class=\"line\">import org.apache.ibatis.executor.Executor;</span><br><span class=\"line\">import org.apache.ibatis.executor.ReuseExecutor;</span><br><span class=\"line\">import org.apache.ibatis.executor.SimpleExecutor;</span><br><span class=\"line\">import org.apache.ibatis.executor.keygen.KeyGenerator;</span><br><span class=\"line\">import org.apache.ibatis.executor.loader.ProxyFactory;</span><br><span class=\"line\">import org.apache.ibatis.executor.loader.cglib.CglibProxyFactory;</span><br><span class=\"line\">import org.apache.ibatis.executor.loader.javassist.JavassistProxyFactory;</span><br><span class=\"line\">import org.apache.ibatis.executor.parameter.ParameterHandler;</span><br><span class=\"line\">import org.apache.ibatis.executor.resultset.DefaultResultSetHandler;</span><br><span class=\"line\">import org.apache.ibatis.executor.resultset.ResultSetHandler;</span><br><span class=\"line\">import org.apache.ibatis.executor.statement.RoutingStatementHandler;</span><br><span class=\"line\">import org.apache.ibatis.executor.statement.StatementHandler;</span><br><span class=\"line\">import org.apache.ibatis.io.VFS;</span><br><span class=\"line\">import org.apache.ibatis.logging.Log;</span><br><span class=\"line\">import org.apache.ibatis.logging.LogFactory;</span><br><span class=\"line\">import org.apache.ibatis.logging.commons.JakartaCommonsLoggingImpl;</span><br><span class=\"line\">import org.apache.ibatis.logging.jdk14.Jdk14LoggingImpl;</span><br><span class=\"line\">import org.apache.ibatis.logging.log4j.Log4jImpl;</span><br><span class=\"line\">import org.apache.ibatis.logging.log4j2.Log4j2Impl;</span><br><span class=\"line\">import org.apache.ibatis.logging.nologging.NoLoggingImpl;</span><br><span class=\"line\">import org.apache.ibatis.logging.slf4j.Slf4jImpl;</span><br><span class=\"line\">import org.apache.ibatis.logging.stdout.StdOutImpl;</span><br><span class=\"line\">import org.apache.ibatis.mapping.BoundSql;</span><br><span class=\"line\">import org.apache.ibatis.mapping.Environment;</span><br><span class=\"line\">import org.apache.ibatis.mapping.MappedStatement;</span><br><span class=\"line\">import org.apache.ibatis.mapping.ParameterMap;</span><br><span class=\"line\">import org.apache.ibatis.mapping.ResultMap;</span><br><span class=\"line\">import org.apache.ibatis.mapping.VendorDatabaseIdProvider;</span><br><span class=\"line\">import org.apache.ibatis.parsing.XNode;</span><br><span class=\"line\">import org.apache.ibatis.plugin.Interceptor;</span><br><span class=\"line\">import org.apache.ibatis.plugin.InterceptorChain;</span><br><span class=\"line\">import org.apache.ibatis.reflection.DefaultReflectorFactory;</span><br><span class=\"line\">import org.apache.ibatis.reflection.MetaObject;</span><br><span class=\"line\">import org.apache.ibatis.reflection.ReflectorFactory;</span><br><span class=\"line\">import org.apache.ibatis.reflection.factory.DefaultObjectFactory;</span><br><span class=\"line\">import org.apache.ibatis.reflection.factory.ObjectFactory;</span><br><span class=\"line\">import org.apache.ibatis.reflection.wrapper.DefaultObjectWrapperFactory;</span><br><span class=\"line\">import org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory;</span><br><span class=\"line\">import org.apache.ibatis.scripting.LanguageDriver;</span><br><span class=\"line\">import org.apache.ibatis.scripting.LanguageDriverRegistry;</span><br><span class=\"line\">import org.apache.ibatis.scripting.defaults.RawLanguageDriver;</span><br><span class=\"line\">import org.apache.ibatis.scripting.xmltags.XMLLanguageDriver;</span><br><span class=\"line\">import org.apache.ibatis.transaction.Transaction;</span><br><span class=\"line\">import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;</span><br><span class=\"line\">import org.apache.ibatis.transaction.managed.ManagedTransactionFactory;</span><br><span class=\"line\">import org.apache.ibatis.type.JdbcType;</span><br><span class=\"line\">import org.apache.ibatis.type.TypeAliasRegistry;</span><br><span class=\"line\">import org.apache.ibatis.type.TypeHandler;</span><br><span class=\"line\">import org.apache.ibatis.type.TypeHandlerRegistry;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author Clinton Begin</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Configuration &#123;</span><br><span class=\"line\">  //上下文环境对象</span><br><span class=\"line\">  protected Environment environment;</span><br><span class=\"line\"></span><br><span class=\"line\">  protected boolean safeRowBoundsEnabled;</span><br><span class=\"line\">  protected boolean safeResultHandlerEnabled = true;</span><br><span class=\"line\">  protected boolean mapUnderscoreToCamelCase;</span><br><span class=\"line\">  //当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载</span><br><span class=\"line\">  protected boolean aggressiveLazyLoading;</span><br><span class=\"line\">  //允许或不允许多种结果集从一个单独的语句中返回（需要适合的驱动）。</span><br><span class=\"line\">  protected boolean multipleResultSetsEnabled = true;</span><br><span class=\"line\">  //允许 JDBC 支持生成的键。需要适合的驱动。如果设置为 true 则这个设置强制生成的键被使用，尽管一些\t//驱动拒绝兼容但仍然有效（比如 Derby</span><br><span class=\"line\">  protected boolean useGeneratedKeys;</span><br><span class=\"line\">  //使用列标签代替列名。不同的驱动在这方便表现不同。参考驱动文档或充分测试两种方法来决定所使用的驱动</span><br><span class=\"line\">  protected boolean useColumnLabel = true;</span><br><span class=\"line\">  //是否全局启用缓存 默认开启</span><br><span class=\"line\">  protected boolean cacheEnabled = true;</span><br><span class=\"line\">  protected boolean callSettersOnNulls;</span><br><span class=\"line\">  protected boolean useActualParamName = true;</span><br><span class=\"line\">  protected boolean returnInstanceForEmptyRow;</span><br><span class=\"line\"></span><br><span class=\"line\">  protected String logPrefix;</span><br><span class=\"line\">  protected Class &lt;? extends Log&gt; logImpl;</span><br><span class=\"line\">  protected Class &lt;? extends VFS&gt; vfsImpl;</span><br><span class=\"line\">  protected LocalCacheScope localCacheScope = LocalCacheScope.SESSION;</span><br><span class=\"line\">  protected JdbcType jdbcTypeForNull = JdbcType.OTHER;</span><br><span class=\"line\">  protected Set&lt;String&gt; lazyLoadTriggerMethods = new HashSet&lt;String&gt;(Arrays.asList(new String[] &#123; &quot;equals&quot;, &quot;clone&quot;, &quot;hashCode&quot;, &quot;toString&quot; &#125;));</span><br><span class=\"line\">  protected Integer defaultStatementTimeout;</span><br><span class=\"line\">  protected Integer defaultFetchSize;</span><br><span class=\"line\">  protected ExecutorType defaultExecutorType = ExecutorType.SIMPLE;</span><br><span class=\"line\">  //指定 MyBatis 如何自动映射列到字段 / 属性。PARTIAL 只会自动映射简单，没有嵌套的结果。FULL 会自//动映射任意复杂的结果（嵌套的或其他情况）。</span><br><span class=\"line\">  protected AutoMappingBehavior autoMappingBehavior = AutoMappingBehavior.PARTIAL;</span><br><span class=\"line\">  protected AutoMappingUnknownColumnBehavior autoMappingUnknownColumnBehavior = AutoMappingUnknownColumnBehavior.NONE;</span><br><span class=\"line\"></span><br><span class=\"line\">  protected Properties variables = new Properties();</span><br><span class=\"line\">  protected ReflectorFactory reflectorFactory = new DefaultReflectorFactory();</span><br><span class=\"line\">  protected ObjectFactory objectFactory = new DefaultObjectFactory();</span><br><span class=\"line\">  protected ObjectWrapperFactory objectWrapperFactory = new DefaultObjectWrapperFactory();</span><br><span class=\"line\">  //全局是否启用活禁用懒加载，默认关闭 </span><br><span class=\"line\">  protected boolean lazyLoadingEnabled = false;</span><br><span class=\"line\">  protected ProxyFactory proxyFactory = new JavassistProxyFactory(); // #224 Using internal Javassist instead of OGNL</span><br><span class=\"line\"></span><br><span class=\"line\">  protected String databaseId;</span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Configuration factory class.</span><br><span class=\"line\">   * Used to create Configuration for loading deserialized unread properties.</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @see &lt;a href=&apos;https://code.google.com/p/mybatis/issues/detail?id=300&apos;&gt;Issue 300 (google code)&lt;/a&gt;</span><br><span class=\"line\">   */</span><br><span class=\"line\">  protected Class&lt;?&gt; configurationFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">  protected final MapperRegistry mapperRegistry = new MapperRegistry(this);</span><br><span class=\"line\">  protected final InterceptorChain interceptorChain = new InterceptorChain();</span><br><span class=\"line\">  protected final TypeHandlerRegistry typeHandlerRegistry = new TypeHandlerRegistry();</span><br><span class=\"line\">  protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry();</span><br><span class=\"line\">  protected final LanguageDriverRegistry languageRegistry = new LanguageDriverRegistry();</span><br><span class=\"line\"></span><br><span class=\"line\">  protected final Map&lt;String, MappedStatement&gt; mappedStatements = new StrictMap&lt;MappedStatement&gt;(&quot;Mapped Statements collection&quot;);</span><br><span class=\"line\">  protected final Map&lt;String, Cache&gt; caches = new StrictMap&lt;Cache&gt;(&quot;Caches collection&quot;);</span><br><span class=\"line\">  protected final Map&lt;String, ResultMap&gt; resultMaps = new StrictMap&lt;ResultMap&gt;(&quot;Result Maps collection&quot;);</span><br><span class=\"line\">  protected final Map&lt;String, ParameterMap&gt; parameterMaps = new StrictMap&lt;ParameterMap&gt;(&quot;Parameter Maps collection&quot;);</span><br><span class=\"line\">  protected final Map&lt;String, KeyGenerator&gt; keyGenerators = new StrictMap&lt;KeyGenerator&gt;(&quot;Key Generators collection&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  protected final Set&lt;String&gt; loadedResources = new HashSet&lt;String&gt;();</span><br><span class=\"line\">  protected final Map&lt;String, XNode&gt; sqlFragments = new StrictMap&lt;XNode&gt;(&quot;XML fragments parsed from previous mappers&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  protected final Collection&lt;XMLStatementBuilder&gt; incompleteStatements = new LinkedList&lt;XMLStatementBuilder&gt;();</span><br><span class=\"line\">  protected final Collection&lt;CacheRefResolver&gt; incompleteCacheRefs = new LinkedList&lt;CacheRefResolver&gt;();</span><br><span class=\"line\">  protected final Collection&lt;ResultMapResolver&gt; incompleteResultMaps = new LinkedList&lt;ResultMapResolver&gt;();</span><br><span class=\"line\">  protected final Collection&lt;MethodResolver&gt; incompleteMethods = new LinkedList&lt;MethodResolver&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">   * A map holds cache-ref relationship. The key is the namespace that</span><br><span class=\"line\">   * references a cache bound to another namespace and the value is the</span><br><span class=\"line\">   * namespace which the actual cache is bound to.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  protected final Map&lt;String, String&gt; cacheRefMap = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  public Configuration(Environment environment) &#123;</span><br><span class=\"line\">    this();</span><br><span class=\"line\">    this.environment = environment;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Configuration() &#123;</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;JDBC&quot;, JdbcTransactionFactory.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;MANAGED&quot;, ManagedTransactionFactory.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;JNDI&quot;, JndiDataSourceFactory.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;POOLED&quot;, PooledDataSourceFactory.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;UNPOOLED&quot;, UnpooledDataSourceFactory.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;PERPETUAL&quot;, PerpetualCache.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;FIFO&quot;, FifoCache.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;LRU&quot;, LruCache.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;SOFT&quot;, SoftCache.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;WEAK&quot;, WeakCache.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;DB_VENDOR&quot;, VendorDatabaseIdProvider.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;XML&quot;, XMLLanguageDriver.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;RAW&quot;, RawLanguageDriver.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;SLF4J&quot;, Slf4jImpl.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;COMMONS_LOGGING&quot;, JakartaCommonsLoggingImpl.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;LOG4J&quot;, Log4jImpl.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;LOG4J2&quot;, Log4j2Impl.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;JDK_LOGGING&quot;, Jdk14LoggingImpl.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;STDOUT_LOGGING&quot;, StdOutImpl.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;NO_LOGGING&quot;, NoLoggingImpl.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;CGLIB&quot;, CglibProxyFactory.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;JAVASSIST&quot;, JavassistProxyFactory.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    languageRegistry.setDefaultDriverClass(XMLLanguageDriver.class);</span><br><span class=\"line\">    languageRegistry.register(RawLanguageDriver.class);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public String getLogPrefix() &#123;</span><br><span class=\"line\">    return logPrefix;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setLogPrefix(String logPrefix) &#123;</span><br><span class=\"line\">    this.logPrefix = logPrefix;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Class&lt;? extends Log&gt; getLogImpl() &#123;</span><br><span class=\"line\">    return logImpl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setLogImpl(Class&lt;? extends Log&gt; logImpl) &#123;</span><br><span class=\"line\">    if (logImpl != null) &#123;</span><br><span class=\"line\">      this.logImpl = logImpl;</span><br><span class=\"line\">      LogFactory.useCustomLogging(this.logImpl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Class&lt;? extends VFS&gt; getVfsImpl() &#123;</span><br><span class=\"line\">    return this.vfsImpl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setVfsImpl(Class&lt;? extends VFS&gt; vfsImpl) &#123;</span><br><span class=\"line\">    if (vfsImpl != null) &#123;</span><br><span class=\"line\">      this.vfsImpl = vfsImpl;</span><br><span class=\"line\">      VFS.addImplClass(this.vfsImpl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isCallSettersOnNulls() &#123;</span><br><span class=\"line\">    return callSettersOnNulls;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setCallSettersOnNulls(boolean callSettersOnNulls) &#123;</span><br><span class=\"line\">    this.callSettersOnNulls = callSettersOnNulls;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isUseActualParamName() &#123;</span><br><span class=\"line\">    return useActualParamName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setUseActualParamName(boolean useActualParamName) &#123;</span><br><span class=\"line\">    this.useActualParamName = useActualParamName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isReturnInstanceForEmptyRow() &#123;</span><br><span class=\"line\">    return returnInstanceForEmptyRow;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setReturnInstanceForEmptyRow(boolean returnEmptyInstance) &#123;</span><br><span class=\"line\">    this.returnInstanceForEmptyRow = returnEmptyInstance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public String getDatabaseId() &#123;</span><br><span class=\"line\">    return databaseId;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setDatabaseId(String databaseId) &#123;</span><br><span class=\"line\">    this.databaseId = databaseId;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Class&lt;?&gt; getConfigurationFactory() &#123;</span><br><span class=\"line\">    return configurationFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setConfigurationFactory(Class&lt;?&gt; configurationFactory) &#123;</span><br><span class=\"line\">    this.configurationFactory = configurationFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isSafeResultHandlerEnabled() &#123;</span><br><span class=\"line\">    return safeResultHandlerEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setSafeResultHandlerEnabled(boolean safeResultHandlerEnabled) &#123;</span><br><span class=\"line\">    this.safeResultHandlerEnabled = safeResultHandlerEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isSafeRowBoundsEnabled() &#123;</span><br><span class=\"line\">    return safeRowBoundsEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setSafeRowBoundsEnabled(boolean safeRowBoundsEnabled) &#123;</span><br><span class=\"line\">    this.safeRowBoundsEnabled = safeRowBoundsEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isMapUnderscoreToCamelCase() &#123;</span><br><span class=\"line\">    return mapUnderscoreToCamelCase;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setMapUnderscoreToCamelCase(boolean mapUnderscoreToCamelCase) &#123;</span><br><span class=\"line\">    this.mapUnderscoreToCamelCase = mapUnderscoreToCamelCase;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addLoadedResource(String resource) &#123;</span><br><span class=\"line\">    loadedResources.add(resource);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isResourceLoaded(String resource) &#123;</span><br><span class=\"line\">    return loadedResources.contains(resource);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Environment getEnvironment() &#123;</span><br><span class=\"line\">    return environment;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setEnvironment(Environment environment) &#123;</span><br><span class=\"line\">    this.environment = environment;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public AutoMappingBehavior getAutoMappingBehavior() &#123;</span><br><span class=\"line\">    return autoMappingBehavior;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setAutoMappingBehavior(AutoMappingBehavior autoMappingBehavior) &#123;</span><br><span class=\"line\">    this.autoMappingBehavior = autoMappingBehavior;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @since 3.4.0</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public AutoMappingUnknownColumnBehavior getAutoMappingUnknownColumnBehavior() &#123;</span><br><span class=\"line\">    return autoMappingUnknownColumnBehavior;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @since 3.4.0</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public void setAutoMappingUnknownColumnBehavior(AutoMappingUnknownColumnBehavior autoMappingUnknownColumnBehavior) &#123;</span><br><span class=\"line\">    this.autoMappingUnknownColumnBehavior = autoMappingUnknownColumnBehavior;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isLazyLoadingEnabled() &#123;</span><br><span class=\"line\">    return lazyLoadingEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setLazyLoadingEnabled(boolean lazyLoadingEnabled) &#123;</span><br><span class=\"line\">    this.lazyLoadingEnabled = lazyLoadingEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ProxyFactory getProxyFactory() &#123;</span><br><span class=\"line\">    return proxyFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setProxyFactory(ProxyFactory proxyFactory) &#123;</span><br><span class=\"line\">    if (proxyFactory == null) &#123;</span><br><span class=\"line\">      proxyFactory = new JavassistProxyFactory();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.proxyFactory = proxyFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isAggressiveLazyLoading() &#123;</span><br><span class=\"line\">    return aggressiveLazyLoading;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setAggressiveLazyLoading(boolean aggressiveLazyLoading) &#123;</span><br><span class=\"line\">    this.aggressiveLazyLoading = aggressiveLazyLoading;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isMultipleResultSetsEnabled() &#123;</span><br><span class=\"line\">    return multipleResultSetsEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setMultipleResultSetsEnabled(boolean multipleResultSetsEnabled) &#123;</span><br><span class=\"line\">    this.multipleResultSetsEnabled = multipleResultSetsEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Set&lt;String&gt; getLazyLoadTriggerMethods() &#123;</span><br><span class=\"line\">    return lazyLoadTriggerMethods;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setLazyLoadTriggerMethods(Set&lt;String&gt; lazyLoadTriggerMethods) &#123;</span><br><span class=\"line\">    this.lazyLoadTriggerMethods = lazyLoadTriggerMethods;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isUseGeneratedKeys() &#123;</span><br><span class=\"line\">    return useGeneratedKeys;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setUseGeneratedKeys(boolean useGeneratedKeys) &#123;</span><br><span class=\"line\">    this.useGeneratedKeys = useGeneratedKeys;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ExecutorType getDefaultExecutorType() &#123;</span><br><span class=\"line\">    return defaultExecutorType;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setDefaultExecutorType(ExecutorType defaultExecutorType) &#123;</span><br><span class=\"line\">    this.defaultExecutorType = defaultExecutorType;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isCacheEnabled() &#123;</span><br><span class=\"line\">    return cacheEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setCacheEnabled(boolean cacheEnabled) &#123;</span><br><span class=\"line\">    this.cacheEnabled = cacheEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Integer getDefaultStatementTimeout() &#123;</span><br><span class=\"line\">    return defaultStatementTimeout;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setDefaultStatementTimeout(Integer defaultStatementTimeout) &#123;</span><br><span class=\"line\">    this.defaultStatementTimeout = defaultStatementTimeout;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @since 3.3.0</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public Integer getDefaultFetchSize() &#123;</span><br><span class=\"line\">    return defaultFetchSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @since 3.3.0</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public void setDefaultFetchSize(Integer defaultFetchSize) &#123;</span><br><span class=\"line\">    this.defaultFetchSize = defaultFetchSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isUseColumnLabel() &#123;</span><br><span class=\"line\">    return useColumnLabel;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setUseColumnLabel(boolean useColumnLabel) &#123;</span><br><span class=\"line\">    this.useColumnLabel = useColumnLabel;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public LocalCacheScope getLocalCacheScope() &#123;</span><br><span class=\"line\">    return localCacheScope;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setLocalCacheScope(LocalCacheScope localCacheScope) &#123;</span><br><span class=\"line\">    this.localCacheScope = localCacheScope;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public JdbcType getJdbcTypeForNull() &#123;</span><br><span class=\"line\">    return jdbcTypeForNull;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setJdbcTypeForNull(JdbcType jdbcTypeForNull) &#123;</span><br><span class=\"line\">    this.jdbcTypeForNull = jdbcTypeForNull;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Properties getVariables() &#123;</span><br><span class=\"line\">    return variables;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setVariables(Properties variables) &#123;</span><br><span class=\"line\">    this.variables = variables;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public TypeHandlerRegistry getTypeHandlerRegistry() &#123;</span><br><span class=\"line\">    return typeHandlerRegistry;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Set a default &#123;@link TypeHandler&#125; class for &#123;@link Enum&#125;.</span><br><span class=\"line\">   * A default &#123;@link TypeHandler&#125; is &#123;@link org.apache.ibatis.type.EnumTypeHandler&#125;.</span><br><span class=\"line\">   * @param typeHandler a type handler class for &#123;@link Enum&#125;</span><br><span class=\"line\">   * @since 3.4.5</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public void setDefaultEnumTypeHandler(Class&lt;? extends TypeHandler&gt; typeHandler) &#123;</span><br><span class=\"line\">    if (typeHandler != null) &#123;</span><br><span class=\"line\">      getTypeHandlerRegistry().setDefaultEnumTypeHandler(typeHandler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public TypeAliasRegistry getTypeAliasRegistry() &#123;</span><br><span class=\"line\">    return typeAliasRegistry;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @since 3.2.2</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public MapperRegistry getMapperRegistry() &#123;</span><br><span class=\"line\">    return mapperRegistry;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ReflectorFactory getReflectorFactory() &#123;</span><br><span class=\"line\">\t  return reflectorFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setReflectorFactory(ReflectorFactory reflectorFactory) &#123;</span><br><span class=\"line\">\t  this.reflectorFactory = reflectorFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ObjectFactory getObjectFactory() &#123;</span><br><span class=\"line\">    return objectFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setObjectFactory(ObjectFactory objectFactory) &#123;</span><br><span class=\"line\">    this.objectFactory = objectFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ObjectWrapperFactory getObjectWrapperFactory() &#123;</span><br><span class=\"line\">    return objectWrapperFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setObjectWrapperFactory(ObjectWrapperFactory objectWrapperFactory) &#123;</span><br><span class=\"line\">    this.objectWrapperFactory = objectWrapperFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @since 3.2.2</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public List&lt;Interceptor&gt; getInterceptors() &#123;</span><br><span class=\"line\">    return interceptorChain.getInterceptors();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public LanguageDriverRegistry getLanguageRegistry() &#123;</span><br><span class=\"line\">    return languageRegistry;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setDefaultScriptingLanguage(Class&lt;?&gt; driver) &#123;</span><br><span class=\"line\">    if (driver == null) &#123;</span><br><span class=\"line\">      driver = XMLLanguageDriver.class;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getLanguageRegistry().setDefaultDriverClass(driver);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public LanguageDriver getDefaultScriptingLanguageInstance() &#123;</span><br><span class=\"line\">    return languageRegistry.getDefaultDriver();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /** @deprecated Use &#123;@link #getDefaultScriptingLanguageInstance()&#125; */</span><br><span class=\"line\">  @Deprecated</span><br><span class=\"line\">  public LanguageDriver getDefaultScriptingLanuageInstance() &#123;</span><br><span class=\"line\">    return getDefaultScriptingLanguageInstance();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public MetaObject newMetaObject(Object object) &#123;</span><br><span class=\"line\">    return MetaObject.forObject(object, objectFactory, objectWrapperFactory, reflectorFactory);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ParameterHandler newParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) &#123;</span><br><span class=\"line\">    ParameterHandler parameterHandler = mappedStatement.getLang().createParameterHandler(mappedStatement, parameterObject, boundSql);</span><br><span class=\"line\">    parameterHandler = (ParameterHandler) interceptorChain.pluginAll(parameterHandler);</span><br><span class=\"line\">    return parameterHandler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ResultSetHandler newResultSetHandler(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds, ParameterHandler parameterHandler,</span><br><span class=\"line\">      ResultHandler resultHandler, BoundSql boundSql) &#123;</span><br><span class=\"line\">    ResultSetHandler resultSetHandler = new DefaultResultSetHandler(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);</span><br><span class=\"line\">    resultSetHandler = (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);</span><br><span class=\"line\">    return resultSetHandler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public StatementHandler newStatementHandler(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) &#123;</span><br><span class=\"line\">    StatementHandler statementHandler = new RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);</span><br><span class=\"line\">    statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);</span><br><span class=\"line\">    return statementHandler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Executor newExecutor(Transaction transaction) &#123;</span><br><span class=\"line\">    return newExecutor(transaction, defaultExecutorType);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Executor newExecutor(Transaction transaction, ExecutorType executorType) &#123;</span><br><span class=\"line\">    executorType = executorType == null ? defaultExecutorType : executorType;</span><br><span class=\"line\">    executorType = executorType == null ? ExecutorType.SIMPLE : executorType;</span><br><span class=\"line\">    Executor executor;</span><br><span class=\"line\">    if (ExecutorType.BATCH == executorType) &#123;</span><br><span class=\"line\">      executor = new BatchExecutor(this, transaction);</span><br><span class=\"line\">    &#125; else if (ExecutorType.REUSE == executorType) &#123;</span><br><span class=\"line\">      executor = new ReuseExecutor(this, transaction);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      executor = new SimpleExecutor(this, transaction);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (cacheEnabled) &#123;</span><br><span class=\"line\">      executor = new CachingExecutor(executor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    executor = (Executor) interceptorChain.pluginAll(executor);</span><br><span class=\"line\">    return executor;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addKeyGenerator(String id, KeyGenerator keyGenerator) &#123;</span><br><span class=\"line\">    keyGenerators.put(id, keyGenerator);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;String&gt; getKeyGeneratorNames() &#123;</span><br><span class=\"line\">    return keyGenerators.keySet();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;KeyGenerator&gt; getKeyGenerators() &#123;</span><br><span class=\"line\">    return keyGenerators.values();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public KeyGenerator getKeyGenerator(String id) &#123;</span><br><span class=\"line\">    return keyGenerators.get(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean hasKeyGenerator(String id) &#123;</span><br><span class=\"line\">    return keyGenerators.containsKey(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addCache(Cache cache) &#123;</span><br><span class=\"line\">    caches.put(cache.getId(), cache);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;String&gt; getCacheNames() &#123;</span><br><span class=\"line\">    return caches.keySet();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;Cache&gt; getCaches() &#123;</span><br><span class=\"line\">    return caches.values();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Cache getCache(String id) &#123;</span><br><span class=\"line\">    return caches.get(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean hasCache(String id) &#123;</span><br><span class=\"line\">    return caches.containsKey(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addResultMap(ResultMap rm) &#123;</span><br><span class=\"line\">    resultMaps.put(rm.getId(), rm);</span><br><span class=\"line\">    checkLocallyForDiscriminatedNestedResultMaps(rm);</span><br><span class=\"line\">    checkGloballyForDiscriminatedNestedResultMaps(rm);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;String&gt; getResultMapNames() &#123;</span><br><span class=\"line\">    return resultMaps.keySet();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;ResultMap&gt; getResultMaps() &#123;</span><br><span class=\"line\">    return resultMaps.values();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ResultMap getResultMap(String id) &#123;</span><br><span class=\"line\">    return resultMaps.get(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean hasResultMap(String id) &#123;</span><br><span class=\"line\">    return resultMaps.containsKey(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addParameterMap(ParameterMap pm) &#123;</span><br><span class=\"line\">    parameterMaps.put(pm.getId(), pm);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;String&gt; getParameterMapNames() &#123;</span><br><span class=\"line\">    return parameterMaps.keySet();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;ParameterMap&gt; getParameterMaps() &#123;</span><br><span class=\"line\">    return parameterMaps.values();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ParameterMap getParameterMap(String id) &#123;</span><br><span class=\"line\">    return parameterMaps.get(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean hasParameterMap(String id) &#123;</span><br><span class=\"line\">    return parameterMaps.containsKey(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addMappedStatement(MappedStatement ms) &#123;</span><br><span class=\"line\">    mappedStatements.put(ms.getId(), ms);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;String&gt; getMappedStatementNames() &#123;</span><br><span class=\"line\">    buildAllStatements();</span><br><span class=\"line\">    return mappedStatements.keySet();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;MappedStatement&gt; getMappedStatements() &#123;</span><br><span class=\"line\">    buildAllStatements();</span><br><span class=\"line\">    return mappedStatements.values();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;XMLStatementBuilder&gt; getIncompleteStatements() &#123;</span><br><span class=\"line\">    return incompleteStatements;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addIncompleteStatement(XMLStatementBuilder incompleteStatement) &#123;</span><br><span class=\"line\">    incompleteStatements.add(incompleteStatement);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;CacheRefResolver&gt; getIncompleteCacheRefs() &#123;</span><br><span class=\"line\">    return incompleteCacheRefs;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addIncompleteCacheRef(CacheRefResolver incompleteCacheRef) &#123;</span><br><span class=\"line\">    incompleteCacheRefs.add(incompleteCacheRef);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;ResultMapResolver&gt; getIncompleteResultMaps() &#123;</span><br><span class=\"line\">    return incompleteResultMaps;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addIncompleteResultMap(ResultMapResolver resultMapResolver) &#123;</span><br><span class=\"line\">    incompleteResultMaps.add(resultMapResolver);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addIncompleteMethod(MethodResolver builder) &#123;</span><br><span class=\"line\">    incompleteMethods.add(builder);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;MethodResolver&gt; getIncompleteMethods() &#123;</span><br><span class=\"line\">    return incompleteMethods;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public MappedStatement getMappedStatement(String id) &#123;</span><br><span class=\"line\">    return this.getMappedStatement(id, true);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public MappedStatement getMappedStatement(String id, boolean validateIncompleteStatements) &#123;</span><br><span class=\"line\">    if (validateIncompleteStatements) &#123;</span><br><span class=\"line\">      buildAllStatements();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return mappedStatements.get(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Map&lt;String, XNode&gt; getSqlFragments() &#123;</span><br><span class=\"line\">    return sqlFragments;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addInterceptor(Interceptor interceptor) &#123;</span><br><span class=\"line\">    interceptorChain.addInterceptor(interceptor);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addMappers(String packageName, Class&lt;?&gt; superType) &#123;</span><br><span class=\"line\">    mapperRegistry.addMappers(packageName, superType);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addMappers(String packageName) &#123;</span><br><span class=\"line\">    mapperRegistry.addMappers(packageName);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public &lt;T&gt; void addMapper(Class&lt;T&gt; type) &#123;</span><br><span class=\"line\">    mapperRegistry.addMapper(type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public &lt;T&gt; T getMapper(Class&lt;T&gt; type, SqlSession sqlSession) &#123;</span><br><span class=\"line\">    return mapperRegistry.getMapper(type, sqlSession);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean hasMapper(Class&lt;?&gt; type) &#123;</span><br><span class=\"line\">    return mapperRegistry.hasMapper(type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean hasStatement(String statementName) &#123;</span><br><span class=\"line\">    return hasStatement(statementName, true);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean hasStatement(String statementName, boolean validateIncompleteStatements) &#123;</span><br><span class=\"line\">    if (validateIncompleteStatements) &#123;</span><br><span class=\"line\">      buildAllStatements();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return mappedStatements.containsKey(statementName);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addCacheRef(String namespace, String referencedNamespace) &#123;</span><br><span class=\"line\">    cacheRefMap.put(namespace, referencedNamespace);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">   * Parses all the unprocessed statement nodes in the cache. It is recommended</span><br><span class=\"line\">   * to call this method once all the mappers are added as it provides fail-fast</span><br><span class=\"line\">   * statement validation.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  protected void buildAllStatements() &#123;</span><br><span class=\"line\">    if (!incompleteResultMaps.isEmpty()) &#123;</span><br><span class=\"line\">      synchronized (incompleteResultMaps) &#123;</span><br><span class=\"line\">        // This always throws a BuilderException.</span><br><span class=\"line\">        incompleteResultMaps.iterator().next().resolve();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!incompleteCacheRefs.isEmpty()) &#123;</span><br><span class=\"line\">      synchronized (incompleteCacheRefs) &#123;</span><br><span class=\"line\">        // This always throws a BuilderException.</span><br><span class=\"line\">        incompleteCacheRefs.iterator().next().resolveCacheRef();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!incompleteStatements.isEmpty()) &#123;</span><br><span class=\"line\">      synchronized (incompleteStatements) &#123;</span><br><span class=\"line\">        // This always throws a BuilderException.</span><br><span class=\"line\">        incompleteStatements.iterator().next().parseStatementNode();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!incompleteMethods.isEmpty()) &#123;</span><br><span class=\"line\">      synchronized (incompleteMethods) &#123;</span><br><span class=\"line\">        // This always throws a BuilderException.</span><br><span class=\"line\">        incompleteMethods.iterator().next().resolve();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">   * Extracts namespace from fully qualified statement id.</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param statementId</span><br><span class=\"line\">   * @return namespace or null when id does not contain period.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  protected String extractNamespace(String statementId) &#123;</span><br><span class=\"line\">    int lastPeriod = statementId.lastIndexOf(&apos;.&apos;);</span><br><span class=\"line\">    return lastPeriod &gt; 0 ? statementId.substring(0, lastPeriod) : null;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Slow but a one time cost. A better solution is welcome.</span><br><span class=\"line\">  protected void checkGloballyForDiscriminatedNestedResultMaps(ResultMap rm) &#123;</span><br><span class=\"line\">    if (rm.hasNestedResultMaps()) &#123;</span><br><span class=\"line\">      for (Map.Entry&lt;String, ResultMap&gt; entry : resultMaps.entrySet()) &#123;</span><br><span class=\"line\">        Object value = entry.getValue();</span><br><span class=\"line\">        if (value instanceof ResultMap) &#123;</span><br><span class=\"line\">          ResultMap entryResultMap = (ResultMap) value;</span><br><span class=\"line\">          if (!entryResultMap.hasNestedResultMaps() &amp;&amp; entryResultMap.getDiscriminator() != null) &#123;</span><br><span class=\"line\">            Collection&lt;String&gt; discriminatedResultMapNames = entryResultMap.getDiscriminator().getDiscriminatorMap().values();</span><br><span class=\"line\">            if (discriminatedResultMapNames.contains(rm.getId())) &#123;</span><br><span class=\"line\">              entryResultMap.forceNestedResultMaps();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Slow but a one time cost. A better solution is welcome.</span><br><span class=\"line\">  protected void checkLocallyForDiscriminatedNestedResultMaps(ResultMap rm) &#123;</span><br><span class=\"line\">    if (!rm.hasNestedResultMaps() &amp;&amp; rm.getDiscriminator() != null) &#123;</span><br><span class=\"line\">      for (Map.Entry&lt;String, String&gt; entry : rm.getDiscriminator().getDiscriminatorMap().entrySet()) &#123;</span><br><span class=\"line\">        String discriminatedResultMapName = entry.getValue();</span><br><span class=\"line\">        if (hasResultMap(discriminatedResultMapName)) &#123;</span><br><span class=\"line\">          ResultMap discriminatedResultMap = resultMaps.get(discriminatedResultMapName);</span><br><span class=\"line\">          if (discriminatedResultMap.hasNestedResultMaps()) &#123;</span><br><span class=\"line\">            rm.forceNestedResultMaps();</span><br><span class=\"line\">            break;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  protected static class StrictMap&lt;V&gt; extends HashMap&lt;String, V&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final long serialVersionUID = -4950446264854982944L;</span><br><span class=\"line\">    private final String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    public StrictMap(String name, int initialCapacity, float loadFactor) &#123;</span><br><span class=\"line\">      super(initialCapacity, loadFactor);</span><br><span class=\"line\">      this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public StrictMap(String name, int initialCapacity) &#123;</span><br><span class=\"line\">      super(initialCapacity);</span><br><span class=\"line\">      this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public StrictMap(String name) &#123;</span><br><span class=\"line\">      super();</span><br><span class=\"line\">      this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public StrictMap(String name, Map&lt;String, ? extends V&gt; m) &#123;</span><br><span class=\"line\">      super(m);</span><br><span class=\"line\">      this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public V put(String key, V value) &#123;</span><br><span class=\"line\">      if (containsKey(key)) &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException(name + &quot; already contains value for &quot; + key);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (key.contains(&quot;.&quot;)) &#123;</span><br><span class=\"line\">        final String shortKey = getShortName(key);</span><br><span class=\"line\">        if (super.get(shortKey) == null) &#123;</span><br><span class=\"line\">          super.put(shortKey, value);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          super.put(shortKey, (V) new Ambiguity(shortKey));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return super.put(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public V get(Object key) &#123;</span><br><span class=\"line\">      V value = super.get(key);</span><br><span class=\"line\">      if (value == null) &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException(name + &quot; does not contain value for &quot; + key);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (value instanceof Ambiguity) &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException(((Ambiguity) value).getSubject() + &quot; is ambiguous in &quot; + name</span><br><span class=\"line\">            + &quot; (try using the full name including the namespace, or rename one of the entries)&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String getShortName(String key) &#123;</span><br><span class=\"line\">      final String[] keyParts = key.split(&quot;\\\\.&quot;);</span><br><span class=\"line\">      return keyParts[keyParts.length - 1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected static class Ambiguity &#123;</span><br><span class=\"line\">      final private String subject;</span><br><span class=\"line\"></span><br><span class=\"line\">      public Ambiguity(String subject) &#123;</span><br><span class=\"line\">        this.subject = subject;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      public String getSubject() &#123;</span><br><span class=\"line\">        return subject;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>然后代码跳到这里</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SqlSessionFactoryBean implements FactoryBean&lt;SqlSessionFactory&gt;, InitializingBean, ApplicationListener&lt;ApplicationEvent&gt; &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">//这里是创建唯一的sqlsessionFactory注意这个注解ConditionalOnMissingBean</span><br><span class=\"line\">  @Bean</span><br><span class=\"line\">  @ConditionalOnMissingBean</span><br><span class=\"line\">  public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception &#123;</span><br><span class=\"line\">    SqlSessionFactoryBean factory = new SqlSessionFactoryBean();</span><br><span class=\"line\">    factory.setDataSource(dataSource);</span><br><span class=\"line\">    factory.setVfs(SpringBootVFS.class);</span><br><span class=\"line\">    if (StringUtils.hasText(this.properties.getConfigLocation())) &#123;</span><br><span class=\"line\">      factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Configuration configuration = this.properties.getConfiguration();</span><br><span class=\"line\">    if (configuration == null &amp;&amp; !StringUtils.hasText(this.properties.getConfigLocation())) &#123;</span><br><span class=\"line\">      configuration = new Configuration();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (configuration != null &amp;&amp; !CollectionUtils.isEmpty(this.configurationCustomizers)) &#123;</span><br><span class=\"line\">      for (ConfigurationCustomizer customizer : this.configurationCustomizers) &#123;</span><br><span class=\"line\">        customizer.customize(configuration);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    factory.setConfiguration(configuration);</span><br><span class=\"line\">    if (this.properties.getConfigurationProperties() != null) &#123;</span><br><span class=\"line\">      factory.setConfigurationProperties(this.properties.getConfigurationProperties());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!ObjectUtils.isEmpty(this.interceptors)) &#123;</span><br><span class=\"line\">      factory.setPlugins(this.interceptors);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (this.databaseIdProvider != null) &#123;</span><br><span class=\"line\">      factory.setDatabaseIdProvider(this.databaseIdProvider);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) &#123;</span><br><span class=\"line\">      factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) &#123;</span><br><span class=\"line\">      factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) &#123;</span><br><span class=\"line\">      factory.setMapperLocations(this.properties.resolveMapperLocations());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//创建工厂</span><br><span class=\"line\">    return factory.getObject();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * &#123;@inheritDoc&#125;</span><br><span class=\"line\">   */</span><br><span class=\"line\">   //先走这个方法</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public void afterPropertiesSet() throws Exception &#123;</span><br><span class=\"line\">    notNull(dataSource, &quot;Property &apos;dataSource&apos; is required&quot;);</span><br><span class=\"line\">    notNull(sqlSessionFactoryBuilder, &quot;Property &apos;sqlSessionFactoryBuilder&apos; is required&quot;);</span><br><span class=\"line\">    state((configuration == null &amp;&amp; configLocation == null) || !(configuration != null &amp;&amp; configLocation != null),</span><br><span class=\"line\">              &quot;Property &apos;configuration&apos; and &apos;configLocation&apos; can not specified with together&quot;);</span><br><span class=\"line\">\t//走这里进行build工厂类</span><br><span class=\"line\">    this.sqlSessionFactory = buildSqlSessionFactory();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  //注意了具体的配置过程在这里</span><br><span class=\"line\">    protected SqlSessionFactory buildSqlSessionFactory() throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Configuration configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">    XMLConfigBuilder xmlConfigBuilder = null;</span><br><span class=\"line\">    if (this.configuration != null) &#123;</span><br><span class=\"line\">      configuration = this.configuration;</span><br><span class=\"line\">      if (configuration.getVariables() == null) &#123;</span><br><span class=\"line\">        configuration.setVariables(this.configurationProperties);</span><br><span class=\"line\">      &#125; else if (this.configurationProperties != null) &#123;</span><br><span class=\"line\">        configuration.getVariables().putAll(this.configurationProperties);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else if (this.configLocation != null) &#123;</span><br><span class=\"line\">      xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null, this.configurationProperties);</span><br><span class=\"line\">      configuration = xmlConfigBuilder.getConfiguration();</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">        LOGGER.debug(&quot;Property &apos;configuration&apos; or &apos;configLocation&apos; not specified, using default MyBatis Configuration&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      configuration = new Configuration();</span><br><span class=\"line\">      if (this.configurationProperties != null) &#123;</span><br><span class=\"line\">        configuration.setVariables(this.configurationProperties);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (this.objectFactory != null) &#123;</span><br><span class=\"line\">      configuration.setObjectFactory(this.objectFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (this.objectWrapperFactory != null) &#123;</span><br><span class=\"line\">      configuration.setObjectWrapperFactory(this.objectWrapperFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (this.vfs != null) &#123;</span><br><span class=\"line\">      configuration.setVfsImpl(this.vfs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//this.typeAliasesPackage=application.properties中的mybatis.type-aliases-package</span><br><span class=\"line\">    if (hasLength(this.typeAliasesPackage)) &#123;</span><br><span class=\"line\">      String[] typeAliasPackageArray = tokenizeToStringArray(this.typeAliasesPackage,</span><br><span class=\"line\">          ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class=\"line\">      for (String packageToScan : typeAliasPackageArray) &#123;</span><br><span class=\"line\">        configuration.getTypeAliasRegistry().registerAliases(packageToScan,</span><br><span class=\"line\">                typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);</span><br><span class=\"line\">        if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">          LOGGER.debug(&quot;Scanned package: &apos;&quot; + packageToScan + &quot;&apos; for aliases&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//注册别名类到configuration</span><br><span class=\"line\">    if (!isEmpty(this.typeAliases)) &#123;</span><br><span class=\"line\">      for (Class&lt;?&gt; typeAlias : this.typeAliases) &#123;</span><br><span class=\"line\">        configuration.getTypeAliasRegistry().registerAlias(typeAlias);</span><br><span class=\"line\">        if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">          LOGGER.debug(&quot;Registered type alias: &apos;&quot; + typeAlias + &quot;&apos;&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//看看有没有配置插件有的话加入到拦截器组</span><br><span class=\"line\">    if (!isEmpty(this.plugins)) &#123;</span><br><span class=\"line\">      for (Interceptor plugin : this.plugins) &#123;</span><br><span class=\"line\">        configuration.addInterceptor(plugin);</span><br><span class=\"line\">        if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">          LOGGER.debug(&quot;Registered plugin: &apos;&quot; + plugin + &quot;&apos;&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//看看有没有typeHandlersPackage，有的话注册到cfg类中</span><br><span class=\"line\">    if (hasLength(this.typeHandlersPackage)) &#123;</span><br><span class=\"line\">      String[] typeHandlersPackageArray = tokenizeToStringArray(this.typeHandlersPackage,</span><br><span class=\"line\">          ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class=\"line\">      for (String packageToScan : typeHandlersPackageArray) &#123;</span><br><span class=\"line\">        configuration.getTypeHandlerRegistry().register(packageToScan);</span><br><span class=\"line\">        if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">          LOGGER.debug(&quot;Scanned package: &apos;&quot; + packageToScan + &quot;&apos; for type handlers&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//看看有没有typeHandlers，有的话注册到cfg类中</span><br><span class=\"line\">    if (!isEmpty(this.typeHandlers)) &#123;</span><br><span class=\"line\">      for (TypeHandler&lt;?&gt; typeHandler : this.typeHandlers) &#123;</span><br><span class=\"line\">        configuration.getTypeHandlerRegistry().register(typeHandler);</span><br><span class=\"line\">        if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">          LOGGER.debug(&quot;Registered type handler: &apos;&quot; + typeHandler + &quot;&apos;&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//看看有没有设置databaseid 有的话配置到cfg类中</span><br><span class=\"line\">    if (this.databaseIdProvider != null) &#123;//fix #64 set databaseId before parse mapper xmls</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));</span><br><span class=\"line\">      &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">        throw new NestedIOException(&quot;Failed getting a databaseId&quot;, e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (this.cache != null) &#123;</span><br><span class=\"line\">      configuration.addCache(this.cache);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (xmlConfigBuilder != null) &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        xmlConfigBuilder.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">          LOGGER.debug(&quot;Parsed configuration file: &apos;&quot; + this.configLocation + &quot;&apos;&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; catch (Exception ex) &#123;</span><br><span class=\"line\">        throw new NestedIOException(&quot;Failed to parse config resource: &quot; + this.configLocation, ex);</span><br><span class=\"line\">      &#125; finally &#123;</span><br><span class=\"line\">        ErrorContext.instance().reset();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">//如果transactionFactory是空的话 new一个 Spring的事务工厂</span><br><span class=\"line\">    if (this.transactionFactory == null) &#123;</span><br><span class=\"line\">      this.transactionFactory = new SpringManagedTransactionFactory();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//这里很重要 将spring的环境对象 和事务工厂还有数据源对象注册到cfg类中</span><br><span class=\"line\">    configuration.setEnvironment(new Environment(this.environment, this.transactionFactory, this.dataSource));</span><br><span class=\"line\">\t//this.mapperLocation=application.properties中配置的mybatis.mapper-locations</span><br><span class=\"line\">\t//拿到mapper文件的配置类</span><br><span class=\"line\">    if (!isEmpty(this.mapperLocations)) &#123;</span><br><span class=\"line\">      for (Resource mapperLocation : this.mapperLocations) &#123;</span><br><span class=\"line\">        if (mapperLocation == null) &#123;</span><br><span class=\"line\">          continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">        //构建xmlMapperBuilder</span><br><span class=\"line\">          XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(mapperLocation.getInputStream(),</span><br><span class=\"line\">              configuration, mapperLocation.toString(), configuration.getSqlFragments());</span><br><span class=\"line\">              //</span><br><span class=\"line\">          xmlMapperBuilder.parse();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">          throw new NestedIOException(&quot;Failed to parse mapping resource: &apos;&quot; + mapperLocation + &quot;&apos;&quot;, e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">          ErrorContext.instance().reset();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">          LOGGER.debug(&quot;Parsed mapper file: &apos;&quot; + mapperLocation + &quot;&apos;&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">        LOGGER.debug(&quot;Property &apos;mapperLocations&apos; was not specified or no matching resources found&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//最后创建sqlsessionFactory</span><br><span class=\"line\">    return this.sqlSessionFactoryBuilder.build(configuration);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>configuration.getTypeAliasRegistry().registerAliases的操作</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void registerAliases(String packageName, Class&lt;?&gt; superType)&#123;</span><br><span class=\"line\">   ResolverUtil&lt;Class&lt;?&gt;&gt; resolverUtil = new ResolverUtil&lt;Class&lt;?&gt;&gt;();</span><br><span class=\"line\">   resolverUtil.find(new ResolverUtil.IsA(superType), packageName);</span><br><span class=\"line\">   Set&lt;Class&lt;? extends Class&lt;?&gt;&gt;&gt; typeSet = resolverUtil.getClasses();</span><br><span class=\"line\">   for(Class&lt;?&gt; type : typeSet)&#123;</span><br><span class=\"line\">     // Ignore inner classes and interfaces (including package-info.java)</span><br><span class=\"line\">     // Skip also inner classes. See issue #6</span><br><span class=\"line\">     if (!type.isAnonymousClass() &amp;&amp; !type.isInterface() &amp;&amp; !type.isMemberClass()) &#123;</span><br><span class=\"line\">       //注册别名</span><br><span class=\"line\">       registerAlias(type);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> //上面代码调到这里</span><br><span class=\"line\"> public void registerAlias(Class&lt;?&gt; type) &#123;</span><br><span class=\"line\">   String alias = type.getSimpleName();</span><br><span class=\"line\">   //先获得class上的注解 </span><br><span class=\"line\">   Alias aliasAnnotation = type.getAnnotation(Alias.class);</span><br><span class=\"line\">   if (aliasAnnotation != null) &#123;</span><br><span class=\"line\">     //如果有的话拿到注解的值</span><br><span class=\"line\">     alias = aliasAnnotation.value();</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   //</span><br><span class=\"line\">   registerAlias(alias, type);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> //再跳到这里</span><br><span class=\"line\"> public void registerAlias(String alias, Class&lt;?&gt; value) &#123;</span><br><span class=\"line\">   if (alias == null) &#123;</span><br><span class=\"line\">     throw new TypeException(&quot;The parameter alias cannot be null&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   // issue #748</span><br><span class=\"line\">   String key = alias.toLowerCase(Locale.ENGLISH);</span><br><span class=\"line\">   if (TYPE_ALIASES.containsKey(key) &amp;&amp; TYPE_ALIASES.get(key) != null &amp;&amp; !TYPE_ALIASES.get(key).equals(value)) &#123;</span><br><span class=\"line\">     throw new TypeException(&quot;The alias &apos;&quot; + alias + &quot;&apos; is already mapped to the value &apos;&quot; + TYPE_ALIASES.get(key).getName() + &quot;&apos;.&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   //这里key=userroledto value=class com.convergence.domain.UserRoleDTO</span><br><span class=\"line\">   TYPE_ALIASES.put(key, value);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>进行解析</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void parse() &#123;</span><br><span class=\"line\">    if (!configuration.isResourceLoaded(resource)) &#123;</span><br><span class=\"line\">      configurationElement(parser.evalNode(&quot;/mapper&quot;));</span><br><span class=\"line\">      configuration.addLoadedResource(resource);</span><br><span class=\"line\">      //绑定namespace</span><br><span class=\"line\">      bindMapperForNamespace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//解析resultMaps</span><br><span class=\"line\">    parsePendingResultMaps();</span><br><span class=\"line\">    parsePendingCacheRefs();</span><br><span class=\"line\">    parsePendingStatements();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //解析xml文件</span><br><span class=\"line\">  private void configurationElement(XNode context) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      String namespace = context.getStringAttribute(&quot;namespace&quot;);</span><br><span class=\"line\">      if (namespace == null || namespace.equals(&quot;&quot;)) &#123;</span><br><span class=\"line\">        throw new BuilderException(&quot;Mapper&apos;s namespace cannot be empty&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      builderAssistant.setCurrentNamespace(namespace);</span><br><span class=\"line\">      //这里的context就是xml文件内容了</span><br><span class=\"line\">      cacheRefElement(context.evalNode(&quot;cache-ref&quot;));</span><br><span class=\"line\">      cacheElement(context.evalNode(&quot;cache&quot;));</span><br><span class=\"line\">      parameterMapElement(context.evalNodes(&quot;/mapper/parameterMap&quot;));</span><br><span class=\"line\">      resultMapElements(context.evalNodes(&quot;/mapper/resultMap&quot;));</span><br><span class=\"line\">      sqlElement(context.evalNodes(&quot;/mapper/sql&quot;));</span><br><span class=\"line\">      buildStatementFromContext(context.evalNodes(&quot;select|insert|update|delete&quot;));</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">      throw new BuilderException(&quot;Error parsing Mapper XML. Cause: &quot; + e, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //将mapper.java和xml进行绑定</span><br><span class=\"line\">  private void bindMapperForNamespace() &#123;</span><br><span class=\"line\">    String namespace = builderAssistant.getCurrentNamespace();</span><br><span class=\"line\">    if (namespace != null) &#123;</span><br><span class=\"line\">      Class&lt;?&gt; boundType = null;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        boundType = Resources.classForName(namespace);</span><br><span class=\"line\">      &#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">        //ignore, bound type is not required</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (boundType != null) &#123;</span><br><span class=\"line\">        if (!configuration.hasMapper(boundType)) &#123;</span><br><span class=\"line\">          // Spring may not know the real resource name so we set a flag</span><br><span class=\"line\">          // to prevent loading again this resource from the mapper interface</span><br><span class=\"line\">          // look at MapperAnnotationBuilder#loadXmlResource</span><br><span class=\"line\">          configuration.addLoadedResource(&quot;namespace:&quot; + namespace);</span><br><span class=\"line\">          configuration.addMapper(boundType);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //解析resultmap</span><br><span class=\"line\"> private void parsePendingResultMaps() &#123;</span><br><span class=\"line\">    Collection&lt;ResultMapResolver&gt; incompleteResultMaps = configuration.getIncompleteResultMaps();</span><br><span class=\"line\">    synchronized (incompleteResultMaps) &#123;</span><br><span class=\"line\">      Iterator&lt;ResultMapResolver&gt; iter = incompleteResultMaps.iterator();</span><br><span class=\"line\">      while (iter.hasNext()) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          iter.next().resolve();</span><br><span class=\"line\">          iter.remove();</span><br><span class=\"line\">        &#125; catch (IncompleteElementException e) &#123;</span><br><span class=\"line\">          // ResultMap is still missing a resource...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //缓存解析</span><br><span class=\"line\">  private void parsePendingCacheRefs() &#123;</span><br><span class=\"line\">    Collection&lt;CacheRefResolver&gt; incompleteCacheRefs = configuration.getIncompleteCacheRefs();</span><br><span class=\"line\">    synchronized (incompleteCacheRefs) &#123;</span><br><span class=\"line\">      Iterator&lt;CacheRefResolver&gt; iter = incompleteCacheRefs.iterator();</span><br><span class=\"line\">      while (iter.hasNext()) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          iter.next().resolveCacheRef();</span><br><span class=\"line\">          iter.remove();</span><br><span class=\"line\">        &#125; catch (IncompleteElementException e) &#123;</span><br><span class=\"line\">          // Cache ref is still missing a resource...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //statment解析</span><br><span class=\"line\">    private void parsePendingStatements() &#123;</span><br><span class=\"line\">    Collection&lt;XMLStatementBuilder&gt; incompleteStatements = configuration.getIncompleteStatements();</span><br><span class=\"line\">    synchronized (incompleteStatements) &#123;</span><br><span class=\"line\">      Iterator&lt;XMLStatementBuilder&gt; iter = incompleteStatements.iterator();</span><br><span class=\"line\">      while (iter.hasNext()) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          iter.next().parseStatementNode();</span><br><span class=\"line\">          iter.remove();</span><br><span class=\"line\">        &#125; catch (IncompleteElementException e) &#123;</span><br><span class=\"line\">          // Statement is still missing a resource...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>上面的工厂实例完了 进入sqlsessiontemplate实例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这里需要上面构建的sqlSessionFactory</span><br><span class=\"line\">@Bean</span><br><span class=\"line\">@ConditionalOnMissingBean</span><br><span class=\"line\">public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class=\"line\">  ExecutorType executorType = this.properties.getExecutorType();</span><br><span class=\"line\">  if (executorType != null) &#123;</span><br><span class=\"line\">    return new SqlSessionTemplate(sqlSessionFactory, executorType);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return new SqlSessionTemplate(sqlSessionFactory);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>构建SqlSessionTemplate</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SqlSessionTemplate implements SqlSession, DisposableBean &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">/**</span><br><span class=\"line\">  * Constructs a Spring managed &#123;@code SqlSession&#125; with the given</span><br><span class=\"line\">  * &#123;@code SqlSessionFactory&#125; and &#123;@code ExecutorType&#125;.</span><br><span class=\"line\">  * A custom &#123;@code SQLExceptionTranslator&#125; can be provided as an</span><br><span class=\"line\">  * argument so any &#123;@code PersistenceException&#125; thrown by MyBatis</span><br><span class=\"line\">  * can be custom translated to a &#123;@code RuntimeException&#125;</span><br><span class=\"line\">  * The &#123;@code SQLExceptionTranslator&#125; can also be null and thus no</span><br><span class=\"line\">  * exception translation will be done and MyBatis exceptions will be</span><br><span class=\"line\">  * thrown</span><br><span class=\"line\">  *</span><br><span class=\"line\">  * @param sqlSessionFactory</span><br><span class=\"line\">  * @param executorType</span><br><span class=\"line\">  * @param exceptionTranslator</span><br><span class=\"line\">  */</span><br><span class=\"line\"> public SqlSessionTemplate(SqlSessionFactory sqlSessionFactory, ExecutorType executorType,</span><br><span class=\"line\">     PersistenceExceptionTranslator exceptionTranslator) &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">   notNull(sqlSessionFactory, &quot;Property &apos;sqlSessionFactory&apos; is required&quot;);</span><br><span class=\"line\">   notNull(executorType, &quot;Property &apos;executorType&apos; is required&quot;);</span><br><span class=\"line\">  </span><br><span class=\"line\">   this.sqlSessionFactory = sqlSessionFactory;</span><br><span class=\"line\">   this.executorType = executorType;</span><br><span class=\"line\">   this.exceptionTranslator = exceptionTranslator;</span><br><span class=\"line\">   //获得一个sqlsession代理类 里面填充了sqlSessionInterceptor</span><br><span class=\"line\">   this.sqlSessionProxy = (SqlSession) newProxyInstance(</span><br><span class=\"line\">       SqlSessionFactory.class.getClassLoader(),</span><br><span class=\"line\">       new Class[] &#123; SqlSession.class &#125;,</span><br><span class=\"line\">       new SqlSessionInterceptor());</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>*<em>这里说下ExecutorType *</em></p>\n<ul>\n<li>*<em>simple 默认的 *</em></li>\n<li><strong>reuse 这个类型不做特殊的事情，它只为每个语句创建一个 PreparedStatement。</strong></li>\n<li>*<em>batch 批处理语句使用 需要关闭autocommit      *</em></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum ExecutorType &#123;</span><br><span class=\"line\">  SIMPLE, REUSE, BATCH</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在创建sqlSessionTemplate的时候会创建一个SqlSessionInterceptor</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  private class SqlSessionInterceptor implements InvocationHandler &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class=\"line\">    //首先获取到sqlsession</span><br><span class=\"line\">      SqlSession sqlSession = getSqlSession(</span><br><span class=\"line\">          SqlSessionTemplate.this.sqlSessionFactory,</span><br><span class=\"line\">          SqlSessionTemplate.this.executorType,</span><br><span class=\"line\">          SqlSessionTemplate.this.exceptionTranslator);</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">      //进行involke 拿到具体的结果集</span><br><span class=\"line\">        Object result = method.invoke(sqlSession, args);</span><br><span class=\"line\">        //这个if判断：    return (holder != null) &amp;&amp; (holder.getSqlSession() == session);</span><br><span class=\"line\">        if (!isSqlSessionTransactional(sqlSession, SqlSessionTemplate.this.sqlSessionFactory)) &#123;</span><br><span class=\"line\">          // force commit even on non-dirty sessions because some databases require</span><br><span class=\"line\">          // a commit/rollback before calling close()</span><br><span class=\"line\">          //然后commit</span><br><span class=\"line\">          sqlSession.commit(true);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">      &#125; catch (Throwable t) &#123;</span><br><span class=\"line\">        Throwable unwrapped = unwrapThrowable(t);</span><br><span class=\"line\">        if (SqlSessionTemplate.this.exceptionTranslator != null &amp;&amp; unwrapped instanceof PersistenceException) &#123;</span><br><span class=\"line\">          // release the connection to avoid a deadlock if the translator is no loaded. See issue #22</span><br><span class=\"line\">          closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);</span><br><span class=\"line\">          sqlSession = null;</span><br><span class=\"line\">          Throwable translated = SqlSessionTemplate.this.exceptionTranslator.translateExceptionIfPossible((PersistenceException) unwrapped);</span><br><span class=\"line\">          if (translated != null) &#123;</span><br><span class=\"line\">            unwrapped = translated;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        throw unwrapped;</span><br><span class=\"line\">      &#125; finally &#123;</span><br><span class=\"line\">        if (sqlSession != null) &#123;</span><br><span class=\"line\">        //关闭会话</span><br><span class=\"line\">          closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>getSqlSession:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public static SqlSession getSqlSession(SqlSessionFactory sessionFactory, ExecutorType executorType, PersistenceExceptionTranslator exceptionTranslator) &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">   notNull(sessionFactory, NO_SQL_SESSION_FACTORY_SPECIFIED);</span><br><span class=\"line\">   notNull(executorType, NO_EXECUTOR_TYPE_SPECIFIED);</span><br><span class=\"line\">//holder</span><br><span class=\"line\">   SqlSessionHolder holder = (SqlSessionHolder) </span><br><span class=\"line\">   //事务管理器拿到holder</span><br><span class=\"line\">   TransactionSynchronizationManager.getResource(sessionFactory);</span><br><span class=\"line\">//获得session</span><br><span class=\"line\">   SqlSession session = sessionHolder(executorType, holder);</span><br><span class=\"line\">   if (session != null) &#123;</span><br><span class=\"line\">     return session;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">   if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">     LOGGER.debug(&quot;Creating a new SqlSession&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">//工厂打开session</span><br><span class=\"line\">   session = sessionFactory.openSession(executorType);</span><br><span class=\"line\">//注册session,工厂到holder</span><br><span class=\"line\">   registerSessionHolder(sessionFactory, executorType, exceptionTranslator, session);</span><br><span class=\"line\">  </span><br><span class=\"line\">   return session;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>registerSessionHolder:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  private static void registerSessionHolder(SqlSessionFactory sessionFactory, ExecutorType executorType,</span><br><span class=\"line\">      PersistenceExceptionTranslator exceptionTranslator, SqlSession session) &#123;</span><br><span class=\"line\">    SqlSessionHolder holder;</span><br><span class=\"line\">    if (TransactionSynchronizationManager.isSynchronizationActive()) &#123;</span><br><span class=\"line\">      Environment environment = sessionFactory.getConfiguration().getEnvironment();</span><br><span class=\"line\">\t  //如果当前的事务工厂是spring的事务管理工厂的实例的话</span><br><span class=\"line\">      if (environment.getTransactionFactory() instanceof SpringManagedTransactionFactory) &#123;</span><br><span class=\"line\">        if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">          LOGGER.debug(&quot;Registering transaction synchronization for SqlSession [&quot; + session + &quot;]&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t   //创建holder</span><br><span class=\"line\">        holder = new SqlSessionHolder(session, executorType, exceptionTranslator);</span><br><span class=\"line\">        //底下是事务的一系列管理操作</span><br><span class=\"line\">        TransactionSynchronizationManager.bindResource(sessionFactory, holder);</span><br><span class=\"line\">        TransactionSynchronizationManager.registerSynchronization(new SqlSessionSynchronization(holder, sessionFactory));</span><br><span class=\"line\">        holder.setSynchronizedWithTransaction(true);</span><br><span class=\"line\">        holder.requested();</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        if (TransactionSynchronizationManager.getResource(environment.getDataSource()) == null) &#123;</span><br><span class=\"line\">          if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">            LOGGER.debug(&quot;SqlSession [&quot; + session + &quot;] was not registered for synchronization because DataSource is not transactional&quot;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          throw new TransientDataAccessResourceException(</span><br><span class=\"line\">              &quot;SqlSessionFactory must be using a SpringManagedTransactionFactory in order to use Spring transaction synchronization&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">        LOGGER.debug(&quot;SqlSession [&quot; + session + &quot;] was not registered for synchronization because synchronization is not active&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>具体的sql执行过程</strong></p>\n</li>\n</ul>\n<p>  <strong>mybatis中的每个dao都会继承SqlSessionDaoSupport，在于spring集成的时候，需要依赖spring-mybatis这个jar，而这个SqlSessionDaoSupport类就在这个jar中</strong></p>\n<p>  <strong>这是个抽象类。</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package org.mybatis.spring.support;</span><br><span class=\"line\"></span><br><span class=\"line\">import static org.springframework.util.Assert.notNull;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionTemplate;</span><br><span class=\"line\">import org.springframework.dao.support.DaoSupport;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Convenient super class for MyBatis SqlSession data access objects.</span><br><span class=\"line\"> * It gives you access to the template which can then be used to execute SQL methods.</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * This class needs a SqlSessionTemplate or a SqlSessionFactory.</span><br><span class=\"line\"> * If both are set the SqlSessionFactory will be ignored.</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * &#123;code Autowired&#125; was removed from setSqlSessionTemplate and setSqlSessionFactory</span><br><span class=\"line\"> * in version 1.2.0.</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @author Putthibong Boonbong</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @see #setSqlSessionFactory</span><br><span class=\"line\"> * @see #setSqlSessionTemplate</span><br><span class=\"line\"> * @see SqlSessionTemplate</span><br><span class=\"line\"> */</span><br><span class=\"line\">public abstract class SqlSessionDaoSupport extends DaoSupport &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private SqlSession sqlSession;</span><br><span class=\"line\"></span><br><span class=\"line\">  private boolean externalSqlSession;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class=\"line\">    if (!this.externalSqlSession) &#123;</span><br><span class=\"line\">      this.sqlSession = new SqlSessionTemplate(sqlSessionFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setSqlSessionTemplate(SqlSessionTemplate sqlSessionTemplate) &#123;</span><br><span class=\"line\">    this.sqlSession = sqlSessionTemplate;</span><br><span class=\"line\">    this.externalSqlSession = true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Users should use this method to get a SqlSession to call its statement methods</span><br><span class=\"line\">   * This is SqlSession is managed by spring. Users should not commit/rollback/close it</span><br><span class=\"line\">   * because it will be automatically done.</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @return Spring managed thread safe SqlSession</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public SqlSession getSqlSession() &#123;</span><br><span class=\"line\">    return this.sqlSession;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * &#123;@inheritDoc&#125;</span><br><span class=\"line\">   */</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  protected void checkDaoConfig() &#123;</span><br><span class=\"line\">    notNull(this.sqlSession, &quot;Property &apos;sqlSessionFactory&apos; or &apos;sqlSessionTemplate&apos; are required&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>那么它的父类DaoSupport什么时候</strong></p>\n<p>  <strong>注意实现了InitializingBean这个是由spring管理的</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory</span><br><span class=\"line\">\t\timplements AutowireCapableBeanFactory &#123;</span><br><span class=\"line\">\t\t//</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Give a bean a chance to react now all its properties are set,</span><br><span class=\"line\">\t * and a chance to know about its owning bean factory (this object).</span><br><span class=\"line\">\t * This means checking whether the bean implements InitializingBean or defines</span><br><span class=\"line\">\t * a custom init method, and invoking the necessary callback(s) if it does.</span><br><span class=\"line\">\t * @param beanName the bean name in the factory (for debugging purposes)</span><br><span class=\"line\">\t * @param bean the new bean instance we may need to initialize</span><br><span class=\"line\">\t * @param mbd the merged bean definition that the bean was created with</span><br><span class=\"line\">\t * (can also be &#123;@code null&#125;, if given an existing bean instance)</span><br><span class=\"line\">\t * @throws Throwable if thrown by init methods or by the invocation process</span><br><span class=\"line\">\t * @see #invokeCustomInitMethod</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t //根据bean的name来反射加载初始方法 当bean DataSourceInitializerInvoker被加载时候会触发事件驱动 去构建sqlsessionFactory</span><br><span class=\"line\">\t //当bean=MapperFactoryBean的时候 先走父类DaoSupport的afterPropertiesSet</span><br><span class=\"line\">\tprotected void invokeInitMethods(String beanName, final Object bean, @Nullable RootBeanDefinition mbd)</span><br><span class=\"line\">\t\t\tthrows Throwable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tboolean isInitializingBean = (bean instanceof InitializingBean);</span><br><span class=\"line\">\t\tif (isInitializingBean &amp;&amp; (mbd == null || !mbd.isExternallyManagedInitMethod(&quot;afterPropertiesSet&quot;))) &#123;</span><br><span class=\"line\">\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(&quot;Invoking afterPropertiesSet() on bean with name &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (System.getSecurityManager() != null) &#123;</span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\tAccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\t\t((InitializingBean) bean).afterPropertiesSet();</span><br><span class=\"line\">\t\t\t\t\t\treturn null;</span><br><span class=\"line\">\t\t\t\t\t&#125;, getAccessControlContext());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tcatch (PrivilegedActionException pae) &#123;</span><br><span class=\"line\">\t\t\t\t\tthrow pae.getException();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t//在这里会初始化dao</span><br><span class=\"line\">\t\t\t\t((InitializingBean) bean).afterPropertiesSet();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (mbd != null &amp;&amp; bean.getClass() != NullBean.class) &#123;</span><br><span class=\"line\">\t\t\tString initMethodName = mbd.getInitMethodName();</span><br><span class=\"line\">\t\t\tif (StringUtils.hasLength(initMethodName) &amp;&amp;</span><br><span class=\"line\">\t\t\t\t\t!(isInitializingBean &amp;&amp; &quot;afterPropertiesSet&quot;.equals(initMethodName)) &amp;&amp;\t</span><br><span class=\"line\">\t\t\t\t\t!mbd.isExternallyManagedInitMethod(initMethodName)) &#123;</span><br><span class=\"line\">\t\t\t\tinvokeCustomInitMethod(beanName, bean, mbd);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>当bean=MapperFactoryBean的时候 先走父类DaoSupport的afterPropertiesSet：</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class DaoSupport implements InitializingBean &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic final void afterPropertiesSet() throws IllegalArgumentException, BeanInitializationException &#123;</span><br><span class=\"line\">\t\t// Let abstract subclasses check their configuration.</span><br><span class=\"line\">\t\t//检查dao的cfg</span><br><span class=\"line\">\t\tcheckDaoConfig();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Let concrete implementations initialize themselves.</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t//初始化加载dao 父类空实现</span><br><span class=\"line\">\t\t\tinitDao();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (Exception ex) &#123;</span><br><span class=\"line\">\t\t\tthrow new BeanInitializationException(&quot;Initialization of DAO failed&quot;, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>  <strong>具体实现MapperFactoryBean：</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package org.mybatis.spring.mapper;</span><br><span class=\"line\"></span><br><span class=\"line\">import static org.springframework.util.Assert.notNull;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.ibatis.executor.ErrorContext;</span><br><span class=\"line\">import org.apache.ibatis.session.Configuration;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionTemplate;</span><br><span class=\"line\">import org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class=\"line\">import org.springframework.beans.factory.FactoryBean;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * BeanFactory that enables injection of MyBatis mapper interfaces. It can be set up with a</span><br><span class=\"line\"> * SqlSessionFactory or a pre-configured SqlSessionTemplate.</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * Sample configuration:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;pre class=&quot;code&quot;&gt;</span><br><span class=\"line\"> * &#123;@code</span><br><span class=\"line\"> *   &lt;bean id=&quot;baseMapper&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot; abstract=&quot;true&quot; lazy-init=&quot;true&quot;&gt;</span><br><span class=\"line\"> *     &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt;</span><br><span class=\"line\"> *   &lt;/bean&gt;</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *   &lt;bean id=&quot;oneMapper&quot; parent=&quot;baseMapper&quot;&gt;</span><br><span class=\"line\"> *     &lt;property name=&quot;mapperInterface&quot; value=&quot;my.package.MyMapperInterface&quot; /&gt;</span><br><span class=\"line\"> *   &lt;/bean&gt;</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *   &lt;bean id=&quot;anotherMapper&quot; parent=&quot;baseMapper&quot;&gt;</span><br><span class=\"line\"> *     &lt;property name=&quot;mapperInterface&quot; value=&quot;my.package.MyAnotherMapperInterface&quot; /&gt;</span><br><span class=\"line\"> *   &lt;/bean&gt;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> * &lt;/pre&gt;</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * Note that this factory can only inject &lt;em&gt;interfaces&lt;/em&gt;, not concrete classes.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Eduardo Macarron</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @see SqlSessionTemplate</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MapperFactoryBean&lt;T&gt; extends SqlSessionDaoSupport implements FactoryBean&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private Class&lt;T&gt; mapperInterface;</span><br><span class=\"line\"></span><br><span class=\"line\">  private boolean addToConfig = true;</span><br><span class=\"line\"></span><br><span class=\"line\">  public MapperFactoryBean() &#123;</span><br><span class=\"line\">    //intentionally empty </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  public MapperFactoryBean(Class&lt;T&gt; mapperInterface) &#123;</span><br><span class=\"line\">    this.mapperInterface = mapperInterface;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * &#123;@inheritDoc&#125;</span><br><span class=\"line\">   */</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  protected void checkDaoConfig() &#123;</span><br><span class=\"line\">  //进入父类DaoSupport的checkDaoConfig方法</span><br><span class=\"line\">    super.checkDaoConfig();</span><br><span class=\"line\"></span><br><span class=\"line\">    notNull(this.mapperInterface, &quot;Property &apos;mapperInterface&apos; is required&quot;);</span><br><span class=\"line\">\t//获取到mybatis的configuration</span><br><span class=\"line\">    Configuration configuration = getSqlSession().getConfiguration();</span><br><span class=\"line\">    //如果配置中没有当前执行sql的dao</span><br><span class=\"line\">    if (this.addToConfig &amp;&amp; !configuration.hasMapper(this.mapperInterface)) &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">      //加入该dao到配置类中</span><br><span class=\"line\">        configuration.addMapper(this.mapperInterface);</span><br><span class=\"line\">      &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        logger.error(&quot;Error while adding the mapper &apos;&quot; + this.mapperInterface + &quot;&apos; to configuration.&quot;, e);</span><br><span class=\"line\">        throw new IllegalArgumentException(e);</span><br><span class=\"line\">      &#125; finally &#123;</span><br><span class=\"line\">        ErrorContext.instance().reset();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * &#123;@inheritDoc&#125;</span><br><span class=\"line\">   */</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public T getObject() throws Exception &#123;</span><br><span class=\"line\">    return getSqlSession().getMapper(this.mapperInterface);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * &#123;@inheritDoc&#125;</span><br><span class=\"line\">   */</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public Class&lt;T&gt; getObjectType() &#123;</span><br><span class=\"line\">    return this.mapperInterface;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * &#123;@inheritDoc&#125;</span><br><span class=\"line\">   */</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public boolean isSingleton() &#123;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //------------- mutators --------------</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Sets the mapper interface of the MyBatis mapper</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param mapperInterface class of the interface</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public void setMapperInterface(Class&lt;T&gt; mapperInterface) &#123;</span><br><span class=\"line\">    this.mapperInterface = mapperInterface;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Return the mapper interface of the MyBatis mapper</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @return class of the interface</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public Class&lt;T&gt; getMapperInterface() &#123;</span><br><span class=\"line\">    return mapperInterface;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * If addToConfig is false the mapper will not be added to MyBatis. This means</span><br><span class=\"line\">   * it must have been included in mybatis-config.xml.</span><br><span class=\"line\">   * &lt;p/&gt;</span><br><span class=\"line\">   * If it is true, the mapper will be added to MyBatis in the case it is not already</span><br><span class=\"line\">   * registered.</span><br><span class=\"line\">   * &lt;p/&gt;</span><br><span class=\"line\">   * By default addToCofig is true.</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param addToConfig</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public void setAddToConfig(boolean addToConfig) &#123;</span><br><span class=\"line\">    this.addToConfig = addToConfig;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Return the flag for addition into MyBatis config.</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @return true if the mapper will be added to MyBatis in the case it is not already</span><br><span class=\"line\">   * registered.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public boolean isAddToConfig() &#123;</span><br><span class=\"line\">    return addToConfig;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>走完上面的代码，console打印日志：</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2018-11-07 23:51:11.500 INFO [restartedMain][Jdk14Logger.java:99] - Bean &apos;resourceDao&apos; of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</span><br></pre></td></tr></table></figure>\n\n<p>  *<em>那么底下会创建bean *</em></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory</span><br><span class=\"line\">\t\timplements AutowireCapableBeanFactory &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tprotected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)</span><br><span class=\"line\">\t\t\tthrows BeanCreationException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(&quot;Creating instance of bean &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tRootBeanDefinition mbdToUse = mbd;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Make sure bean class is actually resolved at this point, and</span><br><span class=\"line\">\t\t// clone the bean definition in case of a dynamically resolved Class</span><br><span class=\"line\">\t\t// which cannot be stored in the shared merged bean definition.</span><br><span class=\"line\">\t\tClass&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class=\"line\">\t\tif (resolvedClass != null &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != null) &#123;</span><br><span class=\"line\">\t\t\tmbdToUse = new RootBeanDefinition(mbd);</span><br><span class=\"line\">\t\t\tmbdToUse.setBeanClass(resolvedClass);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Prepare method overrides.</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tmbdToUse.prepareMethodOverrides();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (BeanDefinitionValidationException ex) &#123;</span><br><span class=\"line\">\t\t\tthrow new BeanDefinitionStoreException(mbdToUse.getResourceDescription(),</span><br><span class=\"line\">\t\t\t\t\tbeanName, &quot;Validation of method overrides failed&quot;, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\t// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span><br><span class=\"line\">\t\t\tObject bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class=\"line\">\t\t\tif (bean != null) &#123;</span><br><span class=\"line\">\t\t\t\treturn bean;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (Throwable ex) &#123;</span><br><span class=\"line\">\t\t\tthrow new BeanCreationException(mbdToUse.getResourceDescription(), beanName,</span><br><span class=\"line\">\t\t\t\t\t&quot;BeanPostProcessor before instantiation of bean failed&quot;, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t//创建bean</span><br><span class=\"line\">\t\t\tObject beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class=\"line\">\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(&quot;Finished creating instance of bean &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn beanInstance;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (BeanCreationException | ImplicitlyAppearedSingletonException ex) &#123;</span><br><span class=\"line\">\t\t\t// A previously detected exception with proper bean creation context already,</span><br><span class=\"line\">\t\t\t// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span><br><span class=\"line\">\t\t\tthrow ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (Throwable ex) &#123;</span><br><span class=\"line\">\t\t\tthrow new BeanCreationException(</span><br><span class=\"line\">\t\t\t\t\tmbdToUse.getResourceDescription(), beanName, &quot;Unexpected exception during bean creation&quot;, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t//doCreateBean 创建bean</span><br><span class=\"line\">\t\tprotected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args)</span><br><span class=\"line\">\t\t\tthrows BeanCreationException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Instantiate the bean.</span><br><span class=\"line\">\t\tBeanWrapper instanceWrapper = null;</span><br><span class=\"line\">\t\tif (mbd.isSingleton()) &#123;</span><br><span class=\"line\">\t\t\tinstanceWrapper = this.factoryBeanInstanceCache.remove(beanName);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (instanceWrapper == null) &#123;</span><br><span class=\"line\">\t\t\tinstanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfinal Object bean = instanceWrapper.getWrappedInstance();</span><br><span class=\"line\">\t\tClass&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class=\"line\">\t\tif (beanType != NullBean.class) &#123;</span><br><span class=\"line\">\t\t\tmbd.resolvedTargetType = beanType;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Allow post-processors to modify the merged bean definition.</span><br><span class=\"line\">\t\tsynchronized (mbd.postProcessingLock) &#123;</span><br><span class=\"line\">\t\t\tif (!mbd.postProcessed) &#123;</span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\tapplyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tcatch (Throwable ex) &#123;</span><br><span class=\"line\">\t\t\t\t\tthrow new BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">\t\t\t\t\t\t\t&quot;Post-processing of merged bean definition failed&quot;, ex);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tmbd.postProcessed = true;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Eagerly cache singletons to be able to resolve circular references</span><br><span class=\"line\">\t\t// even when triggered by lifecycle interfaces like BeanFactoryAware.</span><br><span class=\"line\">\t\tboolean earlySingletonExposure = (mbd.isSingleton() &amp;&amp; this.allowCircularReferences &amp;&amp;</span><br><span class=\"line\">\t\t\t\tisSingletonCurrentlyInCreation(beanName));</span><br><span class=\"line\">\t\tif (earlySingletonExposure) &#123;</span><br><span class=\"line\">\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(&quot;Eagerly caching bean &apos;&quot; + beanName +</span><br><span class=\"line\">\t\t\t\t\t\t&quot;&apos; to allow for resolving potential circular references&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\taddSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Initialize the bean instance.</span><br><span class=\"line\">\t\tObject exposedObject = bean;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tpopulateBean(beanName, mbd, instanceWrapper);</span><br><span class=\"line\">\t\t\texposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (Throwable ex) &#123;</span><br><span class=\"line\">\t\t\tif (ex instanceof BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class=\"line\">\t\t\t\tthrow (BeanCreationException) ex;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\tthrow new BeanCreationException(</span><br><span class=\"line\">\t\t\t\t\t\tmbd.getResourceDescription(), beanName, &quot;Initialization of bean failed&quot;, ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (earlySingletonExposure) &#123;</span><br><span class=\"line\">\t\t\tObject earlySingletonReference = getSingleton(beanName, false);</span><br><span class=\"line\">\t\t\tif (earlySingletonReference != null) &#123;</span><br><span class=\"line\">\t\t\t\tif (exposedObject == bean) &#123;</span><br><span class=\"line\">\t\t\t\t\texposedObject = earlySingletonReference;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\telse if (!this.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class=\"line\">\t\t\t\t\tString[] dependentBeans = getDependentBeans(beanName);</span><br><span class=\"line\">\t\t\t\t\tSet&lt;String&gt; actualDependentBeans = new LinkedHashSet&lt;&gt;(dependentBeans.length);</span><br><span class=\"line\">\t\t\t\t\tfor (String dependentBean : dependentBeans) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tif (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tactualDependentBeans.add(dependentBean);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tif (!actualDependentBeans.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tthrow new BeanCurrentlyInCreationException(beanName,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&quot;Bean with name &apos;&quot; + beanName + &quot;&apos; has been injected into other beans [&quot; +</span><br><span class=\"line\">\t\t\t\t\t\t\t\tStringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&quot;] in its raw version as part of a circular reference, but has eventually been &quot; +</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&quot;wrapped. This means that said other beans do not use the final version of the &quot; +</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&quot;bean. This is often the result of over-eager type matching - consider using &quot; +</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&quot;&apos;getBeanNamesOfType&apos; with the &apos;allowEagerInit&apos; flag turned off, for example.&quot;);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Register bean as disposable </span><br><span class=\"line\">\t\t//将这个dao注册为一次性的bean</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tregisterDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (BeanDefinitionValidationException ex) &#123;</span><br><span class=\"line\">\t\t\tthrow new BeanCreationException(</span><br><span class=\"line\">\t\t\t\t\tmbd.getResourceDescription(), beanName, &quot;Invalid destruction signature&quot;, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn exposedObject;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>//注册为单例</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic abstract class AbstractBeanFactory extends FactoryBeanRegistrySupport implements ConfigurableBeanFactory &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Add the given bean to the list of disposable beans in this factory,</span><br><span class=\"line\">\t * registering its DisposableBean interface and/or the given destroy method</span><br><span class=\"line\">\t * to be called on factory shutdown (if applicable). Only applies to singletons.</span><br><span class=\"line\">\t * @param beanName the name of the bean</span><br><span class=\"line\">\t * @param bean the bean instance</span><br><span class=\"line\">\t * @param mbd the bean definition for the bean</span><br><span class=\"line\">\t * @see RootBeanDefinition#isSingleton</span><br><span class=\"line\">\t * @see RootBeanDefinition#getDependsOn</span><br><span class=\"line\">\t * @see #registerDisposableBean</span><br><span class=\"line\">\t * @see #registerDependentBean</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) &#123;</span><br><span class=\"line\">\t\tAccessControlContext acc = (System.getSecurityManager() != null ? getAccessControlContext() : null);</span><br><span class=\"line\">\t\tif (!mbd.isPrototype() &amp;&amp; requiresDestruction(bean, mbd)) &#123;</span><br><span class=\"line\">\t\t\tif (mbd.isSingleton()) &#123;</span><br><span class=\"line\">\t\t\t\t// Register a DisposableBean implementation that performs all destruction</span><br><span class=\"line\">\t\t\t\t// work for the given bean: DestructionAwareBeanPostProcessors,</span><br><span class=\"line\">\t\t\t\t// DisposableBean interface, custom destroy method.</span><br><span class=\"line\">\t\t\t\tregisterDisposableBean(beanName,</span><br><span class=\"line\">\t\t\t\t\t\tnew DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\t// A bean with a custom scope...</span><br><span class=\"line\">\t\t\t\tScope scope = this.scopes.get(mbd.getScope());</span><br><span class=\"line\">\t\t\t\tif (scope == null) &#123;</span><br><span class=\"line\">\t\t\t\t\tthrow new IllegalStateException(&quot;No Scope registered for scope name &apos;&quot; + mbd.getScope() + &quot;&apos;&quot;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tscope.registerDestructionCallback(beanName,</span><br><span class=\"line\">\t\t\t\t\t\tnew DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>当要执行dao层的sql操作时候</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.apache.ibatis.binding.MapperProxy@14e19901</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>这个是一个代理类</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *    Copyright 2009-2017 the original author or authors.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *    Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class=\"line\"> *    you may not use this file except in compliance with the License.</span><br><span class=\"line\"> *    You may obtain a copy of the License at</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *       http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *    Unless required by applicable law or agreed to in writing, software</span><br><span class=\"line\"> *    distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class=\"line\"> *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"line\"> *    See the License for the specific language governing permissions and</span><br><span class=\"line\"> *    limitations under the License.</span><br><span class=\"line\"> */</span><br><span class=\"line\">package org.apache.ibatis.binding;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\">import java.lang.invoke.MethodHandles;</span><br><span class=\"line\">import java.lang.reflect.Constructor;</span><br><span class=\"line\">import java.lang.reflect.InvocationHandler;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\">import java.lang.reflect.Modifier;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.ibatis.lang.UsesJava7;</span><br><span class=\"line\">import org.apache.ibatis.reflection.ExceptionUtil;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author Clinton Begin</span><br><span class=\"line\"> * @author Eduardo Macarron</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MapperProxy&lt;T&gt; implements InvocationHandler, Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static final long serialVersionUID = -6424540398559729838L;</span><br><span class=\"line\">  private final SqlSession sqlSession;</span><br><span class=\"line\">  private final Class&lt;T&gt; mapperInterface;</span><br><span class=\"line\">  private final Map&lt;Method, MapperMethod&gt; methodCache;</span><br><span class=\"line\"></span><br><span class=\"line\">  public MapperProxy(SqlSession sqlSession, Class&lt;T&gt; mapperInterface, Map&lt;Method, MapperMethod&gt; methodCache) &#123;</span><br><span class=\"line\">    this.sqlSession = sqlSession;</span><br><span class=\"line\">    this.mapperInterface = mapperInterface;</span><br><span class=\"line\">    this.methodCache = methodCache;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //具体的sql操作会走这里</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">    //判断是否是生命的类</span><br><span class=\"line\">      if (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class=\"line\">        return method.invoke(this, args);</span><br><span class=\"line\">        //是否是原生方法</span><br><span class=\"line\">      &#125; else if (isDefaultMethod(method)) &#123;</span><br><span class=\"line\">        return invokeDefaultMethod(proxy, method, args);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; catch (Throwable t) &#123;</span><br><span class=\"line\">      throw ExceptionUtil.unwrapThrowable(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //将具体的sql操作缓存并返回</span><br><span class=\"line\">    final MapperMethod mapperMethod = cachedMapperMethod(method);</span><br><span class=\"line\">    //进行执行</span><br><span class=\"line\">    return mapperMethod.execute(sqlSession, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> //将具体的sql操作method缓存</span><br><span class=\"line\">  private MapperMethod cachedMapperMethod(Method method) &#123;</span><br><span class=\"line\">    MapperMethod mapperMethod = methodCache.get(method);</span><br><span class=\"line\">    if (mapperMethod == null) &#123;</span><br><span class=\"line\">      mapperMethod = new MapperMethod(mapperInterface, method, sqlSession.getConfiguration());</span><br><span class=\"line\">      methodCache.put(method, mapperMethod);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return mapperMethod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @UsesJava7</span><br><span class=\"line\">  private Object invokeDefaultMethod(Object proxy, Method method, Object[] args)</span><br><span class=\"line\">      throws Throwable &#123;</span><br><span class=\"line\">    final Constructor&lt;MethodHandles.Lookup&gt; constructor = MethodHandles.Lookup.class</span><br><span class=\"line\">        .getDeclaredConstructor(Class.class, int.class);</span><br><span class=\"line\">    if (!constructor.isAccessible()) &#123;</span><br><span class=\"line\">      constructor.setAccessible(true);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    final Class&lt;?&gt; declaringClass = method.getDeclaringClass();</span><br><span class=\"line\">    return constructor</span><br><span class=\"line\">        .newInstance(declaringClass,</span><br><span class=\"line\">            MethodHandles.Lookup.PRIVATE | MethodHandles.Lookup.PROTECTED</span><br><span class=\"line\">                | MethodHandles.Lookup.PACKAGE | MethodHandles.Lookup.PUBLIC)</span><br><span class=\"line\">        .unreflectSpecial(method, declaringClass).bindTo(proxy).invokeWithArguments(args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Backport of java.lang.reflect.Method#isDefault()</span><br><span class=\"line\">   */</span><br><span class=\"line\">  private boolean isDefaultMethod(Method method) &#123;</span><br><span class=\"line\">    return ((method.getModifiers()</span><br><span class=\"line\">        &amp; (Modifier.ABSTRACT | Modifier.PUBLIC | Modifier.STATIC)) == Modifier.PUBLIC)</span><br><span class=\"line\">        &amp;&amp; method.getDeclaringClass().isInterface();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>MapperMethod:</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MapperMethod &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private final SqlCommand command;</span><br><span class=\"line\">  private final MethodSignature method;</span><br><span class=\"line\"></span><br><span class=\"line\">  public MapperMethod(Class&lt;?&gt; mapperInterface, Method method, Configuration config) &#123;</span><br><span class=\"line\">    this.command = new SqlCommand(config, mapperInterface, method);</span><br><span class=\"line\">    this.method = new MethodSignature(config, mapperInterface, method);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> //这里进行执行sql</span><br><span class=\"line\">  public Object execute(SqlSession sqlSession, Object[] args) &#123;</span><br><span class=\"line\">    Object result;</span><br><span class=\"line\">    //判断crud操作</span><br><span class=\"line\">    switch (command.getType()) &#123;</span><br><span class=\"line\">      case INSERT: &#123;</span><br><span class=\"line\">    \tObject param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">        result = rowCountResult(sqlSession.insert(command.getName(), param));</span><br><span class=\"line\">        break;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      case UPDATE: &#123;</span><br><span class=\"line\">        Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">        result = rowCountResult(sqlSession.update(command.getName(), param));</span><br><span class=\"line\">        break;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      case DELETE: &#123;</span><br><span class=\"line\">        Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">        result = rowCountResult(sqlSession.delete(command.getName(), param));</span><br><span class=\"line\">        break;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      case SELECT:</span><br><span class=\"line\">        if (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123;</span><br><span class=\"line\">          executeWithResultHandler(sqlSession, args);</span><br><span class=\"line\">          result = null;</span><br><span class=\"line\">        &#125; else if (method.returnsMany()) &#123;</span><br><span class=\"line\">        //这里是一个many的result跳到这里</span><br><span class=\"line\">          result = executeForMany(sqlSession, args);</span><br><span class=\"line\">        &#125; else if (method.returnsMap()) &#123;</span><br><span class=\"line\">          result = executeForMap(sqlSession, args);</span><br><span class=\"line\">        &#125; else if (method.returnsCursor()) &#123;</span><br><span class=\"line\">          result = executeForCursor(sqlSession, args);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">          result = sqlSession.selectOne(command.getName(), param);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">      case FLUSH:</span><br><span class=\"line\">        result = sqlSession.flushStatements();</span><br><span class=\"line\">        break;</span><br><span class=\"line\">      default:</span><br><span class=\"line\">        throw new BindingException(&quot;Unknown execution method for: &quot; + command.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (result == null &amp;&amp; method.getReturnType().isPrimitive() &amp;&amp; !method.returnsVoid()) &#123;</span><br><span class=\"line\">      throw new BindingException(&quot;Mapper method &apos;&quot; + command.getName() </span><br><span class=\"line\">          + &quot; attempted to return null from a method with a primitive return type (&quot; + method.getReturnType() + &quot;).&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private Object rowCountResult(int rowCount) &#123;</span><br><span class=\"line\">    final Object result;</span><br><span class=\"line\">    if (method.returnsVoid()) &#123;</span><br><span class=\"line\">      result = null;</span><br><span class=\"line\">    &#125; else if (Integer.class.equals(method.getReturnType()) || Integer.TYPE.equals(method.getReturnType())) &#123;</span><br><span class=\"line\">      result = rowCount;</span><br><span class=\"line\">    &#125; else if (Long.class.equals(method.getReturnType()) || Long.TYPE.equals(method.getReturnType())) &#123;</span><br><span class=\"line\">      result = (long)rowCount;</span><br><span class=\"line\">    &#125; else if (Boolean.class.equals(method.getReturnType()) || Boolean.TYPE.equals(method.getReturnType())) &#123;</span><br><span class=\"line\">      result = rowCount &gt; 0;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      throw new BindingException(&quot;Mapper method &apos;&quot; + command.getName() + &quot;&apos; has an unsupported return type: &quot; + method.getReturnType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private void executeWithResultHandler(SqlSession sqlSession, Object[] args) &#123;</span><br><span class=\"line\">    MappedStatement ms = sqlSession.getConfiguration().getMappedStatement(command.getName());</span><br><span class=\"line\">    if (void.class.equals(ms.getResultMaps().get(0).getType())) &#123;</span><br><span class=\"line\">      throw new BindingException(&quot;method &quot; + command.getName() </span><br><span class=\"line\">          + &quot; needs either a @ResultMap annotation, a @ResultType annotation,&quot; </span><br><span class=\"line\">          + &quot; or a resultType attribute in XML so a ResultHandler can be used as a parameter.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">    if (method.hasRowBounds()) &#123;</span><br><span class=\"line\">      RowBounds rowBounds = method.extractRowBounds(args);</span><br><span class=\"line\">      sqlSession.select(command.getName(), param, rowBounds, method.extractResultHandler(args));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      sqlSession.select(command.getName(), param, method.extractResultHandler(args));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t//多结果集的跳到这里</span><br><span class=\"line\">  private &lt;E&gt; Object executeForMany(SqlSession sqlSession, Object[] args) &#123;</span><br><span class=\"line\">    List&lt;E&gt; result;</span><br><span class=\"line\">    Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">    if (method.hasRowBounds()) &#123;</span><br><span class=\"line\">      RowBounds rowBounds = method.extractRowBounds(args);</span><br><span class=\"line\">      //重点 交给sqlSession进行处理</span><br><span class=\"line\">      result = sqlSession.&lt;E&gt;selectList(command.getName(), param, rowBounds);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      result = sqlSession.&lt;E&gt;selectList(command.getName(), param);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // issue #510 Collections &amp; arrays support</span><br><span class=\"line\">    if (!method.getReturnType().isAssignableFrom(result.getClass())) &#123;</span><br><span class=\"line\">      if (method.getReturnType().isArray()) &#123;</span><br><span class=\"line\">        return convertToArray(result);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        return convertToDeclaredCollection(sqlSession.getConfiguration(), result);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private &lt;T&gt; Cursor&lt;T&gt; executeForCursor(SqlSession sqlSession, Object[] args) &#123;</span><br><span class=\"line\">    Cursor&lt;T&gt; result;</span><br><span class=\"line\">    Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">    if (method.hasRowBounds()) &#123;</span><br><span class=\"line\">      RowBounds rowBounds = method.extractRowBounds(args);</span><br><span class=\"line\">      result = sqlSession.&lt;T&gt;selectCursor(command.getName(), param, rowBounds);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      result = sqlSession.&lt;T&gt;selectCursor(command.getName(), param);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private &lt;E&gt; Object convertToDeclaredCollection(Configuration config, List&lt;E&gt; list) &#123;</span><br><span class=\"line\">    Object collection = config.getObjectFactory().create(method.getReturnType());</span><br><span class=\"line\">    MetaObject metaObject = config.newMetaObject(collection);</span><br><span class=\"line\">    metaObject.addAll(list);</span><br><span class=\"line\">    return collection;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">  private &lt;E&gt; Object convertToArray(List&lt;E&gt; list) &#123;</span><br><span class=\"line\">    Class&lt;?&gt; arrayComponentType = method.getReturnType().getComponentType();</span><br><span class=\"line\">    Object array = Array.newInstance(arrayComponentType, list.size());</span><br><span class=\"line\">    if (arrayComponentType.isPrimitive()) &#123;</span><br><span class=\"line\">      for (int i = 0; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">        Array.set(array, i, list.get(i));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return array;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      return list.toArray((E[])array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private &lt;K, V&gt; Map&lt;K, V&gt; executeForMap(SqlSession sqlSession, Object[] args) &#123;</span><br><span class=\"line\">    Map&lt;K, V&gt; result;</span><br><span class=\"line\">    Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">    if (method.hasRowBounds()) &#123;</span><br><span class=\"line\">      RowBounds rowBounds = method.extractRowBounds(args);</span><br><span class=\"line\">      result = sqlSession.&lt;K, V&gt;selectMap(command.getName(), param, method.getMapKey(), rowBounds);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      result = sqlSession.&lt;K, V&gt;selectMap(command.getName(), param, method.getMapKey());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static class ParamMap&lt;V&gt; extends HashMap&lt;String, V&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final long serialVersionUID = -2212268410512043556L;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public V get(Object key) &#123;</span><br><span class=\"line\">      if (!super.containsKey(key)) &#123;</span><br><span class=\"line\">        throw new BindingException(&quot;Parameter &apos;&quot; + key + &quot;&apos; not found. Available parameters are &quot; + keySet());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return super.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static class SqlCommand &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final String name;</span><br><span class=\"line\">    private final SqlCommandType type;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SqlCommand(Configuration configuration, Class&lt;?&gt; mapperInterface, Method method) &#123;</span><br><span class=\"line\">      final String methodName = method.getName();</span><br><span class=\"line\">      final Class&lt;?&gt; declaringClass = method.getDeclaringClass();</span><br><span class=\"line\">      MappedStatement ms = resolveMappedStatement(mapperInterface, methodName, declaringClass,</span><br><span class=\"line\">          configuration);</span><br><span class=\"line\">      if (ms == null) &#123;</span><br><span class=\"line\">        if (method.getAnnotation(Flush.class) != null) &#123;</span><br><span class=\"line\">          name = null;</span><br><span class=\"line\">          type = SqlCommandType.FLUSH;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          throw new BindingException(&quot;Invalid bound statement (not found): &quot;</span><br><span class=\"line\">              + mapperInterface.getName() + &quot;.&quot; + methodName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        name = ms.getId();</span><br><span class=\"line\">        type = ms.getSqlCommandType();</span><br><span class=\"line\">        if (type == SqlCommandType.UNKNOWN) &#123;</span><br><span class=\"line\">          throw new BindingException(&quot;Unknown execution method for: &quot; + name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">      return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SqlCommandType getType() &#123;</span><br><span class=\"line\">      return type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MappedStatement resolveMappedStatement(Class&lt;?&gt; mapperInterface, String methodName,</span><br><span class=\"line\">        Class&lt;?&gt; declaringClass, Configuration configuration) &#123;</span><br><span class=\"line\">      String statementId = mapperInterface.getName() + &quot;.&quot; + methodName;</span><br><span class=\"line\">      if (configuration.hasStatement(statementId)) &#123;</span><br><span class=\"line\">        return configuration.getMappedStatement(statementId);</span><br><span class=\"line\">      &#125; else if (mapperInterface.equals(declaringClass)) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      for (Class&lt;?&gt; superInterface : mapperInterface.getInterfaces()) &#123;</span><br><span class=\"line\">        if (declaringClass.isAssignableFrom(superInterface)) &#123;</span><br><span class=\"line\">          MappedStatement ms = resolveMappedStatement(superInterface, methodName,</span><br><span class=\"line\">              declaringClass, configuration);</span><br><span class=\"line\">          if (ms != null) &#123;</span><br><span class=\"line\">            return ms;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static class MethodSignature &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final boolean returnsMany;</span><br><span class=\"line\">    private final boolean returnsMap;</span><br><span class=\"line\">    private final boolean returnsVoid;</span><br><span class=\"line\">    private final boolean returnsCursor;</span><br><span class=\"line\">    private final Class&lt;?&gt; returnType;</span><br><span class=\"line\">    private final String mapKey;</span><br><span class=\"line\">    private final Integer resultHandlerIndex;</span><br><span class=\"line\">    private final Integer rowBoundsIndex;</span><br><span class=\"line\">    private final ParamNameResolver paramNameResolver;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MethodSignature(Configuration configuration, Class&lt;?&gt; mapperInterface, Method method) &#123;</span><br><span class=\"line\">      Type resolvedReturnType = TypeParameterResolver.resolveReturnType(method, mapperInterface);</span><br><span class=\"line\">      if (resolvedReturnType instanceof Class&lt;?&gt;) &#123;</span><br><span class=\"line\">        this.returnType = (Class&lt;?&gt;) resolvedReturnType;</span><br><span class=\"line\">      &#125; else if (resolvedReturnType instanceof ParameterizedType) &#123;</span><br><span class=\"line\">        this.returnType = (Class&lt;?&gt;) ((ParameterizedType) resolvedReturnType).getRawType();</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        this.returnType = method.getReturnType();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      this.returnsVoid = void.class.equals(this.returnType);</span><br><span class=\"line\">      this.returnsMany = (configuration.getObjectFactory().isCollection(this.returnType) || this.returnType.isArray());</span><br><span class=\"line\">      this.returnsCursor = Cursor.class.equals(this.returnType);</span><br><span class=\"line\">      this.mapKey = getMapKey(method);</span><br><span class=\"line\">      this.returnsMap = (this.mapKey != null);</span><br><span class=\"line\">      this.rowBoundsIndex = getUniqueParamIndex(method, RowBounds.class);</span><br><span class=\"line\">      this.resultHandlerIndex = getUniqueParamIndex(method, ResultHandler.class);</span><br><span class=\"line\">      this.paramNameResolver = new ParamNameResolver(configuration, method);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object convertArgsToSqlCommandParam(Object[] args) &#123;</span><br><span class=\"line\">      return paramNameResolver.getNamedParams(args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean hasRowBounds() &#123;</span><br><span class=\"line\">      return rowBoundsIndex != null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public RowBounds extractRowBounds(Object[] args) &#123;</span><br><span class=\"line\">      return hasRowBounds() ? (RowBounds) args[rowBoundsIndex] : null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean hasResultHandler() &#123;</span><br><span class=\"line\">      return resultHandlerIndex != null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ResultHandler extractResultHandler(Object[] args) &#123;</span><br><span class=\"line\">      return hasResultHandler() ? (ResultHandler) args[resultHandlerIndex] : null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getMapKey() &#123;</span><br><span class=\"line\">      return mapKey;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Class&lt;?&gt; getReturnType() &#123;</span><br><span class=\"line\">      return returnType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean returnsMany() &#123;</span><br><span class=\"line\">      return returnsMany;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean returnsMap() &#123;</span><br><span class=\"line\">      return returnsMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean returnsVoid() &#123;</span><br><span class=\"line\">      return returnsVoid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean returnsCursor() &#123;</span><br><span class=\"line\">      return returnsCursor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Integer getUniqueParamIndex(Method method, Class&lt;?&gt; paramType) &#123;</span><br><span class=\"line\">      Integer index = null;</span><br><span class=\"line\">      final Class&lt;?&gt;[] argTypes = method.getParameterTypes();</span><br><span class=\"line\">      for (int i = 0; i &lt; argTypes.length; i++) &#123;</span><br><span class=\"line\">        if (paramType.isAssignableFrom(argTypes[i])) &#123;</span><br><span class=\"line\">          if (index == null) &#123;</span><br><span class=\"line\">            index = i;</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">            throw new BindingException(method.getName() + &quot; cannot have multiple &quot; + paramType.getSimpleName() + &quot; parameters&quot;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String getMapKey(Method method) &#123;</span><br><span class=\"line\">      String mapKey = null;</span><br><span class=\"line\">      if (Map.class.isAssignableFrom(method.getReturnType())) &#123;</span><br><span class=\"line\">        final MapKey mapKeyAnnotation = method.getAnnotation(MapKey.class);</span><br><span class=\"line\">        if (mapKeyAnnotation != null) &#123;</span><br><span class=\"line\">          mapKey = mapKeyAnnotation.value();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return mapKey;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  *<em>上述的sqlsession的操作跳到 DefaultSqlSession *</em></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DefaultSqlSession implements SqlSession &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter) &#123;</span><br><span class=\"line\">    return this.selectList(statement, parameter, RowBounds.DEFAULT);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">    //根据语句statement拿到MappedStatement</span><br><span class=\"line\">      MappedStatement ms = configuration.getMappedStatement(statement);</span><br><span class=\"line\">      //重点来了 executor执行器来执行具体的sql</span><br><span class=\"line\">      return ,executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">      throw ExceptionFactory.wrapException(&quot;Error querying database.  Cause: &quot; + e, e);</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">      ErrorContext.instance().reset();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>executor有两个实现：BaseExecutor 和CachingExecutor</strong></p>\n<p>  <strong>这里走CachingExecutor：</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CachingExecutor implements Executor &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public &lt;E&gt; List&lt;E&gt; query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException &#123;</span><br><span class=\"line\">  //拿到sql boundSql里面存储有要执行的sql</span><br><span class=\"line\">    BoundSql boundSql = ms.getBoundSql(parameterObject);</span><br><span class=\"line\">    CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);</span><br><span class=\"line\">    //返回具体的query方法的执行结果集</span><br><span class=\"line\">    return query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //缓存sql</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">  public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql) &#123;</span><br><span class=\"line\">      //没有的话走BaseExecutor</span><br><span class=\"line\">    return delegate.createCacheKey(ms, parameterObject, rowBounds, boundSql);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //具体的query方法</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">  public &lt;E&gt; List&lt;E&gt; query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span><br><span class=\"line\">      throws SQLException &#123;</span><br><span class=\"line\">    Cache cache = ms.getCache();</span><br><span class=\"line\">    //这里用到缓存 看之前是否用过sql查询 有的话酒从缓存拿了</span><br><span class=\"line\">    if (cache != null) &#123;</span><br><span class=\"line\">      flushCacheIfRequired(ms);</span><br><span class=\"line\">      if (ms.isUseCache() &amp;&amp; resultHandler == null) &#123;</span><br><span class=\"line\">        ensureNoOutParams(ms, parameterObject, boundSql);</span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">        List&lt;E&gt; list = (List&lt;E&gt;) tcm.getObject(cache, key);</span><br><span class=\"line\">        if (list == null) &#123;</span><br><span class=\"line\">          list = delegate.&lt;E&gt; query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class=\"line\">          tcm.putObject(cache, key, list); // issue #578 and #116</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //没有的话走BaseExecutor</span><br><span class=\"line\">    return delegate.&lt;E&gt; query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>BaseExecutor：</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如果没有缓存走这里的query</span><br><span class=\"line\">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public &lt;E&gt; List&lt;E&gt; query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException &#123;</span><br><span class=\"line\">    ErrorContext.instance().resource(ms.getResource()).activity(&quot;executing a query&quot;).object(ms.getId());</span><br><span class=\"line\">    if (closed) &#123;</span><br><span class=\"line\">      throw new ExecutorException(&quot;Executor was closed.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (queryStack == 0 &amp;&amp; ms.isFlushCacheRequired()) &#123;</span><br><span class=\"line\">      clearLocalCache();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    List&lt;E&gt; list;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      queryStack++;</span><br><span class=\"line\">      list = resultHandler == null ? (List&lt;E&gt;) localCache.getObject(key) : null;</span><br><span class=\"line\">      if (list != null) &#123;</span><br><span class=\"line\">        handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">      queryStack--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (queryStack == 0) &#123;</span><br><span class=\"line\">      for (DeferredLoad deferredLoad : deferredLoads) &#123;</span><br><span class=\"line\">        deferredLoad.load();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // issue #601</span><br><span class=\"line\">      deferredLoads.clear();</span><br><span class=\"line\">      if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;</span><br><span class=\"line\">        // issue #482</span><br><span class=\"line\">        clearLocalCache();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return list;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //再往里的queryFromDatabase</span><br><span class=\"line\">  private &lt;E&gt; List&lt;E&gt; queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException &#123;</span><br><span class=\"line\">    List&lt;E&gt; list;</span><br><span class=\"line\">    localCache.putObject(key, EXECUTION_PLACEHOLDER);</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">    //这里再次跳转 走SimpleExecutor</span><br><span class=\"line\">      list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">      localCache.removeObject(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    localCache.putObject(key, list);</span><br><span class=\"line\">    if (ms.getStatementType() == StatementType.CALLABLE) &#123;</span><br><span class=\"line\">      localOutputParameterCache.putObject(key, parameter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return list;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>SimpleExecutor:类似的类还有ReuseExecutor，ClosedExecutor，BatchExecutor 都是BaseExecutor的子类</strong></p>\n<p>  <strong>值得一提的是再openSessionFromConnection或openSessionFromConnection的时候就会创建一个新的executor并制定类型:</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Executor newExecutor(Transaction transaction, ExecutorType executorType) &#123;</span><br><span class=\"line\">  executorType = executorType == null ? defaultExecutorType : executorType;</span><br><span class=\"line\">  executorType = executorType == null ? ExecutorType.SIMPLE : executorType;</span><br><span class=\"line\">  Executor executor;</span><br><span class=\"line\">  if (ExecutorType.BATCH == executorType) &#123;</span><br><span class=\"line\">    executor = new BatchExecutor(this, transaction);</span><br><span class=\"line\">  &#125; else if (ExecutorType.REUSE == executorType) &#123;</span><br><span class=\"line\">    executor = new ReuseExecutor(this, transaction);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    executor = new SimpleExecutor(this, transaction);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (cacheEnabled) &#123;</span><br><span class=\"line\">    executor = new CachingExecutor(executor);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  executor = (Executor) interceptorChain.pluginAll(executor);</span><br><span class=\"line\">  return executor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public &lt;E&gt; List&lt;E&gt; doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException &#123;</span><br><span class=\"line\">  Statement stmt = null;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    Configuration configuration = ms.getConfiguration();</span><br><span class=\"line\">   //获得一个StatementHandler</span><br><span class=\"line\">    StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class=\"line\">   //进行预编译sql</span><br><span class=\"line\">    stmt = prepareStatement(handler, ms.getStatementLog());</span><br><span class=\"line\">    //交给handler去执行</span><br><span class=\"line\">    return handler.&lt;E&gt;query(stmt, resultHandler);</span><br><span class=\"line\">  &#125; finally &#123;</span><br><span class=\"line\">    closeStatement(stmt);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">      //进行预编译sql</span><br><span class=\"line\">  private Statement prepareStatement(StatementHandler handler, Log statementLog) throws SQLException &#123;</span><br><span class=\"line\">  Statement stmt;</span><br><span class=\"line\">  Connection connection = getConnection(statementLog);</span><br><span class=\"line\">  stmt = handler.prepare(connection, transaction.getTimeout());</span><br><span class=\"line\">  handler.parameterize(stmt);</span><br><span class=\"line\">  return stmt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>交给StatementHandler去执行了,有几个实现类：这里走的PreparedStatementHandler</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public class PreparedStatementHandler extends BaseStatementHandler &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\"> @Override</span><br><span class=\"line\">  public &lt;E&gt; List&lt;E&gt; query(Statement statement, ResultHandler resultHandler) throws SQLException &#123;</span><br><span class=\"line\">    PreparedStatement ps = (PreparedStatement) statement;</span><br><span class=\"line\">    ps.execute();</span><br><span class=\"line\">    return resultSetHandler.&lt;E&gt; handleResultSets(ps);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>最后交给DefaultResultSetHandler来做</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DefaultResultSetHandler implements ResultSetHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public List&lt;Object&gt; handleResultSets(Statement stmt) throws SQLException &#123;</span><br><span class=\"line\">    ErrorContext.instance().activity(&quot;handling results&quot;).object(mappedStatement.getId());</span><br><span class=\"line\"></span><br><span class=\"line\">    final List&lt;Object&gt; multipleResults = new ArrayList&lt;Object&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    int resultSetCount = 0;</span><br><span class=\"line\">    ResultSetWrapper rsw = getFirstResultSet(stmt);</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;ResultMap&gt; resultMaps = mappedStatement.getResultMaps();</span><br><span class=\"line\">    int resultMapCount = resultMaps.size();</span><br><span class=\"line\">    validateResultMapsCount(rsw, resultMapCount);</span><br><span class=\"line\">    while (rsw != null &amp;&amp; resultMapCount &gt; resultSetCount) &#123;</span><br><span class=\"line\">      ResultMap resultMap = resultMaps.get(resultSetCount);</span><br><span class=\"line\">      handleResultSet(rsw, resultMap, multipleResults, null);</span><br><span class=\"line\">      rsw = getNextResultSet(stmt);</span><br><span class=\"line\">      cleanUpAfterHandlingResultSet();</span><br><span class=\"line\">      resultSetCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] resultSets = mappedStatement.getResultSets();</span><br><span class=\"line\">    if (resultSets != null) &#123;</span><br><span class=\"line\">      while (rsw != null &amp;&amp; resultSetCount &lt; resultSets.length) &#123;</span><br><span class=\"line\">        ResultMapping parentMapping = nextResultMaps.get(resultSets[resultSetCount]);</span><br><span class=\"line\">        if (parentMapping != null) &#123;</span><br><span class=\"line\">          String nestedResultMapId = parentMapping.getNestedResultMapId();</span><br><span class=\"line\">          ResultMap resultMap = configuration.getResultMap(nestedResultMapId);</span><br><span class=\"line\">          handleResultSet(rsw, resultMap, null, parentMapping);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rsw = getNextResultSet(stmt);</span><br><span class=\"line\">        cleanUpAfterHandlingResultSet();</span><br><span class=\"line\">        resultSetCount++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return collapseSingleResultList(multipleResults);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">  private List&lt;Object&gt; collapseSingleResultList(List&lt;Object&gt; multipleResults) &#123;</span><br><span class=\"line\">    return multipleResults.size() == 1 ? (List&lt;Object&gt;) multipleResults.get(0) : multipleResults;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>整体流程</strong></p>\n<p>  <strong>Mapper.selectOne()–&gt;MapperProxy.invoke–&gt;mapperMethod–&gt;SqlSession.selectOne–&gt;Executor.query()–&gt;SimpleExecutor.doQuery–&gt;PreparedStatementHandler.query–&gt;DefaultResultSetHandler.query</strong></p>\n","site":{"data":{}},"excerpt":"<p>Mybatis源码分析二</p>","more":"<p></p>\n<p><strong>基于3.4.5版本。与springboot2.0.5 mybatis-spring1.3.2</strong></p>\n<ul>\n<li><p>主要的核心类</p>\n<ul>\n<li><strong>Configuration: MyBatis 所有的配置信息都维持在 Configuration 对象之中。</strong></li>\n<li><strong>SqlSession :作为 MyBatis 工作的主要顶层 API，表示和数据库交互的会话，完成必要数据库增删改查功能</strong></li>\n<li><strong>Executor :MyBatis 执行器，是 MyBatis 调度的核心，负责 SQL 语句的生成和查询缓存的维护</strong></li>\n<li><strong>StatementHandler :封装了 JDBC Statement 操作，负责对 JDBC statement 的操作，如设置参数、将 Statement 结果集转换成 List 集合。</strong></li>\n<li>*<em>ParameterHandler :负责对用户传递的参数转换成 JDBC Statement 所需要的参数 *</em></li>\n<li><strong>ResultSetHandler :负责将 JDBC 返回的 ResultSet 结果集对象转换成 List 类型的集合</strong></li>\n<li><strong>TypeHandler:负责 java 数据类型和 jdbc 数据类型之间的映射和转换</strong></li>\n<li><strong>MappedStatement :MappedStatement 维护了一条 &lt;select|update|delete|insert&gt; 节点的封装</strong></li>\n<li><strong>SqlSource :负责根据用户传递的 parameterObject，动态地生成 SQL 语句，将信息封装到 BoundSql 对象中并返回</strong></li>\n<li><strong>BoundSql :表示动态生成的 SQL 语句以及相应的参数信息</strong></li>\n</ul>\n</li>\n<li><p><strong>Mybatis启动过程</strong></p>\n<p><strong>这个类是个建造者 会创建sqlsessionFactory,提供了挺多的build方法。</strong></p>\n<p>上源码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SqlSessionFactoryBuilder &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\"> public SqlSessionFactory build(Reader reader) &#123;</span><br><span class=\"line\">    return build(reader, null, null);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public SqlSessionFactory build(Reader reader, String environment) &#123;</span><br><span class=\"line\">    return build(reader, environment, null);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public SqlSessionFactory build(Reader reader, Properties properties) &#123;</span><br><span class=\"line\">    return build(reader, null, properties);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public SqlSessionFactory build(Reader reader, String environment, Properties properties) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      XMLConfigBuilder parser = new XMLConfigBuilder(reader, environment, properties);</span><br><span class=\"line\">      //注意这里的parser.parse();</span><br><span class=\"line\">      return build(parser.parse());</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">      throw ExceptionFactory.wrapException(&quot;Error building SqlSession.&quot;, e);</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">      //重置错误上下文实例</span><br><span class=\"line\">      ErrorContext.instance().reset();</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        reader.close();</span><br><span class=\"line\">      &#125; catch (IOException e) &#123;</span><br><span class=\"line\">        // Intentionally ignore. Prefer previous error.</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //parse方法</span><br><span class=\"line\">  public Configuration parse() &#123;</span><br><span class=\"line\">    if (parsed) &#123;</span><br><span class=\"line\">      throw new BuilderException(&quot;Each XMLConfigBuilder can only be used once.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parsed = true;</span><br><span class=\"line\">    parseConfiguration(parser.evalNode(&quot;/configuration&quot;));</span><br><span class=\"line\">    return configuration;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> //具体的解析</span><br><span class=\"line\">  private void parseConfiguration(XNode root) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      //issue #117 read properties first</span><br><span class=\"line\">      // 解析&lt;properties&gt;节点</span><br><span class=\"line\">      propertiesElement(root.evalNode(&quot;properties&quot;));</span><br><span class=\"line\">      //解析settings节点</span><br><span class=\"line\">      Properties settings = settingsAsProperties(root.evalNode(&quot;settings&quot;));</span><br><span class=\"line\">      //加载自定义的settings</span><br><span class=\"line\">      loadCustomVfs(settings);</span><br><span class=\"line\">      /// 解析&lt;typeAliases&gt;节点</span><br><span class=\"line\">      typeAliasesElement(root.evalNode(&quot;typeAliases&quot;));</span><br><span class=\"line\">      // 解析&lt;plugins&gt;节点</span><br><span class=\"line\">      pluginElement(root.evalNode(&quot;plugins&quot;));</span><br><span class=\"line\">      // 解析&lt;objectFactory&gt;节点</span><br><span class=\"line\">      objectFactoryElement(root.evalNode(&quot;objectFactory&quot;));</span><br><span class=\"line\">      objectWrapperFactoryElement(root.evalNode(&quot;objectWrapperFactory&quot;));</span><br><span class=\"line\">      // 解析&lt;reflectorFactory&gt;节点</span><br><span class=\"line\">      reflectorFactoryElement(root.evalNode(&quot;reflectorFactory&quot;));</span><br><span class=\"line\">      settingsElement(settings);</span><br><span class=\"line\">       // 解析&lt;environments&gt;节点</span><br><span class=\"line\">      // read it after objectFactory and objectWrapperFactory issue #631</span><br><span class=\"line\">      environmentsElement(root.evalNode(&quot;environments&quot;));</span><br><span class=\"line\">      //多数据源的话解析dbid</span><br><span class=\"line\">      databaseIdProviderElement(root.evalNode(&quot;databaseIdProvider&quot;));</span><br><span class=\"line\">      typeHandlerElement(root.evalNode(&quot;typeHandlers&quot;));</span><br><span class=\"line\">       // 解析&lt;mappers&gt;节点</span><br><span class=\"line\">      mapperElement(root.evalNode(&quot;mappers&quot;));</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">      throw new BuilderException(&quot;Error parsing SQL Mapper Configuration. Cause: &quot; + e, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public SqlSessionFactory build(InputStream inputStream) &#123;</span><br><span class=\"line\">    return build(inputStream, null, null);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public SqlSessionFactory build(InputStream inputStream, String environment) &#123;</span><br><span class=\"line\">    return build(inputStream, environment, null);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public SqlSessionFactory build(InputStream inputStream, Properties properties) &#123;</span><br><span class=\"line\">    return build(inputStream, null, properties);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);</span><br><span class=\"line\">      return build(parser.parse());</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">      throw ExceptionFactory.wrapException(&quot;Error building SqlSession.&quot;, e);</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">      ErrorContext.instance().reset();</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        inputStream.close();</span><br><span class=\"line\">      &#125; catch (IOException e) &#123;</span><br><span class=\"line\">        // Intentionally ignore. Prefer previous error.</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在项目启动的适合，我这里用的springboot集成的项目当然配置文件是写在application.properties的，springmvc项目一般在xml文件中配置的</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">mybatis.type-aliases-package=com.convergence.domain</span><br><span class=\"line\">mybatis.mapper-locations=classpath:/mapper/*.xml</span><br><span class=\"line\">mybatis.config-location=</span><br><span class=\"line\">mybatis.configuration.map-underscore-to-camel-case=true</span><br><span class=\"line\">mybatis.configuration.multiple-result-sets-enabled=true</span><br><span class=\"line\">mybatis.configuration.useColumnLabel=true</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建factory</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SqlSessionFactoryBuilder &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">public SqlSessionFactory build(Configuration config) &#123;</span><br><span class=\"line\">  return new DefaultSqlSessionFactory(config);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Configuration类记录了mybatis的一些配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br><span class=\"line\">913</span><br><span class=\"line\">914</span><br><span class=\"line\">915</span><br><span class=\"line\">916</span><br><span class=\"line\">917</span><br><span class=\"line\">918</span><br><span class=\"line\">919</span><br><span class=\"line\">920</span><br><span class=\"line\">921</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *    Copyright 2009-2017 the original author or authors.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *    Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class=\"line\"> *    you may not use this file except in compliance with the License.</span><br><span class=\"line\"> *    You may obtain a copy of the License at</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *       http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *    Unless required by applicable law or agreed to in writing, software</span><br><span class=\"line\"> *    distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class=\"line\"> *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"line\"> *    See the License for the specific language governing permissions and</span><br><span class=\"line\"> *    limitations under the License.</span><br><span class=\"line\"> */</span><br><span class=\"line\">package org.apache.ibatis.session;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">import java.util.Collection;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.HashSet;</span><br><span class=\"line\">import java.util.LinkedList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\">import java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.ibatis.binding.MapperRegistry;</span><br><span class=\"line\">import org.apache.ibatis.builder.CacheRefResolver;</span><br><span class=\"line\">import org.apache.ibatis.builder.ResultMapResolver;</span><br><span class=\"line\">import org.apache.ibatis.builder.annotation.MethodResolver;</span><br><span class=\"line\">import org.apache.ibatis.builder.xml.XMLStatementBuilder;</span><br><span class=\"line\">import org.apache.ibatis.cache.Cache;</span><br><span class=\"line\">import org.apache.ibatis.cache.decorators.FifoCache;</span><br><span class=\"line\">import org.apache.ibatis.cache.decorators.LruCache;</span><br><span class=\"line\">import org.apache.ibatis.cache.decorators.SoftCache;</span><br><span class=\"line\">import org.apache.ibatis.cache.decorators.WeakCache;</span><br><span class=\"line\">import org.apache.ibatis.cache.impl.PerpetualCache;</span><br><span class=\"line\">import org.apache.ibatis.datasource.jndi.JndiDataSourceFactory;</span><br><span class=\"line\">import org.apache.ibatis.datasource.pooled.PooledDataSourceFactory;</span><br><span class=\"line\">import org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;</span><br><span class=\"line\">import org.apache.ibatis.executor.BatchExecutor;</span><br><span class=\"line\">import org.apache.ibatis.executor.CachingExecutor;</span><br><span class=\"line\">import org.apache.ibatis.executor.Executor;</span><br><span class=\"line\">import org.apache.ibatis.executor.ReuseExecutor;</span><br><span class=\"line\">import org.apache.ibatis.executor.SimpleExecutor;</span><br><span class=\"line\">import org.apache.ibatis.executor.keygen.KeyGenerator;</span><br><span class=\"line\">import org.apache.ibatis.executor.loader.ProxyFactory;</span><br><span class=\"line\">import org.apache.ibatis.executor.loader.cglib.CglibProxyFactory;</span><br><span class=\"line\">import org.apache.ibatis.executor.loader.javassist.JavassistProxyFactory;</span><br><span class=\"line\">import org.apache.ibatis.executor.parameter.ParameterHandler;</span><br><span class=\"line\">import org.apache.ibatis.executor.resultset.DefaultResultSetHandler;</span><br><span class=\"line\">import org.apache.ibatis.executor.resultset.ResultSetHandler;</span><br><span class=\"line\">import org.apache.ibatis.executor.statement.RoutingStatementHandler;</span><br><span class=\"line\">import org.apache.ibatis.executor.statement.StatementHandler;</span><br><span class=\"line\">import org.apache.ibatis.io.VFS;</span><br><span class=\"line\">import org.apache.ibatis.logging.Log;</span><br><span class=\"line\">import org.apache.ibatis.logging.LogFactory;</span><br><span class=\"line\">import org.apache.ibatis.logging.commons.JakartaCommonsLoggingImpl;</span><br><span class=\"line\">import org.apache.ibatis.logging.jdk14.Jdk14LoggingImpl;</span><br><span class=\"line\">import org.apache.ibatis.logging.log4j.Log4jImpl;</span><br><span class=\"line\">import org.apache.ibatis.logging.log4j2.Log4j2Impl;</span><br><span class=\"line\">import org.apache.ibatis.logging.nologging.NoLoggingImpl;</span><br><span class=\"line\">import org.apache.ibatis.logging.slf4j.Slf4jImpl;</span><br><span class=\"line\">import org.apache.ibatis.logging.stdout.StdOutImpl;</span><br><span class=\"line\">import org.apache.ibatis.mapping.BoundSql;</span><br><span class=\"line\">import org.apache.ibatis.mapping.Environment;</span><br><span class=\"line\">import org.apache.ibatis.mapping.MappedStatement;</span><br><span class=\"line\">import org.apache.ibatis.mapping.ParameterMap;</span><br><span class=\"line\">import org.apache.ibatis.mapping.ResultMap;</span><br><span class=\"line\">import org.apache.ibatis.mapping.VendorDatabaseIdProvider;</span><br><span class=\"line\">import org.apache.ibatis.parsing.XNode;</span><br><span class=\"line\">import org.apache.ibatis.plugin.Interceptor;</span><br><span class=\"line\">import org.apache.ibatis.plugin.InterceptorChain;</span><br><span class=\"line\">import org.apache.ibatis.reflection.DefaultReflectorFactory;</span><br><span class=\"line\">import org.apache.ibatis.reflection.MetaObject;</span><br><span class=\"line\">import org.apache.ibatis.reflection.ReflectorFactory;</span><br><span class=\"line\">import org.apache.ibatis.reflection.factory.DefaultObjectFactory;</span><br><span class=\"line\">import org.apache.ibatis.reflection.factory.ObjectFactory;</span><br><span class=\"line\">import org.apache.ibatis.reflection.wrapper.DefaultObjectWrapperFactory;</span><br><span class=\"line\">import org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory;</span><br><span class=\"line\">import org.apache.ibatis.scripting.LanguageDriver;</span><br><span class=\"line\">import org.apache.ibatis.scripting.LanguageDriverRegistry;</span><br><span class=\"line\">import org.apache.ibatis.scripting.defaults.RawLanguageDriver;</span><br><span class=\"line\">import org.apache.ibatis.scripting.xmltags.XMLLanguageDriver;</span><br><span class=\"line\">import org.apache.ibatis.transaction.Transaction;</span><br><span class=\"line\">import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;</span><br><span class=\"line\">import org.apache.ibatis.transaction.managed.ManagedTransactionFactory;</span><br><span class=\"line\">import org.apache.ibatis.type.JdbcType;</span><br><span class=\"line\">import org.apache.ibatis.type.TypeAliasRegistry;</span><br><span class=\"line\">import org.apache.ibatis.type.TypeHandler;</span><br><span class=\"line\">import org.apache.ibatis.type.TypeHandlerRegistry;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author Clinton Begin</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Configuration &#123;</span><br><span class=\"line\">  //上下文环境对象</span><br><span class=\"line\">  protected Environment environment;</span><br><span class=\"line\"></span><br><span class=\"line\">  protected boolean safeRowBoundsEnabled;</span><br><span class=\"line\">  protected boolean safeResultHandlerEnabled = true;</span><br><span class=\"line\">  protected boolean mapUnderscoreToCamelCase;</span><br><span class=\"line\">  //当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载</span><br><span class=\"line\">  protected boolean aggressiveLazyLoading;</span><br><span class=\"line\">  //允许或不允许多种结果集从一个单独的语句中返回（需要适合的驱动）。</span><br><span class=\"line\">  protected boolean multipleResultSetsEnabled = true;</span><br><span class=\"line\">  //允许 JDBC 支持生成的键。需要适合的驱动。如果设置为 true 则这个设置强制生成的键被使用，尽管一些\t//驱动拒绝兼容但仍然有效（比如 Derby</span><br><span class=\"line\">  protected boolean useGeneratedKeys;</span><br><span class=\"line\">  //使用列标签代替列名。不同的驱动在这方便表现不同。参考驱动文档或充分测试两种方法来决定所使用的驱动</span><br><span class=\"line\">  protected boolean useColumnLabel = true;</span><br><span class=\"line\">  //是否全局启用缓存 默认开启</span><br><span class=\"line\">  protected boolean cacheEnabled = true;</span><br><span class=\"line\">  protected boolean callSettersOnNulls;</span><br><span class=\"line\">  protected boolean useActualParamName = true;</span><br><span class=\"line\">  protected boolean returnInstanceForEmptyRow;</span><br><span class=\"line\"></span><br><span class=\"line\">  protected String logPrefix;</span><br><span class=\"line\">  protected Class &lt;? extends Log&gt; logImpl;</span><br><span class=\"line\">  protected Class &lt;? extends VFS&gt; vfsImpl;</span><br><span class=\"line\">  protected LocalCacheScope localCacheScope = LocalCacheScope.SESSION;</span><br><span class=\"line\">  protected JdbcType jdbcTypeForNull = JdbcType.OTHER;</span><br><span class=\"line\">  protected Set&lt;String&gt; lazyLoadTriggerMethods = new HashSet&lt;String&gt;(Arrays.asList(new String[] &#123; &quot;equals&quot;, &quot;clone&quot;, &quot;hashCode&quot;, &quot;toString&quot; &#125;));</span><br><span class=\"line\">  protected Integer defaultStatementTimeout;</span><br><span class=\"line\">  protected Integer defaultFetchSize;</span><br><span class=\"line\">  protected ExecutorType defaultExecutorType = ExecutorType.SIMPLE;</span><br><span class=\"line\">  //指定 MyBatis 如何自动映射列到字段 / 属性。PARTIAL 只会自动映射简单，没有嵌套的结果。FULL 会自//动映射任意复杂的结果（嵌套的或其他情况）。</span><br><span class=\"line\">  protected AutoMappingBehavior autoMappingBehavior = AutoMappingBehavior.PARTIAL;</span><br><span class=\"line\">  protected AutoMappingUnknownColumnBehavior autoMappingUnknownColumnBehavior = AutoMappingUnknownColumnBehavior.NONE;</span><br><span class=\"line\"></span><br><span class=\"line\">  protected Properties variables = new Properties();</span><br><span class=\"line\">  protected ReflectorFactory reflectorFactory = new DefaultReflectorFactory();</span><br><span class=\"line\">  protected ObjectFactory objectFactory = new DefaultObjectFactory();</span><br><span class=\"line\">  protected ObjectWrapperFactory objectWrapperFactory = new DefaultObjectWrapperFactory();</span><br><span class=\"line\">  //全局是否启用活禁用懒加载，默认关闭 </span><br><span class=\"line\">  protected boolean lazyLoadingEnabled = false;</span><br><span class=\"line\">  protected ProxyFactory proxyFactory = new JavassistProxyFactory(); // #224 Using internal Javassist instead of OGNL</span><br><span class=\"line\"></span><br><span class=\"line\">  protected String databaseId;</span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Configuration factory class.</span><br><span class=\"line\">   * Used to create Configuration for loading deserialized unread properties.</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @see &lt;a href=&apos;https://code.google.com/p/mybatis/issues/detail?id=300&apos;&gt;Issue 300 (google code)&lt;/a&gt;</span><br><span class=\"line\">   */</span><br><span class=\"line\">  protected Class&lt;?&gt; configurationFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">  protected final MapperRegistry mapperRegistry = new MapperRegistry(this);</span><br><span class=\"line\">  protected final InterceptorChain interceptorChain = new InterceptorChain();</span><br><span class=\"line\">  protected final TypeHandlerRegistry typeHandlerRegistry = new TypeHandlerRegistry();</span><br><span class=\"line\">  protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry();</span><br><span class=\"line\">  protected final LanguageDriverRegistry languageRegistry = new LanguageDriverRegistry();</span><br><span class=\"line\"></span><br><span class=\"line\">  protected final Map&lt;String, MappedStatement&gt; mappedStatements = new StrictMap&lt;MappedStatement&gt;(&quot;Mapped Statements collection&quot;);</span><br><span class=\"line\">  protected final Map&lt;String, Cache&gt; caches = new StrictMap&lt;Cache&gt;(&quot;Caches collection&quot;);</span><br><span class=\"line\">  protected final Map&lt;String, ResultMap&gt; resultMaps = new StrictMap&lt;ResultMap&gt;(&quot;Result Maps collection&quot;);</span><br><span class=\"line\">  protected final Map&lt;String, ParameterMap&gt; parameterMaps = new StrictMap&lt;ParameterMap&gt;(&quot;Parameter Maps collection&quot;);</span><br><span class=\"line\">  protected final Map&lt;String, KeyGenerator&gt; keyGenerators = new StrictMap&lt;KeyGenerator&gt;(&quot;Key Generators collection&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  protected final Set&lt;String&gt; loadedResources = new HashSet&lt;String&gt;();</span><br><span class=\"line\">  protected final Map&lt;String, XNode&gt; sqlFragments = new StrictMap&lt;XNode&gt;(&quot;XML fragments parsed from previous mappers&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  protected final Collection&lt;XMLStatementBuilder&gt; incompleteStatements = new LinkedList&lt;XMLStatementBuilder&gt;();</span><br><span class=\"line\">  protected final Collection&lt;CacheRefResolver&gt; incompleteCacheRefs = new LinkedList&lt;CacheRefResolver&gt;();</span><br><span class=\"line\">  protected final Collection&lt;ResultMapResolver&gt; incompleteResultMaps = new LinkedList&lt;ResultMapResolver&gt;();</span><br><span class=\"line\">  protected final Collection&lt;MethodResolver&gt; incompleteMethods = new LinkedList&lt;MethodResolver&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">   * A map holds cache-ref relationship. The key is the namespace that</span><br><span class=\"line\">   * references a cache bound to another namespace and the value is the</span><br><span class=\"line\">   * namespace which the actual cache is bound to.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  protected final Map&lt;String, String&gt; cacheRefMap = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  public Configuration(Environment environment) &#123;</span><br><span class=\"line\">    this();</span><br><span class=\"line\">    this.environment = environment;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Configuration() &#123;</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;JDBC&quot;, JdbcTransactionFactory.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;MANAGED&quot;, ManagedTransactionFactory.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;JNDI&quot;, JndiDataSourceFactory.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;POOLED&quot;, PooledDataSourceFactory.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;UNPOOLED&quot;, UnpooledDataSourceFactory.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;PERPETUAL&quot;, PerpetualCache.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;FIFO&quot;, FifoCache.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;LRU&quot;, LruCache.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;SOFT&quot;, SoftCache.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;WEAK&quot;, WeakCache.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;DB_VENDOR&quot;, VendorDatabaseIdProvider.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;XML&quot;, XMLLanguageDriver.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;RAW&quot;, RawLanguageDriver.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;SLF4J&quot;, Slf4jImpl.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;COMMONS_LOGGING&quot;, JakartaCommonsLoggingImpl.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;LOG4J&quot;, Log4jImpl.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;LOG4J2&quot;, Log4j2Impl.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;JDK_LOGGING&quot;, Jdk14LoggingImpl.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;STDOUT_LOGGING&quot;, StdOutImpl.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;NO_LOGGING&quot;, NoLoggingImpl.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;CGLIB&quot;, CglibProxyFactory.class);</span><br><span class=\"line\">    typeAliasRegistry.registerAlias(&quot;JAVASSIST&quot;, JavassistProxyFactory.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    languageRegistry.setDefaultDriverClass(XMLLanguageDriver.class);</span><br><span class=\"line\">    languageRegistry.register(RawLanguageDriver.class);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public String getLogPrefix() &#123;</span><br><span class=\"line\">    return logPrefix;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setLogPrefix(String logPrefix) &#123;</span><br><span class=\"line\">    this.logPrefix = logPrefix;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Class&lt;? extends Log&gt; getLogImpl() &#123;</span><br><span class=\"line\">    return logImpl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setLogImpl(Class&lt;? extends Log&gt; logImpl) &#123;</span><br><span class=\"line\">    if (logImpl != null) &#123;</span><br><span class=\"line\">      this.logImpl = logImpl;</span><br><span class=\"line\">      LogFactory.useCustomLogging(this.logImpl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Class&lt;? extends VFS&gt; getVfsImpl() &#123;</span><br><span class=\"line\">    return this.vfsImpl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setVfsImpl(Class&lt;? extends VFS&gt; vfsImpl) &#123;</span><br><span class=\"line\">    if (vfsImpl != null) &#123;</span><br><span class=\"line\">      this.vfsImpl = vfsImpl;</span><br><span class=\"line\">      VFS.addImplClass(this.vfsImpl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isCallSettersOnNulls() &#123;</span><br><span class=\"line\">    return callSettersOnNulls;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setCallSettersOnNulls(boolean callSettersOnNulls) &#123;</span><br><span class=\"line\">    this.callSettersOnNulls = callSettersOnNulls;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isUseActualParamName() &#123;</span><br><span class=\"line\">    return useActualParamName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setUseActualParamName(boolean useActualParamName) &#123;</span><br><span class=\"line\">    this.useActualParamName = useActualParamName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isReturnInstanceForEmptyRow() &#123;</span><br><span class=\"line\">    return returnInstanceForEmptyRow;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setReturnInstanceForEmptyRow(boolean returnEmptyInstance) &#123;</span><br><span class=\"line\">    this.returnInstanceForEmptyRow = returnEmptyInstance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public String getDatabaseId() &#123;</span><br><span class=\"line\">    return databaseId;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setDatabaseId(String databaseId) &#123;</span><br><span class=\"line\">    this.databaseId = databaseId;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Class&lt;?&gt; getConfigurationFactory() &#123;</span><br><span class=\"line\">    return configurationFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setConfigurationFactory(Class&lt;?&gt; configurationFactory) &#123;</span><br><span class=\"line\">    this.configurationFactory = configurationFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isSafeResultHandlerEnabled() &#123;</span><br><span class=\"line\">    return safeResultHandlerEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setSafeResultHandlerEnabled(boolean safeResultHandlerEnabled) &#123;</span><br><span class=\"line\">    this.safeResultHandlerEnabled = safeResultHandlerEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isSafeRowBoundsEnabled() &#123;</span><br><span class=\"line\">    return safeRowBoundsEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setSafeRowBoundsEnabled(boolean safeRowBoundsEnabled) &#123;</span><br><span class=\"line\">    this.safeRowBoundsEnabled = safeRowBoundsEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isMapUnderscoreToCamelCase() &#123;</span><br><span class=\"line\">    return mapUnderscoreToCamelCase;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setMapUnderscoreToCamelCase(boolean mapUnderscoreToCamelCase) &#123;</span><br><span class=\"line\">    this.mapUnderscoreToCamelCase = mapUnderscoreToCamelCase;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addLoadedResource(String resource) &#123;</span><br><span class=\"line\">    loadedResources.add(resource);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isResourceLoaded(String resource) &#123;</span><br><span class=\"line\">    return loadedResources.contains(resource);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Environment getEnvironment() &#123;</span><br><span class=\"line\">    return environment;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setEnvironment(Environment environment) &#123;</span><br><span class=\"line\">    this.environment = environment;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public AutoMappingBehavior getAutoMappingBehavior() &#123;</span><br><span class=\"line\">    return autoMappingBehavior;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setAutoMappingBehavior(AutoMappingBehavior autoMappingBehavior) &#123;</span><br><span class=\"line\">    this.autoMappingBehavior = autoMappingBehavior;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @since 3.4.0</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public AutoMappingUnknownColumnBehavior getAutoMappingUnknownColumnBehavior() &#123;</span><br><span class=\"line\">    return autoMappingUnknownColumnBehavior;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @since 3.4.0</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public void setAutoMappingUnknownColumnBehavior(AutoMappingUnknownColumnBehavior autoMappingUnknownColumnBehavior) &#123;</span><br><span class=\"line\">    this.autoMappingUnknownColumnBehavior = autoMappingUnknownColumnBehavior;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isLazyLoadingEnabled() &#123;</span><br><span class=\"line\">    return lazyLoadingEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setLazyLoadingEnabled(boolean lazyLoadingEnabled) &#123;</span><br><span class=\"line\">    this.lazyLoadingEnabled = lazyLoadingEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ProxyFactory getProxyFactory() &#123;</span><br><span class=\"line\">    return proxyFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setProxyFactory(ProxyFactory proxyFactory) &#123;</span><br><span class=\"line\">    if (proxyFactory == null) &#123;</span><br><span class=\"line\">      proxyFactory = new JavassistProxyFactory();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.proxyFactory = proxyFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isAggressiveLazyLoading() &#123;</span><br><span class=\"line\">    return aggressiveLazyLoading;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setAggressiveLazyLoading(boolean aggressiveLazyLoading) &#123;</span><br><span class=\"line\">    this.aggressiveLazyLoading = aggressiveLazyLoading;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isMultipleResultSetsEnabled() &#123;</span><br><span class=\"line\">    return multipleResultSetsEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setMultipleResultSetsEnabled(boolean multipleResultSetsEnabled) &#123;</span><br><span class=\"line\">    this.multipleResultSetsEnabled = multipleResultSetsEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Set&lt;String&gt; getLazyLoadTriggerMethods() &#123;</span><br><span class=\"line\">    return lazyLoadTriggerMethods;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setLazyLoadTriggerMethods(Set&lt;String&gt; lazyLoadTriggerMethods) &#123;</span><br><span class=\"line\">    this.lazyLoadTriggerMethods = lazyLoadTriggerMethods;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isUseGeneratedKeys() &#123;</span><br><span class=\"line\">    return useGeneratedKeys;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setUseGeneratedKeys(boolean useGeneratedKeys) &#123;</span><br><span class=\"line\">    this.useGeneratedKeys = useGeneratedKeys;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ExecutorType getDefaultExecutorType() &#123;</span><br><span class=\"line\">    return defaultExecutorType;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setDefaultExecutorType(ExecutorType defaultExecutorType) &#123;</span><br><span class=\"line\">    this.defaultExecutorType = defaultExecutorType;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isCacheEnabled() &#123;</span><br><span class=\"line\">    return cacheEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setCacheEnabled(boolean cacheEnabled) &#123;</span><br><span class=\"line\">    this.cacheEnabled = cacheEnabled;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Integer getDefaultStatementTimeout() &#123;</span><br><span class=\"line\">    return defaultStatementTimeout;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setDefaultStatementTimeout(Integer defaultStatementTimeout) &#123;</span><br><span class=\"line\">    this.defaultStatementTimeout = defaultStatementTimeout;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @since 3.3.0</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public Integer getDefaultFetchSize() &#123;</span><br><span class=\"line\">    return defaultFetchSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @since 3.3.0</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public void setDefaultFetchSize(Integer defaultFetchSize) &#123;</span><br><span class=\"line\">    this.defaultFetchSize = defaultFetchSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isUseColumnLabel() &#123;</span><br><span class=\"line\">    return useColumnLabel;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setUseColumnLabel(boolean useColumnLabel) &#123;</span><br><span class=\"line\">    this.useColumnLabel = useColumnLabel;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public LocalCacheScope getLocalCacheScope() &#123;</span><br><span class=\"line\">    return localCacheScope;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setLocalCacheScope(LocalCacheScope localCacheScope) &#123;</span><br><span class=\"line\">    this.localCacheScope = localCacheScope;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public JdbcType getJdbcTypeForNull() &#123;</span><br><span class=\"line\">    return jdbcTypeForNull;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setJdbcTypeForNull(JdbcType jdbcTypeForNull) &#123;</span><br><span class=\"line\">    this.jdbcTypeForNull = jdbcTypeForNull;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Properties getVariables() &#123;</span><br><span class=\"line\">    return variables;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setVariables(Properties variables) &#123;</span><br><span class=\"line\">    this.variables = variables;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public TypeHandlerRegistry getTypeHandlerRegistry() &#123;</span><br><span class=\"line\">    return typeHandlerRegistry;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Set a default &#123;@link TypeHandler&#125; class for &#123;@link Enum&#125;.</span><br><span class=\"line\">   * A default &#123;@link TypeHandler&#125; is &#123;@link org.apache.ibatis.type.EnumTypeHandler&#125;.</span><br><span class=\"line\">   * @param typeHandler a type handler class for &#123;@link Enum&#125;</span><br><span class=\"line\">   * @since 3.4.5</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public void setDefaultEnumTypeHandler(Class&lt;? extends TypeHandler&gt; typeHandler) &#123;</span><br><span class=\"line\">    if (typeHandler != null) &#123;</span><br><span class=\"line\">      getTypeHandlerRegistry().setDefaultEnumTypeHandler(typeHandler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public TypeAliasRegistry getTypeAliasRegistry() &#123;</span><br><span class=\"line\">    return typeAliasRegistry;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @since 3.2.2</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public MapperRegistry getMapperRegistry() &#123;</span><br><span class=\"line\">    return mapperRegistry;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ReflectorFactory getReflectorFactory() &#123;</span><br><span class=\"line\">\t  return reflectorFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setReflectorFactory(ReflectorFactory reflectorFactory) &#123;</span><br><span class=\"line\">\t  this.reflectorFactory = reflectorFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ObjectFactory getObjectFactory() &#123;</span><br><span class=\"line\">    return objectFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setObjectFactory(ObjectFactory objectFactory) &#123;</span><br><span class=\"line\">    this.objectFactory = objectFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ObjectWrapperFactory getObjectWrapperFactory() &#123;</span><br><span class=\"line\">    return objectWrapperFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setObjectWrapperFactory(ObjectWrapperFactory objectWrapperFactory) &#123;</span><br><span class=\"line\">    this.objectWrapperFactory = objectWrapperFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @since 3.2.2</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public List&lt;Interceptor&gt; getInterceptors() &#123;</span><br><span class=\"line\">    return interceptorChain.getInterceptors();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public LanguageDriverRegistry getLanguageRegistry() &#123;</span><br><span class=\"line\">    return languageRegistry;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setDefaultScriptingLanguage(Class&lt;?&gt; driver) &#123;</span><br><span class=\"line\">    if (driver == null) &#123;</span><br><span class=\"line\">      driver = XMLLanguageDriver.class;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getLanguageRegistry().setDefaultDriverClass(driver);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public LanguageDriver getDefaultScriptingLanguageInstance() &#123;</span><br><span class=\"line\">    return languageRegistry.getDefaultDriver();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /** @deprecated Use &#123;@link #getDefaultScriptingLanguageInstance()&#125; */</span><br><span class=\"line\">  @Deprecated</span><br><span class=\"line\">  public LanguageDriver getDefaultScriptingLanuageInstance() &#123;</span><br><span class=\"line\">    return getDefaultScriptingLanguageInstance();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public MetaObject newMetaObject(Object object) &#123;</span><br><span class=\"line\">    return MetaObject.forObject(object, objectFactory, objectWrapperFactory, reflectorFactory);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ParameterHandler newParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) &#123;</span><br><span class=\"line\">    ParameterHandler parameterHandler = mappedStatement.getLang().createParameterHandler(mappedStatement, parameterObject, boundSql);</span><br><span class=\"line\">    parameterHandler = (ParameterHandler) interceptorChain.pluginAll(parameterHandler);</span><br><span class=\"line\">    return parameterHandler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ResultSetHandler newResultSetHandler(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds, ParameterHandler parameterHandler,</span><br><span class=\"line\">      ResultHandler resultHandler, BoundSql boundSql) &#123;</span><br><span class=\"line\">    ResultSetHandler resultSetHandler = new DefaultResultSetHandler(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);</span><br><span class=\"line\">    resultSetHandler = (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);</span><br><span class=\"line\">    return resultSetHandler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public StatementHandler newStatementHandler(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) &#123;</span><br><span class=\"line\">    StatementHandler statementHandler = new RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);</span><br><span class=\"line\">    statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);</span><br><span class=\"line\">    return statementHandler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Executor newExecutor(Transaction transaction) &#123;</span><br><span class=\"line\">    return newExecutor(transaction, defaultExecutorType);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Executor newExecutor(Transaction transaction, ExecutorType executorType) &#123;</span><br><span class=\"line\">    executorType = executorType == null ? defaultExecutorType : executorType;</span><br><span class=\"line\">    executorType = executorType == null ? ExecutorType.SIMPLE : executorType;</span><br><span class=\"line\">    Executor executor;</span><br><span class=\"line\">    if (ExecutorType.BATCH == executorType) &#123;</span><br><span class=\"line\">      executor = new BatchExecutor(this, transaction);</span><br><span class=\"line\">    &#125; else if (ExecutorType.REUSE == executorType) &#123;</span><br><span class=\"line\">      executor = new ReuseExecutor(this, transaction);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      executor = new SimpleExecutor(this, transaction);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (cacheEnabled) &#123;</span><br><span class=\"line\">      executor = new CachingExecutor(executor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    executor = (Executor) interceptorChain.pluginAll(executor);</span><br><span class=\"line\">    return executor;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addKeyGenerator(String id, KeyGenerator keyGenerator) &#123;</span><br><span class=\"line\">    keyGenerators.put(id, keyGenerator);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;String&gt; getKeyGeneratorNames() &#123;</span><br><span class=\"line\">    return keyGenerators.keySet();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;KeyGenerator&gt; getKeyGenerators() &#123;</span><br><span class=\"line\">    return keyGenerators.values();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public KeyGenerator getKeyGenerator(String id) &#123;</span><br><span class=\"line\">    return keyGenerators.get(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean hasKeyGenerator(String id) &#123;</span><br><span class=\"line\">    return keyGenerators.containsKey(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addCache(Cache cache) &#123;</span><br><span class=\"line\">    caches.put(cache.getId(), cache);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;String&gt; getCacheNames() &#123;</span><br><span class=\"line\">    return caches.keySet();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;Cache&gt; getCaches() &#123;</span><br><span class=\"line\">    return caches.values();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Cache getCache(String id) &#123;</span><br><span class=\"line\">    return caches.get(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean hasCache(String id) &#123;</span><br><span class=\"line\">    return caches.containsKey(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addResultMap(ResultMap rm) &#123;</span><br><span class=\"line\">    resultMaps.put(rm.getId(), rm);</span><br><span class=\"line\">    checkLocallyForDiscriminatedNestedResultMaps(rm);</span><br><span class=\"line\">    checkGloballyForDiscriminatedNestedResultMaps(rm);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;String&gt; getResultMapNames() &#123;</span><br><span class=\"line\">    return resultMaps.keySet();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;ResultMap&gt; getResultMaps() &#123;</span><br><span class=\"line\">    return resultMaps.values();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ResultMap getResultMap(String id) &#123;</span><br><span class=\"line\">    return resultMaps.get(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean hasResultMap(String id) &#123;</span><br><span class=\"line\">    return resultMaps.containsKey(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addParameterMap(ParameterMap pm) &#123;</span><br><span class=\"line\">    parameterMaps.put(pm.getId(), pm);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;String&gt; getParameterMapNames() &#123;</span><br><span class=\"line\">    return parameterMaps.keySet();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;ParameterMap&gt; getParameterMaps() &#123;</span><br><span class=\"line\">    return parameterMaps.values();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ParameterMap getParameterMap(String id) &#123;</span><br><span class=\"line\">    return parameterMaps.get(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean hasParameterMap(String id) &#123;</span><br><span class=\"line\">    return parameterMaps.containsKey(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addMappedStatement(MappedStatement ms) &#123;</span><br><span class=\"line\">    mappedStatements.put(ms.getId(), ms);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;String&gt; getMappedStatementNames() &#123;</span><br><span class=\"line\">    buildAllStatements();</span><br><span class=\"line\">    return mappedStatements.keySet();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;MappedStatement&gt; getMappedStatements() &#123;</span><br><span class=\"line\">    buildAllStatements();</span><br><span class=\"line\">    return mappedStatements.values();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;XMLStatementBuilder&gt; getIncompleteStatements() &#123;</span><br><span class=\"line\">    return incompleteStatements;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addIncompleteStatement(XMLStatementBuilder incompleteStatement) &#123;</span><br><span class=\"line\">    incompleteStatements.add(incompleteStatement);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;CacheRefResolver&gt; getIncompleteCacheRefs() &#123;</span><br><span class=\"line\">    return incompleteCacheRefs;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addIncompleteCacheRef(CacheRefResolver incompleteCacheRef) &#123;</span><br><span class=\"line\">    incompleteCacheRefs.add(incompleteCacheRef);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;ResultMapResolver&gt; getIncompleteResultMaps() &#123;</span><br><span class=\"line\">    return incompleteResultMaps;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addIncompleteResultMap(ResultMapResolver resultMapResolver) &#123;</span><br><span class=\"line\">    incompleteResultMaps.add(resultMapResolver);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addIncompleteMethod(MethodResolver builder) &#123;</span><br><span class=\"line\">    incompleteMethods.add(builder);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Collection&lt;MethodResolver&gt; getIncompleteMethods() &#123;</span><br><span class=\"line\">    return incompleteMethods;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public MappedStatement getMappedStatement(String id) &#123;</span><br><span class=\"line\">    return this.getMappedStatement(id, true);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public MappedStatement getMappedStatement(String id, boolean validateIncompleteStatements) &#123;</span><br><span class=\"line\">    if (validateIncompleteStatements) &#123;</span><br><span class=\"line\">      buildAllStatements();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return mappedStatements.get(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Map&lt;String, XNode&gt; getSqlFragments() &#123;</span><br><span class=\"line\">    return sqlFragments;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addInterceptor(Interceptor interceptor) &#123;</span><br><span class=\"line\">    interceptorChain.addInterceptor(interceptor);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addMappers(String packageName, Class&lt;?&gt; superType) &#123;</span><br><span class=\"line\">    mapperRegistry.addMappers(packageName, superType);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addMappers(String packageName) &#123;</span><br><span class=\"line\">    mapperRegistry.addMappers(packageName);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public &lt;T&gt; void addMapper(Class&lt;T&gt; type) &#123;</span><br><span class=\"line\">    mapperRegistry.addMapper(type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public &lt;T&gt; T getMapper(Class&lt;T&gt; type, SqlSession sqlSession) &#123;</span><br><span class=\"line\">    return mapperRegistry.getMapper(type, sqlSession);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean hasMapper(Class&lt;?&gt; type) &#123;</span><br><span class=\"line\">    return mapperRegistry.hasMapper(type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean hasStatement(String statementName) &#123;</span><br><span class=\"line\">    return hasStatement(statementName, true);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean hasStatement(String statementName, boolean validateIncompleteStatements) &#123;</span><br><span class=\"line\">    if (validateIncompleteStatements) &#123;</span><br><span class=\"line\">      buildAllStatements();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return mappedStatements.containsKey(statementName);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void addCacheRef(String namespace, String referencedNamespace) &#123;</span><br><span class=\"line\">    cacheRefMap.put(namespace, referencedNamespace);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">   * Parses all the unprocessed statement nodes in the cache. It is recommended</span><br><span class=\"line\">   * to call this method once all the mappers are added as it provides fail-fast</span><br><span class=\"line\">   * statement validation.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  protected void buildAllStatements() &#123;</span><br><span class=\"line\">    if (!incompleteResultMaps.isEmpty()) &#123;</span><br><span class=\"line\">      synchronized (incompleteResultMaps) &#123;</span><br><span class=\"line\">        // This always throws a BuilderException.</span><br><span class=\"line\">        incompleteResultMaps.iterator().next().resolve();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!incompleteCacheRefs.isEmpty()) &#123;</span><br><span class=\"line\">      synchronized (incompleteCacheRefs) &#123;</span><br><span class=\"line\">        // This always throws a BuilderException.</span><br><span class=\"line\">        incompleteCacheRefs.iterator().next().resolveCacheRef();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!incompleteStatements.isEmpty()) &#123;</span><br><span class=\"line\">      synchronized (incompleteStatements) &#123;</span><br><span class=\"line\">        // This always throws a BuilderException.</span><br><span class=\"line\">        incompleteStatements.iterator().next().parseStatementNode();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!incompleteMethods.isEmpty()) &#123;</span><br><span class=\"line\">      synchronized (incompleteMethods) &#123;</span><br><span class=\"line\">        // This always throws a BuilderException.</span><br><span class=\"line\">        incompleteMethods.iterator().next().resolve();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">   * Extracts namespace from fully qualified statement id.</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param statementId</span><br><span class=\"line\">   * @return namespace or null when id does not contain period.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  protected String extractNamespace(String statementId) &#123;</span><br><span class=\"line\">    int lastPeriod = statementId.lastIndexOf(&apos;.&apos;);</span><br><span class=\"line\">    return lastPeriod &gt; 0 ? statementId.substring(0, lastPeriod) : null;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Slow but a one time cost. A better solution is welcome.</span><br><span class=\"line\">  protected void checkGloballyForDiscriminatedNestedResultMaps(ResultMap rm) &#123;</span><br><span class=\"line\">    if (rm.hasNestedResultMaps()) &#123;</span><br><span class=\"line\">      for (Map.Entry&lt;String, ResultMap&gt; entry : resultMaps.entrySet()) &#123;</span><br><span class=\"line\">        Object value = entry.getValue();</span><br><span class=\"line\">        if (value instanceof ResultMap) &#123;</span><br><span class=\"line\">          ResultMap entryResultMap = (ResultMap) value;</span><br><span class=\"line\">          if (!entryResultMap.hasNestedResultMaps() &amp;&amp; entryResultMap.getDiscriminator() != null) &#123;</span><br><span class=\"line\">            Collection&lt;String&gt; discriminatedResultMapNames = entryResultMap.getDiscriminator().getDiscriminatorMap().values();</span><br><span class=\"line\">            if (discriminatedResultMapNames.contains(rm.getId())) &#123;</span><br><span class=\"line\">              entryResultMap.forceNestedResultMaps();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Slow but a one time cost. A better solution is welcome.</span><br><span class=\"line\">  protected void checkLocallyForDiscriminatedNestedResultMaps(ResultMap rm) &#123;</span><br><span class=\"line\">    if (!rm.hasNestedResultMaps() &amp;&amp; rm.getDiscriminator() != null) &#123;</span><br><span class=\"line\">      for (Map.Entry&lt;String, String&gt; entry : rm.getDiscriminator().getDiscriminatorMap().entrySet()) &#123;</span><br><span class=\"line\">        String discriminatedResultMapName = entry.getValue();</span><br><span class=\"line\">        if (hasResultMap(discriminatedResultMapName)) &#123;</span><br><span class=\"line\">          ResultMap discriminatedResultMap = resultMaps.get(discriminatedResultMapName);</span><br><span class=\"line\">          if (discriminatedResultMap.hasNestedResultMaps()) &#123;</span><br><span class=\"line\">            rm.forceNestedResultMaps();</span><br><span class=\"line\">            break;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  protected static class StrictMap&lt;V&gt; extends HashMap&lt;String, V&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final long serialVersionUID = -4950446264854982944L;</span><br><span class=\"line\">    private final String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    public StrictMap(String name, int initialCapacity, float loadFactor) &#123;</span><br><span class=\"line\">      super(initialCapacity, loadFactor);</span><br><span class=\"line\">      this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public StrictMap(String name, int initialCapacity) &#123;</span><br><span class=\"line\">      super(initialCapacity);</span><br><span class=\"line\">      this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public StrictMap(String name) &#123;</span><br><span class=\"line\">      super();</span><br><span class=\"line\">      this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public StrictMap(String name, Map&lt;String, ? extends V&gt; m) &#123;</span><br><span class=\"line\">      super(m);</span><br><span class=\"line\">      this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public V put(String key, V value) &#123;</span><br><span class=\"line\">      if (containsKey(key)) &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException(name + &quot; already contains value for &quot; + key);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (key.contains(&quot;.&quot;)) &#123;</span><br><span class=\"line\">        final String shortKey = getShortName(key);</span><br><span class=\"line\">        if (super.get(shortKey) == null) &#123;</span><br><span class=\"line\">          super.put(shortKey, value);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          super.put(shortKey, (V) new Ambiguity(shortKey));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return super.put(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public V get(Object key) &#123;</span><br><span class=\"line\">      V value = super.get(key);</span><br><span class=\"line\">      if (value == null) &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException(name + &quot; does not contain value for &quot; + key);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (value instanceof Ambiguity) &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException(((Ambiguity) value).getSubject() + &quot; is ambiguous in &quot; + name</span><br><span class=\"line\">            + &quot; (try using the full name including the namespace, or rename one of the entries)&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String getShortName(String key) &#123;</span><br><span class=\"line\">      final String[] keyParts = key.split(&quot;\\\\.&quot;);</span><br><span class=\"line\">      return keyParts[keyParts.length - 1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected static class Ambiguity &#123;</span><br><span class=\"line\">      final private String subject;</span><br><span class=\"line\"></span><br><span class=\"line\">      public Ambiguity(String subject) &#123;</span><br><span class=\"line\">        this.subject = subject;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      public String getSubject() &#123;</span><br><span class=\"line\">        return subject;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>然后代码跳到这里</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SqlSessionFactoryBean implements FactoryBean&lt;SqlSessionFactory&gt;, InitializingBean, ApplicationListener&lt;ApplicationEvent&gt; &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">//这里是创建唯一的sqlsessionFactory注意这个注解ConditionalOnMissingBean</span><br><span class=\"line\">  @Bean</span><br><span class=\"line\">  @ConditionalOnMissingBean</span><br><span class=\"line\">  public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception &#123;</span><br><span class=\"line\">    SqlSessionFactoryBean factory = new SqlSessionFactoryBean();</span><br><span class=\"line\">    factory.setDataSource(dataSource);</span><br><span class=\"line\">    factory.setVfs(SpringBootVFS.class);</span><br><span class=\"line\">    if (StringUtils.hasText(this.properties.getConfigLocation())) &#123;</span><br><span class=\"line\">      factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Configuration configuration = this.properties.getConfiguration();</span><br><span class=\"line\">    if (configuration == null &amp;&amp; !StringUtils.hasText(this.properties.getConfigLocation())) &#123;</span><br><span class=\"line\">      configuration = new Configuration();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (configuration != null &amp;&amp; !CollectionUtils.isEmpty(this.configurationCustomizers)) &#123;</span><br><span class=\"line\">      for (ConfigurationCustomizer customizer : this.configurationCustomizers) &#123;</span><br><span class=\"line\">        customizer.customize(configuration);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    factory.setConfiguration(configuration);</span><br><span class=\"line\">    if (this.properties.getConfigurationProperties() != null) &#123;</span><br><span class=\"line\">      factory.setConfigurationProperties(this.properties.getConfigurationProperties());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!ObjectUtils.isEmpty(this.interceptors)) &#123;</span><br><span class=\"line\">      factory.setPlugins(this.interceptors);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (this.databaseIdProvider != null) &#123;</span><br><span class=\"line\">      factory.setDatabaseIdProvider(this.databaseIdProvider);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) &#123;</span><br><span class=\"line\">      factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) &#123;</span><br><span class=\"line\">      factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) &#123;</span><br><span class=\"line\">      factory.setMapperLocations(this.properties.resolveMapperLocations());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//创建工厂</span><br><span class=\"line\">    return factory.getObject();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * &#123;@inheritDoc&#125;</span><br><span class=\"line\">   */</span><br><span class=\"line\">   //先走这个方法</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public void afterPropertiesSet() throws Exception &#123;</span><br><span class=\"line\">    notNull(dataSource, &quot;Property &apos;dataSource&apos; is required&quot;);</span><br><span class=\"line\">    notNull(sqlSessionFactoryBuilder, &quot;Property &apos;sqlSessionFactoryBuilder&apos; is required&quot;);</span><br><span class=\"line\">    state((configuration == null &amp;&amp; configLocation == null) || !(configuration != null &amp;&amp; configLocation != null),</span><br><span class=\"line\">              &quot;Property &apos;configuration&apos; and &apos;configLocation&apos; can not specified with together&quot;);</span><br><span class=\"line\">\t//走这里进行build工厂类</span><br><span class=\"line\">    this.sqlSessionFactory = buildSqlSessionFactory();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  //注意了具体的配置过程在这里</span><br><span class=\"line\">    protected SqlSessionFactory buildSqlSessionFactory() throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Configuration configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">    XMLConfigBuilder xmlConfigBuilder = null;</span><br><span class=\"line\">    if (this.configuration != null) &#123;</span><br><span class=\"line\">      configuration = this.configuration;</span><br><span class=\"line\">      if (configuration.getVariables() == null) &#123;</span><br><span class=\"line\">        configuration.setVariables(this.configurationProperties);</span><br><span class=\"line\">      &#125; else if (this.configurationProperties != null) &#123;</span><br><span class=\"line\">        configuration.getVariables().putAll(this.configurationProperties);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else if (this.configLocation != null) &#123;</span><br><span class=\"line\">      xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null, this.configurationProperties);</span><br><span class=\"line\">      configuration = xmlConfigBuilder.getConfiguration();</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">        LOGGER.debug(&quot;Property &apos;configuration&apos; or &apos;configLocation&apos; not specified, using default MyBatis Configuration&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      configuration = new Configuration();</span><br><span class=\"line\">      if (this.configurationProperties != null) &#123;</span><br><span class=\"line\">        configuration.setVariables(this.configurationProperties);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (this.objectFactory != null) &#123;</span><br><span class=\"line\">      configuration.setObjectFactory(this.objectFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (this.objectWrapperFactory != null) &#123;</span><br><span class=\"line\">      configuration.setObjectWrapperFactory(this.objectWrapperFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (this.vfs != null) &#123;</span><br><span class=\"line\">      configuration.setVfsImpl(this.vfs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//this.typeAliasesPackage=application.properties中的mybatis.type-aliases-package</span><br><span class=\"line\">    if (hasLength(this.typeAliasesPackage)) &#123;</span><br><span class=\"line\">      String[] typeAliasPackageArray = tokenizeToStringArray(this.typeAliasesPackage,</span><br><span class=\"line\">          ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class=\"line\">      for (String packageToScan : typeAliasPackageArray) &#123;</span><br><span class=\"line\">        configuration.getTypeAliasRegistry().registerAliases(packageToScan,</span><br><span class=\"line\">                typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);</span><br><span class=\"line\">        if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">          LOGGER.debug(&quot;Scanned package: &apos;&quot; + packageToScan + &quot;&apos; for aliases&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//注册别名类到configuration</span><br><span class=\"line\">    if (!isEmpty(this.typeAliases)) &#123;</span><br><span class=\"line\">      for (Class&lt;?&gt; typeAlias : this.typeAliases) &#123;</span><br><span class=\"line\">        configuration.getTypeAliasRegistry().registerAlias(typeAlias);</span><br><span class=\"line\">        if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">          LOGGER.debug(&quot;Registered type alias: &apos;&quot; + typeAlias + &quot;&apos;&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//看看有没有配置插件有的话加入到拦截器组</span><br><span class=\"line\">    if (!isEmpty(this.plugins)) &#123;</span><br><span class=\"line\">      for (Interceptor plugin : this.plugins) &#123;</span><br><span class=\"line\">        configuration.addInterceptor(plugin);</span><br><span class=\"line\">        if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">          LOGGER.debug(&quot;Registered plugin: &apos;&quot; + plugin + &quot;&apos;&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//看看有没有typeHandlersPackage，有的话注册到cfg类中</span><br><span class=\"line\">    if (hasLength(this.typeHandlersPackage)) &#123;</span><br><span class=\"line\">      String[] typeHandlersPackageArray = tokenizeToStringArray(this.typeHandlersPackage,</span><br><span class=\"line\">          ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class=\"line\">      for (String packageToScan : typeHandlersPackageArray) &#123;</span><br><span class=\"line\">        configuration.getTypeHandlerRegistry().register(packageToScan);</span><br><span class=\"line\">        if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">          LOGGER.debug(&quot;Scanned package: &apos;&quot; + packageToScan + &quot;&apos; for type handlers&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//看看有没有typeHandlers，有的话注册到cfg类中</span><br><span class=\"line\">    if (!isEmpty(this.typeHandlers)) &#123;</span><br><span class=\"line\">      for (TypeHandler&lt;?&gt; typeHandler : this.typeHandlers) &#123;</span><br><span class=\"line\">        configuration.getTypeHandlerRegistry().register(typeHandler);</span><br><span class=\"line\">        if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">          LOGGER.debug(&quot;Registered type handler: &apos;&quot; + typeHandler + &quot;&apos;&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//看看有没有设置databaseid 有的话配置到cfg类中</span><br><span class=\"line\">    if (this.databaseIdProvider != null) &#123;//fix #64 set databaseId before parse mapper xmls</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));</span><br><span class=\"line\">      &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">        throw new NestedIOException(&quot;Failed getting a databaseId&quot;, e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (this.cache != null) &#123;</span><br><span class=\"line\">      configuration.addCache(this.cache);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (xmlConfigBuilder != null) &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        xmlConfigBuilder.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">          LOGGER.debug(&quot;Parsed configuration file: &apos;&quot; + this.configLocation + &quot;&apos;&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; catch (Exception ex) &#123;</span><br><span class=\"line\">        throw new NestedIOException(&quot;Failed to parse config resource: &quot; + this.configLocation, ex);</span><br><span class=\"line\">      &#125; finally &#123;</span><br><span class=\"line\">        ErrorContext.instance().reset();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">//如果transactionFactory是空的话 new一个 Spring的事务工厂</span><br><span class=\"line\">    if (this.transactionFactory == null) &#123;</span><br><span class=\"line\">      this.transactionFactory = new SpringManagedTransactionFactory();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//这里很重要 将spring的环境对象 和事务工厂还有数据源对象注册到cfg类中</span><br><span class=\"line\">    configuration.setEnvironment(new Environment(this.environment, this.transactionFactory, this.dataSource));</span><br><span class=\"line\">\t//this.mapperLocation=application.properties中配置的mybatis.mapper-locations</span><br><span class=\"line\">\t//拿到mapper文件的配置类</span><br><span class=\"line\">    if (!isEmpty(this.mapperLocations)) &#123;</span><br><span class=\"line\">      for (Resource mapperLocation : this.mapperLocations) &#123;</span><br><span class=\"line\">        if (mapperLocation == null) &#123;</span><br><span class=\"line\">          continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">        //构建xmlMapperBuilder</span><br><span class=\"line\">          XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(mapperLocation.getInputStream(),</span><br><span class=\"line\">              configuration, mapperLocation.toString(), configuration.getSqlFragments());</span><br><span class=\"line\">              //</span><br><span class=\"line\">          xmlMapperBuilder.parse();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">          throw new NestedIOException(&quot;Failed to parse mapping resource: &apos;&quot; + mapperLocation + &quot;&apos;&quot;, e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">          ErrorContext.instance().reset();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">          LOGGER.debug(&quot;Parsed mapper file: &apos;&quot; + mapperLocation + &quot;&apos;&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">        LOGGER.debug(&quot;Property &apos;mapperLocations&apos; was not specified or no matching resources found&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//最后创建sqlsessionFactory</span><br><span class=\"line\">    return this.sqlSessionFactoryBuilder.build(configuration);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>configuration.getTypeAliasRegistry().registerAliases的操作</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void registerAliases(String packageName, Class&lt;?&gt; superType)&#123;</span><br><span class=\"line\">   ResolverUtil&lt;Class&lt;?&gt;&gt; resolverUtil = new ResolverUtil&lt;Class&lt;?&gt;&gt;();</span><br><span class=\"line\">   resolverUtil.find(new ResolverUtil.IsA(superType), packageName);</span><br><span class=\"line\">   Set&lt;Class&lt;? extends Class&lt;?&gt;&gt;&gt; typeSet = resolverUtil.getClasses();</span><br><span class=\"line\">   for(Class&lt;?&gt; type : typeSet)&#123;</span><br><span class=\"line\">     // Ignore inner classes and interfaces (including package-info.java)</span><br><span class=\"line\">     // Skip also inner classes. See issue #6</span><br><span class=\"line\">     if (!type.isAnonymousClass() &amp;&amp; !type.isInterface() &amp;&amp; !type.isMemberClass()) &#123;</span><br><span class=\"line\">       //注册别名</span><br><span class=\"line\">       registerAlias(type);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> //上面代码调到这里</span><br><span class=\"line\"> public void registerAlias(Class&lt;?&gt; type) &#123;</span><br><span class=\"line\">   String alias = type.getSimpleName();</span><br><span class=\"line\">   //先获得class上的注解 </span><br><span class=\"line\">   Alias aliasAnnotation = type.getAnnotation(Alias.class);</span><br><span class=\"line\">   if (aliasAnnotation != null) &#123;</span><br><span class=\"line\">     //如果有的话拿到注解的值</span><br><span class=\"line\">     alias = aliasAnnotation.value();</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   //</span><br><span class=\"line\">   registerAlias(alias, type);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> //再跳到这里</span><br><span class=\"line\"> public void registerAlias(String alias, Class&lt;?&gt; value) &#123;</span><br><span class=\"line\">   if (alias == null) &#123;</span><br><span class=\"line\">     throw new TypeException(&quot;The parameter alias cannot be null&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   // issue #748</span><br><span class=\"line\">   String key = alias.toLowerCase(Locale.ENGLISH);</span><br><span class=\"line\">   if (TYPE_ALIASES.containsKey(key) &amp;&amp; TYPE_ALIASES.get(key) != null &amp;&amp; !TYPE_ALIASES.get(key).equals(value)) &#123;</span><br><span class=\"line\">     throw new TypeException(&quot;The alias &apos;&quot; + alias + &quot;&apos; is already mapped to the value &apos;&quot; + TYPE_ALIASES.get(key).getName() + &quot;&apos;.&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   //这里key=userroledto value=class com.convergence.domain.UserRoleDTO</span><br><span class=\"line\">   TYPE_ALIASES.put(key, value);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>进行解析</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void parse() &#123;</span><br><span class=\"line\">    if (!configuration.isResourceLoaded(resource)) &#123;</span><br><span class=\"line\">      configurationElement(parser.evalNode(&quot;/mapper&quot;));</span><br><span class=\"line\">      configuration.addLoadedResource(resource);</span><br><span class=\"line\">      //绑定namespace</span><br><span class=\"line\">      bindMapperForNamespace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t//解析resultMaps</span><br><span class=\"line\">    parsePendingResultMaps();</span><br><span class=\"line\">    parsePendingCacheRefs();</span><br><span class=\"line\">    parsePendingStatements();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //解析xml文件</span><br><span class=\"line\">  private void configurationElement(XNode context) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      String namespace = context.getStringAttribute(&quot;namespace&quot;);</span><br><span class=\"line\">      if (namespace == null || namespace.equals(&quot;&quot;)) &#123;</span><br><span class=\"line\">        throw new BuilderException(&quot;Mapper&apos;s namespace cannot be empty&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      builderAssistant.setCurrentNamespace(namespace);</span><br><span class=\"line\">      //这里的context就是xml文件内容了</span><br><span class=\"line\">      cacheRefElement(context.evalNode(&quot;cache-ref&quot;));</span><br><span class=\"line\">      cacheElement(context.evalNode(&quot;cache&quot;));</span><br><span class=\"line\">      parameterMapElement(context.evalNodes(&quot;/mapper/parameterMap&quot;));</span><br><span class=\"line\">      resultMapElements(context.evalNodes(&quot;/mapper/resultMap&quot;));</span><br><span class=\"line\">      sqlElement(context.evalNodes(&quot;/mapper/sql&quot;));</span><br><span class=\"line\">      buildStatementFromContext(context.evalNodes(&quot;select|insert|update|delete&quot;));</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">      throw new BuilderException(&quot;Error parsing Mapper XML. Cause: &quot; + e, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //将mapper.java和xml进行绑定</span><br><span class=\"line\">  private void bindMapperForNamespace() &#123;</span><br><span class=\"line\">    String namespace = builderAssistant.getCurrentNamespace();</span><br><span class=\"line\">    if (namespace != null) &#123;</span><br><span class=\"line\">      Class&lt;?&gt; boundType = null;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        boundType = Resources.classForName(namespace);</span><br><span class=\"line\">      &#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">        //ignore, bound type is not required</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (boundType != null) &#123;</span><br><span class=\"line\">        if (!configuration.hasMapper(boundType)) &#123;</span><br><span class=\"line\">          // Spring may not know the real resource name so we set a flag</span><br><span class=\"line\">          // to prevent loading again this resource from the mapper interface</span><br><span class=\"line\">          // look at MapperAnnotationBuilder#loadXmlResource</span><br><span class=\"line\">          configuration.addLoadedResource(&quot;namespace:&quot; + namespace);</span><br><span class=\"line\">          configuration.addMapper(boundType);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //解析resultmap</span><br><span class=\"line\"> private void parsePendingResultMaps() &#123;</span><br><span class=\"line\">    Collection&lt;ResultMapResolver&gt; incompleteResultMaps = configuration.getIncompleteResultMaps();</span><br><span class=\"line\">    synchronized (incompleteResultMaps) &#123;</span><br><span class=\"line\">      Iterator&lt;ResultMapResolver&gt; iter = incompleteResultMaps.iterator();</span><br><span class=\"line\">      while (iter.hasNext()) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          iter.next().resolve();</span><br><span class=\"line\">          iter.remove();</span><br><span class=\"line\">        &#125; catch (IncompleteElementException e) &#123;</span><br><span class=\"line\">          // ResultMap is still missing a resource...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //缓存解析</span><br><span class=\"line\">  private void parsePendingCacheRefs() &#123;</span><br><span class=\"line\">    Collection&lt;CacheRefResolver&gt; incompleteCacheRefs = configuration.getIncompleteCacheRefs();</span><br><span class=\"line\">    synchronized (incompleteCacheRefs) &#123;</span><br><span class=\"line\">      Iterator&lt;CacheRefResolver&gt; iter = incompleteCacheRefs.iterator();</span><br><span class=\"line\">      while (iter.hasNext()) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          iter.next().resolveCacheRef();</span><br><span class=\"line\">          iter.remove();</span><br><span class=\"line\">        &#125; catch (IncompleteElementException e) &#123;</span><br><span class=\"line\">          // Cache ref is still missing a resource...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //statment解析</span><br><span class=\"line\">    private void parsePendingStatements() &#123;</span><br><span class=\"line\">    Collection&lt;XMLStatementBuilder&gt; incompleteStatements = configuration.getIncompleteStatements();</span><br><span class=\"line\">    synchronized (incompleteStatements) &#123;</span><br><span class=\"line\">      Iterator&lt;XMLStatementBuilder&gt; iter = incompleteStatements.iterator();</span><br><span class=\"line\">      while (iter.hasNext()) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          iter.next().parseStatementNode();</span><br><span class=\"line\">          iter.remove();</span><br><span class=\"line\">        &#125; catch (IncompleteElementException e) &#123;</span><br><span class=\"line\">          // Statement is still missing a resource...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>上面的工厂实例完了 进入sqlsessiontemplate实例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这里需要上面构建的sqlSessionFactory</span><br><span class=\"line\">@Bean</span><br><span class=\"line\">@ConditionalOnMissingBean</span><br><span class=\"line\">public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class=\"line\">  ExecutorType executorType = this.properties.getExecutorType();</span><br><span class=\"line\">  if (executorType != null) &#123;</span><br><span class=\"line\">    return new SqlSessionTemplate(sqlSessionFactory, executorType);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return new SqlSessionTemplate(sqlSessionFactory);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>构建SqlSessionTemplate</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SqlSessionTemplate implements SqlSession, DisposableBean &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">/**</span><br><span class=\"line\">  * Constructs a Spring managed &#123;@code SqlSession&#125; with the given</span><br><span class=\"line\">  * &#123;@code SqlSessionFactory&#125; and &#123;@code ExecutorType&#125;.</span><br><span class=\"line\">  * A custom &#123;@code SQLExceptionTranslator&#125; can be provided as an</span><br><span class=\"line\">  * argument so any &#123;@code PersistenceException&#125; thrown by MyBatis</span><br><span class=\"line\">  * can be custom translated to a &#123;@code RuntimeException&#125;</span><br><span class=\"line\">  * The &#123;@code SQLExceptionTranslator&#125; can also be null and thus no</span><br><span class=\"line\">  * exception translation will be done and MyBatis exceptions will be</span><br><span class=\"line\">  * thrown</span><br><span class=\"line\">  *</span><br><span class=\"line\">  * @param sqlSessionFactory</span><br><span class=\"line\">  * @param executorType</span><br><span class=\"line\">  * @param exceptionTranslator</span><br><span class=\"line\">  */</span><br><span class=\"line\"> public SqlSessionTemplate(SqlSessionFactory sqlSessionFactory, ExecutorType executorType,</span><br><span class=\"line\">     PersistenceExceptionTranslator exceptionTranslator) &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">   notNull(sqlSessionFactory, &quot;Property &apos;sqlSessionFactory&apos; is required&quot;);</span><br><span class=\"line\">   notNull(executorType, &quot;Property &apos;executorType&apos; is required&quot;);</span><br><span class=\"line\">  </span><br><span class=\"line\">   this.sqlSessionFactory = sqlSessionFactory;</span><br><span class=\"line\">   this.executorType = executorType;</span><br><span class=\"line\">   this.exceptionTranslator = exceptionTranslator;</span><br><span class=\"line\">   //获得一个sqlsession代理类 里面填充了sqlSessionInterceptor</span><br><span class=\"line\">   this.sqlSessionProxy = (SqlSession) newProxyInstance(</span><br><span class=\"line\">       SqlSessionFactory.class.getClassLoader(),</span><br><span class=\"line\">       new Class[] &#123; SqlSession.class &#125;,</span><br><span class=\"line\">       new SqlSessionInterceptor());</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>*<em>这里说下ExecutorType *</em></p>\n<ul>\n<li>*<em>simple 默认的 *</em></li>\n<li><strong>reuse 这个类型不做特殊的事情，它只为每个语句创建一个 PreparedStatement。</strong></li>\n<li>*<em>batch 批处理语句使用 需要关闭autocommit      *</em></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum ExecutorType &#123;</span><br><span class=\"line\">  SIMPLE, REUSE, BATCH</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在创建sqlSessionTemplate的时候会创建一个SqlSessionInterceptor</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  private class SqlSessionInterceptor implements InvocationHandler &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class=\"line\">    //首先获取到sqlsession</span><br><span class=\"line\">      SqlSession sqlSession = getSqlSession(</span><br><span class=\"line\">          SqlSessionTemplate.this.sqlSessionFactory,</span><br><span class=\"line\">          SqlSessionTemplate.this.executorType,</span><br><span class=\"line\">          SqlSessionTemplate.this.exceptionTranslator);</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">      //进行involke 拿到具体的结果集</span><br><span class=\"line\">        Object result = method.invoke(sqlSession, args);</span><br><span class=\"line\">        //这个if判断：    return (holder != null) &amp;&amp; (holder.getSqlSession() == session);</span><br><span class=\"line\">        if (!isSqlSessionTransactional(sqlSession, SqlSessionTemplate.this.sqlSessionFactory)) &#123;</span><br><span class=\"line\">          // force commit even on non-dirty sessions because some databases require</span><br><span class=\"line\">          // a commit/rollback before calling close()</span><br><span class=\"line\">          //然后commit</span><br><span class=\"line\">          sqlSession.commit(true);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">      &#125; catch (Throwable t) &#123;</span><br><span class=\"line\">        Throwable unwrapped = unwrapThrowable(t);</span><br><span class=\"line\">        if (SqlSessionTemplate.this.exceptionTranslator != null &amp;&amp; unwrapped instanceof PersistenceException) &#123;</span><br><span class=\"line\">          // release the connection to avoid a deadlock if the translator is no loaded. See issue #22</span><br><span class=\"line\">          closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);</span><br><span class=\"line\">          sqlSession = null;</span><br><span class=\"line\">          Throwable translated = SqlSessionTemplate.this.exceptionTranslator.translateExceptionIfPossible((PersistenceException) unwrapped);</span><br><span class=\"line\">          if (translated != null) &#123;</span><br><span class=\"line\">            unwrapped = translated;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        throw unwrapped;</span><br><span class=\"line\">      &#125; finally &#123;</span><br><span class=\"line\">        if (sqlSession != null) &#123;</span><br><span class=\"line\">        //关闭会话</span><br><span class=\"line\">          closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>getSqlSession:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public static SqlSession getSqlSession(SqlSessionFactory sessionFactory, ExecutorType executorType, PersistenceExceptionTranslator exceptionTranslator) &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">   notNull(sessionFactory, NO_SQL_SESSION_FACTORY_SPECIFIED);</span><br><span class=\"line\">   notNull(executorType, NO_EXECUTOR_TYPE_SPECIFIED);</span><br><span class=\"line\">//holder</span><br><span class=\"line\">   SqlSessionHolder holder = (SqlSessionHolder) </span><br><span class=\"line\">   //事务管理器拿到holder</span><br><span class=\"line\">   TransactionSynchronizationManager.getResource(sessionFactory);</span><br><span class=\"line\">//获得session</span><br><span class=\"line\">   SqlSession session = sessionHolder(executorType, holder);</span><br><span class=\"line\">   if (session != null) &#123;</span><br><span class=\"line\">     return session;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">   if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">     LOGGER.debug(&quot;Creating a new SqlSession&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">//工厂打开session</span><br><span class=\"line\">   session = sessionFactory.openSession(executorType);</span><br><span class=\"line\">//注册session,工厂到holder</span><br><span class=\"line\">   registerSessionHolder(sessionFactory, executorType, exceptionTranslator, session);</span><br><span class=\"line\">  </span><br><span class=\"line\">   return session;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>registerSessionHolder:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  private static void registerSessionHolder(SqlSessionFactory sessionFactory, ExecutorType executorType,</span><br><span class=\"line\">      PersistenceExceptionTranslator exceptionTranslator, SqlSession session) &#123;</span><br><span class=\"line\">    SqlSessionHolder holder;</span><br><span class=\"line\">    if (TransactionSynchronizationManager.isSynchronizationActive()) &#123;</span><br><span class=\"line\">      Environment environment = sessionFactory.getConfiguration().getEnvironment();</span><br><span class=\"line\">\t  //如果当前的事务工厂是spring的事务管理工厂的实例的话</span><br><span class=\"line\">      if (environment.getTransactionFactory() instanceof SpringManagedTransactionFactory) &#123;</span><br><span class=\"line\">        if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">          LOGGER.debug(&quot;Registering transaction synchronization for SqlSession [&quot; + session + &quot;]&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t   //创建holder</span><br><span class=\"line\">        holder = new SqlSessionHolder(session, executorType, exceptionTranslator);</span><br><span class=\"line\">        //底下是事务的一系列管理操作</span><br><span class=\"line\">        TransactionSynchronizationManager.bindResource(sessionFactory, holder);</span><br><span class=\"line\">        TransactionSynchronizationManager.registerSynchronization(new SqlSessionSynchronization(holder, sessionFactory));</span><br><span class=\"line\">        holder.setSynchronizedWithTransaction(true);</span><br><span class=\"line\">        holder.requested();</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        if (TransactionSynchronizationManager.getResource(environment.getDataSource()) == null) &#123;</span><br><span class=\"line\">          if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">            LOGGER.debug(&quot;SqlSession [&quot; + session + &quot;] was not registered for synchronization because DataSource is not transactional&quot;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          throw new TransientDataAccessResourceException(</span><br><span class=\"line\">              &quot;SqlSessionFactory must be using a SpringManagedTransactionFactory in order to use Spring transaction synchronization&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      if (LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">        LOGGER.debug(&quot;SqlSession [&quot; + session + &quot;] was not registered for synchronization because synchronization is not active&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>具体的sql执行过程</strong></p>\n</li>\n</ul>\n<p>  <strong>mybatis中的每个dao都会继承SqlSessionDaoSupport，在于spring集成的时候，需要依赖spring-mybatis这个jar，而这个SqlSessionDaoSupport类就在这个jar中</strong></p>\n<p>  <strong>这是个抽象类。</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package org.mybatis.spring.support;</span><br><span class=\"line\"></span><br><span class=\"line\">import static org.springframework.util.Assert.notNull;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionTemplate;</span><br><span class=\"line\">import org.springframework.dao.support.DaoSupport;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Convenient super class for MyBatis SqlSession data access objects.</span><br><span class=\"line\"> * It gives you access to the template which can then be used to execute SQL methods.</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * This class needs a SqlSessionTemplate or a SqlSessionFactory.</span><br><span class=\"line\"> * If both are set the SqlSessionFactory will be ignored.</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * &#123;code Autowired&#125; was removed from setSqlSessionTemplate and setSqlSessionFactory</span><br><span class=\"line\"> * in version 1.2.0.</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @author Putthibong Boonbong</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @see #setSqlSessionFactory</span><br><span class=\"line\"> * @see #setSqlSessionTemplate</span><br><span class=\"line\"> * @see SqlSessionTemplate</span><br><span class=\"line\"> */</span><br><span class=\"line\">public abstract class SqlSessionDaoSupport extends DaoSupport &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private SqlSession sqlSession;</span><br><span class=\"line\"></span><br><span class=\"line\">  private boolean externalSqlSession;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class=\"line\">    if (!this.externalSqlSession) &#123;</span><br><span class=\"line\">      this.sqlSession = new SqlSessionTemplate(sqlSessionFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void setSqlSessionTemplate(SqlSessionTemplate sqlSessionTemplate) &#123;</span><br><span class=\"line\">    this.sqlSession = sqlSessionTemplate;</span><br><span class=\"line\">    this.externalSqlSession = true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Users should use this method to get a SqlSession to call its statement methods</span><br><span class=\"line\">   * This is SqlSession is managed by spring. Users should not commit/rollback/close it</span><br><span class=\"line\">   * because it will be automatically done.</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @return Spring managed thread safe SqlSession</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public SqlSession getSqlSession() &#123;</span><br><span class=\"line\">    return this.sqlSession;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * &#123;@inheritDoc&#125;</span><br><span class=\"line\">   */</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  protected void checkDaoConfig() &#123;</span><br><span class=\"line\">    notNull(this.sqlSession, &quot;Property &apos;sqlSessionFactory&apos; or &apos;sqlSessionTemplate&apos; are required&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>那么它的父类DaoSupport什么时候</strong></p>\n<p>  <strong>注意实现了InitializingBean这个是由spring管理的</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory</span><br><span class=\"line\">\t\timplements AutowireCapableBeanFactory &#123;</span><br><span class=\"line\">\t\t//</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Give a bean a chance to react now all its properties are set,</span><br><span class=\"line\">\t * and a chance to know about its owning bean factory (this object).</span><br><span class=\"line\">\t * This means checking whether the bean implements InitializingBean or defines</span><br><span class=\"line\">\t * a custom init method, and invoking the necessary callback(s) if it does.</span><br><span class=\"line\">\t * @param beanName the bean name in the factory (for debugging purposes)</span><br><span class=\"line\">\t * @param bean the new bean instance we may need to initialize</span><br><span class=\"line\">\t * @param mbd the merged bean definition that the bean was created with</span><br><span class=\"line\">\t * (can also be &#123;@code null&#125;, if given an existing bean instance)</span><br><span class=\"line\">\t * @throws Throwable if thrown by init methods or by the invocation process</span><br><span class=\"line\">\t * @see #invokeCustomInitMethod</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t //根据bean的name来反射加载初始方法 当bean DataSourceInitializerInvoker被加载时候会触发事件驱动 去构建sqlsessionFactory</span><br><span class=\"line\">\t //当bean=MapperFactoryBean的时候 先走父类DaoSupport的afterPropertiesSet</span><br><span class=\"line\">\tprotected void invokeInitMethods(String beanName, final Object bean, @Nullable RootBeanDefinition mbd)</span><br><span class=\"line\">\t\t\tthrows Throwable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tboolean isInitializingBean = (bean instanceof InitializingBean);</span><br><span class=\"line\">\t\tif (isInitializingBean &amp;&amp; (mbd == null || !mbd.isExternallyManagedInitMethod(&quot;afterPropertiesSet&quot;))) &#123;</span><br><span class=\"line\">\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(&quot;Invoking afterPropertiesSet() on bean with name &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (System.getSecurityManager() != null) &#123;</span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\tAccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\t\t((InitializingBean) bean).afterPropertiesSet();</span><br><span class=\"line\">\t\t\t\t\t\treturn null;</span><br><span class=\"line\">\t\t\t\t\t&#125;, getAccessControlContext());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tcatch (PrivilegedActionException pae) &#123;</span><br><span class=\"line\">\t\t\t\t\tthrow pae.getException();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t//在这里会初始化dao</span><br><span class=\"line\">\t\t\t\t((InitializingBean) bean).afterPropertiesSet();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (mbd != null &amp;&amp; bean.getClass() != NullBean.class) &#123;</span><br><span class=\"line\">\t\t\tString initMethodName = mbd.getInitMethodName();</span><br><span class=\"line\">\t\t\tif (StringUtils.hasLength(initMethodName) &amp;&amp;</span><br><span class=\"line\">\t\t\t\t\t!(isInitializingBean &amp;&amp; &quot;afterPropertiesSet&quot;.equals(initMethodName)) &amp;&amp;\t</span><br><span class=\"line\">\t\t\t\t\t!mbd.isExternallyManagedInitMethod(initMethodName)) &#123;</span><br><span class=\"line\">\t\t\t\tinvokeCustomInitMethod(beanName, bean, mbd);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>当bean=MapperFactoryBean的时候 先走父类DaoSupport的afterPropertiesSet：</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class DaoSupport implements InitializingBean &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic final void afterPropertiesSet() throws IllegalArgumentException, BeanInitializationException &#123;</span><br><span class=\"line\">\t\t// Let abstract subclasses check their configuration.</span><br><span class=\"line\">\t\t//检查dao的cfg</span><br><span class=\"line\">\t\tcheckDaoConfig();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Let concrete implementations initialize themselves.</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t//初始化加载dao 父类空实现</span><br><span class=\"line\">\t\t\tinitDao();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (Exception ex) &#123;</span><br><span class=\"line\">\t\t\tthrow new BeanInitializationException(&quot;Initialization of DAO failed&quot;, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>  <strong>具体实现MapperFactoryBean：</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package org.mybatis.spring.mapper;</span><br><span class=\"line\"></span><br><span class=\"line\">import static org.springframework.util.Assert.notNull;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.ibatis.executor.ErrorContext;</span><br><span class=\"line\">import org.apache.ibatis.session.Configuration;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionTemplate;</span><br><span class=\"line\">import org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class=\"line\">import org.springframework.beans.factory.FactoryBean;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * BeanFactory that enables injection of MyBatis mapper interfaces. It can be set up with a</span><br><span class=\"line\"> * SqlSessionFactory or a pre-configured SqlSessionTemplate.</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * Sample configuration:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;pre class=&quot;code&quot;&gt;</span><br><span class=\"line\"> * &#123;@code</span><br><span class=\"line\"> *   &lt;bean id=&quot;baseMapper&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot; abstract=&quot;true&quot; lazy-init=&quot;true&quot;&gt;</span><br><span class=\"line\"> *     &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt;</span><br><span class=\"line\"> *   &lt;/bean&gt;</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *   &lt;bean id=&quot;oneMapper&quot; parent=&quot;baseMapper&quot;&gt;</span><br><span class=\"line\"> *     &lt;property name=&quot;mapperInterface&quot; value=&quot;my.package.MyMapperInterface&quot; /&gt;</span><br><span class=\"line\"> *   &lt;/bean&gt;</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *   &lt;bean id=&quot;anotherMapper&quot; parent=&quot;baseMapper&quot;&gt;</span><br><span class=\"line\"> *     &lt;property name=&quot;mapperInterface&quot; value=&quot;my.package.MyAnotherMapperInterface&quot; /&gt;</span><br><span class=\"line\"> *   &lt;/bean&gt;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> * &lt;/pre&gt;</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * Note that this factory can only inject &lt;em&gt;interfaces&lt;/em&gt;, not concrete classes.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author Eduardo Macarron</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @see SqlSessionTemplate</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MapperFactoryBean&lt;T&gt; extends SqlSessionDaoSupport implements FactoryBean&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private Class&lt;T&gt; mapperInterface;</span><br><span class=\"line\"></span><br><span class=\"line\">  private boolean addToConfig = true;</span><br><span class=\"line\"></span><br><span class=\"line\">  public MapperFactoryBean() &#123;</span><br><span class=\"line\">    //intentionally empty </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  public MapperFactoryBean(Class&lt;T&gt; mapperInterface) &#123;</span><br><span class=\"line\">    this.mapperInterface = mapperInterface;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * &#123;@inheritDoc&#125;</span><br><span class=\"line\">   */</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  protected void checkDaoConfig() &#123;</span><br><span class=\"line\">  //进入父类DaoSupport的checkDaoConfig方法</span><br><span class=\"line\">    super.checkDaoConfig();</span><br><span class=\"line\"></span><br><span class=\"line\">    notNull(this.mapperInterface, &quot;Property &apos;mapperInterface&apos; is required&quot;);</span><br><span class=\"line\">\t//获取到mybatis的configuration</span><br><span class=\"line\">    Configuration configuration = getSqlSession().getConfiguration();</span><br><span class=\"line\">    //如果配置中没有当前执行sql的dao</span><br><span class=\"line\">    if (this.addToConfig &amp;&amp; !configuration.hasMapper(this.mapperInterface)) &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">      //加入该dao到配置类中</span><br><span class=\"line\">        configuration.addMapper(this.mapperInterface);</span><br><span class=\"line\">      &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        logger.error(&quot;Error while adding the mapper &apos;&quot; + this.mapperInterface + &quot;&apos; to configuration.&quot;, e);</span><br><span class=\"line\">        throw new IllegalArgumentException(e);</span><br><span class=\"line\">      &#125; finally &#123;</span><br><span class=\"line\">        ErrorContext.instance().reset();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * &#123;@inheritDoc&#125;</span><br><span class=\"line\">   */</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public T getObject() throws Exception &#123;</span><br><span class=\"line\">    return getSqlSession().getMapper(this.mapperInterface);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * &#123;@inheritDoc&#125;</span><br><span class=\"line\">   */</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public Class&lt;T&gt; getObjectType() &#123;</span><br><span class=\"line\">    return this.mapperInterface;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * &#123;@inheritDoc&#125;</span><br><span class=\"line\">   */</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public boolean isSingleton() &#123;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //------------- mutators --------------</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Sets the mapper interface of the MyBatis mapper</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param mapperInterface class of the interface</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public void setMapperInterface(Class&lt;T&gt; mapperInterface) &#123;</span><br><span class=\"line\">    this.mapperInterface = mapperInterface;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Return the mapper interface of the MyBatis mapper</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @return class of the interface</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public Class&lt;T&gt; getMapperInterface() &#123;</span><br><span class=\"line\">    return mapperInterface;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * If addToConfig is false the mapper will not be added to MyBatis. This means</span><br><span class=\"line\">   * it must have been included in mybatis-config.xml.</span><br><span class=\"line\">   * &lt;p/&gt;</span><br><span class=\"line\">   * If it is true, the mapper will be added to MyBatis in the case it is not already</span><br><span class=\"line\">   * registered.</span><br><span class=\"line\">   * &lt;p/&gt;</span><br><span class=\"line\">   * By default addToCofig is true.</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param addToConfig</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public void setAddToConfig(boolean addToConfig) &#123;</span><br><span class=\"line\">    this.addToConfig = addToConfig;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Return the flag for addition into MyBatis config.</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @return true if the mapper will be added to MyBatis in the case it is not already</span><br><span class=\"line\">   * registered.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public boolean isAddToConfig() &#123;</span><br><span class=\"line\">    return addToConfig;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>走完上面的代码，console打印日志：</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2018-11-07 23:51:11.500 INFO [restartedMain][Jdk14Logger.java:99] - Bean &apos;resourceDao&apos; of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</span><br></pre></td></tr></table></figure>\n\n<p>  *<em>那么底下会创建bean *</em></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory</span><br><span class=\"line\">\t\timplements AutowireCapableBeanFactory &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tprotected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)</span><br><span class=\"line\">\t\t\tthrows BeanCreationException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(&quot;Creating instance of bean &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tRootBeanDefinition mbdToUse = mbd;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Make sure bean class is actually resolved at this point, and</span><br><span class=\"line\">\t\t// clone the bean definition in case of a dynamically resolved Class</span><br><span class=\"line\">\t\t// which cannot be stored in the shared merged bean definition.</span><br><span class=\"line\">\t\tClass&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class=\"line\">\t\tif (resolvedClass != null &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != null) &#123;</span><br><span class=\"line\">\t\t\tmbdToUse = new RootBeanDefinition(mbd);</span><br><span class=\"line\">\t\t\tmbdToUse.setBeanClass(resolvedClass);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Prepare method overrides.</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tmbdToUse.prepareMethodOverrides();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (BeanDefinitionValidationException ex) &#123;</span><br><span class=\"line\">\t\t\tthrow new BeanDefinitionStoreException(mbdToUse.getResourceDescription(),</span><br><span class=\"line\">\t\t\t\t\tbeanName, &quot;Validation of method overrides failed&quot;, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\t// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span><br><span class=\"line\">\t\t\tObject bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class=\"line\">\t\t\tif (bean != null) &#123;</span><br><span class=\"line\">\t\t\t\treturn bean;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (Throwable ex) &#123;</span><br><span class=\"line\">\t\t\tthrow new BeanCreationException(mbdToUse.getResourceDescription(), beanName,</span><br><span class=\"line\">\t\t\t\t\t&quot;BeanPostProcessor before instantiation of bean failed&quot;, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t//创建bean</span><br><span class=\"line\">\t\t\tObject beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class=\"line\">\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(&quot;Finished creating instance of bean &apos;&quot; + beanName + &quot;&apos;&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn beanInstance;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (BeanCreationException | ImplicitlyAppearedSingletonException ex) &#123;</span><br><span class=\"line\">\t\t\t// A previously detected exception with proper bean creation context already,</span><br><span class=\"line\">\t\t\t// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span><br><span class=\"line\">\t\t\tthrow ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (Throwable ex) &#123;</span><br><span class=\"line\">\t\t\tthrow new BeanCreationException(</span><br><span class=\"line\">\t\t\t\t\tmbdToUse.getResourceDescription(), beanName, &quot;Unexpected exception during bean creation&quot;, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t//doCreateBean 创建bean</span><br><span class=\"line\">\t\tprotected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args)</span><br><span class=\"line\">\t\t\tthrows BeanCreationException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Instantiate the bean.</span><br><span class=\"line\">\t\tBeanWrapper instanceWrapper = null;</span><br><span class=\"line\">\t\tif (mbd.isSingleton()) &#123;</span><br><span class=\"line\">\t\t\tinstanceWrapper = this.factoryBeanInstanceCache.remove(beanName);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (instanceWrapper == null) &#123;</span><br><span class=\"line\">\t\t\tinstanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfinal Object bean = instanceWrapper.getWrappedInstance();</span><br><span class=\"line\">\t\tClass&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class=\"line\">\t\tif (beanType != NullBean.class) &#123;</span><br><span class=\"line\">\t\t\tmbd.resolvedTargetType = beanType;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Allow post-processors to modify the merged bean definition.</span><br><span class=\"line\">\t\tsynchronized (mbd.postProcessingLock) &#123;</span><br><span class=\"line\">\t\t\tif (!mbd.postProcessed) &#123;</span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\tapplyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tcatch (Throwable ex) &#123;</span><br><span class=\"line\">\t\t\t\t\tthrow new BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">\t\t\t\t\t\t\t&quot;Post-processing of merged bean definition failed&quot;, ex);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tmbd.postProcessed = true;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Eagerly cache singletons to be able to resolve circular references</span><br><span class=\"line\">\t\t// even when triggered by lifecycle interfaces like BeanFactoryAware.</span><br><span class=\"line\">\t\tboolean earlySingletonExposure = (mbd.isSingleton() &amp;&amp; this.allowCircularReferences &amp;&amp;</span><br><span class=\"line\">\t\t\t\tisSingletonCurrentlyInCreation(beanName));</span><br><span class=\"line\">\t\tif (earlySingletonExposure) &#123;</span><br><span class=\"line\">\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(&quot;Eagerly caching bean &apos;&quot; + beanName +</span><br><span class=\"line\">\t\t\t\t\t\t&quot;&apos; to allow for resolving potential circular references&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\taddSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Initialize the bean instance.</span><br><span class=\"line\">\t\tObject exposedObject = bean;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tpopulateBean(beanName, mbd, instanceWrapper);</span><br><span class=\"line\">\t\t\texposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (Throwable ex) &#123;</span><br><span class=\"line\">\t\t\tif (ex instanceof BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class=\"line\">\t\t\t\tthrow (BeanCreationException) ex;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\tthrow new BeanCreationException(</span><br><span class=\"line\">\t\t\t\t\t\tmbd.getResourceDescription(), beanName, &quot;Initialization of bean failed&quot;, ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (earlySingletonExposure) &#123;</span><br><span class=\"line\">\t\t\tObject earlySingletonReference = getSingleton(beanName, false);</span><br><span class=\"line\">\t\t\tif (earlySingletonReference != null) &#123;</span><br><span class=\"line\">\t\t\t\tif (exposedObject == bean) &#123;</span><br><span class=\"line\">\t\t\t\t\texposedObject = earlySingletonReference;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\telse if (!this.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class=\"line\">\t\t\t\t\tString[] dependentBeans = getDependentBeans(beanName);</span><br><span class=\"line\">\t\t\t\t\tSet&lt;String&gt; actualDependentBeans = new LinkedHashSet&lt;&gt;(dependentBeans.length);</span><br><span class=\"line\">\t\t\t\t\tfor (String dependentBean : dependentBeans) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tif (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tactualDependentBeans.add(dependentBean);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tif (!actualDependentBeans.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tthrow new BeanCurrentlyInCreationException(beanName,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&quot;Bean with name &apos;&quot; + beanName + &quot;&apos; has been injected into other beans [&quot; +</span><br><span class=\"line\">\t\t\t\t\t\t\t\tStringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&quot;] in its raw version as part of a circular reference, but has eventually been &quot; +</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&quot;wrapped. This means that said other beans do not use the final version of the &quot; +</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&quot;bean. This is often the result of over-eager type matching - consider using &quot; +</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&quot;&apos;getBeanNamesOfType&apos; with the &apos;allowEagerInit&apos; flag turned off, for example.&quot;);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Register bean as disposable </span><br><span class=\"line\">\t\t//将这个dao注册为一次性的bean</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tregisterDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (BeanDefinitionValidationException ex) &#123;</span><br><span class=\"line\">\t\t\tthrow new BeanCreationException(</span><br><span class=\"line\">\t\t\t\t\tmbd.getResourceDescription(), beanName, &quot;Invalid destruction signature&quot;, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn exposedObject;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>//注册为单例</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic abstract class AbstractBeanFactory extends FactoryBeanRegistrySupport implements ConfigurableBeanFactory &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Add the given bean to the list of disposable beans in this factory,</span><br><span class=\"line\">\t * registering its DisposableBean interface and/or the given destroy method</span><br><span class=\"line\">\t * to be called on factory shutdown (if applicable). Only applies to singletons.</span><br><span class=\"line\">\t * @param beanName the name of the bean</span><br><span class=\"line\">\t * @param bean the bean instance</span><br><span class=\"line\">\t * @param mbd the bean definition for the bean</span><br><span class=\"line\">\t * @see RootBeanDefinition#isSingleton</span><br><span class=\"line\">\t * @see RootBeanDefinition#getDependsOn</span><br><span class=\"line\">\t * @see #registerDisposableBean</span><br><span class=\"line\">\t * @see #registerDependentBean</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) &#123;</span><br><span class=\"line\">\t\tAccessControlContext acc = (System.getSecurityManager() != null ? getAccessControlContext() : null);</span><br><span class=\"line\">\t\tif (!mbd.isPrototype() &amp;&amp; requiresDestruction(bean, mbd)) &#123;</span><br><span class=\"line\">\t\t\tif (mbd.isSingleton()) &#123;</span><br><span class=\"line\">\t\t\t\t// Register a DisposableBean implementation that performs all destruction</span><br><span class=\"line\">\t\t\t\t// work for the given bean: DestructionAwareBeanPostProcessors,</span><br><span class=\"line\">\t\t\t\t// DisposableBean interface, custom destroy method.</span><br><span class=\"line\">\t\t\t\tregisterDisposableBean(beanName,</span><br><span class=\"line\">\t\t\t\t\t\tnew DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\t// A bean with a custom scope...</span><br><span class=\"line\">\t\t\t\tScope scope = this.scopes.get(mbd.getScope());</span><br><span class=\"line\">\t\t\t\tif (scope == null) &#123;</span><br><span class=\"line\">\t\t\t\t\tthrow new IllegalStateException(&quot;No Scope registered for scope name &apos;&quot; + mbd.getScope() + &quot;&apos;&quot;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tscope.registerDestructionCallback(beanName,</span><br><span class=\"line\">\t\t\t\t\t\tnew DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>当要执行dao层的sql操作时候</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.apache.ibatis.binding.MapperProxy@14e19901</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>这个是一个代理类</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *    Copyright 2009-2017 the original author or authors.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *    Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class=\"line\"> *    you may not use this file except in compliance with the License.</span><br><span class=\"line\"> *    You may obtain a copy of the License at</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *       http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *    Unless required by applicable law or agreed to in writing, software</span><br><span class=\"line\"> *    distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class=\"line\"> *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"line\"> *    See the License for the specific language governing permissions and</span><br><span class=\"line\"> *    limitations under the License.</span><br><span class=\"line\"> */</span><br><span class=\"line\">package org.apache.ibatis.binding;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\">import java.lang.invoke.MethodHandles;</span><br><span class=\"line\">import java.lang.reflect.Constructor;</span><br><span class=\"line\">import java.lang.reflect.InvocationHandler;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\">import java.lang.reflect.Modifier;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.ibatis.lang.UsesJava7;</span><br><span class=\"line\">import org.apache.ibatis.reflection.ExceptionUtil;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author Clinton Begin</span><br><span class=\"line\"> * @author Eduardo Macarron</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MapperProxy&lt;T&gt; implements InvocationHandler, Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static final long serialVersionUID = -6424540398559729838L;</span><br><span class=\"line\">  private final SqlSession sqlSession;</span><br><span class=\"line\">  private final Class&lt;T&gt; mapperInterface;</span><br><span class=\"line\">  private final Map&lt;Method, MapperMethod&gt; methodCache;</span><br><span class=\"line\"></span><br><span class=\"line\">  public MapperProxy(SqlSession sqlSession, Class&lt;T&gt; mapperInterface, Map&lt;Method, MapperMethod&gt; methodCache) &#123;</span><br><span class=\"line\">    this.sqlSession = sqlSession;</span><br><span class=\"line\">    this.mapperInterface = mapperInterface;</span><br><span class=\"line\">    this.methodCache = methodCache;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //具体的sql操作会走这里</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">    //判断是否是生命的类</span><br><span class=\"line\">      if (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class=\"line\">        return method.invoke(this, args);</span><br><span class=\"line\">        //是否是原生方法</span><br><span class=\"line\">      &#125; else if (isDefaultMethod(method)) &#123;</span><br><span class=\"line\">        return invokeDefaultMethod(proxy, method, args);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; catch (Throwable t) &#123;</span><br><span class=\"line\">      throw ExceptionUtil.unwrapThrowable(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //将具体的sql操作缓存并返回</span><br><span class=\"line\">    final MapperMethod mapperMethod = cachedMapperMethod(method);</span><br><span class=\"line\">    //进行执行</span><br><span class=\"line\">    return mapperMethod.execute(sqlSession, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> //将具体的sql操作method缓存</span><br><span class=\"line\">  private MapperMethod cachedMapperMethod(Method method) &#123;</span><br><span class=\"line\">    MapperMethod mapperMethod = methodCache.get(method);</span><br><span class=\"line\">    if (mapperMethod == null) &#123;</span><br><span class=\"line\">      mapperMethod = new MapperMethod(mapperInterface, method, sqlSession.getConfiguration());</span><br><span class=\"line\">      methodCache.put(method, mapperMethod);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return mapperMethod;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @UsesJava7</span><br><span class=\"line\">  private Object invokeDefaultMethod(Object proxy, Method method, Object[] args)</span><br><span class=\"line\">      throws Throwable &#123;</span><br><span class=\"line\">    final Constructor&lt;MethodHandles.Lookup&gt; constructor = MethodHandles.Lookup.class</span><br><span class=\"line\">        .getDeclaredConstructor(Class.class, int.class);</span><br><span class=\"line\">    if (!constructor.isAccessible()) &#123;</span><br><span class=\"line\">      constructor.setAccessible(true);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    final Class&lt;?&gt; declaringClass = method.getDeclaringClass();</span><br><span class=\"line\">    return constructor</span><br><span class=\"line\">        .newInstance(declaringClass,</span><br><span class=\"line\">            MethodHandles.Lookup.PRIVATE | MethodHandles.Lookup.PROTECTED</span><br><span class=\"line\">                | MethodHandles.Lookup.PACKAGE | MethodHandles.Lookup.PUBLIC)</span><br><span class=\"line\">        .unreflectSpecial(method, declaringClass).bindTo(proxy).invokeWithArguments(args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Backport of java.lang.reflect.Method#isDefault()</span><br><span class=\"line\">   */</span><br><span class=\"line\">  private boolean isDefaultMethod(Method method) &#123;</span><br><span class=\"line\">    return ((method.getModifiers()</span><br><span class=\"line\">        &amp; (Modifier.ABSTRACT | Modifier.PUBLIC | Modifier.STATIC)) == Modifier.PUBLIC)</span><br><span class=\"line\">        &amp;&amp; method.getDeclaringClass().isInterface();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>MapperMethod:</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MapperMethod &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private final SqlCommand command;</span><br><span class=\"line\">  private final MethodSignature method;</span><br><span class=\"line\"></span><br><span class=\"line\">  public MapperMethod(Class&lt;?&gt; mapperInterface, Method method, Configuration config) &#123;</span><br><span class=\"line\">    this.command = new SqlCommand(config, mapperInterface, method);</span><br><span class=\"line\">    this.method = new MethodSignature(config, mapperInterface, method);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> //这里进行执行sql</span><br><span class=\"line\">  public Object execute(SqlSession sqlSession, Object[] args) &#123;</span><br><span class=\"line\">    Object result;</span><br><span class=\"line\">    //判断crud操作</span><br><span class=\"line\">    switch (command.getType()) &#123;</span><br><span class=\"line\">      case INSERT: &#123;</span><br><span class=\"line\">    \tObject param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">        result = rowCountResult(sqlSession.insert(command.getName(), param));</span><br><span class=\"line\">        break;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      case UPDATE: &#123;</span><br><span class=\"line\">        Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">        result = rowCountResult(sqlSession.update(command.getName(), param));</span><br><span class=\"line\">        break;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      case DELETE: &#123;</span><br><span class=\"line\">        Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">        result = rowCountResult(sqlSession.delete(command.getName(), param));</span><br><span class=\"line\">        break;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      case SELECT:</span><br><span class=\"line\">        if (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123;</span><br><span class=\"line\">          executeWithResultHandler(sqlSession, args);</span><br><span class=\"line\">          result = null;</span><br><span class=\"line\">        &#125; else if (method.returnsMany()) &#123;</span><br><span class=\"line\">        //这里是一个many的result跳到这里</span><br><span class=\"line\">          result = executeForMany(sqlSession, args);</span><br><span class=\"line\">        &#125; else if (method.returnsMap()) &#123;</span><br><span class=\"line\">          result = executeForMap(sqlSession, args);</span><br><span class=\"line\">        &#125; else if (method.returnsCursor()) &#123;</span><br><span class=\"line\">          result = executeForCursor(sqlSession, args);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">          result = sqlSession.selectOne(command.getName(), param);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">      case FLUSH:</span><br><span class=\"line\">        result = sqlSession.flushStatements();</span><br><span class=\"line\">        break;</span><br><span class=\"line\">      default:</span><br><span class=\"line\">        throw new BindingException(&quot;Unknown execution method for: &quot; + command.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (result == null &amp;&amp; method.getReturnType().isPrimitive() &amp;&amp; !method.returnsVoid()) &#123;</span><br><span class=\"line\">      throw new BindingException(&quot;Mapper method &apos;&quot; + command.getName() </span><br><span class=\"line\">          + &quot; attempted to return null from a method with a primitive return type (&quot; + method.getReturnType() + &quot;).&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private Object rowCountResult(int rowCount) &#123;</span><br><span class=\"line\">    final Object result;</span><br><span class=\"line\">    if (method.returnsVoid()) &#123;</span><br><span class=\"line\">      result = null;</span><br><span class=\"line\">    &#125; else if (Integer.class.equals(method.getReturnType()) || Integer.TYPE.equals(method.getReturnType())) &#123;</span><br><span class=\"line\">      result = rowCount;</span><br><span class=\"line\">    &#125; else if (Long.class.equals(method.getReturnType()) || Long.TYPE.equals(method.getReturnType())) &#123;</span><br><span class=\"line\">      result = (long)rowCount;</span><br><span class=\"line\">    &#125; else if (Boolean.class.equals(method.getReturnType()) || Boolean.TYPE.equals(method.getReturnType())) &#123;</span><br><span class=\"line\">      result = rowCount &gt; 0;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      throw new BindingException(&quot;Mapper method &apos;&quot; + command.getName() + &quot;&apos; has an unsupported return type: &quot; + method.getReturnType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private void executeWithResultHandler(SqlSession sqlSession, Object[] args) &#123;</span><br><span class=\"line\">    MappedStatement ms = sqlSession.getConfiguration().getMappedStatement(command.getName());</span><br><span class=\"line\">    if (void.class.equals(ms.getResultMaps().get(0).getType())) &#123;</span><br><span class=\"line\">      throw new BindingException(&quot;method &quot; + command.getName() </span><br><span class=\"line\">          + &quot; needs either a @ResultMap annotation, a @ResultType annotation,&quot; </span><br><span class=\"line\">          + &quot; or a resultType attribute in XML so a ResultHandler can be used as a parameter.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">    if (method.hasRowBounds()) &#123;</span><br><span class=\"line\">      RowBounds rowBounds = method.extractRowBounds(args);</span><br><span class=\"line\">      sqlSession.select(command.getName(), param, rowBounds, method.extractResultHandler(args));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      sqlSession.select(command.getName(), param, method.extractResultHandler(args));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t//多结果集的跳到这里</span><br><span class=\"line\">  private &lt;E&gt; Object executeForMany(SqlSession sqlSession, Object[] args) &#123;</span><br><span class=\"line\">    List&lt;E&gt; result;</span><br><span class=\"line\">    Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">    if (method.hasRowBounds()) &#123;</span><br><span class=\"line\">      RowBounds rowBounds = method.extractRowBounds(args);</span><br><span class=\"line\">      //重点 交给sqlSession进行处理</span><br><span class=\"line\">      result = sqlSession.&lt;E&gt;selectList(command.getName(), param, rowBounds);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      result = sqlSession.&lt;E&gt;selectList(command.getName(), param);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // issue #510 Collections &amp; arrays support</span><br><span class=\"line\">    if (!method.getReturnType().isAssignableFrom(result.getClass())) &#123;</span><br><span class=\"line\">      if (method.getReturnType().isArray()) &#123;</span><br><span class=\"line\">        return convertToArray(result);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        return convertToDeclaredCollection(sqlSession.getConfiguration(), result);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private &lt;T&gt; Cursor&lt;T&gt; executeForCursor(SqlSession sqlSession, Object[] args) &#123;</span><br><span class=\"line\">    Cursor&lt;T&gt; result;</span><br><span class=\"line\">    Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">    if (method.hasRowBounds()) &#123;</span><br><span class=\"line\">      RowBounds rowBounds = method.extractRowBounds(args);</span><br><span class=\"line\">      result = sqlSession.&lt;T&gt;selectCursor(command.getName(), param, rowBounds);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      result = sqlSession.&lt;T&gt;selectCursor(command.getName(), param);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private &lt;E&gt; Object convertToDeclaredCollection(Configuration config, List&lt;E&gt; list) &#123;</span><br><span class=\"line\">    Object collection = config.getObjectFactory().create(method.getReturnType());</span><br><span class=\"line\">    MetaObject metaObject = config.newMetaObject(collection);</span><br><span class=\"line\">    metaObject.addAll(list);</span><br><span class=\"line\">    return collection;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">  private &lt;E&gt; Object convertToArray(List&lt;E&gt; list) &#123;</span><br><span class=\"line\">    Class&lt;?&gt; arrayComponentType = method.getReturnType().getComponentType();</span><br><span class=\"line\">    Object array = Array.newInstance(arrayComponentType, list.size());</span><br><span class=\"line\">    if (arrayComponentType.isPrimitive()) &#123;</span><br><span class=\"line\">      for (int i = 0; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">        Array.set(array, i, list.get(i));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return array;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      return list.toArray((E[])array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private &lt;K, V&gt; Map&lt;K, V&gt; executeForMap(SqlSession sqlSession, Object[] args) &#123;</span><br><span class=\"line\">    Map&lt;K, V&gt; result;</span><br><span class=\"line\">    Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">    if (method.hasRowBounds()) &#123;</span><br><span class=\"line\">      RowBounds rowBounds = method.extractRowBounds(args);</span><br><span class=\"line\">      result = sqlSession.&lt;K, V&gt;selectMap(command.getName(), param, method.getMapKey(), rowBounds);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      result = sqlSession.&lt;K, V&gt;selectMap(command.getName(), param, method.getMapKey());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static class ParamMap&lt;V&gt; extends HashMap&lt;String, V&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final long serialVersionUID = -2212268410512043556L;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public V get(Object key) &#123;</span><br><span class=\"line\">      if (!super.containsKey(key)) &#123;</span><br><span class=\"line\">        throw new BindingException(&quot;Parameter &apos;&quot; + key + &quot;&apos; not found. Available parameters are &quot; + keySet());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return super.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static class SqlCommand &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final String name;</span><br><span class=\"line\">    private final SqlCommandType type;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SqlCommand(Configuration configuration, Class&lt;?&gt; mapperInterface, Method method) &#123;</span><br><span class=\"line\">      final String methodName = method.getName();</span><br><span class=\"line\">      final Class&lt;?&gt; declaringClass = method.getDeclaringClass();</span><br><span class=\"line\">      MappedStatement ms = resolveMappedStatement(mapperInterface, methodName, declaringClass,</span><br><span class=\"line\">          configuration);</span><br><span class=\"line\">      if (ms == null) &#123;</span><br><span class=\"line\">        if (method.getAnnotation(Flush.class) != null) &#123;</span><br><span class=\"line\">          name = null;</span><br><span class=\"line\">          type = SqlCommandType.FLUSH;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          throw new BindingException(&quot;Invalid bound statement (not found): &quot;</span><br><span class=\"line\">              + mapperInterface.getName() + &quot;.&quot; + methodName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        name = ms.getId();</span><br><span class=\"line\">        type = ms.getSqlCommandType();</span><br><span class=\"line\">        if (type == SqlCommandType.UNKNOWN) &#123;</span><br><span class=\"line\">          throw new BindingException(&quot;Unknown execution method for: &quot; + name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">      return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SqlCommandType getType() &#123;</span><br><span class=\"line\">      return type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private MappedStatement resolveMappedStatement(Class&lt;?&gt; mapperInterface, String methodName,</span><br><span class=\"line\">        Class&lt;?&gt; declaringClass, Configuration configuration) &#123;</span><br><span class=\"line\">      String statementId = mapperInterface.getName() + &quot;.&quot; + methodName;</span><br><span class=\"line\">      if (configuration.hasStatement(statementId)) &#123;</span><br><span class=\"line\">        return configuration.getMappedStatement(statementId);</span><br><span class=\"line\">      &#125; else if (mapperInterface.equals(declaringClass)) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      for (Class&lt;?&gt; superInterface : mapperInterface.getInterfaces()) &#123;</span><br><span class=\"line\">        if (declaringClass.isAssignableFrom(superInterface)) &#123;</span><br><span class=\"line\">          MappedStatement ms = resolveMappedStatement(superInterface, methodName,</span><br><span class=\"line\">              declaringClass, configuration);</span><br><span class=\"line\">          if (ms != null) &#123;</span><br><span class=\"line\">            return ms;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static class MethodSignature &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final boolean returnsMany;</span><br><span class=\"line\">    private final boolean returnsMap;</span><br><span class=\"line\">    private final boolean returnsVoid;</span><br><span class=\"line\">    private final boolean returnsCursor;</span><br><span class=\"line\">    private final Class&lt;?&gt; returnType;</span><br><span class=\"line\">    private final String mapKey;</span><br><span class=\"line\">    private final Integer resultHandlerIndex;</span><br><span class=\"line\">    private final Integer rowBoundsIndex;</span><br><span class=\"line\">    private final ParamNameResolver paramNameResolver;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MethodSignature(Configuration configuration, Class&lt;?&gt; mapperInterface, Method method) &#123;</span><br><span class=\"line\">      Type resolvedReturnType = TypeParameterResolver.resolveReturnType(method, mapperInterface);</span><br><span class=\"line\">      if (resolvedReturnType instanceof Class&lt;?&gt;) &#123;</span><br><span class=\"line\">        this.returnType = (Class&lt;?&gt;) resolvedReturnType;</span><br><span class=\"line\">      &#125; else if (resolvedReturnType instanceof ParameterizedType) &#123;</span><br><span class=\"line\">        this.returnType = (Class&lt;?&gt;) ((ParameterizedType) resolvedReturnType).getRawType();</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        this.returnType = method.getReturnType();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      this.returnsVoid = void.class.equals(this.returnType);</span><br><span class=\"line\">      this.returnsMany = (configuration.getObjectFactory().isCollection(this.returnType) || this.returnType.isArray());</span><br><span class=\"line\">      this.returnsCursor = Cursor.class.equals(this.returnType);</span><br><span class=\"line\">      this.mapKey = getMapKey(method);</span><br><span class=\"line\">      this.returnsMap = (this.mapKey != null);</span><br><span class=\"line\">      this.rowBoundsIndex = getUniqueParamIndex(method, RowBounds.class);</span><br><span class=\"line\">      this.resultHandlerIndex = getUniqueParamIndex(method, ResultHandler.class);</span><br><span class=\"line\">      this.paramNameResolver = new ParamNameResolver(configuration, method);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object convertArgsToSqlCommandParam(Object[] args) &#123;</span><br><span class=\"line\">      return paramNameResolver.getNamedParams(args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean hasRowBounds() &#123;</span><br><span class=\"line\">      return rowBoundsIndex != null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public RowBounds extractRowBounds(Object[] args) &#123;</span><br><span class=\"line\">      return hasRowBounds() ? (RowBounds) args[rowBoundsIndex] : null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean hasResultHandler() &#123;</span><br><span class=\"line\">      return resultHandlerIndex != null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ResultHandler extractResultHandler(Object[] args) &#123;</span><br><span class=\"line\">      return hasResultHandler() ? (ResultHandler) args[resultHandlerIndex] : null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getMapKey() &#123;</span><br><span class=\"line\">      return mapKey;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Class&lt;?&gt; getReturnType() &#123;</span><br><span class=\"line\">      return returnType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean returnsMany() &#123;</span><br><span class=\"line\">      return returnsMany;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean returnsMap() &#123;</span><br><span class=\"line\">      return returnsMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean returnsVoid() &#123;</span><br><span class=\"line\">      return returnsVoid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean returnsCursor() &#123;</span><br><span class=\"line\">      return returnsCursor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Integer getUniqueParamIndex(Method method, Class&lt;?&gt; paramType) &#123;</span><br><span class=\"line\">      Integer index = null;</span><br><span class=\"line\">      final Class&lt;?&gt;[] argTypes = method.getParameterTypes();</span><br><span class=\"line\">      for (int i = 0; i &lt; argTypes.length; i++) &#123;</span><br><span class=\"line\">        if (paramType.isAssignableFrom(argTypes[i])) &#123;</span><br><span class=\"line\">          if (index == null) &#123;</span><br><span class=\"line\">            index = i;</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">            throw new BindingException(method.getName() + &quot; cannot have multiple &quot; + paramType.getSimpleName() + &quot; parameters&quot;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String getMapKey(Method method) &#123;</span><br><span class=\"line\">      String mapKey = null;</span><br><span class=\"line\">      if (Map.class.isAssignableFrom(method.getReturnType())) &#123;</span><br><span class=\"line\">        final MapKey mapKeyAnnotation = method.getAnnotation(MapKey.class);</span><br><span class=\"line\">        if (mapKeyAnnotation != null) &#123;</span><br><span class=\"line\">          mapKey = mapKeyAnnotation.value();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return mapKey;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  *<em>上述的sqlsession的操作跳到 DefaultSqlSession *</em></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DefaultSqlSession implements SqlSession &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter) &#123;</span><br><span class=\"line\">    return this.selectList(statement, parameter, RowBounds.DEFAULT);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">    //根据语句statement拿到MappedStatement</span><br><span class=\"line\">      MappedStatement ms = configuration.getMappedStatement(statement);</span><br><span class=\"line\">      //重点来了 executor执行器来执行具体的sql</span><br><span class=\"line\">      return ,executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">      throw ExceptionFactory.wrapException(&quot;Error querying database.  Cause: &quot; + e, e);</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">      ErrorContext.instance().reset();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>executor有两个实现：BaseExecutor 和CachingExecutor</strong></p>\n<p>  <strong>这里走CachingExecutor：</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CachingExecutor implements Executor &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public &lt;E&gt; List&lt;E&gt; query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException &#123;</span><br><span class=\"line\">  //拿到sql boundSql里面存储有要执行的sql</span><br><span class=\"line\">    BoundSql boundSql = ms.getBoundSql(parameterObject);</span><br><span class=\"line\">    CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);</span><br><span class=\"line\">    //返回具体的query方法的执行结果集</span><br><span class=\"line\">    return query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //缓存sql</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">  public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql) &#123;</span><br><span class=\"line\">      //没有的话走BaseExecutor</span><br><span class=\"line\">    return delegate.createCacheKey(ms, parameterObject, rowBounds, boundSql);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //具体的query方法</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">  public &lt;E&gt; List&lt;E&gt; query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span><br><span class=\"line\">      throws SQLException &#123;</span><br><span class=\"line\">    Cache cache = ms.getCache();</span><br><span class=\"line\">    //这里用到缓存 看之前是否用过sql查询 有的话酒从缓存拿了</span><br><span class=\"line\">    if (cache != null) &#123;</span><br><span class=\"line\">      flushCacheIfRequired(ms);</span><br><span class=\"line\">      if (ms.isUseCache() &amp;&amp; resultHandler == null) &#123;</span><br><span class=\"line\">        ensureNoOutParams(ms, parameterObject, boundSql);</span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">        List&lt;E&gt; list = (List&lt;E&gt;) tcm.getObject(cache, key);</span><br><span class=\"line\">        if (list == null) &#123;</span><br><span class=\"line\">          list = delegate.&lt;E&gt; query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class=\"line\">          tcm.putObject(cache, key, list); // issue #578 and #116</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //没有的话走BaseExecutor</span><br><span class=\"line\">    return delegate.&lt;E&gt; query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>BaseExecutor：</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如果没有缓存走这里的query</span><br><span class=\"line\">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public &lt;E&gt; List&lt;E&gt; query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException &#123;</span><br><span class=\"line\">    ErrorContext.instance().resource(ms.getResource()).activity(&quot;executing a query&quot;).object(ms.getId());</span><br><span class=\"line\">    if (closed) &#123;</span><br><span class=\"line\">      throw new ExecutorException(&quot;Executor was closed.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (queryStack == 0 &amp;&amp; ms.isFlushCacheRequired()) &#123;</span><br><span class=\"line\">      clearLocalCache();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    List&lt;E&gt; list;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      queryStack++;</span><br><span class=\"line\">      list = resultHandler == null ? (List&lt;E&gt;) localCache.getObject(key) : null;</span><br><span class=\"line\">      if (list != null) &#123;</span><br><span class=\"line\">        handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">      queryStack--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (queryStack == 0) &#123;</span><br><span class=\"line\">      for (DeferredLoad deferredLoad : deferredLoads) &#123;</span><br><span class=\"line\">        deferredLoad.load();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // issue #601</span><br><span class=\"line\">      deferredLoads.clear();</span><br><span class=\"line\">      if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;</span><br><span class=\"line\">        // issue #482</span><br><span class=\"line\">        clearLocalCache();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return list;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //再往里的queryFromDatabase</span><br><span class=\"line\">  private &lt;E&gt; List&lt;E&gt; queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException &#123;</span><br><span class=\"line\">    List&lt;E&gt; list;</span><br><span class=\"line\">    localCache.putObject(key, EXECUTION_PLACEHOLDER);</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">    //这里再次跳转 走SimpleExecutor</span><br><span class=\"line\">      list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">      localCache.removeObject(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    localCache.putObject(key, list);</span><br><span class=\"line\">    if (ms.getStatementType() == StatementType.CALLABLE) &#123;</span><br><span class=\"line\">      localOutputParameterCache.putObject(key, parameter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return list;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>SimpleExecutor:类似的类还有ReuseExecutor，ClosedExecutor，BatchExecutor 都是BaseExecutor的子类</strong></p>\n<p>  <strong>值得一提的是再openSessionFromConnection或openSessionFromConnection的时候就会创建一个新的executor并制定类型:</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Executor newExecutor(Transaction transaction, ExecutorType executorType) &#123;</span><br><span class=\"line\">  executorType = executorType == null ? defaultExecutorType : executorType;</span><br><span class=\"line\">  executorType = executorType == null ? ExecutorType.SIMPLE : executorType;</span><br><span class=\"line\">  Executor executor;</span><br><span class=\"line\">  if (ExecutorType.BATCH == executorType) &#123;</span><br><span class=\"line\">    executor = new BatchExecutor(this, transaction);</span><br><span class=\"line\">  &#125; else if (ExecutorType.REUSE == executorType) &#123;</span><br><span class=\"line\">    executor = new ReuseExecutor(this, transaction);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    executor = new SimpleExecutor(this, transaction);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (cacheEnabled) &#123;</span><br><span class=\"line\">    executor = new CachingExecutor(executor);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  executor = (Executor) interceptorChain.pluginAll(executor);</span><br><span class=\"line\">  return executor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public &lt;E&gt; List&lt;E&gt; doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException &#123;</span><br><span class=\"line\">  Statement stmt = null;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    Configuration configuration = ms.getConfiguration();</span><br><span class=\"line\">   //获得一个StatementHandler</span><br><span class=\"line\">    StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class=\"line\">   //进行预编译sql</span><br><span class=\"line\">    stmt = prepareStatement(handler, ms.getStatementLog());</span><br><span class=\"line\">    //交给handler去执行</span><br><span class=\"line\">    return handler.&lt;E&gt;query(stmt, resultHandler);</span><br><span class=\"line\">  &#125; finally &#123;</span><br><span class=\"line\">    closeStatement(stmt);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">      //进行预编译sql</span><br><span class=\"line\">  private Statement prepareStatement(StatementHandler handler, Log statementLog) throws SQLException &#123;</span><br><span class=\"line\">  Statement stmt;</span><br><span class=\"line\">  Connection connection = getConnection(statementLog);</span><br><span class=\"line\">  stmt = handler.prepare(connection, transaction.getTimeout());</span><br><span class=\"line\">  handler.parameterize(stmt);</span><br><span class=\"line\">  return stmt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>交给StatementHandler去执行了,有几个实现类：这里走的PreparedStatementHandler</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public class PreparedStatementHandler extends BaseStatementHandler &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\"> @Override</span><br><span class=\"line\">  public &lt;E&gt; List&lt;E&gt; query(Statement statement, ResultHandler resultHandler) throws SQLException &#123;</span><br><span class=\"line\">    PreparedStatement ps = (PreparedStatement) statement;</span><br><span class=\"line\">    ps.execute();</span><br><span class=\"line\">    return resultSetHandler.&lt;E&gt; handleResultSets(ps);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>最后交给DefaultResultSetHandler来做</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DefaultResultSetHandler implements ResultSetHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public List&lt;Object&gt; handleResultSets(Statement stmt) throws SQLException &#123;</span><br><span class=\"line\">    ErrorContext.instance().activity(&quot;handling results&quot;).object(mappedStatement.getId());</span><br><span class=\"line\"></span><br><span class=\"line\">    final List&lt;Object&gt; multipleResults = new ArrayList&lt;Object&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    int resultSetCount = 0;</span><br><span class=\"line\">    ResultSetWrapper rsw = getFirstResultSet(stmt);</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;ResultMap&gt; resultMaps = mappedStatement.getResultMaps();</span><br><span class=\"line\">    int resultMapCount = resultMaps.size();</span><br><span class=\"line\">    validateResultMapsCount(rsw, resultMapCount);</span><br><span class=\"line\">    while (rsw != null &amp;&amp; resultMapCount &gt; resultSetCount) &#123;</span><br><span class=\"line\">      ResultMap resultMap = resultMaps.get(resultSetCount);</span><br><span class=\"line\">      handleResultSet(rsw, resultMap, multipleResults, null);</span><br><span class=\"line\">      rsw = getNextResultSet(stmt);</span><br><span class=\"line\">      cleanUpAfterHandlingResultSet();</span><br><span class=\"line\">      resultSetCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] resultSets = mappedStatement.getResultSets();</span><br><span class=\"line\">    if (resultSets != null) &#123;</span><br><span class=\"line\">      while (rsw != null &amp;&amp; resultSetCount &lt; resultSets.length) &#123;</span><br><span class=\"line\">        ResultMapping parentMapping = nextResultMaps.get(resultSets[resultSetCount]);</span><br><span class=\"line\">        if (parentMapping != null) &#123;</span><br><span class=\"line\">          String nestedResultMapId = parentMapping.getNestedResultMapId();</span><br><span class=\"line\">          ResultMap resultMap = configuration.getResultMap(nestedResultMapId);</span><br><span class=\"line\">          handleResultSet(rsw, resultMap, null, parentMapping);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rsw = getNextResultSet(stmt);</span><br><span class=\"line\">        cleanUpAfterHandlingResultSet();</span><br><span class=\"line\">        resultSetCount++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return collapseSingleResultList(multipleResults);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">  private List&lt;Object&gt; collapseSingleResultList(List&lt;Object&gt; multipleResults) &#123;</span><br><span class=\"line\">    return multipleResults.size() == 1 ? (List&lt;Object&gt;) multipleResults.get(0) : multipleResults;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>整体流程</strong></p>\n<p>  <strong>Mapper.selectOne()–&gt;MapperProxy.invoke–&gt;mapperMethod–&gt;SqlSession.selectOne–&gt;Executor.query()–&gt;SimpleExecutor.doQuery–&gt;PreparedStatementHandler.query–&gt;DefaultResultSetHandler.query</strong></p>"}],"PostAsset":[{"_id":"source/_posts/Pulsar简介/20181008112559290.png","slug":"20181008112559290.png","post":"cl7llz848001btwfascst43vl","modified":1,"renderable":0},{"_id":"source/_posts/Mybatis源码分析-一/20170308.png","post":"cl7llz83u000ztwfauln6x6nx","slug":"20170308.png","modified":1,"renderable":1},{"_id":"source/_posts/SpringBoot开启https/HTTPS1.png","post":"cl7llz84v001xtwfa9bgpte97","slug":"HTTPS1.png","modified":1,"renderable":1},{"_id":"source/_posts/Tomcat优化简谈/参数说明.png","post":"cl7llz85f002mtwfaeygpc15r","slug":"参数说明.png","modified":1,"renderable":1},{"_id":"source/_posts/RabbitMq简述/RabbitMq图解.png","post":"cl7llz84g001jtwfaxi19lomv","slug":"RabbitMq图解.png","modified":1,"renderable":1},{"_id":"source/_posts/RabbitMq定时消息队列的实现/1.jpg","post":"cl7llz84a001dtwfa9muqya3w","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/RabbitMq定时消息队列的实现/2.jpg","post":"cl7llz84a001dtwfa9muqya3w","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/RabbitMq定时消息队列的实现/3.jpg","post":"cl7llz84a001dtwfa9muqya3w","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Pulsar简介/message-deduplication.png","post":"cl7llz848001btwfascst43vl","slug":"message-deduplication.png","modified":1,"renderable":1},{"_id":"source/_posts/Pulsar简介/partitioning.png","post":"cl7llz848001btwfascst43vl","slug":"partitioning.png","modified":1,"renderable":1},{"_id":"source/_posts/Pulsar简介/pulsar-failover-subscriptions.png","post":"cl7llz848001btwfascst43vl","slug":"pulsar-failover-subscriptions.png","modified":1,"renderable":1},{"_id":"source/_posts/Pulsar简介/pulsar-shared-subscriptions.png","post":"cl7llz848001btwfascst43vl","slug":"pulsar-shared-subscriptions.png","modified":1,"renderable":1},{"_id":"source/_posts/Pulsar简介/pulsar-subscription-modes.png","post":"cl7llz848001btwfascst43vl","slug":"pulsar-subscription-modes.png","modified":1,"renderable":1},{"_id":"source/_posts/Jmeter测试记录/20180311145402.png","post":"cl7llz83c000ntwfahmie5lpx","slug":"20180311145402.png","modified":1,"renderable":1},{"_id":"source/_posts/Jmeter测试记录/20180311151959.jpg","post":"cl7llz83c000ntwfahmie5lpx","slug":"20180311151959.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Jmeter测试记录/20180311152954.jpg","post":"cl7llz83c000ntwfahmie5lpx","slug":"20180311152954.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Jmeter测试记录/20180311154519.jpg","post":"cl7llz83c000ntwfahmie5lpx","slug":"20180311154519.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Jmeter测试记录/20180311160140.jpg","post":"cl7llz83c000ntwfahmie5lpx","slug":"20180311160140.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Jmeter测试记录/20180311160412.jpg","post":"cl7llz83c000ntwfahmie5lpx","slug":"20180311160412.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Jmeter测试记录/20180311160646.jpg","post":"cl7llz83c000ntwfahmie5lpx","slug":"20180311160646.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Jmeter测试记录/20180311160836.jpg","post":"cl7llz83c000ntwfahmie5lpx","slug":"20180311160836.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Jmeter测试记录/20180311163046.jpg","post":"cl7llz83c000ntwfahmie5lpx","slug":"20180311163046.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Jmeter测试记录/20180311163214.jpg","post":"cl7llz83c000ntwfahmie5lpx","slug":"20180311163214.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Jmeter测试记录/20180311163344.jpg","post":"cl7llz83c000ntwfahmie5lpx","slug":"20180311163344.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Jmeter测试记录/20180311164306.jpg","post":"cl7llz83c000ntwfahmie5lpx","slug":"20180311164306.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Jmeter测试记录/20180311164711.jpg","post":"cl7llz83c000ntwfahmie5lpx","slug":"20180311164711.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cl7llz82c0000twfauaky4gff","category_id":"cl7llz82j0002twfal128yozx","_id":"cl7llz82y000ctwfahl2wfh16"},{"post_id":"cl7llz82h0001twfaet0uz8wa","category_id":"cl7llz82t0007twfal955cqjb","_id":"cl7llz836000itwfa1ntz9eev"},{"post_id":"cl7llz82l0004twfabmg3cbav","category_id":"cl7llz82z000dtwfai9d8su9z","_id":"cl7llz83i000otwfavvop0qeh"},{"post_id":"cl7llz82o0005twfae1cimpgc","category_id":"cl7llz836000jtwfaczz3j1bd","_id":"cl7llz83r000vtwfar98pcyqp"},{"post_id":"cl7llz82q0006twfas2m9ffiw","category_id":"cl7llz82z000dtwfai9d8su9z","_id":"cl7llz8400011twfa6d1yn8v0"},{"post_id":"cl7llz82u000atwfadhzypjl6","category_id":"cl7llz82z000dtwfai9d8su9z","_id":"cl7llz8450017twfas50x43os"},{"post_id":"cl7llz82x000btwfaj9f22kyd","category_id":"cl7llz8400010twfazq07hxuo","_id":"cl7llz84a001etwfaic6s68rx"},{"post_id":"cl7llz834000htwfa25mpqr98","category_id":"cl7llz8460019twfa30sohpy5","_id":"cl7llz84i001ktwfahi9wwbwv"},{"post_id":"cl7llz838000ltwfac7ppoc8i","category_id":"cl7llz84b001ftwfad5f7atlx","_id":"cl7llz84m001qtwfa0wdgdk4r"},{"post_id":"cl7llz83c000ntwfahmie5lpx","category_id":"cl7llz84i001ltwfa9a1x4g0r","_id":"cl7llz84v001wtwfarmlbn6l0"},{"post_id":"cl7llz83k000rtwfadsouphnm","category_id":"cl7llz84n001rtwfa21b0trr9","_id":"cl7llz8510023twfa91h08laj"},{"post_id":"cl7llz83p000ttwfagu2euq7a","category_id":"cl7llz84x001ytwfay94be1wo","_id":"cl7llz856002atwfan58l3qk2"},{"post_id":"cl7llz83u000ztwfauln6x6nx","category_id":"cl7llz8520024twfaxi9ncbll","_id":"cl7llz85c002gtwfawkbdstfy"},{"post_id":"cl7llz8550029twfaombar12k","category_id":"cl7llz84n001rtwfa21b0trr9","_id":"cl7llz85f002ktwfaputj0j2k"},{"post_id":"cl7llz8410013twfagvcalzi9","category_id":"cl7llz856002btwfabarnq7hg","_id":"cl7llz85h002ntwfabn5p7x1v"},{"post_id":"cl7llz8430015twfabrnf5cm9","category_id":"cl7llz85d002htwfawq7erwyp","_id":"cl7llz85q002utwfavamfvyi2"},{"post_id":"cl7llz85i002otwfanht0rpsw","category_id":"cl7llz82z000dtwfai9d8su9z","_id":"cl7llz85v002ztwfaehkdh3ku"},{"post_id":"cl7llz8450018twfayvuhuoc3","category_id":"cl7llz85k002ptwfao904vdld","_id":"cl7llz85y0033twfaqnfg7090"},{"post_id":"cl7llz848001btwfascst43vl","category_id":"cl7llz85k002ptwfao904vdld","_id":"cl7llz8620038twfamkxv1d5p"},{"post_id":"cl7llz84a001dtwfa9muqya3w","category_id":"cl7llz85y0032twfauwyk198k","_id":"cl7llz86b003ftwfajyakb2dx"},{"post_id":"cl7llz84c001htwfay565cby0","category_id":"cl7llz85y0032twfauwyk198k","_id":"cl7llz86g003ltwfaewt3fzwm"},{"post_id":"cl7llz84g001jtwfaxi19lomv","category_id":"cl7llz85y0032twfauwyk198k","_id":"cl7llz86o003qtwfa77t5h0mb"},{"post_id":"cl7llz86h003ntwfa8qd2g3pj","category_id":"cl7llz84n001rtwfa21b0trr9","_id":"cl7llz86u003xtwfa02inrz7x"},{"post_id":"cl7llz84l001ptwfaghxncs6l","category_id":"cl7llz86g003ktwfa3u74pz49","_id":"cl7llz86w0041twfayiltrmf6"},{"post_id":"cl7llz84n001stwfa7em3ofvp","category_id":"cl7llz86g003ktwfa3u74pz49","_id":"cl7llz8700045twfa5qai8dta"},{"post_id":"cl7llz84v001xtwfa9bgpte97","category_id":"cl7llz86u003ztwfaqlgnlcah","_id":"cl7llz876004btwfahslv9l50"},{"post_id":"cl7llz84y0020twfat85uoyvu","category_id":"cl7llz8720047twfa92ykcz4m","_id":"cl7llz877004ftwfabis9gtsh"},{"post_id":"cl7llz8530027twfa4hp9ufvu","category_id":"cl7llz876004ctwfahuyfg388","_id":"cl7llz879004jtwfaytrrpthj"},{"post_id":"cl7llz858002dtwfaxe8064dq","category_id":"cl7llz878004gtwfaw07vpfo1","_id":"cl7llz87b004otwfa8lfhug8o"},{"post_id":"cl7llz85b002ftwfakathhjme","category_id":"cl7llz879004ktwfaqjpu47cc","_id":"cl7llz87c004stwfajwd5qwsx"},{"post_id":"cl7llz85d002itwfao22qpuen","category_id":"cl7llz87b004ptwfa8ea6wox8","_id":"cl7llz87f004wtwfagq2gi7p1"},{"post_id":"cl7llz85f002mtwfaeygpc15r","category_id":"cl7llz82z000dtwfai9d8su9z","_id":"cl7llz87i0051twfaunihh1vb"},{"post_id":"cl7llz85f002mtwfaeygpc15r","category_id":"cl7llz87d004ttwfaunv52426","_id":"cl7llz87j0054twfatxiu6ozl"},{"post_id":"cl7llz85l002rtwfayuiczcem","category_id":"cl7llz87g004xtwfalpbhyfn8","_id":"cl7llz87k0056twfa8zf5z11h"},{"post_id":"cl7llz85u002ytwfazdju9cdm","category_id":"cl7llz87i0052twfaqagrxz2r","_id":"cl7llz87m005atwfa7i068nu0"},{"post_id":"cl7llz85w0031twfattgbz3ow","category_id":"cl7llz87k0057twfa0ky7xw47","_id":"cl7llz87n005etwfaddkp9vk8"},{"post_id":"cl7llz85z0035twfau0g4j5em","category_id":"cl7llz87m005btwfabu6ww0si","_id":"cl7llz87q005jtwfadnpuxrk2"},{"post_id":"cl7llz8610037twfag3j5epec","category_id":"cl7llz87m005btwfabu6ww0si","_id":"cl7llz87x005ntwfa454th054"},{"post_id":"cl7llz865003btwfaxyal61rf","category_id":"cl7llz876004ctwfahuyfg388","_id":"cl7llz87z005rtwfaq7nktb27"},{"post_id":"cl7llz869003dtwfabmelu7dl","category_id":"cl7llz876004ctwfahuyfg388","_id":"cl7llz881005vtwfatc96ri1t"},{"post_id":"cl7llz86c003htwfar1tbshfo","category_id":"cl7llz87b004ptwfa8ea6wox8","_id":"cl7llz883005ytwfa4cqs5abm"},{"post_id":"cl7llz86m003ptwfasnbubdpq","category_id":"cl7llz881005utwfa8z60n6zf","_id":"cl7llz8840061twfae9tekk2t"},{"post_id":"cl7llz86p003ttwfaqzwb6wtg","category_id":"cl7llz883005ztwfaxugnhken","_id":"cl7llz8860066twfana4c6z9w"},{"post_id":"cl7llz86t003wtwfajdwjhcsc","category_id":"cl7llz8840062twfa7s9h95yn","_id":"cl7llz888006btwfaf51xjx51"},{"post_id":"cl7llz86v0040twfag1d9pt2m","category_id":"cl7llz8840062twfa7s9h95yn","_id":"cl7llz88b006ftwfaft335zqr"},{"post_id":"cl7llz86x0043twfaalvr5fam","category_id":"cl7llz883005ztwfaxugnhken","_id":"cl7llz88g006jtwfaygy77rka"},{"post_id":"cl7llz8710046twfawu8e5clp","category_id":"cl7llz883005ztwfaxugnhken","_id":"cl7llz88i006mtwfaiv6nu9y7"},{"post_id":"cl7llz8740049twfax3e1v4g7","category_id":"cl7llz881005utwfa8z60n6zf","_id":"cl7llz88k006ptwfa035tqrwr"},{"post_id":"cl7llz8du0070twfaxz25uy4o","category_id":"cl7llz84n001rtwfa21b0trr9","_id":"cl7llz8e00075twfa1y0rfvut"},{"post_id":"cl7llz8db006ttwfa0mjoplf1","category_id":"cl7llz8dr006xtwfalp4wkddz","_id":"cl7llz8e10078twfaulpt2e5r"},{"post_id":"cl7llz8dl006vtwfamf6cpm1i","category_id":"cl7llz8dx0071twfa8d9xihyh","_id":"cl7llz8e2007atwfal1vz2c8f"},{"post_id":"cl7llz8ds006ztwfazkvc6yts","category_id":"cl7llz8e00076twfar4qoens9","_id":"cl7llz8e4007dtwfadbtg2ju6"},{"post_id":"cl7llz8ds006ztwfazkvc6yts","category_id":"cl7llz8e3007ctwfa7q77gjce","_id":"cl7llz8e4007etwfaj81l118t"},{"post_id":"cl7llz8fk007ftwfajup4ljlq","category_id":"cl7llz8520024twfaxi9ncbll","_id":"cl7llz8fn007htwfablo2b89k"}],"PostTag":[{"post_id":"cl7llz82c0000twfauaky4gff","tag_id":"cl7llz82l0003twfap0uzwdw3","_id":"cl7llz82u0009twfatciimhnl"},{"post_id":"cl7llz82h0001twfaet0uz8wa","tag_id":"cl7llz82t0008twfaoqy79bfi","_id":"cl7llz832000gtwfa88awq2ku"},{"post_id":"cl7llz82l0004twfabmg3cbav","tag_id":"cl7llz82z000etwfada7ejy6z","_id":"cl7llz839000mtwfajxt17fad"},{"post_id":"cl7llz82o0005twfae1cimpgc","tag_id":"cl7llz837000ktwfa2496ge2k","_id":"cl7llz83o000stwfat0mn0rv1"},{"post_id":"cl7llz82q0006twfas2m9ffiw","tag_id":"cl7llz83j000qtwfa1b4gr6rk","_id":"cl7llz83u000ytwfai9cj4di0"},{"post_id":"cl7llz83s000wtwfaj2h21hzq","tag_id":"cl7llz82z000etwfada7ejy6z","_id":"cl7llz8400012twfaolpk6b0a"},{"post_id":"cl7llz82u000atwfadhzypjl6","tag_id":"cl7llz83t000xtwfa1bxnhfg9","_id":"cl7llz8440016twfappv92qlq"},{"post_id":"cl7llz82x000btwfaj9f22kyd","tag_id":"cl7llz8420014twfaonsdczcj","_id":"cl7llz849001ctwfaedyc4igq"},{"post_id":"cl7llz834000htwfa25mpqr98","tag_id":"cl7llz847001atwfa0g2rm39f","_id":"cl7llz84g001itwfat6sdjiqe"},{"post_id":"cl7llz838000ltwfac7ppoc8i","tag_id":"cl7llz84c001gtwfapf9i6gv6","_id":"cl7llz84l001otwfau55mjeho"},{"post_id":"cl7llz83c000ntwfahmie5lpx","tag_id":"cl7llz84k001ntwfa5gksszxs","_id":"cl7llz84u001vtwfahs7gkqhp"},{"post_id":"cl7llz83k000rtwfadsouphnm","tag_id":"cl7llz84p001ttwfas7g04iab","_id":"cl7llz84z0021twfawzxgaxjz"},{"post_id":"cl7llz84v001xtwfa9bgpte97","tag_id":"cl7llz847001atwfa0g2rm39f","_id":"cl7llz8520025twfac0kgp70g"},{"post_id":"cl7llz83p000ttwfagu2euq7a","tag_id":"cl7llz84x001ztwfaeeicyktk","_id":"cl7llz8540028twfama0l2pj8"},{"post_id":"cl7llz83u000ztwfauln6x6nx","tag_id":"cl7llz84c001gtwfapf9i6gv6","_id":"cl7llz85b002etwfaobmh494x"},{"post_id":"cl7llz8410013twfagvcalzi9","tag_id":"cl7llz857002ctwfafgmmnu2x","_id":"cl7llz85f002ltwfalbbzerhj"},{"post_id":"cl7llz8430015twfabrnf5cm9","tag_id":"cl7llz85e002jtwfa7kq6b56k","_id":"cl7llz85n002stwfae5j60oew"},{"post_id":"cl7llz85i002otwfanht0rpsw","tag_id":"cl7llz82z000etwfada7ejy6z","_id":"cl7llz85q002vtwfar2iwc4q4"},{"post_id":"cl7llz8450018twfayvuhuoc3","tag_id":"cl7llz85k002qtwfa5kve5dud","_id":"cl7llz85w0030twfadssoc7i2"},{"post_id":"cl7llz848001btwfascst43vl","tag_id":"cl7llz85k002qtwfa5kve5dud","_id":"cl7llz8610036twfap8pd0fpb"},{"post_id":"cl7llz84a001dtwfa9muqya3w","tag_id":"cl7llz85z0034twfaj336pmtt","_id":"cl7llz868003ctwfaqkfcz3zj"},{"post_id":"cl7llz84c001htwfay565cby0","tag_id":"cl7llz85z0034twfaj336pmtt","_id":"cl7llz86e003itwfare5tf58d"},{"post_id":"cl7llz84g001jtwfaxi19lomv","tag_id":"cl7llz85z0034twfaj336pmtt","_id":"cl7llz86m003otwfax8w214pa"},{"post_id":"cl7llz86e003jtwfa4pang2nk","tag_id":"cl7llz82z000etwfada7ejy6z","_id":"cl7llz86o003rtwfaewcbvzpg"},{"post_id":"cl7llz86h003ntwfa8qd2g3pj","tag_id":"cl7llz847001atwfa0g2rm39f","_id":"cl7llz86s003vtwfag3hrh0az"},{"post_id":"cl7llz84l001ptwfaghxncs6l","tag_id":"cl7llz86h003mtwfa0e4fg7tb","_id":"cl7llz86u003ytwfae0r6qgbv"},{"post_id":"cl7llz84n001stwfa7em3ofvp","tag_id":"cl7llz86s003utwfaxq891l17","_id":"cl7llz86z0044twfauqe181kq"},{"post_id":"cl7llz84y0020twfat85uoyvu","tag_id":"cl7llz86w0042twfachafxowt","_id":"cl7llz875004atwfau9qm4ia3"},{"post_id":"cl7llz8530027twfa4hp9ufvu","tag_id":"cl7llz8730048twfajn6gbagw","_id":"cl7llz877004etwfagszkrp2z"},{"post_id":"cl7llz8550029twfaombar12k","tag_id":"cl7llz877004dtwfazcx00n84","_id":"cl7llz878004itwfarxlic89l"},{"post_id":"cl7llz8550029twfaombar12k","tag_id":"cl7llz847001atwfa0g2rm39f","_id":"cl7llz879004ltwfaf5j646o6"},{"post_id":"cl7llz858002dtwfaxe8064dq","tag_id":"cl7llz878004htwfaynqlzwbz","_id":"cl7llz87a004ntwfadduoqm9y"},{"post_id":"cl7llz85b002ftwfakathhjme","tag_id":"cl7llz877004dtwfazcx00n84","_id":"cl7llz87c004rtwfalw46vgxe"},{"post_id":"cl7llz85d002itwfao22qpuen","tag_id":"cl7llz87b004qtwfarclppr4n","_id":"cl7llz87f004vtwfa51tohkyc"},{"post_id":"cl7llz85f002mtwfaeygpc15r","tag_id":"cl7llz82z000etwfada7ejy6z","_id":"cl7llz87h004ztwfadjrle5x1"},{"post_id":"cl7llz85f002mtwfaeygpc15r","tag_id":"cl7llz87b004qtwfarclppr4n","_id":"cl7llz87h0050twfa1gdc1r4h"},{"post_id":"cl7llz85l002rtwfayuiczcem","tag_id":"cl7llz87g004ytwfa2b6lj09m","_id":"cl7llz87j0055twfaynlm4kym"},{"post_id":"cl7llz85u002ytwfazdju9cdm","tag_id":"cl7llz87i0053twfaai2b6br8","_id":"cl7llz87l0059twfa4ueb52y4"},{"post_id":"cl7llz85w0031twfattgbz3ow","tag_id":"cl7llz87k0058twfao7jei6g5","_id":"cl7llz87n005dtwfa1d3r2r3c"},{"post_id":"cl7llz85z0035twfau0g4j5em","tag_id":"cl7llz87n005ctwfarqrkpwjp","_id":"cl7llz87q005htwfagxvkt2pb"},{"post_id":"cl7llz8610037twfag3j5epec","tag_id":"cl7llz87n005ctwfarqrkpwjp","_id":"cl7llz87s005ltwfahl4dgs4e"},{"post_id":"cl7llz865003btwfaxyal61rf","tag_id":"cl7llz8730048twfajn6gbagw","_id":"cl7llz87y005ptwfa2ms1wjui"},{"post_id":"cl7llz869003dtwfabmelu7dl","tag_id":"cl7llz8730048twfajn6gbagw","_id":"cl7llz880005ttwfacmuwcioc"},{"post_id":"cl7llz86c003htwfar1tbshfo","tag_id":"cl7llz87b004qtwfarclppr4n","_id":"cl7llz882005xtwfathvh2uu3"},{"post_id":"cl7llz86m003ptwfasnbubdpq","tag_id":"cl7llz882005wtwfa47wytj9d","_id":"cl7llz8850064twfala5dk0yc"},{"post_id":"cl7llz86m003ptwfasnbubdpq","tag_id":"cl7llz8830060twfa7okcypph","_id":"cl7llz8860065twfa8m9gnjl3"},{"post_id":"cl7llz86p003ttwfaqzwb6wtg","tag_id":"cl7llz8850063twfa55shohll","_id":"cl7llz8880069twfahd1qmaqh"},{"post_id":"cl7llz86t003wtwfajdwjhcsc","tag_id":"cl7llz8870068twfafkba20x8","_id":"cl7llz88a006dtwfav03dxm7k"},{"post_id":"cl7llz86v0040twfag1d9pt2m","tag_id":"cl7llz8870068twfafkba20x8","_id":"cl7llz88f006htwfafzttei60"},{"post_id":"cl7llz86x0043twfaalvr5fam","tag_id":"cl7llz8850063twfa55shohll","_id":"cl7llz88i006ltwfa6hqakcjj"},{"post_id":"cl7llz8710046twfawu8e5clp","tag_id":"cl7llz8850063twfa55shohll","_id":"cl7llz88k006otwfaavnfi37b"},{"post_id":"cl7llz8740049twfax3e1v4g7","tag_id":"cl7llz882005wtwfa47wytj9d","_id":"cl7llz88n006rtwfaia7lbfkx"},{"post_id":"cl7llz8740049twfax3e1v4g7","tag_id":"cl7llz8830060twfa7okcypph","_id":"cl7llz88n006stwfabnikaglh"},{"post_id":"cl7llz8du0070twfaxz25uy4o","tag_id":"cl7llz847001atwfa0g2rm39f","_id":"cl7llz8dy0073twfa1kds4g52"},{"post_id":"cl7llz8db006ttwfa0mjoplf1","tag_id":"cl7llz8dr006ytwfa6lxt2lww","_id":"cl7llz8dz0074twfaq9iqgf8u"},{"post_id":"cl7llz8dl006vtwfamf6cpm1i","tag_id":"cl7llz8dx0072twfa5a451ycv","_id":"cl7llz8e10079twfao4kftsgf"},{"post_id":"cl7llz8ds006ztwfazkvc6yts","tag_id":"cl7llz8e00077twfan9v61okl","_id":"cl7llz8e2007btwfa8xea7cdg"},{"post_id":"cl7llz8fk007ftwfajup4ljlq","tag_id":"cl7llz8fm007gtwfad7h0y7y7","_id":"cl7llz8fp007itwfafy3expcr"}],"Tag":[{"name":"PAY","_id":"cl7llz82l0003twfap0uzwdw3"},{"name":"JAVA","_id":"cl7llz82t0008twfaoqy79bfi"},{"name":"Linux","_id":"cl7llz82z000etwfada7ejy6z"},{"name":"Cassandra","_id":"cl7llz837000ktwfa2496ge2k"},{"name":"Docker","_id":"cl7llz83j000qtwfa1b4gr6rk"},{"name":"内网穿透","_id":"cl7llz83t000xtwfa1bxnhfg9"},{"name":"Git","_id":"cl7llz8420014twfaonsdczcj"},{"name":"Java","_id":"cl7llz847001atwfa0g2rm39f"},{"name":"转载","_id":"cl7llz84c001gtwfapf9i6gv6"},{"name":"Jmeter","_id":"cl7llz84k001ntwfa5gksszxs"},{"name":"锁","_id":"cl7llz84p001ttwfas7g04iab"},{"name":"Kafka","_id":"cl7llz84x001ztwfaeeicyktk"},{"name":"Mysql","_id":"cl7llz857002ctwfafgmmnu2x"},{"name":"Netty","_id":"cl7llz85e002jtwfa7kq6b56k"},{"name":"Pulsar","_id":"cl7llz85k002qtwfa5kve5dud"},{"name":"RabbitMq","_id":"cl7llz85z0034twfaj336pmtt"},{"name":"Nosql","_id":"cl7llz86h003mtwfa0e4fg7tb"},{"name":"NoSql","_id":"cl7llz86s003utwfaxq891l17"},{"name":"scala","_id":"cl7llz86w0042twfachafxowt"},{"name":"Rust","_id":"cl7llz8730048twfajn6gbagw"},{"name":"Spring","_id":"cl7llz877004dtwfazcx00n84"},{"name":"BigData","_id":"cl7llz878004htwfaynqlzwbz"},{"name":"Tomcat","_id":"cl7llz87b004qtwfarclppr4n"},{"name":"MongoDB","_id":"cl7llz87g004ytwfa2b6lj09m"},{"name":"中间件","_id":"cl7llz87i0053twfaai2b6br8"},{"name":"git","_id":"cl7llz87k0058twfao7jei6g5"},{"name":"随记","_id":"cl7llz87n005ctwfarqrkpwjp"},{"name":"杂技","_id":"cl7llz882005wtwfa47wytj9d"},{"name":"饕餮","_id":"cl7llz8830060twfa7okcypph"},{"name":"数据结构","_id":"cl7llz8850063twfa55shohll"},{"name":"随想","_id":"cl7llz8870068twfafkba20x8"},{"name":"清单","_id":"cl7llz8dr006ytwfa6lxt2lww"},{"name":"Web","_id":"cl7llz8dx0072twfa5a451ycv"},{"name":"Apache Storm","_id":"cl7llz8e00077twfan9v61okl"},{"name":"Mybatis","_id":"cl7llz8fm007gtwfad7h0y7y7"}]}}